[{"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3626", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3626/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3626/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3626/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3626", "id": 1686204953, "node_id": "PR_kwDOAISI585PQ0Vb", "number": 3626, "title": "Fix old Numpy compatibility", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 602737425, "node_id": "MDU6TGFiZWw2MDI3Mzc0MjU=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/tests/build/CI", "name": "tests/build/CI", "color": "fbca04", "default": false, "description": "about testing or deployment *of* Hypothesis"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-04-27T06:32:54Z", "updated_at": "2023-04-27T21:31:14Z", "closed_at": "2023-04-27T21:31:08Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3626", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3626", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3626.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3626.patch", "merged_at": "2023-04-27T21:31:08Z"}, "body": "Fixes #3625 and closes #3627.\r\n\r\nAnd as it turns out, we require `numpy >= 1.15` just to have wheels for Python 3.7, so the old `>= 1.9` spec was a bit off \ud83d\ude13 ", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3626/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3625", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3625/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3625/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3625/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3625", "id": 1685748715, "node_id": "I_kwDOAISI585kenvr", "number": 3625, "title": "hypothesis-python does not pin numpy, resulting in import error downstream", "user": {"login": "pllim", "id": 2090236, "node_id": "MDQ6VXNlcjIwOTAyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/2090236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pllim", "html_url": "https://github.com/pllim", "followers_url": "https://api.github.com/users/pllim/followers", "following_url": "https://api.github.com/users/pllim/following{/other_user}", "gists_url": "https://api.github.com/users/pllim/gists{/gist_id}", "starred_url": "https://api.github.com/users/pllim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pllim/subscriptions", "organizations_url": "https://api.github.com/users/pllim/orgs", "repos_url": "https://api.github.com/users/pllim/repos", "events_url": "https://api.github.com/users/pllim/events{/privacy}", "received_events_url": "https://api.github.com/users/pllim/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 602737425, "node_id": "MDU6TGFiZWw2MDI3Mzc0MjU=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/tests/build/CI", "name": "tests/build/CI", "color": "fbca04", "default": false, "description": "about testing or deployment *of* Hypothesis"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-04-26T21:26:47Z", "updated_at": "2023-04-27T21:31:10Z", "closed_at": "2023-04-27T21:31:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "We use hypothesis with older numpy (1.20) in an older release branch. We started seeing failure when hypothesis 6.74 was released. If hypothesis-python is no longer compatible with older numpy, it should pin numpy minversion accordingly.\r\n\r\nExample log: https://github.com/astropy/astropy/actions/runs/4812578157/jobs/8568004842?pr=14696\r\n\r\nExample traceback:\r\n\r\n```\r\nastropy/time/tests/test_precision.py:13: in <module>\r\n    from hypothesis.extra.numpy import array_shapes, arrays\r\nhypothesis/extra/numpy.py:15: in <module>\r\n    from numpy.typing import DTypeLike, NDArray\r\nE   ImportError: cannot import name 'NDArray' from 'numpy.typing' (numpy/typing/__init__.py)\r\n_ ERROR collecting astropy/time/tests/test_precision.py _\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3625/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3625/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3585", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3585/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3585/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3585/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3585", "id": 1590899936, "node_id": "I_kwDOAISI585e0zTg", "number": 3585, "title": "Thread hang with pytest-httpserver, hypothesis>=6.0.4 on Apple M1 Pro, Mac OS 12.6.2, Python>=3.10", "user": {"login": "handrews", "id": 2358015, "node_id": "MDQ6VXNlcjIzNTgwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/handrews", "html_url": "https://github.com/handrews", "followers_url": "https://api.github.com/users/handrews/followers", "following_url": "https://api.github.com/users/handrews/following{/other_user}", "gists_url": "https://api.github.com/users/handrews/gists{/gist_id}", "starred_url": "https://api.github.com/users/handrews/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/handrews/subscriptions", "organizations_url": "https://api.github.com/users/handrews/orgs", "repos_url": "https://api.github.com/users/handrews/repos", "events_url": "https://api.github.com/users/handrews/events{/privacy}", "received_events_url": "https://api.github.com/users/handrews/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2023-02-19T23:15:32Z", "updated_at": "2023-03-03T13:18:03Z", "closed_at": "2023-02-28T20:30:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "The change made in hypothesis 6.0.4 to address a race condition works fine with `pytest-httpserver` on my Apple M1 laptop with Python <= 3.9, but hangs on Python 3.10 and 3.11.  The problem also exists with hypothesis 6.68.2 (the latest as of this writing).\r\n\r\nMaking two calls to `recursive()` is all that is needed to reproduce the problem, as documented in [this gist](https://gist.github.com/handrews/81bcd5f60a518442bf677f0a35cd26d7) (with environment information, shell sessions, and `python -vvv` output diffs).  It is not necessary to actually run a test, or to do anything at all with `pytest-httpserver`, it just needs to be installed and noticed as a plugin by pytest.\r\n\r\nI have also filed this as csernazs/pytest-httpserver#217, as I have not even thought about threads in many years and have gone about as far as I can looking into this.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3585/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3585/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3569", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3569/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3569/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3569/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3569", "id": 1570829037, "node_id": "PR_kwDOAISI585JQUG-", "number": 3569, "title": "Fix pprint recursion error", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-02-04T08:13:30Z", "updated_at": "2023-02-04T17:11:41Z", "closed_at": "2023-02-04T09:25:17Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3569", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3569", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3569.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3569.patch", "merged_at": "2023-02-04T09:25:17Z"}, "body": "Fixes #3560.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3569/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3569/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3560", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3560/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3560/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3560/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3560", "id": 1556996054, "node_id": "I_kwDOAISI585czd_W", "number": 3560, "title": "#3540 causes `RecursionError` in particular draw pattern  ", "user": {"login": "rsokl", "id": 29104956, "node_id": "MDQ6VXNlcjI5MTA0OTU2", "avatar_url": "https://avatars.githubusercontent.com/u/29104956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsokl", "html_url": "https://github.com/rsokl", "followers_url": "https://api.github.com/users/rsokl/followers", "following_url": "https://api.github.com/users/rsokl/following{/other_user}", "gists_url": "https://api.github.com/users/rsokl/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsokl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsokl/subscriptions", "organizations_url": "https://api.github.com/users/rsokl/orgs", "repos_url": "https://api.github.com/users/rsokl/repos", "events_url": "https://api.github.com/users/rsokl/events{/privacy}", "received_events_url": "https://api.github.com/users/rsokl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2023-01-25T17:09:12Z", "updated_at": "2023-02-04T09:25:18Z", "closed_at": "2023-02-04T09:25:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#3540 introduces a change that causes a `RecursionError` in [MyGrad's test suite](https://github.com/rsokl/MyGrad/actions/runs/4002289112/jobs/6869371400).\r\n\r\nThis is a weird bug. It seems to be specific to drawing from an array-based strategy that spans multiple lines *and* that includes an identity mapping (I said it was weird!).\r\n\r\nThe following tests pass (note the xfail)\r\n\r\n```python\r\nimport pytest\r\n\r\nimport hypothesis.extra.numpy as hnp\r\nimport hypothesis.strategies as st\r\nfrom hypothesis import given\r\n\r\n@given(st.data())\r\ndef test_one_line_identity_passes(data):\r\n    x = data.draw(hnp.arrays(shape=(2,), dtype=float).map(lambda x: x))\r\n\r\n\r\n@pytest.mark.xfail(raises=RecursionError, strict=True)\r\n@given(st.data())\r\ndef test_multiline_identity_fails(data):\r\n    x = data.draw(\r\n        hnp.arrays(\r\n            shape=(2,),\r\n            dtype=float,\r\n        ).map(lambda x: x)\r\n    )\r\n\r\n\r\n@given(st.data())\r\ndef test_multiline_non_identity_passes(data):\r\n    x = data.draw(\r\n        hnp.arrays(\r\n            shape=(2,),\r\n            dtype=float,\r\n        ).map(lambda x: 1 * x)\r\n    )\r\n    \r\n    \r\n@given(st.data())\r\ndef test_multiline_non_array_passes(data):\r\n    x = data.draw(\r\n        st.lists(\r\n            st.integers(\r\n                1,\r\n                5,\r\n            )\r\n        ).map(lambda x: x)\r\n    )\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3560/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3549", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3549/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3549/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3549/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3549", "id": 1548848670, "node_id": "I_kwDOAISI585cUY4e", "number": 3549, "title": "Ghostwriter unaware of imports for regex strategies", "user": {"login": "JensHeinrich", "id": 59469646, "node_id": "MDQ6VXNlcjU5NDY5NjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/59469646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JensHeinrich", "html_url": "https://github.com/JensHeinrich", "followers_url": "https://api.github.com/users/JensHeinrich/followers", "following_url": "https://api.github.com/users/JensHeinrich/following{/other_user}", "gists_url": "https://api.github.com/users/JensHeinrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/JensHeinrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JensHeinrich/subscriptions", "organizations_url": "https://api.github.com/users/JensHeinrich/orgs", "repos_url": "https://api.github.com/users/JensHeinrich/repos", "events_url": "https://api.github.com/users/JensHeinrich/events{/privacy}", "received_events_url": "https://api.github.com/users/JensHeinrich/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-01-19T10:04:32Z", "updated_at": "2023-02-17T07:09:03Z", "closed_at": "2023-02-17T07:09:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure if this is a bug or a missing feature, but when using the ghostwriter on the following code\r\n\r\n```project/minimal_example.py\r\nimport re\r\nfrom typing import NewType\r\n\r\nfrom hypothesis.strategies import register_type_strategy\r\nfrom hypothesis import strategies as st\r\n\r\n\r\nTestType = NewType('TestType', str)\r\n\r\nregister_type_strategy(TestType, st.from_regex(re.compile(\".+\")))\r\n\r\ndef something(t: TestType):\r\n    pass\r\n```\r\n\r\n\r\nthe following broken code is generated\r\n\r\n```py\r\n# This test code was written by the `hypothesis.extra.ghostwriter` module\r\n# and is provided under the Creative Commons Zero public domain dedication.\r\n\r\nimport project.minimal_example\r\nfrom hypothesis import given, strategies as st\r\n\r\n# TODO: replace st.nothing() with an appropriate strategy\r\n\r\n\r\n@given(x=st.nothing())\r\ndef test_fuzz_TestType(x):\r\n    project.minimal_example.TestType(x=x)\r\n\r\n\r\n@given(t=st.from_regex(re.compile(r\".+\", re.UNICODE)))\r\ndef test_fuzz_something(t):\r\n    project.minimal_example.something(t=t)\r\n```\r\n\r\nMaybe calling `_imports_for_object` from `_imports_for_strategy` for `from_regex` strategies would be a solution, but I have no idea how to add that case inside the `LazyStrategy` branch.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3549/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3549/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3538", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3538/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3538/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3538/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3538", "id": 1522442552, "node_id": "PR_kwDOAISI585Gz_Ua", "number": 3538, "title": "Stop generating R-LDH labels in domains and emails", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-01-06T11:38:16Z", "updated_at": "2023-01-06T15:49:28Z", "closed_at": "2023-01-06T15:49:26Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3538", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3538", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3538.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3538.patch", "merged_at": "2023-01-06T15:49:26Z"}, "body": "See https://github.com/JoshData/python-email-validator/issues/92, and [RFC 5890 \u00a72.3.1](https://datatracker.ietf.org/doc/rfc5890/).  No unit tests because it's (a) trivial and (b) slightly expensive to test, but I've checked it locally.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3538/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3538/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3519", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3519/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3519/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3519/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3519", "id": 1469951022, "node_id": "I_kwDOAISI585Xnawu", "number": 3519, "title": "Hypothesis fails with ForwardRefs and recursive pydantic models", "user": {"login": "apirogov", "id": 371708, "node_id": "MDQ6VXNlcjM3MTcwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/371708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apirogov", "html_url": "https://github.com/apirogov", "followers_url": "https://api.github.com/users/apirogov/followers", "following_url": "https://api.github.com/users/apirogov/following{/other_user}", "gists_url": "https://api.github.com/users/apirogov/gists{/gist_id}", "starred_url": "https://api.github.com/users/apirogov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apirogov/subscriptions", "organizations_url": "https://api.github.com/users/apirogov/orgs", "repos_url": "https://api.github.com/users/apirogov/repos", "events_url": "https://api.github.com/users/apirogov/events{/privacy}", "received_events_url": "https://api.github.com/users/apirogov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-11-30T16:58:51Z", "updated_at": "2022-12-05T09:17:57Z", "closed_at": "2022-12-04T04:55:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to use hypothesis to generate instances of pydantic models, but it looks like it cannot handle recursive models with ForwardRefs.\r\n\r\n(Quite) minimal example triggering the problem:\r\n\r\n```python\r\nfrom pydantic import BaseModel\r\nfrom typing import Optional, Union\r\nfrom hypothesis import given, strategies as st\r\n\r\nclass Dummy(BaseModel):\r\n    x: Optional[Union[int, Dummy]]\r\n\r\nDummy.update_forward_refs()\r\n\r\n\r\n@given(st.builds(Dummy))\r\ndef test_dummy(obj):\r\n    print(obj.json(indent=2))\r\n```\r\n\r\nWhen running this with pytest, it fails with:\r\n```\r\nE           hypothesis.errors.ResolutionFailed: Could not resolve ForwardRef('Optional[Union[int, Dummy]]') to a strategy; consider using register_type_strategy\r\n\r\n.../site-packages/hypothesis/strategies/_internal/types.py:442: ResolutionFailed\r\n```\r\n\r\n**Extra info:**\r\n* Python 3.8\r\n* pydantic 1.10.2\r\n* hypothesis 6.58\r\n* pytest 7.0.1", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3519/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3519/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3509", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3509/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3509/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3509/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3509", "id": 1454158741, "node_id": "PR_kwDOAISI585DKG-e", "number": 3509, "title": "Raise if register_random is passed unreferenced object", "user": {"login": "rsokl", "id": 29104956, "node_id": "MDQ6VXNlcjI5MTA0OTU2", "avatar_url": "https://avatars.githubusercontent.com/u/29104956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsokl", "html_url": "https://github.com/rsokl", "followers_url": "https://api.github.com/users/rsokl/followers", "following_url": "https://api.github.com/users/rsokl/following{/other_user}", "gists_url": "https://api.github.com/users/rsokl/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsokl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsokl/subscriptions", "organizations_url": "https://api.github.com/users/rsokl/orgs", "repos_url": "https://api.github.com/users/rsokl/repos", "events_url": "https://api.github.com/users/rsokl/events{/privacy}", "received_events_url": "https://api.github.com/users/rsokl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-11-17T23:27:53Z", "updated_at": "2022-11-19T22:51:19Z", "closed_at": "2022-11-19T22:42:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3509", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3509", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3509.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3509.patch", "merged_at": "2022-11-19T22:42:01Z"}, "body": "A pattern like\r\n\r\n```python\r\nfrom hypothesis import register_random\r\n\r\nclass TorchRandomWrapper:\r\n    # stuff\r\n\r\nregister_random(TorchRandomWrapper())\r\n```\r\n\r\nwill lead to unexpected behavior: Hypothesis will instantly \"forget\" that it was ever passed an instance of `TorchRandomWrapper`. This is due to the fact that `register_random` uses a weakref-valued dict, and here we passed it an unreferenced object, which immediately gets garbage collected after being passed to `register_random`.\r\n\r\nThis PR will modify `register_random` to raise under these circumstances and to emit a warning when it looks like the input was referenced only within a temporary scope. It also fixes an overly-narrow type annotation for `register_random` so that it now permits structural subtypes of `random.Random`.\r\n\r\nThis is the new behavior:\r\n\r\n```python\r\nfrom hypothesis import register_random\r\n\r\nclass TorchRandomWrapper:\r\n    # stuff\r\n\r\nregister_random(TorchRandomWrapper())  # raises  ReferenceError\r\n\r\nr = TorchRandomWrapper()\r\nregister_random(r)  # OK\r\n\r\ndef f():\r\n    register_random(TorchRandomWrapper())\r\n\r\nf()  # raises  ReferenceError\r\n\r\n\r\ndef g():\r\n    r = TorchRandomWrapper()\r\n    register_random(r)\r\n\r\ng()  # throws UserWarning\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3509/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3509/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3504", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3504/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3504/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3504/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3504", "id": 1442751815, "node_id": "I_kwDOAISI585V_qVH", "number": 3504, "title": "Internal error from test that raises a DeprecationWarning (IndexError in escalation.py)", "user": {"login": "asmeurer", "id": 71486, "node_id": "MDQ6VXNlcjcxNDg2", "avatar_url": "https://avatars.githubusercontent.com/u/71486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asmeurer", "html_url": "https://github.com/asmeurer", "followers_url": "https://api.github.com/users/asmeurer/followers", "following_url": "https://api.github.com/users/asmeurer/following{/other_user}", "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions", "organizations_url": "https://api.github.com/users/asmeurer/orgs", "repos_url": "https://api.github.com/users/asmeurer/repos", "events_url": "https://api.github.com/users/asmeurer/events{/privacy}", "received_events_url": "https://api.github.com/users/asmeurer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-11-09T21:12:37Z", "updated_at": "2022-11-14T04:08:38Z", "closed_at": "2022-11-14T04:08:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When testing a NumPy function call that replaces an IndexError with a DeprecationWarning, along with `filterwarnings = error`, hypothesis gets an internal error. I was unable to replicate this with a pure Python variant that just raises IndexError and replaces it with a warning, so there might be more going on here. Reproducer:\r\n\r\n```py\r\n# test.py\r\nimport numpy as np\r\n\r\nfrom hypothesis import given\r\nfrom hypothesis.strategies import integers\r\n\r\n@given(integers())\r\ndef test(x):\r\n    np.empty((0, 0, 1))[[[x]]]\r\n```\r\n\r\n```py\r\n# pytest.ini\r\n[pytest]\r\nfilterwarnings = error\r\n```\r\n\r\n```\r\n$ pytest test.py\r\n========================================================================== test session starts ==========================================================================\r\nplatform darwin -- Python 3.8.13, pytest-7.1.2, pluggy-1.0.0\r\nrootdir: /Users/aaronmeurer/Documents/test, configfile: pytest.ini\r\nplugins: pudb-0.7.0, hypothesis-6.56.4, flakes-4.0.5, cov-3.0.0, xonsh-0.12.4\r\ncollected 1 item\r\n\r\ntest.py F                                                                                                                                                         [100%]\r\n\r\n=============================================================================== FAILURES ================================================================================\r\n_________________________________________________________________________________ test __________________________________________________________________________________\r\nIndexError: index 0 is out of bounds for axis 0 with size 0\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nself = <hypothesis.core.StateForActualGivenExecution object at 0x7f7e98f8ad00>, data = ConjectureData(VALID, 3 bytes, frozen)\r\n\r\n    def _execute_once_for_engine(self, data):\r\n        \"\"\"Wrapper around ``execute_once`` that intercepts test failure\r\n        exceptions and single-test control exceptions, and turns them into\r\n        appropriate method calls to `data` instead.\r\n\r\n        This allows the engine to assume that any exception other than\r\n        ``StopTest`` must be a fatal error, and should stop the entire engine.\r\n        \"\"\"\r\n        try:\r\n            trace = frozenset()\r\n            if (\r\n                self.failed_normally\r\n                and not self.failed_due_to_deadline\r\n                and Phase.shrink in self.settings.phases\r\n                and Phase.explain in self.settings.phases\r\n                and sys.gettrace() is None\r\n                and not PYPY\r\n            ):  # pragma: no cover\r\n                # This is in fact covered by our *non-coverage* tests, but due to the\r\n                # settrace() contention *not* by our coverage tests.  Ah well.\r\n                tracer = Tracer()\r\n                try:\r\n                    sys.settrace(tracer.trace)\r\n                    result = self.execute_once(data)\r\n                    if data.status == Status.VALID:\r\n                        self.explain_traces[None].add(frozenset(tracer.branches))\r\n                finally:\r\n                    sys.settrace(None)\r\n                    trace = frozenset(tracer.branches)\r\n            else:\r\n>               result = self.execute_once(data)\r\n\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/core.py:752:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <hypothesis.core.StateForActualGivenExecution object at 0x7f7e98f8ad00>, data = ConjectureData(VALID, 3 bytes, frozen), print_example = False, is_final = False\r\nexpected_failure = None\r\n\r\n    def execute_once(\r\n        self, data, print_example=False, is_final=False, expected_failure=None\r\n    ):\r\n        \"\"\"Run the test function once, using ``data`` as input.\r\n\r\n        If the test raises an exception, it will propagate through to the\r\n        caller of this method. Depending on its type, this could represent\r\n        an ordinary test failure, or a fatal error, or a control exception.\r\n\r\n        If this method returns normally, the test might have passed, or\r\n        it might have placed ``data`` in an unsuccessful state and then\r\n        swallowed the corresponding control exception.\r\n        \"\"\"\r\n\r\n        self.ever_executed = True\r\n        data.is_find = self.is_find\r\n\r\n        text_repr = None\r\n        if self.settings.deadline is None:\r\n            test = self.test\r\n        else:\r\n\r\n            @proxies(self.test)\r\n            def test(*args, **kwargs):\r\n                self.__test_runtime = None\r\n                initial_draws = len(data.draw_times)\r\n                start = time.perf_counter()\r\n                result = self.test(*args, **kwargs)\r\n                finish = time.perf_counter()\r\n                internal_draw_time = sum(data.draw_times[initial_draws:])\r\n                runtime = datetime.timedelta(\r\n                    seconds=finish - start - internal_draw_time\r\n                )\r\n                self.__test_runtime = runtime\r\n                current_deadline = self.settings.deadline\r\n                if not is_final:\r\n                    current_deadline = (current_deadline // 4) * 5\r\n                if runtime >= current_deadline:\r\n                    raise DeadlineExceeded(runtime, self.settings.deadline)\r\n                return result\r\n\r\n        def run(data):\r\n            # Set up dynamic context needed by a single test run.\r\n            with local_settings(self.settings):\r\n                with deterministic_PRNG():\r\n                    with BuildContext(data, is_final=is_final):\r\n\r\n                        # Generate all arguments to the test function.\r\n                        args, kwargs = data.draw(self.search_strategy)\r\n                        if expected_failure is not None:\r\n                            nonlocal text_repr\r\n                            text_repr = repr_call(test, args, kwargs)\r\n\r\n                        if print_example or current_verbosity() >= Verbosity.verbose:\r\n                            output = StringIO()\r\n\r\n                            printer = RepresentationPrinter(output)\r\n                            if print_example:\r\n                                printer.text(\"Falsifying example:\")\r\n                            else:\r\n                                printer.text(\"Trying example:\")\r\n\r\n                            if self.print_given_args:\r\n                                printer.text(\" \")\r\n                                printer.text(test.__name__)\r\n                                with printer.group(indent=4, open=\"(\", close=\"\"):\r\n                                    printer.break_()\r\n                                    for v in args:\r\n                                        printer.pretty(v)\r\n                                        # We add a comma unconditionally because\r\n                                        # generated arguments will always be kwargs,\r\n                                        # so there will always be more to come.\r\n                                        printer.text(\",\")\r\n                                        printer.breakable()\r\n\r\n                                    for i, (k, v) in enumerate(kwargs.items()):\r\n                                        printer.text(k)\r\n                                        printer.text(\"=\")\r\n                                        printer.pretty(v)\r\n                                        printer.text(\",\")\r\n                                        if i + 1 < len(kwargs):\r\n                                            printer.breakable()\r\n                                printer.break_()\r\n                                printer.text(\")\")\r\n                            printer.flush()\r\n                            report(output.getvalue())\r\n                        return test(*args, **kwargs)\r\n\r\n        # Run the test function once, via the executor hook.\r\n        # In most cases this will delegate straight to `run(data)`.\r\n>       result = self.test_runner(data, run)\r\n\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/core.py:691:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ndata = ConjectureData(VALID, 3 bytes, frozen), function = <function StateForActualGivenExecution.execute_once.<locals>.run at 0x7f7e98ff6a60>\r\n\r\n    def default_new_style_executor(data, function):\r\n>       return function(data)\r\n\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/executors.py:47:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ndata = ConjectureData(VALID, 3 bytes, frozen)\r\n\r\n    def run(data):\r\n        # Set up dynamic context needed by a single test run.\r\n        with local_settings(self.settings):\r\n            with deterministic_PRNG():\r\n                with BuildContext(data, is_final=is_final):\r\n\r\n                    # Generate all arguments to the test function.\r\n                    args, kwargs = data.draw(self.search_strategy)\r\n                    if expected_failure is not None:\r\n                        nonlocal text_repr\r\n                        text_repr = repr_call(test, args, kwargs)\r\n\r\n                    if print_example or current_verbosity() >= Verbosity.verbose:\r\n                        output = StringIO()\r\n\r\n                        printer = RepresentationPrinter(output)\r\n                        if print_example:\r\n                            printer.text(\"Falsifying example:\")\r\n                        else:\r\n                            printer.text(\"Trying example:\")\r\n\r\n                        if self.print_given_args:\r\n                            printer.text(\" \")\r\n                            printer.text(test.__name__)\r\n                            with printer.group(indent=4, open=\"(\", close=\"\"):\r\n                                printer.break_()\r\n                                for v in args:\r\n                                    printer.pretty(v)\r\n                                    # We add a comma unconditionally because\r\n                                    # generated arguments will always be kwargs,\r\n                                    # so there will always be more to come.\r\n                                    printer.text(\",\")\r\n                                    printer.breakable()\r\n\r\n                                for i, (k, v) in enumerate(kwargs.items()):\r\n                                    printer.text(k)\r\n                                    printer.text(\"=\")\r\n                                    printer.pretty(v)\r\n                                    printer.text(\",\")\r\n                                    if i + 1 < len(kwargs):\r\n                                        printer.breakable()\r\n                            printer.break_()\r\n                            printer.text(\")\")\r\n                        printer.flush()\r\n                        report(output.getvalue())\r\n>                   return test(*args, **kwargs)\r\n\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/core.py:687:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nx = 0\r\n\r\n    @given(integers())\r\n>   def test(x):\r\n\r\ntest.py:7:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nargs = (0,), kwargs = {}, initial_draws = 1, start = 1.438075408\r\n\r\n    @proxies(self.test)\r\n    def test(*args, **kwargs):\r\n        self.__test_runtime = None\r\n        initial_draws = len(data.draw_times)\r\n        start = time.perf_counter()\r\n>       result = self.test(*args, **kwargs)\r\n\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/core.py:628:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nx = 0\r\n\r\n    @given(integers())\r\n    def test(x):\r\n>       np.empty((0, 0, 1))[[[x]]]\r\nE       DeprecationWarning: Out of bound index found. This was previously ignored when the indexing result contained no elements. In the future the index error will be raised. This error occurs either due to an empty slice, or if an array has zero elements even before indexing.\r\nE       (Use `warnings.simplefilter('error')` to turn this DeprecationWarning into an error and get more details on the invalid index.)\r\n\r\ntest.py:8: DeprecationWarning\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n    @given(integers())\r\n>   def test(x):\r\n\r\ntest.py:7:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/internal/conjecture/engine.py:474: in run\r\n    self._run()\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/internal/conjecture/engine.py:878: in _run\r\n    self.reuse_existing_examples()\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/internal/conjecture/engine.py:537: in reuse_existing_examples\r\n    data = self.cached_test_function(existing)\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/internal/conjecture/engine.py:1059: in cached_test_function\r\n    self.test_function(data)\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/internal/conjecture/engine.py:209: in test_function\r\n    self.__stoppable_test_function(data)\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/internal/conjecture/engine.py:185: in __stoppable_test_function\r\n    self._test_function(data)\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/core.py:798: in _execute_once_for_engine\r\n    interesting_origin = get_interesting_origin(e)\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/internal/escalation.py:121: in get_interesting_origin\r\n    get_interesting_origin(exception.__context__) if exception.__context__ else (),\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/internal/escalation.py:113: in get_interesting_origin\r\n    tb = get_trimmed_traceback(exception)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nexception = IndexError('index 0 is out of bounds for axis 0 with size 0')\r\n\r\n    def get_trimmed_traceback(exception=None):\r\n        \"\"\"Return the current traceback, minus any frames added by Hypothesis.\"\"\"\r\n        if exception is None:\r\n            _, exception, tb = sys.exc_info()\r\n        else:\r\n            tb = exception.__traceback__\r\n        # Avoid trimming the traceback if we're in verbose mode, or the error\r\n        # was raised inside Hypothesis\r\n        if hypothesis.settings.default.verbosity >= hypothesis.Verbosity.debug or (\r\n>           is_hypothesis_file(traceback.extract_tb(tb)[-1][0])\r\n            and not isinstance(exception, _Trimmable)\r\n        ):\r\nE       IndexError: list index out of range\r\n\r\n../../anaconda3/envs/ndindex/lib/python3.8/site-packages/hypothesis/internal/escalation.py:91: IndexError\r\n======================================================================== short test summary info ========================================================================\r\nFAILED test.py::test - IndexError: list index out of range\r\n=========================================================================== 1 failed in 0.64s ===========================================================================\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3504/reactions", "total_count": 2, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 2}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3504/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3441", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3441/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3441/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3441/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3441", "id": 1337817012, "node_id": "I_kwDOAISI585PvXe0", "number": 3441, "title": "In `reflection.py`, `__module__` is a `str` or `None`, so an `AttributeError` is always triggered", "user": {"login": "rhaps0dy", "id": 4928242, "node_id": "MDQ6VXNlcjQ5MjgyNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/4928242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhaps0dy", "html_url": "https://github.com/rhaps0dy", "followers_url": "https://api.github.com/users/rhaps0dy/followers", "following_url": "https://api.github.com/users/rhaps0dy/following{/other_user}", "gists_url": "https://api.github.com/users/rhaps0dy/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhaps0dy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhaps0dy/subscriptions", "organizations_url": "https://api.github.com/users/rhaps0dy/orgs", "repos_url": "https://api.github.com/users/rhaps0dy/repos", "events_url": "https://api.github.com/users/rhaps0dy/events{/privacy}", "received_events_url": "https://api.github.com/users/rhaps0dy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1695870469, "node_id": "MDU6TGFiZWwxNjk1ODcwNDY5", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/internals", "name": "internals", "color": "f2b560", "default": false, "description": "Stuff that only Hypothesis devs should ever see"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2022-08-13T01:16:27Z", "updated_at": "2022-08-20T18:02:32Z", "closed_at": "2022-08-20T18:02:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "[This line](https://github.com/HypothesisWorks/hypothesis/blob/45b6484d29e592369d245789873282e1782aada6/hypothesis-python/src/hypothesis/internal/reflection.py#L68) will always raise an `AttributeError`, and thus the function's `__module__` never gets included in the hash.\r\n\r\nIn fact, the Python documents say it can be a `str` or `None`, so `.encode()` may sometimes also raise an AttributeError. That's fine I suppose. \r\nhttps://docs.python.org/3/reference/datamodel.html?highlight=__module__", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3441/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3438", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3438/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3438/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3438/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3438", "id": 1336823830, "node_id": "I_kwDOAISI585PrlAW", "number": 3438, "title": "`extract_lambda_source` fails in Pyodide", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-08-12T06:52:00Z", "updated_at": "2022-08-12T18:07:05Z", "closed_at": "2022-08-12T18:07:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "If you paste the following code into [my online ghostwriter demo](https://zhd.dev/ghostwriter/), you get an error:\r\n\r\n```python\r\nfrom hypothesis import given, strategies as st\r\n\r\n@given(st.just(lambda: None))\r\ndef test_extract_lambda_source(obj):\r\n    assert False\r\n```\r\n```python-traceback\r\nTraceback (most recent call last):\r\n  File \"test_code.py\", line 6, in test_extract_lambda_source\r\n    #\r\n  File \"/lib/python3.10/site-packages/hypothesis/core.py\", line 1257, in wrapped_test\r\n    raise the_error_hypothesis_found\r\n  File \"/lib/python3.10/site-packages/hypothesis/core.py\", line 1224, in wrapped_test\r\n    state.run_engine()\r\n  File \"/lib/python3.10/site-packages/hypothesis/core.py\", line 903, in run_engine\r\n    _raise_to_user(errors_to_report, self.settings, report_lines)\r\n  File \"/lib/python3.10/site-packages/hypothesis/core.py\", line 934, in _raise_to_user\r\n    raise the_error_hypothesis_found\r\n  File \"/lib/python3.10/site-packages/hypothesis/core.py\", line 866, in run_engine\r\n    self.execute_once(\r\n  File \"/lib/python3.10/site-packages/hypothesis/core.py\", line 688, in execute_once\r\n    result = self.test_runner(data, run)\r\n  File \"/lib/python3.10/site-packages/hypothesis/executors.py\", line 47, in default_new_style_executor\r\n    return function(data)\r\n  File \"/lib/python3.10/site-packages/hypothesis/core.py\", line 649, in run\r\n    text_repr = repr_call(test, args, kwargs)\r\n  File \"/lib/python3.10/site-packages/hypothesis/internal/reflection.py\", line 421, in repr_call\r\n    bits.append(f\"{p.name}={nicerepr(kwargs.pop(p.name))}\")\r\n  File \"/lib/python3.10/site-packages/hypothesis/internal/reflection.py\", line 405, in nicerepr\r\n    return get_pretty_function_description(v)\r\n  File \"/lib/python3.10/site-packages/hypothesis/internal/reflection.py\", line 390, in get_pretty_function_description\r\n    return extract_lambda_source(f)\r\n  File \"/lib/python3.10/site-packages/hypothesis/internal/reflection.py\", line 279, in extract_lambda_source\r\n    assert \"lambda\" in source\r\nAssertionError\r\n```\r\n\r\nI'm not sure exactly why, but it would be nice to fix this (and use #3437 to prevent a regression).", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3438/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3438/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3432", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3432/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3432/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3432/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3432", "id": 1333990070, "node_id": "PR_kwDOAISI58487N49", "number": 3432, "title": "Fix pytest workaround for `ExceptionGroup` display", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-08-10T02:50:50Z", "updated_at": "2022-08-10T03:46:12Z", "closed_at": "2022-08-10T03:46:08Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3432", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3432", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3432.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3432.patch", "merged_at": "2022-08-10T03:46:08Z"}, "body": "Fixes #3430, and adds a test to ensure it can't reoccur.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3432/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3397", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3397/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3397/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3397/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3397", "id": 1293810787, "node_id": "I_kwDOAISI585NHfxj", "number": 3397, "title": "Use of `ParamSpec` introduced in #3396 only works in Python 3.10+", "user": {"login": "rsokl", "id": 29104956, "node_id": "MDQ6VXNlcjI5MTA0OTU2", "avatar_url": "https://avatars.githubusercontent.com/u/29104956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsokl", "html_url": "https://github.com/rsokl", "followers_url": "https://api.github.com/users/rsokl/followers", "following_url": "https://api.github.com/users/rsokl/following{/other_user}", "gists_url": "https://api.github.com/users/rsokl/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsokl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsokl/subscriptions", "organizations_url": "https://api.github.com/users/rsokl/orgs", "repos_url": "https://api.github.com/users/rsokl/repos", "events_url": "https://api.github.com/users/rsokl/events{/privacy}", "received_events_url": "https://api.github.com/users/rsokl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 602737425, "node_id": "MDU6TGFiZWw2MDI3Mzc0MjU=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/tests/build/CI", "name": "tests/build/CI", "color": "fbca04", "default": false, "description": "about testing or deployment *of* Hypothesis"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2022-07-05T05:36:52Z", "updated_at": "2022-08-20T18:02:31Z", "closed_at": "2022-08-20T18:02:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The pattern used by #3396 to leverage `ParamSpec`\r\n\r\nhttps://github.com/HypothesisWorks/hypothesis/blob/0738717561e419558a831869ab2b81dd918276aa/hypothesis-python/src/hypothesis/strategies/_internal/core.py#L123-L129\r\n\r\ndoes not actually work with the `typing_extensions` backport:\r\n\r\n```python\r\n# contents of pspec.py\r\n\r\nfrom hypothesis.strategies import composite, DrawFn\r\nfrom typing_extensions import ParamSpec  # note: typing-extensions is installed\r\n\r\n@composite\r\ndef comp(draw: DrawFn, x: int) -> int:\r\n    return x\r\n\r\nreveal_type(comp)\r\n```\r\n\r\n```console\r\n$ pip freeze | grep typing_extensions\r\ntyping_extensions==4.3.0\r\n\r\n$ mypy --version\r\nmypy 0.961 (compiled: yes)\r\n\r\n$ mypy pspec.py --python-version=3.10\r\npspec.py:11: note: Revealed type is \"def (x: builtins.int) -> hypothesis.strategies._internal.strategies.SearchStrategy[builtins.int]\"\r\nSuccess: no issues found in 1 source file\r\n\r\n$ mypy pspec.py --python-version=3.9\r\npspec.py:11: note: Revealed type is \"Any\"\r\nSuccess: no issues found in 1 source file\r\n```\r\n\r\n<details>\r\n<summary>pyright repro</summary>\r\n\r\n```console\r\n$ pyright --version\r\npyright 1.1.257\r\n\r\n$ pyright pspec.py --pythonversion=3.10\r\nNo configuration file found.\r\nNo pyproject.toml file found.\r\nstubPath C:\\Users\\Ryan Soklaski\\hypothesis\\scratch\\typings is not a valid directory.\r\nAssuming Python platform Windows\r\nSearching for source files\r\nFound 1 source file\r\npyright 1.1.257\r\nC:\\Users\\Ryan Soklaski\\hypothesis\\scratch\\pspec.py\r\n  C:\\Users\\Ryan Soklaski\\hypothesis\\scratch\\pspec.py:11:13 - information: Type of \"comp\" is \"(x: int) -> SearchStrategy[int]\"\r\n0 errors, 0 warnings, 1 information\r\n\r\n$ pyright pspec.py --pythonversion=3.9\r\nNo configuration file found.\r\nNo pyproject.toml file found.\r\nstubPath C:\\Users\\Ryan Soklaski\\hypothesis\\scratch\\typings is not a valid directory.\r\nAssuming Python platform Windows\r\nSearching for source files\r\nFound 1 source file\r\npyright 1.1.257\r\nC:\\Users\\Ryan Soklaski\\hypothesis\\scratch\\pspec.py\r\n  C:\\Users\\Ryan Soklaski\\hypothesis\\scratch\\pspec.py:7:2 - error: Argument of type \"(draw: DrawFn, x: int) -> int\" cannot be assigned to parameter \"f\" of type \"() -> Ex@composite\" in function \"composite\"\r\n    Type \"(draw: DrawFn, x: int) -> int\" cannot be assigned to type \"() -> Ex@composite\"\r\n      Keyword parameter \"draw\" is missing in destination\r\n      Keyword parameter \"x\" is missing in destination (reportGeneralTypeIssues)\r\n  C:\\Users\\Ryan Soklaski\\hypothesis\\scratch\\pspec.py:11:13 - information: Type of \"comp\" is \"() -> SearchStrategy[int]\"\r\n1 error, 0 warnings, 1 information\r\n```\r\n</details>\r\n\r\nIt seems like nested try-excepts are not supported by mypy:\r\n\r\n```python\r\n# contents of scratch.py\r\n\r\nimport typing\r\n\r\ntry:\r\n    from typing import Concatenate, ParamSpec\r\nexcept ImportError:\r\n    try:\r\n        from typing_extensions import Concatenate, ParamSpec\r\n    except ImportError:\r\n        ParamSpec = None  # type: ignore\r\n\r\n\r\nif typing.TYPE_CHECKING or ParamSpec is not None:\r\n    reveal_type(ParamSpec)\r\n```\r\n\r\n```console\r\n$ mypy scratch.py --python-version=3.10\r\nscratch.py:13: note: Revealed type is \"def (name: builtins.str, *, bound: Union[Any, None] =, contravariant: builtins.bool =, covariant: builtins.bool =) -> typing.ParamSpec\"\r\nSuccess: no issues found in 1 source file\r\n\r\n$ mypy scratch.py --python-version=3.9\r\nscratch.py:4: error: Module \"typing\" has no attribute \"Concatenate\"\r\nscratch.py:4: error: Module \"typing\" has no attribute \"ParamSpec\"; maybe \"_ParamSpec\"?\r\nscratch.py:13: note: Revealed type is \"Any\"\r\nFound 2 errors in 1 file (checked 1 source file)\r\n```\r\n\r\nThe following works for mypy for both Python 3.10 and the typing-extensions backport, but only works for pyright for Python 3.10 ([potentially relevant comment from Eric Traut](https://github.com/microsoft/pyright/issues/1358#issuecomment-757670331)):\r\n\r\n```python\r\nif sys.version_info >= (3, 10):\r\n    from typing import Concatenate, ParamSpec\r\nelif typing.TYPE_CHECKING:\r\n    try:\r\n        from typing_extensions import Concatenate, ParamSpec\r\n    except ImportError:\r\n        from typing import Any as ParamSpec\r\nelse:\r\n    ParamSpec = None\r\n```\r\n\r\nWhereas this works for pyright under all circumstances, but fails in mypy when typing-extensions is not installed:\r\n\r\n```python\r\nif sys.version_info >= (3, 10):\r\n    from typing import Concatenate, ParamSpec\r\nelif typing.TYPE_CHECKING:\r\n    from typing_extensions import Concatenate, ParamSpec\r\nelse:\r\n    ParamSpec = None\r\n```\r\n\r\nI've gotta go to bed.. @sobolevn I'm wondering if you have any recommendations here.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3397/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3370", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3370/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3370/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3370/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3370", "id": 1265556434, "node_id": "I_kwDOAISI585LbtvS", "number": 3370, "title": "copying falsifying example into `@example()` fails to reproduce test failure due to pprinter sorting dict keys", "user": {"login": "andreareina", "id": 5351947, "node_id": "MDQ6VXNlcjUzNTE5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5351947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreareina", "html_url": "https://github.com/andreareina", "followers_url": "https://api.github.com/users/andreareina/followers", "following_url": "https://api.github.com/users/andreareina/following{/other_user}", "gists_url": "https://api.github.com/users/andreareina/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreareina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreareina/subscriptions", "organizations_url": "https://api.github.com/users/andreareina/orgs", "repos_url": "https://api.github.com/users/andreareina/repos", "events_url": "https://api.github.com/users/andreareina/events{/privacy}", "received_events_url": "https://api.github.com/users/andreareina/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-06-09T03:54:03Z", "updated_at": "2022-06-10T17:01:00Z", "closed_at": "2022-06-10T17:01:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some code depends on the order of dict iteration so sorting the keys before printing makes reproducing a failing test more difficult. \r\n\r\nRelated to #2913 ?\r\n\r\n**Sample code**:\r\n```\r\nimport hypothesis as h\r\nimport hypothesis.strategies as st\r\n\r\n@h.given(st.dictionaries(st.integers(), st.integers()))\r\ndef test(d):\r\n    h.note(f\"{d=}\")\r\n    assert sorted(d) == list(d)\r\n```\r\n\r\n**Output**: falsifying example report gives an input that if copied verbatim, would actually pass the test\r\n```\r\n=========================================================================================== test session starts ===========================================================================================\r\nplatform linux -- Python 3.8.11, pytest-5.4.3, py-1.11.0, pluggy-0.13.1\r\nrootdir: [snip]/hypothesis-dictionary-order\r\nplugins: hypothesis-6.47.0\r\ncollected 1 item                                                                                                                                                                                          \r\n\r\ntest.py F                                                                                                                                                                                           [100%]\r\n\r\n================================================================================================ FAILURES =================================================================================================\r\n__________________________________________________________________________________________________ test ___________________________________________________________________________________________________\r\n\r\n    @h.given(st.dictionaries(st.integers(), st.integers()))\r\n>   def test(d):\r\n\r\ntest.py:5: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nd = {0: 0, 1: 0}\r\n\r\n    @h.given(st.dictionaries(st.integers(), st.integers()))\r\n    def test(d):\r\n        h.note(f\"{d=}\")\r\n>       assert sorted(d) == list(d)\r\nE       assert [0, 1] == [1, 0]\r\nE         At index 0 diff: 0 != 1\r\nE         Use -v to get the full diff\r\n\r\ntest.py:7: AssertionError\r\n----------------------------------------------------------------------------------------------- Hypothesis ------------------------------------------------------------------------------------------------\r\nFalsifying example: test(\r\n    d={0: 0, 1: 0},\r\n)\r\nd={1: 0, 0: 0}\r\n========================================================================================= short test summary info =========================================================================================\r\nFAILED test.py::test - assert [0, 1] == [1, 0]\r\n```\r\n\r\n**Expected output**: falsifying example should reflect the dict key order as actually passed into the test function", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3370/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3325", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3325/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3325/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3325/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3325", "id": 1222039009, "node_id": "PR_kwDOAISI5843H8BE", "number": 3325, "title": "Fix rare type hints issue", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-05-01T06:13:21Z", "updated_at": "2022-05-01T06:52:22Z", "closed_at": "2022-05-01T06:52:19Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3325", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3325", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3325.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3325.patch", "merged_at": "2022-05-01T06:52:19Z"}, "body": "I noticed this via the ghostwriter when playing around with the recent keyword-related issues.  Intending to merge pretty quickly, but might be of interest to @sobolevn too.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3325/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3325/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3278", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3278/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3278/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3278/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3278", "id": 1189151687, "node_id": "PR_kwDOAISI5841dNT9", "number": 3278, "title": "Fix `given(...)(lambda x: ...)()`", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-04-01T02:50:13Z", "updated_at": "2022-04-01T03:30:08Z", "closed_at": "2022-04-01T03:30:06Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3278", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3278", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3278.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3278.patch", "merged_at": "2022-04-01T03:30:06Z"}, "body": "This is obviously a rather niche use, but supporting it makes sense under the simple model of \"a decorator is just application of a higher order function\".  And it used to work, before I did some signature-related refactoring a few months ago.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3278/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3278/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3255", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3255/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3255/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3255/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3255", "id": 1167418963, "node_id": "I_kwDOAISI585FlWZT", "number": 3255, "title": "PEP 604 not supported - exception when writing union types X | Y", "user": {"login": "MPalarya", "id": 19212750, "node_id": "MDQ6VXNlcjE5MjEyNzUw", "avatar_url": "https://avatars.githubusercontent.com/u/19212750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MPalarya", "html_url": "https://github.com/MPalarya", "followers_url": "https://api.github.com/users/MPalarya/followers", "following_url": "https://api.github.com/users/MPalarya/following{/other_user}", "gists_url": "https://api.github.com/users/MPalarya/gists{/gist_id}", "starred_url": "https://api.github.com/users/MPalarya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MPalarya/subscriptions", "organizations_url": "https://api.github.com/users/MPalarya/orgs", "repos_url": "https://api.github.com/users/MPalarya/repos", "events_url": "https://api.github.com/users/MPalarya/events{/privacy}", "received_events_url": "https://api.github.com/users/MPalarya/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-03-12T22:38:38Z", "updated_at": "2022-04-01T13:30:00Z", "closed_at": "2022-04-01T13:30:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "hypothesis is not recognizing the new bar-annotation for union types as a valid type on python 3.10+\r\nresulting in an exception, see minimal reproduction example below -\r\n\r\n```python\r\nfrom typing import Optional, Union\r\nfrom dataclasses import dataclass\r\n\r\n@dataclass\r\nclass A:\r\n    x: str | None\r\n\r\n@dataclass\r\nclass B:\r\n    x: Union[str, None]\r\n\r\n@dataclass\r\nclass C:\r\n    x: Optional[str]\r\n\r\n>>> st.from_type(A).example()\r\nhypothesis.errors.InvalidArgument: thing=str | None must be a type\r\n\r\n>>> st.from_type(B).example()\r\nB(x='\\U00076342v\u00af\\\\\\x8c\u00ee\u00a3\\x00\\x7f\u00b1b')\r\n\r\n>>> st.from_type(C).example()\r\nC(x='\u93c0\\U00109e07h\\x81\u00f8\\x9a\\x9c\\U0010a5e3\\x8e=\u00fb')\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3255/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3255/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3245", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3245/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3245/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3245/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3245", "id": 1156876576, "node_id": "I_kwDOAISI585E9Ikg", "number": 3245, "title": "Can not run hypothesis as async test with 6.39.0", "user": {"login": "aquamatthias", "id": 330485, "node_id": "MDQ6VXNlcjMzMDQ4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/330485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aquamatthias", "html_url": "https://github.com/aquamatthias", "followers_url": "https://api.github.com/users/aquamatthias/followers", "following_url": "https://api.github.com/users/aquamatthias/following{/other_user}", "gists_url": "https://api.github.com/users/aquamatthias/gists{/gist_id}", "starred_url": "https://api.github.com/users/aquamatthias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aquamatthias/subscriptions", "organizations_url": "https://api.github.com/users/aquamatthias/orgs", "repos_url": "https://api.github.com/users/aquamatthias/repos", "events_url": "https://api.github.com/users/aquamatthias/events{/privacy}", "received_events_url": "https://api.github.com/users/aquamatthias/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2022-03-02T09:21:22Z", "updated_at": "2022-03-03T16:29:52Z", "closed_at": "2022-03-03T10:52:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nI use pytest to run the tests:\r\n```python\r\npytest==7.0.1\r\npytest-cov==3.0.0\r\npytest-runner==6.0.0\r\npytest-asyncio==0.18.1\r\n```\r\n\r\nFollowing test runs fine with 6.38.0:\r\n```python\r\n@given(json_array_gen)\r\n@pytest.mark.asyncio\r\nasync def test_foo(elements: List[JsonElement]) -> None:\r\n    pass\r\n```\r\n\r\nAnd fails with 6.39.0:\r\n```\r\ntests/resotocore/web/content_renderer_test.py::test_foo - TypeError: test_foo() takes 0 positional arguments but 1 was given\r\n```\r\n\r\n<details>\r\n  <summary>Complete Log</summary>\r\n  \r\n```\r\n============================================================================ test session starts ============================================================================\r\nplatform darwin -- Python 3.10.0, pytest-7.0.1, pluggy-1.0.0\r\nrootdir: /Users/matthias/Documents/Work/someeng/resoto/resotocore, configfile: tox.ini\r\nplugins: typeguard-2.13.3, asyncio-0.18.1, hypothesis-6.39.0, cov-3.0.0\r\nasyncio: mode=auto\r\ncollected 1 item                                                                                                                                                            \r\n\r\ntests/resotocore/web/content_renderer_test.py You can add @seed(187717537307108665848683760785146775420) to this test or run pytest with --hypothesis-seed=187717537307108665848683760785146775420 to reproduce this failure.\r\nF\r\n\r\n================================================================================= FAILURES ==================================================================================\r\n_________________________________________________________________________________ test_foo __________________________________________________________________________________\r\n\r\n    @given(json_array_gen)\r\n>   @settings(max_examples=20, suppress_health_check=HealthCheck.all())\r\n\r\ntests/resotocore/web/content_renderer_test.py:41: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nvenv/lib/python3.10/site-packages/hypothesis/internal/conjecture/engine.py:470: in run\r\n    self._run()\r\nvenv/lib/python3.10/site-packages/hypothesis/internal/conjecture/engine.py:870: in _run\r\n    self.reuse_existing_examples()\r\nvenv/lib/python3.10/site-packages/hypothesis/internal/conjecture/engine.py:548: in reuse_existing_examples\r\n    data = self.cached_test_function(existing)\r\nvenv/lib/python3.10/site-packages/hypothesis/internal/conjecture/engine.py:1051: in cached_test_function\r\n    self.test_function(data)\r\nvenv/lib/python3.10/site-packages/hypothesis/internal/conjecture/engine.py:208: in test_function\r\n    self.__stoppable_test_function(data)\r\nvenv/lib/python3.10/site-packages/hypothesis/internal/conjecture/engine.py:184: in __stoppable_test_function\r\n    self._test_function(data)\r\nvenv/lib/python3.10/site-packages/hypothesis/core.py:725: in _execute_once_for_engine\r\n    escalate_hypothesis_internal_error()\r\nvenv/lib/python3.10/site-packages/hypothesis/core.py:699: in _execute_once_for_engine\r\n    result = self.execute_once(data)\r\nvenv/lib/python3.10/site-packages/hypothesis/core.py:637: in execute_once\r\n    result = self.test_runner(data, run)\r\nvenv/lib/python3.10/site-packages/hypothesis/executors.py:47: in default_new_style_executor\r\n    return function(data)\r\nvenv/lib/python3.10/site-packages/hypothesis/core.py:633: in run\r\n    return test(*args, **kwargs)\r\nvenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:432: in test_foo\r\n    def inner(**kwargs):\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nargs = ([False],), kwargs = {}, initial_draws = 1, start = 540979.612708916\r\n\r\n    @proxies(self.test)\r\n    def test(*args, **kwargs):\r\n        self.__test_runtime = None\r\n        initial_draws = len(data.draw_times)\r\n        start = time.perf_counter()\r\n>       result = self.test(*args, **kwargs)\r\nE       TypeError: test_foo() takes 0 positional arguments but 1 was given\r\n\r\nvenv/lib/python3.10/site-packages/hypothesis/core.py:575: TypeError\r\n-------------------------------------------------------------------------------- Hypothesis ---------------------------------------------------------------------------------\r\nYou can add @seed(187717537307108665848683760785146775420) to this test or run pytest with --hypothesis-seed=187717537307108665848683760785146775420 to reproduce this failure.\r\n========================================================================== short test summary info ==========================================================================\r\nFAILED tests/resotocore/web/content_renderer_test.py::test_foo - TypeError: test_foo() takes 0 positional arguments but 1 was given\r\n============================================================================= 1 failed in 0.54s =============================================================================\r\n(resotocore env) \r\nsomeeng/resoto/resotocore  mv/bump \u2717                                                                                           \u2691 (\u2388 |do-fra1-posthog-k8s:posthog) 10:13:26 \u2349\r\n\u25b6 pytest tests/resotocore/web/content_renderer_test.py::test_foo -s\r\n============================================================================ test session starts ============================================================================\r\nplatform darwin -- Python 3.10.0, pytest-7.0.1, pluggy-1.0.0\r\nrootdir: /Users/matthias/Documents/Work/someeng/resoto/resotocore, configfile: tox.ini\r\nplugins: typeguard-2.13.3, asyncio-0.18.1, hypothesis-6.39.0, cov-3.0.0\r\nasyncio: mode=auto\r\ncollected 1 item                                                                                                                                                            \r\n\r\ntests/resotocore/web/content_renderer_test.py You can add @seed(230021627888664504973027713392113020080) to this test or run pytest with --hypothesis-seed=230021627888664504973027713392113020080 to reproduce this failure.\r\nF\r\n\r\n================================================================================= FAILURES ==================================================================================\r\n_________________________________________________________________________________ test_foo __________________________________________________________________________________\r\n\r\n    @given(json_array_gen)\r\n>   @pytest.mark.asyncio\r\n\r\ntests/resotocore/web/content_renderer_test.py:41: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nvenv/lib/python3.10/site-packages/hypothesis/internal/conjecture/engine.py:470: in run\r\n    self._run()\r\nvenv/lib/python3.10/site-packages/hypothesis/internal/conjecture/engine.py:872: in _run\r\n    self.generate_new_examples()\r\nvenv/lib/python3.10/site-packages/hypothesis/internal/conjecture/engine.py:604: in generate_new_examples\r\n    zero_data = self.cached_test_function(bytes(BUFFER_SIZE))\r\nvenv/lib/python3.10/site-packages/hypothesis/internal/conjecture/engine.py:1051: in cached_test_function\r\n    self.test_function(data)\r\nvenv/lib/python3.10/site-packages/hypothesis/internal/conjecture/engine.py:208: in test_function\r\n    self.__stoppable_test_function(data)\r\nvenv/lib/python3.10/site-packages/hypothesis/internal/conjecture/engine.py:184: in __stoppable_test_function\r\n    self._test_function(data)\r\nvenv/lib/python3.10/site-packages/hypothesis/core.py:725: in _execute_once_for_engine\r\n    escalate_hypothesis_internal_error()\r\nvenv/lib/python3.10/site-packages/hypothesis/core.py:699: in _execute_once_for_engine\r\n    result = self.execute_once(data)\r\nvenv/lib/python3.10/site-packages/hypothesis/core.py:637: in execute_once\r\n    result = self.test_runner(data, run)\r\nvenv/lib/python3.10/site-packages/hypothesis/executors.py:47: in default_new_style_executor\r\n    return function(data)\r\nvenv/lib/python3.10/site-packages/hypothesis/core.py:633: in run\r\n    return test(*args, **kwargs)\r\nvenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:432: in test_foo\r\n    def inner(**kwargs):\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nargs = ([],), kwargs = {}, initial_draws = 1, start = 541046.91061275\r\n\r\n    @proxies(self.test)\r\n    def test(*args, **kwargs):\r\n        self.__test_runtime = None\r\n        initial_draws = len(data.draw_times)\r\n        start = time.perf_counter()\r\n>       result = self.test(*args, **kwargs)\r\nE       TypeError: test_foo() takes 0 positional arguments but 1 was given\r\n\r\nvenv/lib/python3.10/site-packages/hypothesis/core.py:575: TypeError\r\n-------------------------------------------------------------------------------- Hypothesis ---------------------------------------------------------------------------------\r\nYou can add @seed(230021627888664504973027713392113020080) to this test or run pytest with --hypothesis-seed=230021627888664504973027713392113020080 to reproduce this failure.\r\n========================================================================== short test summary info ==========================================================================\r\nFAILED tests/resotocore/web/content_renderer_test.py::test_foo - TypeError: test_foo() takes 0 positional arguments but 1 was given\r\n============================================================================= 1 failed in 0.54s =============================================================================\r\n(resotocore env) \r\n```\r\n</details>\r\n\r\nIt looks like the combination with pytest-async leads to confusion.\r\nThis blocks us from upgrading to latest hypothesis.\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3245/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3239", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3239/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3239/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3239/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3239", "id": 1151370006, "node_id": "PR_kwDOAISI584zg4Ha", "number": 3239, "title": "Error if denormals-are-zero", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-02-26T07:12:06Z", "updated_at": "2022-02-26T10:07:15Z", "closed_at": "2022-02-26T10:07:10Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3239", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3239", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3239.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3239.patch", "merged_at": "2022-02-26T10:07:10Z"}, "body": "Closes #3092.  I'd like to be able to just handle all such cases, but this is one of those awful messes where kicking a clear explanation back to the user is the best we can do.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3239/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3239/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3237", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3237/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3237/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3237/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3237", "id": 1146246299, "node_id": "PR_kwDOAISI584zQG72", "number": 3237, "title": "Fix single-return stateful printing", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-02-21T21:36:58Z", "updated_at": "2022-02-21T22:03:20Z", "closed_at": "2022-02-21T22:03:19Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3237", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3237", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3237.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3237.patch", "merged_at": "2022-02-21T22:03:19Z"}, "body": "Closes #3236.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3237/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3237/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3236", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3236/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3236/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3236/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3236", "id": 1145775484, "node_id": "I_kwDOAISI585ESyV8", "number": 3236, "title": "Invalid failing example description with `hypothesis.stateful.multiple` containing single value", "user": {"login": "lycantropos", "id": 15193952, "node_id": "MDQ6VXNlcjE1MTkzOTUy", "avatar_url": "https://avatars.githubusercontent.com/u/15193952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lycantropos", "html_url": "https://github.com/lycantropos", "followers_url": "https://api.github.com/users/lycantropos/followers", "following_url": "https://api.github.com/users/lycantropos/following{/other_user}", "gists_url": "https://api.github.com/users/lycantropos/gists{/gist_id}", "starred_url": "https://api.github.com/users/lycantropos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lycantropos/subscriptions", "organizations_url": "https://api.github.com/users/lycantropos/orgs", "repos_url": "https://api.github.com/users/lycantropos/repos", "events_url": "https://api.github.com/users/lycantropos/events{/privacy}", "received_events_url": "https://api.github.com/users/lycantropos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2022-02-21T13:06:34Z", "updated_at": "2022-02-21T22:03:19Z", "closed_at": "2022-02-21T22:03:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On my machine with `Python 3.9.5` and `hypothesis==6.37.1` (latest at the moment of writing) test case\r\n```python\r\nfrom hypothesis.stateful import (Bundle,\r\n                                 RuleBasedStateMachine,\r\n                                 multiple,\r\n                                 rule)\r\n\r\n\r\nclass State(RuleBasedStateMachine):\r\n    values = Bundle('values')\r\n\r\n    @rule(target=values)\r\n    def create_single_multiple(self):\r\n        return multiple(42)\r\n\r\n    @rule(value=values)\r\n    def check_value(self, value):\r\n        assert value != 42\r\n\r\n\r\nTestCase = State.TestCase\r\n```\r\ngives\r\n```bash\r\nFalsifying example:\r\n    state = State()\r\n    v1 = state.create_single_multiple()\r\n    state.check_value(value=v1)\r\n    state.teardown()\r\n```\r\nwhich will succeed because `v1` is `MultipleResults(values=(42,))` but I think it should be `42`, so somewhere in depths of generating failing example for `RuleBasedStateMachine` we need to handle special case with single-value `MultipleResults` so the output will be\r\n```bash\r\nFalsifying example:\r\n    state = State()\r\n    v1, = state.create_single_multiple()\r\n    # ^ note this comma\r\n    state.check_value(value=v1)\r\n    state.teardown()\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3236/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3236/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3203", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3203/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3203/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3203/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3203", "id": 1090814214, "node_id": "PR_kwDOAISI584wYgWA", "number": 3203, "title": "Fix LR-reused cache bug", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-12-30T00:50:22Z", "updated_at": "2021-12-31T02:08:10Z", "closed_at": "2021-12-31T02:07:08Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3203", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3203", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3203.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3203.patch", "merged_at": "2021-12-31T02:07:08Z"}, "body": "Fixes #3169.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3203/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3203/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3169", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3169/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3169/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3169/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3169", "id": 1067798343, "node_id": "I_kwDOAISI584_pU9H", "number": 3169, "title": "KeyError thrown when running tests", "user": {"login": "reiddraper", "id": 200355, "node_id": "MDQ6VXNlcjIwMDM1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/200355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reiddraper", "html_url": "https://github.com/reiddraper", "followers_url": "https://api.github.com/users/reiddraper/followers", "following_url": "https://api.github.com/users/reiddraper/following{/other_user}", "gists_url": "https://api.github.com/users/reiddraper/gists{/gist_id}", "starred_url": "https://api.github.com/users/reiddraper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reiddraper/subscriptions", "organizations_url": "https://api.github.com/users/reiddraper/orgs", "repos_url": "https://api.github.com/users/reiddraper/repos", "events_url": "https://api.github.com/users/reiddraper/events{/privacy}", "received_events_url": "https://api.github.com/users/reiddraper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-12-01T00:10:52Z", "updated_at": "2022-01-04T15:47:36Z", "closed_at": "2021-12-31T02:07:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Best I can tell, this exception is being thrown from `hypothesis` itself, and not from my code.\r\n\r\n```bash\r\n\u276f time poetry run ./compare.py                                                                                                            \u23ce\r\nYou can add @seed(292076761980949346109975285697619484774) to this test to reproduce this failure.\r\nTraceback (most recent call last):\r\n  File \"/Users/reiddraper/Desktop/desktop/array-binary-encoding/./compare.py\", line 72, in <module>\r\n    test_compare()\r\n  File \"/Users/reiddraper/Desktop/desktop/array-binary-encoding/./compare.py\", line 63, in test_compare\r\n    @given(pair_of_version_list_with_same_types())\r\n  File \"/Users/reiddraper/Library/Caches/pypoetry/virtualenvs/array-binary-encoding-BxhZ887V-py3.9/lib/python3.9/site-packages/hypothesis/core.py\", line 1195, in wrapped_test\r\n    raise the_error_hypothesis_found\r\n  File \"/Users/reiddraper/Library/Caches/pypoetry/virtualenvs/array-binary-encoding-BxhZ887V-py3.9/lib/python3.9/site-packages/hypothesis/core.py\", line 1164, in wrapped_test\r\n    state.run_engine()\r\n  File \"/Users/reiddraper/Library/Caches/pypoetry/virtualenvs/array-binary-encoding-BxhZ887V-py3.9/lib/python3.9/site-packages/hypothesis/core.py\", line 781, in run_engine\r\n    runner.run()\r\n  File \"/Users/reiddraper/Library/Caches/pypoetry/virtualenvs/array-binary-encoding-BxhZ887V-py3.9/lib/python3.9/site-packages/hypothesis/internal/conjecture/engine.py\", line 475, in run\r\n    self._run()\r\n  File \"/Users/reiddraper/Library/Caches/pypoetry/virtualenvs/array-binary-encoding-BxhZ887V-py3.9/lib/python3.9/site-packages/hypothesis/internal/conjecture/engine.py\", line 877, in _run\r\n    self.generate_new_examples()\r\n  File \"/Users/reiddraper/Library/Caches/pypoetry/virtualenvs/array-binary-encoding-BxhZ887V-py3.9/lib/python3.9/site-packages/hypothesis/internal/conjecture/engine.py\", line 611, in generate_new_examples\r\n    self.__data_cache.pin(zero_data.buffer)\r\n  File \"/Users/reiddraper/Library/Caches/pypoetry/virtualenvs/array-binary-encoding-BxhZ887V-py3.9/lib/python3.9/site-packages/hypothesis/internal/cache.py\", line 130, in pin\r\n    i = self.keys_to_indices[key]\r\nKeyError: b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\r\npoetry run ./compare.py  272.05s user 11.90s system 99% cpu 4:45.48 total\r\n(array-binary-encoding-BxhZ887V-py3.9)\r\n```\r\n\r\n## How to reproduce?\r\n\r\nStrangely, I'm having trouble reproducing this with the seed(s) printed, but I am able to consistency reproduce without a specific seed provided. Unfortunately it takes 4-5 minutes on my laptop to hit the exception.\r\n\r\n```bash\r\ngit clone git@github.com:reiddraper/array-binary-encoding.git\r\ncd array-binary-encoding\r\ngit checkout 0ece9478c4e5def1cc4c8d448fe0ee49e014be64\r\npoetry install\r\ntime poetry run ./compare.py # wait about 5 minutes\r\n```\r\n\r\nThe code is in <https://github.com/reiddraper/array-binary-encoding>, if you'd like to examine before running.\r\n\r\n---\r\n\r\n- `hypothesis`: `6.29.0`\r\n- `Python 3.9.7`", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3169/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3166", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3166/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3166/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3166/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3166", "id": 1065887710, "node_id": "I_kwDOAISI584_iCfe", "number": 3166, "title": "Stop generating flat indices in `xps.indices()`", "user": {"login": "honno", "id": 8246949, "node_id": "MDQ6VXNlcjgyNDY5NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/8246949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honno", "html_url": "https://github.com/honno", "followers_url": "https://api.github.com/users/honno/followers", "following_url": "https://api.github.com/users/honno/following{/other_user}", "gists_url": "https://api.github.com/users/honno/gists{/gist_id}", "starred_url": "https://api.github.com/users/honno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honno/subscriptions", "organizations_url": "https://api.github.com/users/honno/orgs", "repos_url": "https://api.github.com/users/honno/repos", "events_url": "https://api.github.com/users/honno/events{/privacy}", "received_events_url": "https://api.github.com/users/honno/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": {"login": "honno", "id": 8246949, "node_id": "MDQ6VXNlcjgyNDY5NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/8246949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honno", "html_url": "https://github.com/honno", "followers_url": "https://api.github.com/users/honno/followers", "following_url": "https://api.github.com/users/honno/following{/other_user}", "gists_url": "https://api.github.com/users/honno/gists{/gist_id}", "starred_url": "https://api.github.com/users/honno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honno/subscriptions", "organizations_url": "https://api.github.com/users/honno/orgs", "repos_url": "https://api.github.com/users/honno/repos", "events_url": "https://api.github.com/users/honno/events{/privacy}", "received_events_url": "https://api.github.com/users/honno/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "honno", "id": 8246949, "node_id": "MDQ6VXNlcjgyNDY5NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/8246949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honno", "html_url": "https://github.com/honno", "followers_url": "https://api.github.com/users/honno/followers", "following_url": "https://api.github.com/users/honno/following{/other_user}", "gists_url": "https://api.github.com/users/honno/gists{/gist_id}", "starred_url": "https://api.github.com/users/honno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honno/subscriptions", "organizations_url": "https://api.github.com/users/honno/orgs", "repos_url": "https://api.github.com/users/honno/repos", "events_url": "https://api.github.com/users/honno/events{/privacy}", "received_events_url": "https://api.github.com/users/honno/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2021-11-29T10:50:50Z", "updated_at": "2021-12-10T09:52:26Z", "closed_at": "2021-12-10T09:52:26Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The Array API was updated to remove flat indexing in https://github.com/data-apis/array-api/pull/272 i.e. providing a single-axis indexing expression to a higher-dimensional array. This means `xps.indices()` should be updated accordingly.\r\n\r\nAlready tried fixing this but got caught up with other things. Just writing an issue to keep track and jump-the-gun if others find this problem, but should get to soon.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3166/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3164", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3164/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3164/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3164/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3164", "id": 1065543776, "node_id": "PR_kwDOAISI584vGmSE", "number": 3164, "title": "Register `builds()` of recursive types with constraints", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-11-29T02:38:53Z", "updated_at": "2021-11-29T07:29:32Z", "closed_at": "2021-11-29T07:29:28Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3164", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3164", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3164.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3164.patch", "merged_at": "2021-11-29T07:29:28Z"}, "body": "Fixes #3026, cc @mristin.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3164/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3163", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3163/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3163/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3163/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3163", "id": 1065193612, "node_id": "PR_kwDOAISI584vFv2L", "number": 3163, "title": "Handle unions of builtin generics", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-11-28T05:35:11Z", "updated_at": "2021-11-28T06:13:58Z", "closed_at": "2021-11-28T06:13:57Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3163", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3163", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3163.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3163.patch", "merged_at": "2021-11-28T06:13:57Z"}, "body": "This turned out to be a much simpler fix that I feared.  Fixes #3080 for @SDesch.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3163/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3163/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3159", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3159/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3159/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3159/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3159", "id": 1059754844, "node_id": "PR_kwDOAISI584u1OeH", "number": 3159, "title": "Defer plugin imports", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-11-22T06:43:28Z", "updated_at": "2021-11-28T12:45:29Z", "closed_at": "2021-11-28T12:45:27Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3159", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3159", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3159.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3159.patch", "merged_at": "2021-11-28T12:45:27Z"}, "body": "Fixes #3140, by ensuring that running our pytest plugin doesn't lead to Hypothesis being imported (and consequently running all *our* entry points) unless Hypothesis is already in use, a Hypothesis-specific argument is passed on the command line or config file, etc.\r\n\r\nI think in practice this also fixes #3154, but @rsokl might correct me.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3159/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3159/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3152", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3152/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3152/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3152/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3152", "id": 1054756140, "node_id": "PR_kwDOAISI584ulefq", "number": 3152, "title": "Generate subnormal floats", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-11-16T11:16:42Z", "updated_at": "2021-11-18T07:31:49Z", "closed_at": "2021-11-18T07:31:47Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3152", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3152", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3152.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3152.patch", "merged_at": "2021-11-18T07:31:47Z"}, "body": "It turns out that we *can* generate subnormal values; it's just that we do so with negligible probability because they only occur for one-in-2^11 possible exponents. The obvious workaround is to just add a handful of special values to our `NASTY_FLOATS` table, and so here's a PR to do just that.  Fixes #2976.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3152/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3152/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3140", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3140/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3140/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3140/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3140", "id": 1047204684, "node_id": "I_kwDOAISI584-axNM", "number": 3140, "title": "Our pytest plugin loads all Hypothesis entry points, which may have undesirable side effects", "user": {"login": "hugovk", "id": 1324225, "node_id": "MDQ6VXNlcjEzMjQyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1324225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hugovk", "html_url": "https://github.com/hugovk", "followers_url": "https://api.github.com/users/hugovk/followers", "following_url": "https://api.github.com/users/hugovk/following{/other_user}", "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}", "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions", "organizations_url": "https://api.github.com/users/hugovk/orgs", "repos_url": "https://api.github.com/users/hugovk/repos", "events_url": "https://api.github.com/users/hugovk/events{/privacy}", "received_events_url": "https://api.github.com/users/hugovk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-11-08T09:20:05Z", "updated_at": "2021-11-28T13:53:16Z", "closed_at": "2021-11-28T12:45:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If I have Hypothesis installed and run pytest, it always creates `.hypothesis/unicode_data/13.0.0/charmap.json.gz`,  whether the project uses Hypothesis or not.\r\n\r\nThis then shows up as an untracked file, because the non-Hypotheis project has no reason to put `.hypothesis` in `.gitignore`.\r\n\r\nWould it be feasible to avoid creating the file, or creating it in a non-local directory?\r\n\r\n# Alternative\r\n\r\nIf this is non-trivial, I can easily enough put `.hypothesis` in a global `.gitignore` file.\r\n\r\n\r\n# Minimal demo\r\n\r\nPython 3.10\r\npytest \r\nhypothesis 6.24.2\r\n\r\nRunning pytest in an empty directory without hypothesis installed:\r\n\r\n```console\r\n$ mkdir /tmp/123\r\n$ cd /tmp/123\r\n$ pytest\r\n======================================================= test session starts ========================================================\r\nplatform darwin -- Python 3.10.0, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\r\nrootdir: /private/tmp/123\r\nplugins: respx-0.18.2, xdist-2.4.0, anyio-3.3.4, timeout-1.4.2, forked-1.3.0, lazy-fixture-0.6.3, cov-3.0.0\r\ncollected 0 items\r\n\r\n====================================================== no tests ran in 0.02s =======================================================\r\n$ l\r\ntotal 0\r\ndrwxr-xr-x   3 hugo  wheel    96B  8 Nov 10:53 .\r\ndrwxrwxrwt  43 root  wheel   1.3K  8 Nov 10:53 ..\r\ndrwxr-xr-x   6 hugo  wheel   192B  8 Nov 10:53 .pytest_cache\r\n```\r\n\r\nInstalling hypothesis and running pytest:\r\n\r\n```console\r\n$ python -m pip install hypothesis\r\nCollecting hypothesis\r\n  Using cached hypothesis-6.24.2-py3-none-any.whl (381 kB)\r\nRequirement already satisfied: sortedcontainers<3.0.0,>=2.1.0 in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (from hypothesis) (2.4.0)\r\nRequirement already satisfied: attrs>=19.2.0 in /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages (from hypothesis) (21.2.0)\r\nInstalling collected packages: hypothesis\r\nSuccessfully installed hypothesis-6.24.2\r\n$ l\r\ntotal 0\r\ndrwxr-xr-x   3 hugo  wheel    96B  8 Nov 10:53 .\r\ndrwxrwxrwt  43 root  wheel   1.3K  8 Nov 10:55 ..\r\ndrwxr-xr-x   6 hugo  wheel   192B  8 Nov 10:53 .pytest_cache\r\n$ pytest\r\n======================================================= test session starts ========================================================\r\nplatform darwin -- Python 3.10.0, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\r\nrootdir: /private/tmp/123\r\nplugins: respx-0.18.2, hypothesis-6.24.2, xdist-2.4.0, anyio-3.3.4, timeout-1.4.2, forked-1.3.0, lazy-fixture-0.6.3, cov-3.0.0\r\ncollected 0 items\r\n\r\n====================================================== no tests ran in 0.03s =======================================================\r\n$ l\r\ntotal 0\r\ndrwxr-xr-x   4 hugo  wheel   128B  8 Nov 10:55 .\r\ndrwxrwxrwt  43 root  wheel   1.3K  8 Nov 10:55 ..\r\ndrwxr-xr-x   3 hugo  wheel    96B  8 Nov 10:55 .hypothesis\r\ndrwxr-xr-x   6 hugo  wheel   192B  8 Nov 10:53 .pytest_cache\r\n$ l .hypothesis/unicode_data/13.0.0/\r\ntotal 48\r\ndrwxr-xr-x  3 hugo  wheel    96B  8 Nov 10:55 .\r\ndrwxr-xr-x  3 hugo  wheel    96B  8 Nov 10:55 ..\r\n-rw-------  1 hugo  wheel    20K  8 Nov 10:55 charmap.json.gz\r\n```\r\n\r\n# Bisecting\r\n\r\nBisecting releases, this didn't happen with 5.48.0 and started in 5.49.0.\r\n\r\n* https://github.com/HypothesisWorks/hypothesis/compare/hypothesis-python-5.48.0...hypothesis-python-5.49.0\r\n\r\nBisecting commits, this started in 763e545d7958d8d4ab4d55b71cf3f2c7f6e2ea07 from PR https://github.com/HypothesisWorks/hypothesis/pull/2738.\r\n\r\n(Due to the frequency of Hypothesis releases, it was really easy to bisect this!)\r\n\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3140/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3140/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3092", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3092/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3092/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3092/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3092", "id": 993877043, "node_id": "MDU6SXNzdWU5OTM4NzcwNDM=", "number": 3092, "title": "`AssertionError` in `floats(max_value=0, exclude_max=True)` when \"denormals-are-zero\" processor flag is set", "user": {"login": "flyte", "id": 1153496, "node_id": "MDQ6VXNlcjExNTM0OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1153496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flyte", "html_url": "https://github.com/flyte", "followers_url": "https://api.github.com/users/flyte/followers", "following_url": "https://api.github.com/users/flyte/following{/other_user}", "gists_url": "https://api.github.com/users/flyte/gists{/gist_id}", "starred_url": "https://api.github.com/users/flyte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flyte/subscriptions", "organizations_url": "https://api.github.com/users/flyte/orgs", "repos_url": "https://api.github.com/users/flyte/repos", "events_url": "https://api.github.com/users/flyte/events{/privacy}", "received_events_url": "https://api.github.com/users/flyte/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2021-09-11T16:21:47Z", "updated_at": "2022-02-26T10:07:10Z", "closed_at": "2022-02-26T10:07:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "From the normal Python shell and ipython, this works:\r\n\r\n```python\r\n$ ipython\r\nPython 3.8.0 (default, Feb 25 2021, 22:10:10) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.27.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: from hypothesis import strategies as st\r\n\r\nIn [2]: st.floats(max_value=0, exclude_max=True).example()\r\nOut[2]: -5e-324\r\n\r\n```\r\n\r\nBut from `./manage.py shell` and while actually running Django normally, it fails:\r\n\r\n```python\r\n$ ./manage.py shell\r\nPython 3.8.0 (default, Feb 25 2021, 22:10:10) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.27.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: from hypothesis import strategies as st\r\n\r\nIn [2]: st.floats(max_value=0, exclude_max=True).example()\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-2-324381a1006a> in <module>\r\n----> 1 st.floats(max_value=0, exclude_max=True).example()\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/strategies.py in example(self)\r\n    330 \r\n    331         examples: List[Ex] = []\r\n--> 332         example_generating_inner_function()\r\n    333         return random_choice(examples)\r\n    334 \r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/strategies.py in example_generating_inner_function()\r\n    318         # tracebacks, and we want users to know that they can ignore it.\r\n    319         @given(self)\r\n--> 320         @settings(\r\n    321             database=None,\r\n    322             max_examples=10,\r\n\r\n    [... skipping hidden 1 frame]\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/core.py in process_arguments_to_given(wrapped_test, arguments, kwargs, given_kwargs, argspec)\r\n    447         search_strategy = WithRunner(search_strategy, selfy)\r\n    448 \r\n--> 449     search_strategy.validate()\r\n    450 \r\n    451     return arguments, kwargs, test_runner, search_strategy\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/strategies.py in validate(self)\r\n    399         try:\r\n    400             self.validate_called = True\r\n--> 401             self.do_validate()\r\n    402             self.is_empty\r\n    403             self.has_reusable_values\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/collections.py in do_validate(self)\r\n     44     def do_validate(self):\r\n     45         for s in self.element_strategies:\r\n---> 46             s.validate()\r\n     47 \r\n     48     def calc_label(self):\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/strategies.py in validate(self)\r\n    399         try:\r\n    400             self.validate_called = True\r\n--> 401             self.do_validate()\r\n    402             self.is_empty\r\n    403             self.has_reusable_values\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/strategies.py in do_validate(self)\r\n    799 \r\n    800     def do_validate(self):\r\n--> 801         self.mapped_strategy.validate()\r\n    802 \r\n    803     def pack(self, x):\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/strategies.py in validate(self)\r\n    399         try:\r\n    400             self.validate_called = True\r\n--> 401             self.do_validate()\r\n    402             self.is_empty\r\n    403             self.has_reusable_values\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/lazy.py in do_validate(self)\r\n    133         w = self.wrapped_strategy\r\n    134         assert isinstance(w, SearchStrategy), f\"{self!r} returned non-strategy {w!r}\"\r\n--> 135         w.validate()\r\n    136 \r\n    137     def __repr__(self):\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/strategies.py in validate(self)\r\n    399         try:\r\n    400             self.validate_called = True\r\n--> 401             self.do_validate()\r\n    402             self.is_empty\r\n    403             self.has_reusable_values\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/strategies.py in do_validate(self)\r\n    799 \r\n    800     def do_validate(self):\r\n--> 801         self.mapped_strategy.validate()\r\n    802 \r\n    803     def pack(self, x):\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/strategies.py in validate(self)\r\n    399         try:\r\n    400             self.validate_called = True\r\n--> 401             self.do_validate()\r\n    402             self.is_empty\r\n    403             self.has_reusable_values\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/collections.py in do_validate(self)\r\n     44     def do_validate(self):\r\n     45         for s in self.element_strategies:\r\n---> 46             s.validate()\r\n     47 \r\n     48     def calc_label(self):\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/strategies.py in validate(self)\r\n    399         try:\r\n    400             self.validate_called = True\r\n--> 401             self.do_validate()\r\n    402             self.is_empty\r\n    403             self.has_reusable_values\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/lazy.py in do_validate(self)\r\n    131 \r\n    132     def do_validate(self):\r\n--> 133         w = self.wrapped_strategy\r\n    134         assert isinstance(w, SearchStrategy), f\"{self!r} returned non-strategy {w!r}\"\r\n    135         w.validate()\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/lazy.py in wrapped_strategy(self)\r\n    110             }\r\n    111 \r\n--> 112             base = self.function(*self.__args, **self.__kwargs)\r\n    113             if unwrapped_args == self.__args and unwrapped_kwargs == self.__kwargs:\r\n    114                 self.__wrapped_strategy = base\r\n\r\n~/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/strategies/_internal/numbers.py in floats(min_value, max_value, allow_nan, allow_infinity, width, exclude_min, exclude_max)\r\n    372             assert is_negative(max_value) and not is_negative(max_arg)\r\n    373             max_value = next_down(max_value, width)\r\n--> 374         assert max_value < max_arg  # type: ignore\r\n    375 \r\n    376     if min_value == -math.inf:\r\n\r\nAssertionError: \r\n\r\n```\r\n\r\nI'm definitely using the same installation of hypothesis from the same virtualenv:\r\n\r\n```python\r\n$ ipython\r\nPython 3.8.0 (default, Feb 25 2021, 22:10:10) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.27.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: from hypothesis import version\r\n\r\nIn [2]: version\r\nOut[2]: <module 'hypothesis.version' from '/home/flyte/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/version.py'>\r\n\r\nIn [3]: version.__version__\r\nOut[3]: '6.19.0'\r\n```\r\n\r\n```python\r\n$ ./manage.py shell\r\nPython 3.8.0 (default, Feb 25 2021, 22:10:10) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.27.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: from hypothesis import version\r\n\r\nIn [2]: version\r\nOut[2]: <module 'hypothesis.version' from '/home/flyte/.local/share/virtualenvs/myproject-tDErfRdz/lib/python3.8/site-packages/hypothesis/version.py'>\r\n\r\nIn [3]: version.__version__\r\nOut[3]: '6.19.0'\r\n```\r\n\r\nI'm using Django==3.1.13", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3092/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3092/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3088", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3088/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3088/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3088/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3088", "id": 991973538, "node_id": "MDExOlB1bGxSZXF1ZXN0NzMwMzY2NjEw", "number": 3088, "title": "Fix for inline `given()` on bound methods", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-09-09T08:59:19Z", "updated_at": "2021-09-10T04:04:59Z", "closed_at": "2021-09-10T04:04:07Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3088", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3088", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3088.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3088.patch", "merged_at": "2021-09-10T04:04:07Z"}, "body": "Fixes #961.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3088/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3088/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3087", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3087/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3087/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3087/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3087", "id": 991702508, "node_id": "MDExOlB1bGxSZXF1ZXN0NzMwMTI5NTU1", "number": 3087, "title": "Fix off-by-one error in `st.slices()`, and allow `step=None`", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-09-09T02:54:14Z", "updated_at": "2021-09-09T03:28:47Z", "closed_at": "2021-09-09T03:28:46Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3087", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3087", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3087.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3087.patch", "merged_at": "2021-09-09T03:28:46Z"}, "body": "The motivation here is that we discovered in  https://github.com/HypothesisWorks/hypothesis/pull/3065#issuecomment-915346847 that the `.start` index could be *equal* to the `size` argument, which isn't a valid index.  Python and Numpy collections are fine with this - an out-of-range slice just selects no elements - but it's undefined behaviour in the Array API standard and therefore an `IndexError` in `numpy.array_api`.\r\n\r\nAnd then while poking at `slices()` I made it generate a wider variety of `step` arguments too.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3087/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3087/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3080", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3080/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3080/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3080/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3080", "id": 987252311, "node_id": "MDU6SXNzdWU5ODcyNTIzMTE=", "number": 3080, "title": "`from_type` raises TypeError for `Union` of builtin generic types", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-09-02T23:32:39Z", "updated_at": "2021-11-28T06:13:57Z", "closed_at": "2021-11-28T06:13:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "On the current version of hypothesis (6.17.4) on python 3.9.2 \r\n\r\n```python\r\nst.from_type(Union[list[str], str]).example()\r\n```\r\n\r\nraises `TypeError(\"issubclass() arg 1 must be a class\")` because `list[int]` is an instance of `types.GenericAlias` and not an instance of `type`.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3080/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3080/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3063", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3063/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3063/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3063/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3063", "id": 973619608, "node_id": "MDExOlB1bGxSZXF1ZXN0NzE1MDM5NTU4", "number": 3063, "title": "Adds a failing test for #3060", "user": {"login": "sobolevn", "id": 4660275, "node_id": "MDQ6VXNlcjQ2NjAyNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sobolevn", "html_url": "https://github.com/sobolevn", "followers_url": "https://api.github.com/users/sobolevn/followers", "following_url": "https://api.github.com/users/sobolevn/following{/other_user}", "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions", "organizations_url": "https://api.github.com/users/sobolevn/orgs", "repos_url": "https://api.github.com/users/sobolevn/repos", "events_url": "https://api.github.com/users/sobolevn/events{/privacy}", "received_events_url": "https://api.github.com/users/sobolevn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2021-08-18T12:36:23Z", "updated_at": "2021-08-20T22:42:27Z", "closed_at": "2021-08-20T01:43:44Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/3063", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/3063", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/3063.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/3063.patch", "merged_at": "2021-08-20T01:43:44Z"}, "body": "It is surely not the easiest reproduction, but I've tried to simplify it as much as I could (`returns` is the most complicated project in the respect of type-annotations that I am aware of).\r\n\r\nHere's the root of the problem:\r\n- When I put `print(thing, thing_args, thing_orig_bases)` in `try_issubclass`, this is the result: `<class 'returns.interfaces.mappable.MappableN'> None (typing.Generic[~_FirstType, ~_SecondType, ~_ThirdType], returns.primitives.laws.Lawful[ForwardRef('MappableN[_FirstType, _SecondType, _ThirdType]')])`\r\n- Then, it tries to resolve `returns.primitives.laws.Lawful[ForwardRef('MappableN[_FirstType, _SecondType, _ThirdType]')`\r\n- But, its arg is a string, not a `TypeVar`\r\n- Everything collapses \ud83d\udca5 \r\n\r\nFixes #3060.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3063/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3060", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3060/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3060/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3060/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3060", "id": 972777268, "node_id": "MDU6SXNzdWU5NzI3NzcyNjg=", "number": 3060, "title": "`hypothesis@6.14.8` stopped working for `dry-python/returns`", "user": {"login": "sobolevn", "id": 4660275, "node_id": "MDQ6VXNlcjQ2NjAyNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sobolevn", "html_url": "https://github.com/sobolevn", "followers_url": "https://api.github.com/users/sobolevn/followers", "following_url": "https://api.github.com/users/sobolevn/following{/other_user}", "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions", "organizations_url": "https://api.github.com/users/sobolevn/orgs", "repos_url": "https://api.github.com/users/sobolevn/repos", "events_url": "https://api.github.com/users/sobolevn/events{/privacy}", "received_events_url": "https://api.github.com/users/sobolevn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-08-17T14:53:12Z", "updated_at": "2021-08-20T01:43:44Z", "closed_at": "2021-08-20T01:43:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Dependabot PR, that updates version `6.14.7` to `6.14.8`, revealed that hypothesis has stopped working for us: https://github.com/dry-python/returns/pull/1028/checks?check_run_id=3351483158\r\n\r\nPrevious version did work fine: https://github.com/dry-python/returns/commit/50f06330c00c5c8a5538b192bb73bed109a052a0\r\n\r\nLogs:\r\n```\r\nYou can reproduce this example by temporarily adding @reproduce_failure('6.14.8', b'AA==') as a decorator on your test case\r\n_______________________ test_pair_altablen_identity_law ________________________\r\n\r\n    def factory(source: st.DataObject) -> None:\r\n>       with type_vars():\r\n\r\nreturns/contrib/hypothesis/laws.py:204: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n.venv/lib/python3.9/site-packages/hypothesis/core.py:624: in execute_once\r\n    result = self.test_runner(data, run)\r\n.venv/lib/python3.9/site-packages/hypothesis/executors.py:52: in default_new_style_executor\r\n    return function(data)\r\n.venv/lib/python3.9/site-packages/hypothesis/core.py:620: in run\r\n    return test(*args, **kwargs)\r\nreturns/contrib/hypothesis/laws.py:204: in factory\r\n    with type_vars():\r\n.venv/lib/python3.9/site-packages/hypothesis/core.py:562: in test\r\n    result = self.test(*args, **kwargs)\r\nreturns/contrib/hypothesis/laws.py:207: in factory\r\n    source.draw(st.builds(law.definition))\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/core.py:1639: in draw\r\n    result = self.conjecture_data.draw(strategy)\r\n.venv/lib/python3.9/site-packages/hypothesis/internal/conjecture/data.py:871: in draw\r\n    strategy.validate()\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/strategies.py:400: in validate\r\n    self.do_validate()\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/lazy.py:135: in do_validate\r\n    w.validate()\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/core.py:792: in validate\r\n    fixed_dictionaries(self.kwargs).validate()\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/strategies.py:400: in validate\r\n    self.do_validate()\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/lazy.py:135: in do_validate\r\n    w.validate()\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/strategies.py:400: in validate\r\n    self.do_validate()\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/strategies.py:800: in do_validate\r\n    self.mapped_strategy.validate()\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/strategies.py:400: in validate\r\n    self.do_validate()\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/collections.py:46: in do_validate\r\n    s.validate()\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/strategies.py:400: in validate\r\n    self.do_validate()\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/lazy.py:135: in do_validate\r\n    w.validate()\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/strategies.py:401: in validate\r\n    self.is_empty\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/strategies.py:135: in accept\r\n    recur(self)\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/strategies.py:131: in recur\r\n    mapping[strat] = getattr(strat, calculation)(recur)\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/deferred.py:70: in calc_is_empty\r\n    return recur(self.wrapped_strategy)\r\n            return st.from_type(annotated_type)\r\n        # Now, confirm that we're dealing with a generic type as we expected\r\n        if sys.version_info[:2] < (3, 9) and not isinstance(\r\n            thing, typing_root_type\r\n        ):  # pragma: no cover\r\n            raise ResolutionFailed(f\"Cannot resolve {thing} to a strategy\")\r\n    \r\n        # Some \"generic\" classes are not generic *in* anything - for example both\r\n        # Hashable and Sized have `__args__ == ()` on Python 3.7 or later.\r\n        # (In 3.6 they're just aliases for the collections.abc classes)\r\n        origin = getattr(thing, \"__origin__\", thing)\r\n        if (\r\n            typing.Hashable is not collections.abc.Hashable\r\n            and origin in vars(collections.abc).values()\r\n            and len(getattr(thing, \"__args__\", None) or []) == 0\r\n        ):\r\n            return st.from_type(origin)\r\n    \r\n        # Parametrised generic types have their __origin__ attribute set to the\r\n        # un-parametrised version, which we need to use in the subclass checks.\r\n        # e.g.:     typing.List[int].__origin__ == typing.List\r\n        mapping = {\r\n            k: v\r\n            for k, v in _global_type_lookup.items()\r\n            if is_generic_type(k) and try_issubclass(k, thing)\r\n        }\r\n        if typing.Dict in mapping or typing.Set in mapping:\r\n            # ItemsView can cause test_lookup.py::test_specialised_collection_types\r\n            # to fail, due to weird isinstance behaviour around the elements.\r\n            mapping.pop(typing.ItemsView, None)\r\n            if sys.version_info[:2] == (3, 6):  # pragma: no cover\r\n                # `isinstance(dict().values(), Container) is False` on py36 only -_-\r\n                mapping.pop(typing.ValuesView, None)\r\n        if typing.Deque in mapping and len(mapping) > 1:\r\n            # Resolving generic sequences to include a deque is more trouble for e.g.\r\n            # the ghostwriter than it's worth, via undefined names in the repr.\r\n            mapping.pop(typing.Deque)\r\n        if len(mapping) > 1:\r\n            # issubclass treats bytestring as a kind of sequence, which it is,\r\n            # but treating it as such breaks everything else when it is presumed\r\n            # to be a generic sequence or container that could hold any item.\r\n            # Except for sequences of integers, or unions which include integer!\r\n            # See https://github.com/HypothesisWorks/hypothesis/issues/2257\r\n            #\r\n            # This block drops ByteString from the types that can be generated\r\n            # if there is more than one allowed type, and the element type is\r\n            # not either `int` or a Union with `int` as one of its elements.\r\n            elem_type = (getattr(thing, \"__args__\", None) or [\"not int\"])[0]\r\n            if getattr(elem_type, \"__origin__\", None) is typing.Union:\r\n                union_elems = elem_type.__args__\r\nelse:\r\n                union_elems = ()\r\n            if not any(\r\n                isinstance(T, type) and issubclass(int, T)\r\n                for T in list(union_elems) + [elem_type]\r\n            ):\r\n                mapping.pop(typing.ByteString, None)\r\n        elif (\r\n            (not mapping)\r\n            and isinstance(thing, ForwardRef)\r\n            and thing.__forward_arg__ in vars(builtins)\r\n        ):\r\n            return st.from_type(getattr(builtins, thing.__forward_arg__))\r\n        strategies = [\r\n            v if isinstance(v, st.SearchStrategy) else v(thing)\r\n            for k, v in mapping.items()\r\n            if sum(try_issubclass(k, T) for T in mapping) == 1\r\n        ]\r\n        empty = \", \".join(repr(s) for s in strategies if s.is_empty)\r\n        if empty or not strategies:\r\n>           raise ResolutionFailed(\r\n                f\"Could not resolve {empty or thing} to a strategy; \"\r\n                \"consider using register_type_strategy\"\r\n            )\r\nE           hypothesis.errors.ResolutionFailed: Could not resolve returns.interfaces.altable.AltableN[~_FirstType, ~_SecondType, ~_ThirdType] to a strategy; consider using register_type_strategy\r\n\r\n.venv/lib/python3.9/site-packages/hypothesis/strategies/_internal/types.py:334: ResolutionFailed\r\n---------------------------------- Hypothesis ----------------------------------\r\nFalsifying example: factory(\r\n    source=data(...),\r\n)\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3060/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3060/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3050", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3050/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3050/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3050/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3050", "id": 960979752, "node_id": "MDU6SXNzdWU5NjA5Nzk3NTI=", "number": 3050, "title": "Ghostwriter error on attrs class", "user": {"login": "gmacon", "id": 238853, "node_id": "MDQ6VXNlcjIzODg1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/238853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmacon", "html_url": "https://github.com/gmacon", "followers_url": "https://api.github.com/users/gmacon/followers", "following_url": "https://api.github.com/users/gmacon/following{/other_user}", "gists_url": "https://api.github.com/users/gmacon/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmacon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmacon/subscriptions", "organizations_url": "https://api.github.com/users/gmacon/orgs", "repos_url": "https://api.github.com/users/gmacon/repos", "events_url": "https://api.github.com/users/gmacon/events{/privacy}", "received_events_url": "https://api.github.com/users/gmacon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-08-04T20:11:33Z", "updated_at": "2021-08-14T05:35:26Z", "closed_at": "2021-08-14T05:35:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While playing around with the ghostwriter today, I got an exception like this one running it against some internal code:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/tmp/repro/venv/bin/hypothesis\", line 8, in <module>\r\n    sys.exit(main())\r\n  File \"/tmp/repro/venv/lib/python3.9/site-packages/click/core.py\", line 1137, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/tmp/repro/venv/lib/python3.9/site-packages/click/core.py\", line 1062, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/tmp/repro/venv/lib/python3.9/site-packages/click/core.py\", line 1668, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"/tmp/repro/venv/lib/python3.9/site-packages/click/core.py\", line 1404, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/tmp/repro/venv/lib/python3.9/site-packages/click/core.py\", line 763, in invoke\r\n    return __callback(*args, **kwargs)\r\n  File \"/tmp/repro/venv/lib/python3.9/site-packages/hypothesis/extra/cli.py\", line 242, in write\r\n    code = getattr(ghostwriter, writer)(*func, except_=except_ or (), style=style)\r\n  File \"/tmp/repro/venv/lib/python3.9/site-packages/hypothesis/extra/ghostwriter.py\", line 882, in magic\r\n    make_(\r\n  File \"/tmp/repro/venv/lib/python3.9/site-packages/hypothesis/extra/ghostwriter.py\", line 802, in make_\r\n    imp, body = how(*args, **kwargs, except_=except_, style=style)\r\n  File \"/tmp/repro/venv/lib/python3.9/site-packages/hypothesis/extra/ghostwriter.py\", line 626, in _make_test_body\r\n    given_strategies = given_strategies or _get_strategies(\r\n  File \"/tmp/repro/venv/lib/python3.9/site-packages/hypothesis/extra/ghostwriter.py\", line 409, in _get_strategies\r\n    if strat.args:\r\nAttributeError: 'MappedSearchStrategy' object has no attribute 'args'\r\n```\r\n\r\nI reduced the input to trigger this exception down to\r\n\r\n```python\r\nimport attr\r\n\r\n@attr.s()\r\nclass Foo:\r\n    foo: str = attr.ib()\r\n```\r\n\r\nI saw this with cPython 3.9.6, attrs 21.2.0, and hypothesis master branch at hypothesis-python-6.14.5-5-g9d4da6c2f. ", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3050/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3050/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3028", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3028/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3028/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3028/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3028", "id": 938274825, "node_id": "MDU6SXNzdWU5MzgyNzQ4MjU=", "number": 3028, "title": "Getting a \"Flaky: Inconsistent data generation! Data generation behaved differently...  error\"", "user": {"login": "mattip", "id": 823911, "node_id": "MDQ6VXNlcjgyMzkxMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/823911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattip", "html_url": "https://github.com/mattip", "followers_url": "https://api.github.com/users/mattip/followers", "following_url": "https://api.github.com/users/mattip/following{/other_user}", "gists_url": "https://api.github.com/users/mattip/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattip/subscriptions", "organizations_url": "https://api.github.com/users/mattip/orgs", "repos_url": "https://api.github.com/users/mattip/repos", "events_url": "https://api.github.com/users/mattip/events{/privacy}", "received_events_url": "https://api.github.com/users/mattip/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2021-07-06T21:29:53Z", "updated_at": "2021-11-26T21:58:13Z", "closed_at": "2021-11-26T06:33:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "In trying to get pypy + windows64 + numpy to pass tests on the conda feedstock.\r\nhttps://github.com/conda-forge/numpy-feedstock/pull/238 we consistently see this error. It starts at the ` numpy\\core\\tests\\test_numeric.py::TestClip::test_clip_property` [test](https://github.com/numpy/numpy/blob/main/numpy/core/tests/test_numeric.py#L2337) with the decorator\r\n```\r\n    @given(data=st.data(), shape=hynp.array_shapes())\r\n    def test_clip_property(self, data, shape):\r\n```\r\n\r\n[here](https://dev.azure.com/conda-forge/feedstock-builds/_build/results?buildId=347740&view=logs&j=e5cdccbf-4751-5a24-7406-185c9d30d021&t=66e4a587-a723-53e9-873c-6c9a2c5971ea&l=20928) is the end of the stack trace in a CI run.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3028/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3026", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3026/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3026/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3026/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3026", "id": 937756630, "node_id": "MDU6SXNzdWU5Mzc3NTY2MzA=", "number": 3026, "title": "Issue with recursive build strategy?", "user": {"login": "mristin", "id": 5072771, "node_id": "MDQ6VXNlcjUwNzI3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5072771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mristin", "html_url": "https://github.com/mristin", "followers_url": "https://api.github.com/users/mristin/followers", "following_url": "https://api.github.com/users/mristin/following{/other_user}", "gists_url": "https://api.github.com/users/mristin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mristin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mristin/subscriptions", "organizations_url": "https://api.github.com/users/mristin/orgs", "repos_url": "https://api.github.com/users/mristin/repos", "events_url": "https://api.github.com/users/mristin/events{/privacy}", "received_events_url": "https://api.github.com/users/mristin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2021-07-06T10:37:33Z", "updated_at": "2021-11-29T07:29:28Z", "closed_at": "2021-11-29T07:29:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\nI observed that `hypothesis.strategy.builds` does not work on the recursive structures. Here is a short program, where `SomeClass` represents a data structure whose property is also of type `SomeClass` (*e.g.*, a node in a linked list):\r\n\r\n```python\r\nfrom typing import Optional\r\n\r\nimport hypothesis.strategies as st\r\n\r\n\r\nclass SomeClass:\r\n    value: int\r\n    next_node: Optional['SomeClass']\r\n\r\n    def __init__(self, value: int, next_node: Optional['SomeClass']) -> None:\r\n        assert value > 0\r\n        self.value = value\r\n        self.next_node = next_node\r\n\r\n\r\ndef main() -> None:\r\n    \"\"\"Execute the main routine.\"\"\"\r\n\r\n    build_strategy_for_some_class = st.fixed_dictionaries(\r\n        {\r\n            'value': st.integers(min_value=1),\r\n            'next_node': st.one_of(st.none(), st.builds(SomeClass))\r\n        }\r\n    ).map(lambda kwargs: SomeClass(**kwargs))\r\n\r\n    st.register_type_strategy(SomeClass, build_strategy_for_some_class)\r\n\r\n    strategy = st.from_type(SomeClass)\r\n    print(f\"strategy is {strategy!r}\")\r\n    # strategy is fixed_dictionaries({'next_node': one_of(none(), builds(SomeClass)),\r\n    #  'value': integers(min_value=1)}).map(lambda kwargs: <unknown>)\r\n\r\n    example = strategy.example()\r\n    # Traceback\r\n    #     ...\r\n    #     assert value > 0\r\n    # AssertionError\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nWhile the strategy has been correctly registered (see the print statement), the `builds` strategy does not work as I'd expect it. The strategy `builds` infers the arguments for `SomeClass` directly from its `__init__` instead of checking whether the type has been registered.\r\n\r\nIf I change:\r\n```python\r\n'next_node': st.one_of(st.none(), st.builds(SomeClass))\r\n```\r\nto\r\n\r\n```python\r\n'next_node': st.one_of(st.none(), st.from_type(SomeClass))\r\n```\r\n\r\nI get the same assertion error.\r\n\r\nIs this a bug or just a misunderstanding on my part?\r\n\r\nSome related issues and articles:\r\n\r\n* This issue is not related to #3016 , which concerns the type annotations.\r\n* The article https://hypothesis.works/articles/recursive-data/ talks about generating recursive built-in structures. We need to use a non-built-in class `SomeClass` here.\r\n* The article in the documentation https://hypothesis.readthedocs.io/en/latest/data.html#recursive-data talks about pitfalls when generating recursive data, but the issue here is that `hypothesis.strategy.builds(.)` disregard the arguments. \r\n\r\n  In the current example, the focus is on the recursivity in terms of classes (a class has a property of the same class, not in terms of actual data structures). While `any_of` strategy might result in an endless linked list, it is actually not probable (the length of the linked list follows geometric distribution, if I am not mistaken).\r\n\r\n*(Edit: added proper syntax highlighting)*", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3026/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3016", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3016/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3016/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3016/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/3016", "id": 918175961, "node_id": "MDU6SXNzdWU5MTgxNzU5NjE=", "number": 3016, "title": "Issues with recursive data classes", "user": {"login": "hgranthorner", "id": 37941012, "node_id": "MDQ6VXNlcjM3OTQxMDEy", "avatar_url": "https://avatars.githubusercontent.com/u/37941012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgranthorner", "html_url": "https://github.com/hgranthorner", "followers_url": "https://api.github.com/users/hgranthorner/followers", "following_url": "https://api.github.com/users/hgranthorner/following{/other_user}", "gists_url": "https://api.github.com/users/hgranthorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgranthorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgranthorner/subscriptions", "organizations_url": "https://api.github.com/users/hgranthorner/orgs", "repos_url": "https://api.github.com/users/hgranthorner/repos", "events_url": "https://api.github.com/users/hgranthorner/events{/privacy}", "received_events_url": "https://api.github.com/users/hgranthorner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2021-06-11T03:35:52Z", "updated_at": "2021-08-07T23:37:39Z", "closed_at": "2021-08-07T23:37:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the following:\r\n```python\r\nfrom dataclasses import dataclass\r\nfrom hypothesis import given, strategies as st\r\n\r\n@dataclass\r\nclass User():\r\n  id: int\r\n  following: list['User']  # works with typing.List\r\n\r\n@given(st.builds(User))\r\ndef test_user(u):\r\n    pass\r\n```\r\n\r\nI always receive the error `hypothesis.errors.InvalidArgument: thing=User must be a type`. I have tried various permutations of using `strategies.recursive` and `strategies.deferred` to define custom strategies and pass them to `@given`, but have been unable to get this to work. I'm not sure if this is a bug or an issue with the documentation (perhaps it requires more recursive examples).", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/3016/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2983", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2983/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2983/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2983/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2983", "id": 903619152, "node_id": "MDExOlB1bGxSZXF1ZXN0NjU0ODU1MTcy", "number": 2983, "title": "`from_regex(\"\", fullmatch=True)` should only produce empty strings", "user": {"login": "Zalathar", "id": 20290842, "node_id": "MDQ6VXNlcjIwMjkwODQy", "avatar_url": "https://avatars.githubusercontent.com/u/20290842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zalathar", "html_url": "https://github.com/Zalathar", "followers_url": "https://api.github.com/users/Zalathar/followers", "following_url": "https://api.github.com/users/Zalathar/following{/other_user}", "gists_url": "https://api.github.com/users/Zalathar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zalathar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zalathar/subscriptions", "organizations_url": "https://api.github.com/users/Zalathar/orgs", "repos_url": "https://api.github.com/users/Zalathar/repos", "events_url": "https://api.github.com/users/Zalathar/events{/privacy}", "received_events_url": "https://api.github.com/users/Zalathar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-05-27T11:59:32Z", "updated_at": "2021-05-27T12:48:05Z", "closed_at": "2021-05-27T12:45:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2983", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2983", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2983.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2983.patch", "merged_at": "2021-05-27T12:45:43Z"}, "body": "Fixes #2982.\r\n\r\nMost of `regex_strategy` is dedicated to figuring out how to apply leading/trailing padding, which is not relevant to `fullmatch` strategies. So it ended up being much cleaner to handle the full-match case as an early-exit that delegates to `base_regex_strategy`.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2983/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2983/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2982", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2982/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2982/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2982/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2982", "id": 902480301, "node_id": "MDU6SXNzdWU5MDI0ODAzMDE=", "number": 2982, "title": "`st.from_regex(\"\", fullmatch=True)` should not generate nonempty strings", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-05-26T14:29:53Z", "updated_at": "2021-05-27T12:45:43Z", "closed_at": "2021-05-27T12:45:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```python\r\n@given(st.from_regex(\"\", fullmatch=True))\r\ndef test(r):\r\n    assert re.fullmatch(\"\", r)\r\n```\r\n\r\nis currently broken, because we have a fast path for the empty pattern which does not check for `fullmatch`:\r\n\r\nhttps://github.com/HypothesisWorks/hypothesis/blob/d4aea1f8ae920ab499e1181a61cb2b798afd5fb0/hypothesis-python/src/hypothesis/strategies/_internal/regex.py#L221-L233\r\n\r\nThanks to @doni69 for reporting this as part of a student project at ANU :slightly_smiling_face: ", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2982/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2980", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2980/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2980/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2980/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2980", "id": 902202739, "node_id": "MDExOlB1bGxSZXF1ZXN0NjUzNTk0NTcw", "number": 2980, "title": "Bounded `integers` should shrink towards positive values", "user": {"login": "Zalathar", "id": 20290842, "node_id": "MDQ6VXNlcjIwMjkwODQy", "avatar_url": "https://avatars.githubusercontent.com/u/20290842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zalathar", "html_url": "https://github.com/Zalathar", "followers_url": "https://api.github.com/users/Zalathar/followers", "following_url": "https://api.github.com/users/Zalathar/following{/other_user}", "gists_url": "https://api.github.com/users/Zalathar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zalathar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zalathar/subscriptions", "organizations_url": "https://api.github.com/users/Zalathar/orgs", "repos_url": "https://api.github.com/users/Zalathar/repos", "events_url": "https://api.github.com/users/Zalathar/events{/privacy}", "received_events_url": "https://api.github.com/users/Zalathar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-05-26T10:56:47Z", "updated_at": "2021-05-26T13:41:00Z", "closed_at": "2021-05-26T13:40:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2980", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2980", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2980.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2980.patch", "merged_at": "2021-05-26T13:40:55Z"}, "body": "Our docs say that `integers` should shrink towards positive values, but currently that isn't actually true for instances that have lower+upper bounds that span across zero.\r\n\r\nDouble bounded `integers` delegates to `integer_range`, which detects ranges that cross the designated centre value and draws a \u201csign bit\u201d to determine whether to generate values upwards or downwards from the centre.\r\n\r\nBut the code in question interprets a drawn value of 0 as \u201cbelow\u201d instead of \u201cabove\u201d, so shrinking tends to produce values below the centre if possible.\r\n\r\nThis patch negates the above/below flag, so that a drawn value 0 is treated as \u201cabove\u201d, giving the intended behaviour.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2980/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2980/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2976", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2976/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2976/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2976/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2976", "id": 900198307, "node_id": "MDU6SXNzdWU5MDAxOTgzMDc=", "number": 2976, "title": "`floats()` does not generate subnormal floating-point values", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2021-05-25T02:35:55Z", "updated_at": "2021-11-18T07:31:47Z", "closed_at": "2021-11-18T07:31:47Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://github.com/HypothesisWorks/hypothesis/blob/3226dd7d1b39d5ce38d559c0c4329aca40ecc9cb/hypothesis-python/tests/nocover/test_floating.py#L107-L136\r\n\r\nThis was discovered in #2973, but out of scope for that PR.  The first step is to determine when, *if ever*, this did work; what (if anything) changed to break it, and then to get subnormal-float generation working.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2976/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2976/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2975", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2975/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2975/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2975/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2975", "id": 899870012, "node_id": "MDU6SXNzdWU4OTk4NzAwMTI=", "number": 2975, "title": "Dtype conversion error using numpy 1.21.0 release candidate", "user": {"login": "adeak", "id": 17914410, "node_id": "MDQ6VXNlcjE3OTE0NDEw", "avatar_url": "https://avatars.githubusercontent.com/u/17914410?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adeak", "html_url": "https://github.com/adeak", "followers_url": "https://api.github.com/users/adeak/followers", "following_url": "https://api.github.com/users/adeak/following{/other_user}", "gists_url": "https://api.github.com/users/adeak/gists{/gist_id}", "starred_url": "https://api.github.com/users/adeak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adeak/subscriptions", "organizations_url": "https://api.github.com/users/adeak/orgs", "repos_url": "https://api.github.com/users/adeak/repos", "events_url": "https://api.github.com/users/adeak/events{/privacy}", "received_events_url": "https://api.github.com/users/adeak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-05-24T17:44:49Z", "updated_at": "2021-05-25T02:39:12Z", "closed_at": "2021-05-25T02:39:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have two tests [in PyVista](https://docs.pyvista.org/) that raise an error from within hypothesis using the new numpy release candidate. [One of the tests](https://github.com/pyvista/pyvista/blob/master/tests/test_datasetattributes.py#L150-L154):\r\n```py\r\n@settings(suppress_health_check=[HealthCheck.function_scoped_fixture])\r\n@given(arr=arrays(dtype='U', shape=10))\r\ndef test_append_string_array_should_equal(arr, hexbeam_field_attributes):\r\n    hexbeam_field_attributes['string_arr'] = arr\r\n    assert np.array_equiv(arr, hexbeam_field_attributes['string_arr'])\r\n```\r\n\r\nThe error appears [here](https://github.com/HypothesisWorks/hypothesis/blob/master/hypothesis-python/src/hypothesis/extra/numpy.py#L301) and it has to do with trying to convert from object dtype to string which almost always works... except for one case that is somehow generated by hypothesis:\r\n```py\r\n>>> import numpy as np\r\n>>> np.array([''], dtype=object).astype('<U0')  # or just .astype('U')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: Cannot cast array data from dtype('O') to dtype('<U') according to the rule 'unsafe'\r\n```\r\n\r\nThis worked on numpy 1.20.3. I don't understand how hypothesis works, but this seems to be something that needs fixed to stay compatible with the next numpy release. Or is our test using hypothesis wrong?\r\n\r\nIn the meantime I'll also ask on the numpy side whether this change is expected ([link](https://github.com/numpy/numpy/issues/19085)).\r\n\r\nFull test traceback, although direct reproducibility would need installing pyvista:\r\n<details>\r\n  <summary>Click for output</summary>\r\n\r\n  ```py\r\n  ==================================================================================================== FAILURES =====================================================================================================\r\n  ______________________________________________________________________________________ test_append_string_array_should_equal ______________________________________________________________________________________\r\n  \r\n  hexbeam_field_attributes = pyvista DataSetAttributes\r\n  Association: NONE\r\n  Contains keys:\r\n  \t\r\n  \r\n  >   ???\r\n  \r\n  tests/test_datasetattributes.py:151: \r\n  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/core.py:709: in _execute_once_for_engine\r\n      escalate_hypothesis_internal_error()\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/core.py:683: in _execute_once_for_engine\r\n      result = self.execute_once(data)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/core.py:619: in execute_once\r\n      result = self.test_runner(data, run)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/executors.py:52: in default_new_style_executor\r\n      return function(data)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/core.py:578: in run\r\n      args, kwargs = data.draw(self.search_strategy)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/internal/conjecture/data.py:888: in draw\r\n      return strategy.do_draw(self)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/core.py:223: in do_draw\r\n      return self.mapped_strategy.do_draw(data)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/strategies/_internal/collections.py:57: in do_draw\r\n      return tuple(data.draw(e) for e in self.element_strategies)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/strategies/_internal/collections.py:57: in <genexpr>\r\n      return tuple(data.draw(e) for e in self.element_strategies)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/internal/conjecture/data.py:884: in draw\r\n      return strategy.do_draw(self)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/strategies/_internal/strategies.py:801: in do_draw\r\n      result = self.pack(data.draw(self.mapped_strategy))\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/internal/conjecture/data.py:884: in draw\r\n      return strategy.do_draw(self)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/strategies/_internal/lazy.py:168: in do_draw\r\n      return data.draw(self.wrapped_strategy)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/internal/conjecture/data.py:884: in draw\r\n      return strategy.do_draw(self)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/strategies/_internal/strategies.py:801: in do_draw\r\n      result = self.pack(data.draw(self.mapped_strategy))\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/internal/conjecture/data.py:884: in draw\r\n      return strategy.do_draw(self)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/strategies/_internal/collections.py:57: in do_draw\r\n      return tuple(data.draw(e) for e in self.element_strategies)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/strategies/_internal/collections.py:57: in <genexpr>\r\n      return tuple(data.draw(e) for e in self.element_strategies)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/internal/conjecture/data.py:884: in draw\r\n      return strategy.do_draw(self)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/strategies/_internal/lazy.py:168: in do_draw\r\n      return data.draw(self.wrapped_strategy)\r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/internal/conjecture/data.py:884: in draw\r\n      return strategy.do_draw(self)\r\n  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n  \r\n  self = <hypothesis.extra.numpy.ArrayStrategy object at 0x7fc15470a760>, data = ConjectureData(VALID, 2 bytes, frozen)\r\n  \r\n      def do_draw(self, data):\r\n          if 0 in self.shape:\r\n              return np.zeros(dtype=self.dtype, shape=self.shape)\r\n      \r\n          # Because Numpy allocates memory for strings at array creation, if we have\r\n          # an unsized string dtype we'll fill an object array and then cast it back.\r\n          unsized_string_dtype = (\r\n              self.dtype.kind in (\"S\", \"a\", \"U\") and self.dtype.itemsize == 0\r\n          )\r\n      \r\n          # This could legitimately be a np.empty, but the performance gains for\r\n          # that would be so marginal that there's really not much point risking\r\n          # undefined behaviour shenanigans.\r\n          result = np.zeros(\r\n              shape=self.array_size, dtype=object if unsized_string_dtype else self.dtype\r\n          )\r\n      \r\n          if self.fill.is_empty:\r\n              # We have no fill value (either because the user explicitly\r\n              # disabled it or because the default behaviour was used and our\r\n              # elements strategy does not produce reusable values), so we must\r\n              # generate a fully dense array with a freshly drawn value for each\r\n              # entry.\r\n              if self.unique:\r\n                  seen = set()\r\n                  elements = cu.many(\r\n                      data,\r\n                      min_size=self.array_size,\r\n                      max_size=self.array_size,\r\n                      average_size=self.array_size,\r\n                  )\r\n                  i = 0\r\n                  while elements.more():\r\n                      # We assign first because this means we check for\r\n                      # uniqueness after numpy has converted it to the relevant\r\n                      # type for us. Because we don't increment the counter on\r\n                      # a duplicate we will overwrite it on the next draw.\r\n                      self.set_element(data, result, i)\r\n                      if result[i] not in seen:\r\n                          seen.add(result[i])\r\n                          i += 1\r\n                      else:\r\n                          elements.reject()\r\n              else:\r\n                  for i in range(len(result)):\r\n                      self.set_element(data, result, i)\r\n          else:\r\n              # We draw numpy arrays as \"sparse with an offset\". We draw a\r\n              # collection of index assignments within the array and assign\r\n              # fresh values from our elements strategy to those indices. If at\r\n              # the end we have not assigned every element then we draw a single\r\n              # value from our fill strategy and use that to populate the\r\n              # remaining positions with that strategy.\r\n      \r\n              elements = cu.many(\r\n                  data,\r\n                  min_size=0,\r\n                  max_size=self.array_size,\r\n                  # sqrt isn't chosen for any particularly principled reason. It\r\n                  # just grows reasonably quickly but sublinearly, and for small\r\n                  # arrays it represents a decent fraction of the array size.\r\n                  average_size=math.sqrt(self.array_size),\r\n              )\r\n      \r\n              needs_fill = np.full(self.array_size, True)\r\n              seen = set()\r\n      \r\n              while elements.more():\r\n                  i = cu.integer_range(data, 0, self.array_size - 1)\r\n                  if not needs_fill[i]:\r\n                      elements.reject()\r\n                      continue\r\n                  self.set_element(data, result, i)\r\n                  if self.unique:\r\n                      if result[i] in seen:\r\n                          elements.reject()\r\n                          continue\r\n                      else:\r\n                          seen.add(result[i])\r\n                  needs_fill[i] = False\r\n              if needs_fill.any():\r\n                  # We didn't fill all of the indices in the early loop, so we\r\n                  # put a fill value into the rest.\r\n      \r\n                  # We have to do this hilarious little song and dance to work\r\n                  # around numpy's special handling of iterable values. If the\r\n                  # value here were e.g. a tuple then neither array creation\r\n                  # nor putmask would do the right thing. But by creating an\r\n                  # array of size one and then assigning the fill value as a\r\n                  # single element, we both get an array with the right value in\r\n                  # it and putmask will do the right thing by repeating the\r\n                  # values of the array across the mask.\r\n                  one_element = np.zeros(\r\n                      shape=1, dtype=object if unsized_string_dtype else self.dtype\r\n                  )\r\n                  self.set_element(data, one_element, 0, self.fill)\r\n                  if unsized_string_dtype:\r\n  >                   one_element = one_element.astype(self.dtype)\r\n  E                   TypeError: Cannot cast array data from dtype('O') to dtype('<U') according to the rule 'unsafe'\r\n  \r\n  ../tmp_test_env/lib/python3.8/site-packages/hypothesis/extra/numpy.py:301: TypeError\r\n  --------------------------------------------------------------------------------------------------- Hypothesis ----------------------------------------------------------------------------------------------------\r\n  You can add @seed(49582184409187967324836935015787832203) to this test or run pytest with --hypothesis-seed=49582184409187967324836935015787832203 to reproduce this failure.\r\n\r\n  ```\r\n</details>\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2975/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2975/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2972", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2972/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2972/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2972/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2972", "id": 898958040, "node_id": "MDExOlB1bGxSZXF1ZXN0NjUwNzQyMzgx", "number": 2972, "title": "`sampled_from` and `just` should not have reusable values if transformed", "user": {"login": "Zalathar", "id": 20290842, "node_id": "MDQ6VXNlcjIwMjkwODQy", "avatar_url": "https://avatars.githubusercontent.com/u/20290842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zalathar", "html_url": "https://github.com/Zalathar", "followers_url": "https://api.github.com/users/Zalathar/followers", "following_url": "https://api.github.com/users/Zalathar/following{/other_user}", "gists_url": "https://api.github.com/users/Zalathar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zalathar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zalathar/subscriptions", "organizations_url": "https://api.github.com/users/Zalathar/orgs", "repos_url": "https://api.github.com/users/Zalathar/repos", "events_url": "https://api.github.com/users/Zalathar/events{/privacy}", "received_events_url": "https://api.github.com/users/Zalathar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-05-23T07:33:51Z", "updated_at": "2021-05-23T12:26:04Z", "closed_at": "2021-05-23T12:08:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2972", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2972", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2972.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2972.patch", "merged_at": "2021-05-23T12:08:24Z"}, "body": "Our numpy/pandas strategies use `.has_reusable_values` to detect whether it is OK to implicitly use the `elements` strategy as the `fill` strategy (when no fill is specified), in order to speed up array generation.\r\n\r\nThis is only allowed if user code can't notice the difference. For this reason, the flag is only true for some built-in strategies, and is set to false whenever they are mapped/filtered by arbitrary user code.\r\n\r\n(This is conservative, since in practice most maps/filters won't actually observe the difference, but users can always provide an explicit `fill` instead to guarantee the optimization.)\r\n\r\nHistorically all mapping/filtering was handled by dedicated strategies which automatically handled setting the flag to false. However, we currently have some custom map/filter implementations that don't go through the usual strategy classes, so they end up with the flag inappropriately set to true even after being mapped/filtered by user code.\r\n\r\nThe actual fix is simple: just make `SampledFromStrategy.calc_has_reusable_values` (and `JustStrategy`) return false if any transformations have been applied.\r\n\r\nThe biggest change here is a new set of tests to explicitly test the behaviour of filter/map/flatmap against all known reusable-by-default strategies.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2972/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2970", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2970/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2970/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2970/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2970", "id": 898825336, "node_id": "MDExOlB1bGxSZXF1ZXN0NjUwNjQ0Mzgz", "number": 2970, "title": "add .hypothesis to invalid tests", "user": {"login": "danielknell", "id": 229004, "node_id": "MDQ6VXNlcjIyOTAwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/229004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielknell", "html_url": "https://github.com/danielknell", "followers_url": "https://api.github.com/users/danielknell/followers", "following_url": "https://api.github.com/users/danielknell/following{/other_user}", "gists_url": "https://api.github.com/users/danielknell/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielknell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielknell/subscriptions", "organizations_url": "https://api.github.com/users/danielknell/orgs", "repos_url": "https://api.github.com/users/danielknell/repos", "events_url": "https://api.github.com/users/danielknell/events{/privacy}", "received_events_url": "https://api.github.com/users/danielknell/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2021-05-22T15:26:42Z", "updated_at": "2021-05-23T23:09:42Z", "closed_at": "2021-05-23T23:09:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2970", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2970", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2970.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2970.patch", "merged_at": "2021-05-23T23:09:42Z"}, "body": "adds `.hypothesis` to invalid tests.\r\n\r\nthis fixes #2966\r\n\r\nI'm not quite sure where (or how) I should test it, I couldn't find any tests using .hypothesis other than the ones swapping the test function and that won't work here without making the invalid tests far more complicated...\r\n\r\nall existing tests seem to pass.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2970/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2968", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2968/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2968/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2968/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2968", "id": 896223433, "node_id": "MDExOlB1bGxSZXF1ZXN0NjQ4MzU0MTAy", "number": 2968, "title": "Quiet identity element search in binary-operation ghostwriter", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-05-20T03:19:15Z", "updated_at": "2021-05-24T10:32:15Z", "closed_at": "2021-05-24T10:32:13Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2968", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2968", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2968.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2968.patch", "merged_at": "2021-05-24T10:32:13Z"}, "body": "Because printing \"You can use seed() to reproduce...\" doesn't really fit with the test code.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2968/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2952", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2952/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2952/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2952/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2952", "id": 873673390, "node_id": "MDExOlB1bGxSZXF1ZXN0NjI4NDMzMzUz", "number": 2952, "title": "Improve `try_issubclass`", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-05-01T13:28:28Z", "updated_at": "2021-08-16T22:41:38Z", "closed_at": "2021-08-16T22:41:34Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2952", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2952", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2952.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2952.patch", "merged_at": "2021-08-16T22:41:34Z"}, "body": "Fixes #2951.  @mristin, I'd really appreciate your review - this seems to fix the problem in your issue, but if you have more complex examples it would be great to check those too.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2952/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2952/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2951", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2951/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2951/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2951/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2951", "id": 872124065, "node_id": "MDU6SXNzdWU4NzIxMjQwNjU=", "number": 2951, "title": "[Bug] Registering a type inheriting from `Sequence`", "user": {"login": "mristin", "id": 5072771, "node_id": "MDQ6VXNlcjUwNzI3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5072771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mristin", "html_url": "https://github.com/mristin", "followers_url": "https://api.github.com/users/mristin/followers", "following_url": "https://api.github.com/users/mristin/following{/other_user}", "gists_url": "https://api.github.com/users/mristin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mristin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mristin/subscriptions", "organizations_url": "https://api.github.com/users/mristin/orgs", "repos_url": "https://api.github.com/users/mristin/repos", "events_url": "https://api.github.com/users/mristin/events{/privacy}", "received_events_url": "https://api.github.com/users/mristin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-04-30T07:44:58Z", "updated_at": "2021-08-16T22:41:34Z", "closed_at": "2021-08-16T22:41:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\nI observe a strange behavior when I create a class that inherits from `Sequence[str]` and registering it with Hypothesis. Namely, the generating strategy for that class is added to one of generating strategies for *general* `Sequence`'s.\r\n\r\nPerhaps it is related to https://github.com/HypothesisWorks/hypothesis/issues/2940?\r\n\r\nPlease have a look:\r\n\r\n```python\r\nfrom typing import Sequence, Union, overload\r\n\r\nimport hypothesis.strategies as st\r\n\r\nclass Lines(Sequence[str]):\r\n    \"\"\"Represent a sequence of text lines.\"\"\"\r\n\r\n    def __new__(cls, lines: Sequence[str]) -> \"Lines\":\r\n        assert all('\\n' not in line and '\\r' not in line for line in lines)\r\n        return cast(Lines, lines)\r\n\r\n    def __add__(self, other: \"Lines\") -> \"Lines\":\r\n        raise NotImplementedError(\"Only for type annotations\")\r\n\r\n    # pylint: disable=function-redefined\r\n\r\n    @overload\r\n    def __getitem__(self, index: int) -> str:\r\n        pass\r\n\r\n    @overload\r\n    def __getitem__(self, index: slice) -> \"Lines\":\r\n        pass\r\n\r\n    def __getitem__(self, index: Union[int, slice]) -> Union[str, \"Lines\"]:\r\n        raise NotImplementedError(\"Only for type annotations\")\r\n\r\n    def __len__(self) -> int:\r\n        raise NotImplementedError(\"Only for type annotations\")\r\n\r\nst.register_type_strategy(\r\n    Lines,\r\n    st.fixed_dictionaries(\r\n        {'lines': st.lists(st.text())\r\n            .filter(\r\n            lambda lines:\r\n            all(\r\n                '\\n' not in line and '\\r' not in line\r\n                for line in lines))\r\n        }\r\n    ).map(lambda d: Lines(**d))\r\n)\r\n\r\nstrategy = st.from_type(Lines)\r\nassert (str(strategy) ==\r\n        \"fixed_dictionaries(\"\r\n        \"{'lines': lists(text())\"\r\n        \".filter(lambda lines: <unknown>)})\"\r\n        \".map(lambda d: <unknown>)\")\r\n\r\n\r\n# Now let's test that the strategy for ``Sequence[int]`` did not change just because\r\n# we registered a strategy for ``Lines``.\r\nstrategy = st.from_type(Sequence[int])\r\n\r\n# NOTE: something is strange here.\r\nassert (str(strategy) ==\r\n        \"one_of(\"\r\n        \"binary(), \"\r\n        \"lists(integers()), \"\r\n        \"fixed_dictionaries(\"\r\n        \"{'lines': lists(text())\"\r\n        \".filter(lambda lines: <unknown>)})\"\r\n        \".map(lambda d: <unknown>))\")\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2951/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2951/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2926", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2926/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2926/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2926/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2926", "id": 852432972, "node_id": "MDExOlB1bGxSZXF1ZXN0NjEwNjg2NDkz", "number": 2926, "title": "Fix abstract type bug", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 31355957, "node_id": "MDU6TGFiZWwzMTM1NTk1Nw==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": "it's not broken, but we want it to be better"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-04-07T13:52:04Z", "updated_at": "2021-04-07T14:24:07Z", "closed_at": "2021-04-07T14:24:06Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2926", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2926", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2926.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2926.patch", "merged_at": "2021-04-07T14:24:05Z"}, "body": "This is a pair of a subtle bug and some smarter behaviour:\r\n\r\n- if we had an abstract type with required-and-unannotated parameters, we'd incorrectly raise `ResolutionFailed` as if we were about to use `st.builds()` (which we, correctly, only try for non-abstract types)\r\n- `return sampled_from(subclasses).flatmap(from_type)` is suboptimal - we can check which subclasses can be resolved and just use those... but maintain it as a fallback in case we can't resolve any now but will be able to when we actually draw values.\r\n\r\nThis is definitely a rare combination of cases to hit, but if we're going to support it let's do it *right*.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2926/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2926/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2919", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2919/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2919/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2919/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2919", "id": 846257861, "node_id": "MDU6SXNzdWU4NDYyNTc4NjE=", "number": 2919, "title": "Generation doesn't work with `Annotated` types", "user": {"login": "vstrimaitis", "id": 14166032, "node_id": "MDQ6VXNlcjE0MTY2MDMy", "avatar_url": "https://avatars.githubusercontent.com/u/14166032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vstrimaitis", "html_url": "https://github.com/vstrimaitis", "followers_url": "https://api.github.com/users/vstrimaitis/followers", "following_url": "https://api.github.com/users/vstrimaitis/following{/other_user}", "gists_url": "https://api.github.com/users/vstrimaitis/gists{/gist_id}", "starred_url": "https://api.github.com/users/vstrimaitis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vstrimaitis/subscriptions", "organizations_url": "https://api.github.com/users/vstrimaitis/orgs", "repos_url": "https://api.github.com/users/vstrimaitis/repos", "events_url": "https://api.github.com/users/vstrimaitis/events{/privacy}", "received_events_url": "https://api.github.com/users/vstrimaitis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-03-31T09:15:42Z", "updated_at": "2021-04-11T03:59:52Z", "closed_at": "2021-04-11T03:59:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Versions\r\n```\r\npython==3.7.7\r\nhypothesis==6.8.3\r\ntyping-extensions==3.7.4.3\r\n```\r\n\r\nAlso tested with `python==3.9.0` and using `typing.Annotated` instead of `typing_extensions.Annotated`.\r\n\r\n## Problem description\r\n\r\n`hypothesis` is unable to generate data for a type if `Annotated` is added. Example:\r\n\r\n```python\r\nimport hypothesis.strategies as st\r\nfrom hypothesis import given\r\nfrom typing_extensions import Annotated\r\n\r\n# @given(st.from_type(int))                  # <-- this works\r\n@given(st.from_type(Annotated[int, \"foo\"]))  # <-- this doesn't\r\ndef test(s):\r\n    print(s)\r\n\r\ntest()\r\n```\r\n\r\nThe error that I receive is as follows:\r\n\r\n```\r\nhypothesis.errors.ResolutionFailed: Could not resolve typing.Annotated[int, 'foo'] to a strategy; consider using register_type_strategy\r\n```\r\n\r\nI tried registering a strategy as the error message suggests like so:\r\n\r\n```python\r\ndef my_strategy(t):\r\n    raise Exception(\"Should enter here\")\r\n\r\nst.register_type_strategy(Annotated, my_strategy)\r\n\r\n# ... rest of the example from above\r\n```\r\n\r\n... but the `my_strategy` function is never called, and the example fails with the same error.\r\n\r\n## Potential solution\r\n\r\nI followed the traceback to the function that failed and discovered this piece of code:\r\n\r\nhttps://github.com/HypothesisWorks/hypothesis/blob/ef0c17481ba049329471fb6c503ad82579de4900/hypothesis-python/src/hypothesis/strategies/_internal/types.py#L207-L213\r\n\r\nAs far as I've tested, `Annotated[int, \"foo\"].__origin__` returns `int`, but `len(Annotated[int, \"foo\"].__args__)` is `1`. I guess adding an extra condition here to check for the case of `Annotated` would fix the issue, but I'm not familiar with the codebase, so correct me if I'm wrong.\r\n\r\nI found no workarounds for the issue, so any suggestions are highly appreciated!\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2919/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2919/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2918", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2918/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2918/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2918/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2918", "id": 845324013, "node_id": "MDExOlB1bGxSZXF1ZXN0NjA0NDk2ODM3", "number": 2918, "title": "Fix missing type annotation for settings.__call__", "user": {"login": "cjolowicz", "id": 653941, "node_id": "MDQ6VXNlcjY1Mzk0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/653941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjolowicz", "html_url": "https://github.com/cjolowicz", "followers_url": "https://api.github.com/users/cjolowicz/followers", "following_url": "https://api.github.com/users/cjolowicz/following{/other_user}", "gists_url": "https://api.github.com/users/cjolowicz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjolowicz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjolowicz/subscriptions", "organizations_url": "https://api.github.com/users/cjolowicz/orgs", "repos_url": "https://api.github.com/users/cjolowicz/repos", "events_url": "https://api.github.com/users/cjolowicz/events{/privacy}", "received_events_url": "https://api.github.com/users/cjolowicz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2021-03-30T21:45:58Z", "updated_at": "2021-04-01T10:54:04Z", "closed_at": "2021-04-01T10:53:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2918", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2918", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2918.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2918.patch", "merged_at": "2021-04-01T10:53:14Z"}, "body": "Fixes #2917 ", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2918/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2917", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2917/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2917/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2917/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2917", "id": 845323160, "node_id": "MDU6SXNzdWU4NDUzMjMxNjA=", "number": 2917, "title": "settings decorator produces mypy error in strict mode: \"untyped decorator makes function untyped\"", "user": {"login": "cjolowicz", "id": 653941, "node_id": "MDQ6VXNlcjY1Mzk0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/653941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjolowicz", "html_url": "https://github.com/cjolowicz", "followers_url": "https://api.github.com/users/cjolowicz/followers", "following_url": "https://api.github.com/users/cjolowicz/following{/other_user}", "gists_url": "https://api.github.com/users/cjolowicz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjolowicz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjolowicz/subscriptions", "organizations_url": "https://api.github.com/users/cjolowicz/orgs", "repos_url": "https://api.github.com/users/cjolowicz/repos", "events_url": "https://api.github.com/users/cjolowicz/events{/privacy}", "received_events_url": "https://api.github.com/users/cjolowicz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-03-30T21:45:20Z", "updated_at": "2021-04-01T10:53:14Z", "closed_at": "2021-04-01T10:53:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using the `@settings` decorator on a test function results in a mypy error in strict mode:\r\n\r\n> Untyped decorator makes function \"...\" untyped  [misc]\r\n\r\nThis is caused by the missing type annotation for `hypothesis._settings.settings.__call__`:\r\n\r\n```python\r\n    def __call__(self, test):\r\n```\r\n\r\nThis function always returns its argument, so an easy fix would be to use a `TypeVar`; \r\n\r\n```python\r\n    def __call__(self, test: T) -> T:\r\n```\r\n\r\n**Reproduction**\r\n\r\n```python\r\n# test_settings.py\r\nfrom hypothesis import given\r\nfrom hypothesis import settings\r\nfrom hypothesis import strategies\r\n\r\n\r\n@given(number=strategies.integers())\r\n@settings(max_examples=10)\r\ndef test_settings(number: int) -> None:\r\n    pass\r\n```\r\n\r\n```sh\r\nvirtualenv venv\r\n. venv/bin/activate\r\npip install hypothesis\r\npip install pytest\r\npip install mypy\r\n```\r\n\r\n```sh\r\n$ venv/bin/mypy --strict --pretty --show-error-codes --show-column-numbers test_settings.py \r\ntest_settings.py:7:2: error: Untyped decorator makes function \"test_settings\" untyped  [misc]\r\n    @settings(max_examples=10)\r\n     ^\r\nFound 1 error in 1 file (checked 1 source file)\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2917/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2917/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2889", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2889/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2889/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2889/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2889", "id": 822004533, "node_id": "MDExOlB1bGxSZXF1ZXN0NTg0Njk4MTE2", "number": 2889, "title": "Improve handling of self-referential `recursive()` strategies", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1695870469, "node_id": "MDU6TGFiZWwxNjk1ODcwNDY5", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/internals", "name": "internals", "color": "f2b560", "default": false, "description": "Stuff that only Hypothesis devs should ever see"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-03-04T10:42:53Z", "updated_at": "2021-03-04T11:05:45Z", "closed_at": "2021-03-04T11:05:43Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2889", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2889", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2889.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2889.patch", "merged_at": "2021-03-04T11:05:43Z"}, "body": "Fixes #2794 in the obvious way.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2889/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2886", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2886/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2886/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2886/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2886", "id": 820242252, "node_id": "MDExOlB1bGxSZXF1ZXN0NTgzMjE4NjE5", "number": 2886, "title": "Fixes an exception in from_type(Union[Literal[\"a\"], Literal[\"b\"]]).example() in Python 3.6", "user": {"login": "benanhalt", "id": 287254, "node_id": "MDQ6VXNlcjI4NzI1NA==", "avatar_url": "https://avatars.githubusercontent.com/u/287254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benanhalt", "html_url": "https://github.com/benanhalt", "followers_url": "https://api.github.com/users/benanhalt/followers", "following_url": "https://api.github.com/users/benanhalt/following{/other_user}", "gists_url": "https://api.github.com/users/benanhalt/gists{/gist_id}", "starred_url": "https://api.github.com/users/benanhalt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benanhalt/subscriptions", "organizations_url": "https://api.github.com/users/benanhalt/orgs", "repos_url": "https://api.github.com/users/benanhalt/repos", "events_url": "https://api.github.com/users/benanhalt/events{/privacy}", "received_events_url": "https://api.github.com/users/benanhalt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-03-02T17:44:54Z", "updated_at": "2021-03-04T03:36:44Z", "closed_at": "2021-03-04T03:36:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2886", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2886", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2886.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2886.patch", "merged_at": "2021-03-04T03:36:44Z"}, "body": "The test case in the first commit demonstrates the exception.\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2886/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 1, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2886/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2883", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2883/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2883/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2883/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2883", "id": 818460381, "node_id": "MDExOlB1bGxSZXF1ZXN0NTgxNzE0NDIy", "number": 2883, "title": "Check multiple preconditions", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 31355957, "node_id": "MDU6TGFiZWwzMTM1NTk1Nw==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": "it's not broken, but we want it to be better"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-03-01T05:02:44Z", "updated_at": "2021-03-11T01:52:58Z", "closed_at": "2021-03-02T22:37:29Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2883", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2883", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2883.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2883.patch", "merged_at": "2021-03-02T22:37:29Z"}, "body": "Fixes #2861.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2883/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2883/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2874", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2874/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2874/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2874/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2874", "id": 815540558, "node_id": "MDExOlB1bGxSZXF1ZXN0NTc5MzUzNDQx", "number": 2874, "title": "FIX #2872: allow to register default strategies for typed-dict based classes", "user": {"login": "Melevir", "id": 1488499, "node_id": "MDQ6VXNlcjE0ODg0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1488499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Melevir", "html_url": "https://github.com/Melevir", "followers_url": "https://api.github.com/users/Melevir/followers", "following_url": "https://api.github.com/users/Melevir/following{/other_user}", "gists_url": "https://api.github.com/users/Melevir/gists{/gist_id}", "starred_url": "https://api.github.com/users/Melevir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Melevir/subscriptions", "organizations_url": "https://api.github.com/users/Melevir/orgs", "repos_url": "https://api.github.com/users/Melevir/repos", "events_url": "https://api.github.com/users/Melevir/events{/privacy}", "received_events_url": "https://api.github.com/users/Melevir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 31355957, "node_id": "MDU6TGFiZWwzMTM1NTk1Nw==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": "it's not broken, but we want it to be better"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-02-24T14:39:40Z", "updated_at": "2021-02-25T03:17:11Z", "closed_at": "2021-02-25T03:17:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2874", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2874", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2874.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2874.patch", "merged_at": "2021-02-25T03:17:10Z"}, "body": "", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2874/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2874/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2872", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2872/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2872/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2872/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2872", "id": 814206565, "node_id": "MDU6SXNzdWU4MTQyMDY1NjU=", "number": 2872, "title": "Can't use registered strategy for typed dict", "user": {"login": "Melevir", "id": 1488499, "node_id": "MDQ6VXNlcjE0ODg0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1488499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Melevir", "html_url": "https://github.com/Melevir", "followers_url": "https://api.github.com/users/Melevir/followers", "following_url": "https://api.github.com/users/Melevir/following{/other_user}", "gists_url": "https://api.github.com/users/Melevir/gists{/gist_id}", "starred_url": "https://api.github.com/users/Melevir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Melevir/subscriptions", "organizations_url": "https://api.github.com/users/Melevir/orgs", "repos_url": "https://api.github.com/users/Melevir/repos", "events_url": "https://api.github.com/users/Melevir/events{/privacy}", "received_events_url": "https://api.github.com/users/Melevir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-02-23T07:43:36Z", "updated_at": "2021-02-25T03:17:11Z", "closed_at": "2021-02-25T03:17:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here is a reproducible example of the problem:\r\n```python\r\n# test.py\r\nfrom typing import TypedDict, Callable, NamedTuple\r\n\r\nfrom hypothesis import given\r\nfrom hypothesis.strategies import composite, register_type_strategy, builds, from_type\r\n\r\nclass SomeData(TypedDict):\r\n    a: str\r\n    b: int\r\n\r\n@composite\r\ndef some_data_composite(draw: Callable):\r\n    assert 0  # to be sure when it works\r\n\r\nregister_type_strategy(SomeData, some_data_composite())\r\n\r\n@given(from_type(SomeData))\r\ndef test_some_data(item):\r\n    print(item)\r\n```\r\n\r\nI'm expecting `pytest test.py` to fail since there is `assert 0` in `some_data_composite` strategy.\r\n\r\nThe test passes (hypothesis==6.3.0), but if I will replace `class SomeData(TypedDict)` with `class SomeData(NamedTuple)` or `class SomeData`, it will fail.\r\n\r\nThis happens because the TypedDict case is the first thing that is handled in `hypothesis.strategies._internal.core._from_type`, much earlier, than `_global_type_lookup` check.\r\n\r\nThis seems a problem for me since I'm using Hypothesis with Deal and I want to set up a default strategy for my typed dictionaries.\r\n\r\nIf this bug is confirmed, I'll try to fix it.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2872/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2872/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2861", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2861/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2861/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2861/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2861", "id": 811792883, "node_id": "MDU6SXNzdWU4MTE3OTI4ODM=", "number": 2861, "title": "Multiple stateful @preconditions cause all but one to be silently ignored", "user": {"login": "Zalathar", "id": 20290842, "node_id": "MDQ6VXNlcjIwMjkwODQy", "avatar_url": "https://avatars.githubusercontent.com/u/20290842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zalathar", "html_url": "https://github.com/Zalathar", "followers_url": "https://api.github.com/users/Zalathar/followers", "following_url": "https://api.github.com/users/Zalathar/following{/other_user}", "gists_url": "https://api.github.com/users/Zalathar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zalathar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zalathar/subscriptions", "organizations_url": "https://api.github.com/users/Zalathar/orgs", "repos_url": "https://api.github.com/users/Zalathar/repos", "events_url": "https://api.github.com/users/Zalathar/events{/privacy}", "received_events_url": "https://api.github.com/users/Zalathar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-02-19T07:54:14Z", "updated_at": "2021-03-02T22:37:29Z", "closed_at": "2021-03-02T22:37:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While investigating an initialize/invariant fix for #2860, I noticed that unlike most of the other decorators, `@precondition` has no check preventing multiple preconditions for the same method.\r\n\r\nUnfortunately, this doesn't result in the intuitive outcome of multiple preconditions being and-ed together. Instead, they each silently overwrite each other, with only the outermost precondition prevailing.\r\n\r\n```python\r\n\r\ndef test_multiple_precondition_bug():\r\n    class MultiplePreconditionMachine(RuleBasedStateMachine):\r\n        @rule(x=integers())\r\n        def good_method(self, x):\r\n            pass\r\n\r\n        @precondition(lambda self: True)\r\n        @precondition(lambda self: False)\r\n        @rule(x=integers())\r\n        def bad_method_a(self, x):\r\n            \"\"\"This rule unexpectedly runs, even though it shouldn't.\"\"\"\r\n            assert False\r\n\r\n        @precondition(lambda self: False)\r\n        @precondition(lambda self: True)\r\n        @rule(x=integers())\r\n        def bad_method_b(self, x):\r\n            \"\"\"This rule never runs, but for the wrong reason.\"\"\"\r\n            assert False\r\n\r\n    run_state_machine_as_test(MultiplePreconditionMachine)\r\n\r\n```\r\n\r\n```\r\nFalsifying example:\r\nstate = MultiplePreconditionMachine()\r\nstate.bad_method_a(x=0)\r\nstate.teardown()\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2861/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2794", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2794/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2794/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2794/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2794", "id": 797670265, "node_id": "MDU6SXNzdWU3OTc2NzAyNjU=", "number": 2794, "title": "Improve handling of self-referential strategies", "user": {"login": "Stranger6667", "id": 1236561, "node_id": "MDQ6VXNlcjEyMzY1NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1236561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stranger6667", "html_url": "https://github.com/Stranger6667", "followers_url": "https://api.github.com/users/Stranger6667/followers", "following_url": "https://api.github.com/users/Stranger6667/following{/other_user}", "gists_url": "https://api.github.com/users/Stranger6667/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stranger6667/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stranger6667/subscriptions", "organizations_url": "https://api.github.com/users/Stranger6667/orgs", "repos_url": "https://api.github.com/users/Stranger6667/repos", "events_url": "https://api.github.com/users/Stranger6667/events{/privacy}", "received_events_url": "https://api.github.com/users/Stranger6667/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1695870469, "node_id": "MDU6TGFiZWwxNjk1ODcwNDY5", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/internals", "name": "internals", "color": "f2b560", "default": false, "description": "Stuff that only Hypothesis devs should ever see"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-01-31T09:44:07Z", "updated_at": "2021-03-04T11:05:43Z", "closed_at": "2021-03-04T11:05:43Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "As mentioned in #2783, the following strategy is not explicitly forbidden but fails with an `AssertionError`:\r\n\r\n```python\r\nfrom hypothesis import strategies as st\r\n\r\nSELF_REF = st.recursive(\r\n    st.deferred(lambda: SELF_REF | st.booleans()),\r\n    lambda s: st.lists(s, min_size=1)\r\n)\r\n```\r\n\r\nThere is an alternative strategy that produces the same data, but doesn't fail the same way:\r\n\r\n```python\r\nSELF_REF = st.recursive(\r\n    st.booleans(),\r\n    lambda s: st.lists(s, min_size=1)\r\n)\r\n```\r\n\r\nI am not sure if all self-referential strategies can be rewritten like this, but probably we can either explicitly forbid such strategies or revisit our drawing approach for them.\r\n\r\nHere is my reasoning from #2783 \r\n\r\n> As far as I see, the cap is needed to prevent the drawing from this strategy & generating a certain maximum amount of leaves. However, assuming a single thread (more on the multi-threaded behavior in the next section) and such a self-referential strategy, I am not sure if capping is needed as it is - we can just apply it once on the first capped usage and make all subsequent calls no-op (e.g., just yield without modifying marked). Then we still have the marker set only once on the very first RecursiveStrategy.do_draw call, and it will be monotonically decreasing. Therefore, we'll have the max size properly maintained, and there will be no oversized subtrees because, at some point, LimitReached will occur.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2794/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2794/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2724", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2724/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2724/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2724/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2724", "id": 775783127, "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ2Mzk2Mjkz", "number": 2724, "title": "Resolve mutually-recursive `ForwardRef`", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-12-29T09:03:35Z", "updated_at": "2021-01-02T08:26:36Z", "closed_at": "2021-01-02T08:26:34Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2724", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2724", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2724.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2724.patch", "merged_at": "2021-01-02T08:26:34Z"}, "body": "Fixes #2722, which is a *beautifully* subtle problem.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2724/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2724/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2722", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2722/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2722/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2722/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2722", "id": 775703509, "node_id": "MDU6SXNzdWU3NzU3MDM1MDk=", "number": 2722, "title": "Using mutually recursive types causes AttributeError", "user": {"login": "Varriount", "id": 524596, "node_id": "MDQ6VXNlcjUyNDU5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/524596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Varriount", "html_url": "https://github.com/Varriount", "followers_url": "https://api.github.com/users/Varriount/followers", "following_url": "https://api.github.com/users/Varriount/following{/other_user}", "gists_url": "https://api.github.com/users/Varriount/gists{/gist_id}", "starred_url": "https://api.github.com/users/Varriount/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Varriount/subscriptions", "organizations_url": "https://api.github.com/users/Varriount/orgs", "repos_url": "https://api.github.com/users/Varriount/repos", "events_url": "https://api.github.com/users/Varriount/events{/privacy}", "received_events_url": "https://api.github.com/users/Varriount/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-12-29T05:19:56Z", "updated_at": "2021-01-02T08:26:34Z", "closed_at": "2021-01-02T08:26:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently testing some code that deals with a recursive tree structure. Since the code already has type definitions, I was hoping to reuse them in Hypothesis by way of `from_type`. While I was successful in finding a way forward, some of the failed attempts seemed to uncover errors within Hypothesis.\r\n\r\n```python\r\nfrom typing import ForwardRef, Mapping, Sequence, Union\r\n\r\nimport hypothesis.strategies as st\r\n\r\nif True:\r\n    # Doesn't work\r\n    A = Mapping[str, \"B\"]\r\n    B = Union[Sequence[str], A]\r\n\r\n    st.register_type_strategy(\r\n        ForwardRef(\"B\"),\r\n        lambda x: st.deferred(lambda: b_strategy),\r\n    )\r\n\r\n    b_strategy = st.from_type(B)\r\n    print(b_strategy)\r\n    print(repr(b_strategy.example()))\r\n\r\nelse:\r\n    # Works\r\n    C = Union[Sequence[str], \"D\"]\r\n    D = Mapping[str, C]\r\n\r\n    st.register_type_strategy(\r\n        ForwardRef(\"D\"),\r\n        lambda x: st.deferred(lambda: d_strategy),\r\n    )\r\n\r\n    d_strategy = st.from_type(D)\r\n    print(d_strategy)\r\n    print(repr(d_strategy.example()))\r\n```\r\n\r\nThe version that doesn't work spits out a rather long traceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 314, in example\r\n    example_generating_inner_function()\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 302, in example_generating_inner_function\r\n    @settings(\r\n  File \"...\\hypothesis\\core.py\", line 1023, in wrapped_test\r\n    processed_args = process_arguments_to_given(\r\n  File \"...\\hypothesis\\core.py\", line 441, in process_arguments_to_given\r\n    search_strategy.validate()\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 377, in validate\r\n    self.do_validate()\r\n  File \"...\\hypothesis\\strategies\\_internal\\collections.py\", line 39, in do_validate\r\n    s.validate()\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 377, in validate\r\n    self.do_validate()\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 638, in do_validate\r\n    self.mapped_strategy.validate()\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 377, in validate\r\n    self.do_validate()\r\n  File \"...\\hypothesis\\strategies\\_internal\\lazy.py\", line 118, in do_validate\r\n    w.validate()\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 377, in validate\r\n    self.do_validate()\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 638, in do_validate\r\n    self.mapped_strategy.validate()\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 377, in validate\r\n    self.do_validate()\r\n  File \"...\\hypothesis\\strategies\\_internal\\collections.py\", line 39, in do_validate\r\n    s.validate()\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 377, in validate\r\n    self.do_validate()\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 595, in do_validate\r\n    for e in self.element_strategies:\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 570, in element_strategies\r\n    if not arg.is_empty:\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 125, in accept\r\n    recur(self)\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 121, in recur\r\n    mapping[strat] = getattr(strat, calculation)(recur)\r\n  File \"...\\hypothesis\\strategies\\_internal\\lazy.py\", line 86, in calc_is_empty\r\n    return recur(self.wrapped_strategy)\r\n  File \"...\\hypothesis\\strategies\\_internal\\strategies.py\", line 121, in recur\r\n    mapping[strat] = getattr(strat, calculation)(recur)\r\n  File \"...\\hypothesis\\strategies\\_internal\\deferred.py\", line 80, in calc_is_empty\r\n    return recur(self.wrapped_strategy)\r\n  File \"...\\hypothesis\\strategies\\_internal\\deferred.py\", line 55, in wrapped_strategy\r\n    del self.__definition\r\nAttributeError: _DeferredStrategy__definition\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2722/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2722/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2697", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2697/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2697/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2697/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2697", "id": 761726528, "node_id": "MDExOlB1bGxSZXF1ZXN0NTM2MzUwMjcz", "number": 2697, "title": "Fix indexing bug with explicit `@example` and `verbosity=quiet`", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-12-11T00:00:06Z", "updated_at": "2020-12-11T07:45:57Z", "closed_at": "2020-12-11T01:38:24Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2697", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2697", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2697.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2697.patch", "merged_at": "2020-12-11T01:38:23Z"}, "body": "Fixes #2696.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2697/reactions", "total_count": 3, "+1": 1, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 1, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2697/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2696", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2696/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2696/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2696/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2696", "id": 761312314, "node_id": "MDU6SXNzdWU3NjEzMTIzMTQ=", "number": 2696, "title": "Failed assertion when verbosity is `quiet`", "user": {"login": "orsinium", "id": 9638362, "node_id": "MDQ6VXNlcjk2MzgzNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/9638362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orsinium", "html_url": "https://github.com/orsinium", "followers_url": "https://api.github.com/users/orsinium/followers", "following_url": "https://api.github.com/users/orsinium/following{/other_user}", "gists_url": "https://api.github.com/users/orsinium/gists{/gist_id}", "starred_url": "https://api.github.com/users/orsinium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orsinium/subscriptions", "organizations_url": "https://api.github.com/users/orsinium/orgs", "repos_url": "https://api.github.com/users/orsinium/repos", "events_url": "https://api.github.com/users/orsinium/events{/privacy}", "received_events_url": "https://api.github.com/users/orsinium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-12-10T14:57:37Z", "updated_at": "2020-12-11T01:38:24Z", "closed_at": "2020-12-11T01:38:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Code:\r\n\r\n```python\r\nimport hypothesis\r\nimport hypothesis.strategies\r\n\r\n@hypothesis.example(None)\r\n@hypothesis.settings(verbosity=hypothesis.Verbosity.quiet)\r\n@hypothesis.given(hypothesis.strategies.integers())\r\ndef f(a):\r\n    pass\r\n\r\nf()\r\n```\r\n\r\nFailure:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"tmp.py\", line 10, in <module>\r\n    f()\r\n  File \"tmp.py\", line 5, in f\r\n    @hypothesis.settings(verbosity=hypothesis.Verbosity.quiet)\r\n  File \"/home/gram/.local/lib/python3.8/site-packages/hypothesis/core.py\", line 1090, in wrapped_test\r\n    errors = list(\r\n  File \"/home/gram/.local/lib/python3.8/site-packages/hypothesis/core.py\", line 379, in execute_explicit_examples\r\n    assert fragments_reported[0].startswith(\"Falsifying example\")\r\nIndexError: list index out of range\r\n```\r\n\r\nReason: `execute_explicit_examples` assumes that there are `fragments_reported` but there are always none if the `verbosity` is `quiet`.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2696/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2696/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2669", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2669/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2669/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2669/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2669", "id": 745324273, "node_id": "MDExOlB1bGxSZXF1ZXN0NTIyOTA3MTU1", "number": 2669, "title": "Skip loading from entrypoints if `importlib_metadata` and `pkg_resources` are both unavailable", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-11-18T04:42:59Z", "updated_at": "2020-11-18T11:35:26Z", "closed_at": "2020-11-18T11:35:23Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2669", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2669", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2669.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2669.patch", "merged_at": "2020-11-18T11:35:23Z"}, "body": "This last fallback option fixes #2668.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2669/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2668", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2668/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2668/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2668/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2668", "id": 745069157, "node_id": "MDU6SXNzdWU3NDUwNjkxNTc=", "number": 2668, "title": "Missing dependency on setuptools", "user": {"login": "philsc", "id": 1161442, "node_id": "MDQ6VXNlcjExNjE0NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1161442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philsc", "html_url": "https://github.com/philsc", "followers_url": "https://api.github.com/users/philsc/followers", "following_url": "https://api.github.com/users/philsc/following{/other_user}", "gists_url": "https://api.github.com/users/philsc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philsc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philsc/subscriptions", "organizations_url": "https://api.github.com/users/philsc/orgs", "repos_url": "https://api.github.com/users/philsc/repos", "events_url": "https://api.github.com/users/philsc/events{/privacy}", "received_events_url": "https://api.github.com/users/philsc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-11-17T20:35:58Z", "updated_at": "2020-11-18T11:35:23Z", "closed_at": "2020-11-18T11:35:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "When importing `hypothesis` in a container that only installs the declared dependencies (i.e. `sortedcontainers` and `attrs`) then we see the following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/run/shm/bazel-sandbox.58afe50bce693a45c42be3530f1579c8f12116963ef7e303ad72c1a2b06ed6f2/processwrapper-sandbox/4962/execroot/__main__/bazel-out/k8-fastbuild/bin/perception/cloud/proto_format_test.runfiles/internal_pip_dependency_hypothesis/pypi__hypothesis/hypothesis/entry_points.py\", line 27, in <module>\r\n    from importlib import metadata as importlib_metadata\r\nImportError: cannot import name 'metadata'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/run/shm/bazel-sandbox.58afe50bce693a45c42be3530f1579c8f12116963ef7e303ad72c1a2b06ed6f2/processwrapper-sandbox/4962/execroot/__main__/bazel-out/k8-fastbuild/bin/perception/cloud/proto_format_test.runfiles/internal_pip_dependency_hypothesis/pypi__hypothesis/hypothesis/entry_points.py\", line 29, in <module>\r\n    import importlib_metadata  # type: ignore  # mypy thinks this is a redefinition\r\nModuleNotFoundError: No module named 'importlib_metadata'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"common/python/runtime/python3_wrapper.py\", line 36, in <module>\r\n    eval(compiled_code, module.__dict__)\r\n  File \"/run/shm/bazel-sandbox.58afe50bce693a45c42be3530f1579c8f12116963ef7e303ad72c1a2b06ed6f2/processwrapper-sandbox/4962/execroot/__main__/bazel-out/k8-fastbuild/bin/perception/cloud/proto_format_test.runfiles/__main__/perception/cloud/proto_format_test.py\", line 7, in <module>\r\n    import hypothesis as hyp\r\n  File \"/run/shm/bazel-sandbox.58afe50bce693a45c42be3530f1579c8f12116963ef7e303ad72c1a2b06ed6f2/processwrapper-sandbox/4962/execroot/__main__/bazel-out/k8-fastbuild/bin/perception/cloud/proto_format_test.runfiles/internal_pip_dependency_hypothesis/pypi__hypothesis/hypothesis/__init__.py\", line 27, in <module>\r\n    from hypothesis.entry_points import run\r\n  File \"/run/shm/bazel-sandbox.58afe50bce693a45c42be3530f1579c8f12116963ef7e303ad72c1a2b06ed6f2/processwrapper-sandbox/4962/execroot/__main__/bazel-out/k8-fastbuild/bin/perception/cloud/proto_format_test.runfiles/internal_pip_dependency_hypothesis/pypi__hypothesis/hypothesis/entry_points.py\", line 38, in <module>\r\n    import pkg_resources\r\nModuleNotFoundError: No module named 'pkg_resources'\r\n```\r\nThe `pkg_resources` module is provided by `setuptools`.\r\n\r\nI think tweaking `setup.py` should fix it.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2668/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2668/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2666", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2666/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2666/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2666/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2666", "id": 744419686, "node_id": "MDExOlB1bGxSZXF1ZXN0NTIyMTQ2Nzgw", "number": 2666, "title": "Naive datetimes are never imaginary", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-11-17T05:18:56Z", "updated_at": "2020-12-09T07:03:06Z", "closed_at": "2020-12-09T07:03:04Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2666", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2666", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2666.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2666.patch", "merged_at": "2020-12-09T07:03:04Z"}, "body": "Closes #2662.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2666/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2666/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2662", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2662/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2662/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2662/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2662", "id": 741106371, "node_id": "MDU6SXNzdWU3NDExMDYzNzE=", "number": 2662, "title": "`st.datetimes(allow_imaginary=False)` can raise internal error", "user": {"login": "mvaled", "id": 270825, "node_id": "MDQ6VXNlcjI3MDgyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/270825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvaled", "html_url": "https://github.com/mvaled", "followers_url": "https://api.github.com/users/mvaled/followers", "following_url": "https://api.github.com/users/mvaled/following{/other_user}", "gists_url": "https://api.github.com/users/mvaled/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvaled/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvaled/subscriptions", "organizations_url": "https://api.github.com/users/mvaled/orgs", "repos_url": "https://api.github.com/users/mvaled/repos", "events_url": "https://api.github.com/users/mvaled/events{/privacy}", "received_events_url": "https://api.github.com/users/mvaled/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-11-11T22:12:53Z", "updated_at": "2020-12-09T07:03:04Z", "closed_at": "2020-12-09T07:03:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`strategies.datetime` may raise such an error when passed `allow_imaginary=False` and tzinfo is None.  \r\n\r\nI have the following:\r\n\r\n```\r\ndates = datetimes(\r\n    min_value=datetime.datetime(2000, 1,1),\r\n    max_value=datetime.datetime(9000, 12,31),\r\n    allow_imaginary=False,\r\n)\r\n```\r\n\r\nThe error looks like (pytest style):\r\n\r\n```\r\nvalue = datetime.datetime(2000, 1, 1, 0, 0)\r\n\r\n    def datetime_does_not_exist(value):\r\n        # This function tests whether the given datetime can be round-tripped to and\r\n        # from UTC.  It is an exact inverse of (and very similar to) the dateutil method\r\n        # https://dateutil.readthedocs.io/en/stable/tz.html#dateutil.tz.datetime_exists\r\n        try:\r\n            # Does the naive portion of the datetime change when round-tripped to\r\n            # UTC?  If so, or if this overflows, we say that it does not exist.\r\n            roundtrip = value.astimezone(dt.timezone.utc).astimezone(value.tzinfo)\r\n        except OverflowError:\r\n            # Overflows at datetime.min or datetime.max boundary condition.\r\n            # Rejecting these is acceptable, because timezones are close to\r\n            # meaningless before ~1900 and subject to a lot of change by\r\n            # 9999, so it should be a very small fraction of possible values.\r\n            return True\r\n>       assert value.tzinfo is roundtrip.tzinfo, \"so only the naive portions are compared\"\r\nE       AssertionError: so only the naive portions are compared\r\nE       assert None is datetime.timezone(datetime.timedelta(days=-1, seconds=68400), 'CST')\r\nE        +  where None = datetime.datetime(2000, 1, 1, 0, 0).tzinfo\r\nE        +  and   datetime.timezone(datetime.timedelta(days=-1, seconds=68400), 'CST') = datetime.datetime(2000, 1, 1, 0, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400), 'CST')).tzinfo\r\n\r\n.venv/lib/python3.8/site-packages/hypothesis/strategies/_internal/datetime.py:75: AssertionError\r\n```\r\nNotice that `value.tzinfo` is None, so `astimezone` uses the local timezone.\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2662/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2662/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2660", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2660/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2660/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2660/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2660", "id": 738588029, "node_id": "MDExOlB1bGxSZXF1ZXN0NTE3Mzk1ODEw", "number": 2660, "title": "Fix regex case bug", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-11-09T00:16:56Z", "updated_at": "2020-11-28T11:26:46Z", "closed_at": "2020-11-28T11:26:39Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2660", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2660", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2660.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2660.patch", "merged_at": "2020-11-28T11:26:39Z"}, "body": "Closes #2657 - turns out we weren't quite careful enough about `.swapcase()` on unicode characters: it turns out there there's at least one character where this changes the length, but still matches the longer string in case-insensitive mode.  So now we check for length as well as a match.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2660/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2657", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2657/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2657/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2657/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2657", "id": 738408341, "node_id": "MDU6SXNzdWU3Mzg0MDgzNDE=", "number": 2657, "title": "`st.from_regex(re.compile(\"[\\u0130_]\", re.IGNORECASE))` triggers internal error", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-11-08T07:07:15Z", "updated_at": "2020-11-28T11:26:39Z", "closed_at": "2020-11-28T11:26:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`\\u0130`, Latin Capital Letter I with Dot Above, lower-cases to `i\\u0307`; and in turn if we have this in a regex character set we eventually trigger an internal error by passing it to `ord()` (which requires single-character strings).\r\n\r\nI suspect that this is symptomatic of more general mishandling of length-changing case handling and will investigate.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2657/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2649", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2649/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2649/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2649/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2649", "id": 728921079, "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NTI0MDY0", "number": 2649, "title": "None-aware signature override", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-10-25T02:13:54Z", "updated_at": "2020-10-26T15:46:07Z", "closed_at": "2020-10-26T14:11:22Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2649", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2649", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2649.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2649.patch", "merged_at": "2020-10-26T14:11:21Z"}, "body": "The typing.get_type_hints function has equivalent logic, and since this has bitten people in the wild we'd better add it to ours.\r\n\r\nFixes #2648, related to or follows #2388, #2580, #2606, #2640.  CC @rcarriga FYI :slightly_smiling_face: \r\n\r\n----------\r\n\r\nAnd `RELEASE.rst` is now [included in the changelog for PR docs builds](https://hypothesis--2649.org.readthedocs.build/en/2649/changes.html#current-pull-request) if it exists, so you can see how it renders.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2649/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2648", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2648/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2648/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2648/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2648", "id": 728810505, "node_id": "MDU6SXNzdWU3Mjg4MTA1MDU=", "number": 2648, "title": "Including optional fields in generated examples using the from_type strategy", "user": {"login": "garry-jeromson", "id": 30808272, "node_id": "MDQ6VXNlcjMwODA4Mjcy", "avatar_url": "https://avatars.githubusercontent.com/u/30808272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garry-jeromson", "html_url": "https://github.com/garry-jeromson", "followers_url": "https://api.github.com/users/garry-jeromson/followers", "following_url": "https://api.github.com/users/garry-jeromson/following{/other_user}", "gists_url": "https://api.github.com/users/garry-jeromson/gists{/gist_id}", "starred_url": "https://api.github.com/users/garry-jeromson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garry-jeromson/subscriptions", "organizations_url": "https://api.github.com/users/garry-jeromson/orgs", "repos_url": "https://api.github.com/users/garry-jeromson/repos", "events_url": "https://api.github.com/users/garry-jeromson/events{/privacy}", "received_events_url": "https://api.github.com/users/garry-jeromson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-10-24T15:19:27Z", "updated_at": "2020-10-26T14:49:20Z", "closed_at": "2020-10-26T14:11:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Awesome, awesome project!\r\n\r\nThe `from_type` strategy is really useful when generating data from pydantic models (see https://github.com/samuelcolvin/pydantic/issues/1666), but it would be nice if it would recognise optional fields and _sometimes_ generate values for these fields, resulting in a more complete set of examples. The behaviour could be the same as that of the [fixed dictionaries strategy](https://hypothesis.readthedocs.io/en/latest/data.html?highlight=optional#hypothesis.strategies.fixed_dictionaries) when provided with the `optional` keyword argument, except that the optional fields are already known, from the model type hints.\r\n\r\nTo give a concrete example:\r\n\r\n```python\r\nfrom typing import Optional\r\n\r\nfrom hypothesis import given\r\nfrom hypothesis.strategies import from_type\r\nfrom pydantic import BaseModel\r\n\r\nclass Adress(BaseModel):\r\n    city: str\r\n    street: str\r\n    house_number: int\r\n    postal_code: int\r\n\r\n\r\nclass Person(BaseModel):\r\n    prename: str\r\n    middlename: Optional[str]\r\n    lastname: str\r\n    address: Adress\r\n\r\n\r\n@given(from_type(Person))\r\ndef test_me(person: Person):\r\n    assert isinstance(person, Person)\r\n```\r\n\r\nIt would be great if the behaviour was that the `middlename` field _may or may not_ be in the generated value. (Currently, it's always `None`.) Maybe something like:\r\n\r\n```python\r\n@given(from_type(Person, include_optional=True))\r\ndef test_me(person: Person):\r\n    assert isinstance(person, Person)\r\n```\r\n\r\nIs this a sensible idea, or am I missing some other easy way to do this? \r\n\r\nSo far I've tried:\r\n\r\n- Using `fixed_dictionaries` - not great as you either have to manually provide the required and optional fields and their strategies, or write your own functions to extract them from the pydantic model\r\n- `@given(st.builds(Person, middlename=infer))` - `middlename` is always set, which isn't what we want.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2648/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2646", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2646/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2646/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2646/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2646", "id": 727362614, "node_id": "MDExOlB1bGxSZXF1ZXN0NTA4MjY4OTYz", "number": 2646, "title": "Bugfix for `st.from_type(typing.Iterable[T])`", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-10-22T12:53:40Z", "updated_at": "2020-10-24T08:49:56Z", "closed_at": "2020-10-24T03:21:35Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2646", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2646", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2646.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2646.patch", "merged_at": "2020-10-24T03:21:34Z"}, "body": "This *mostly* worked before, by resolving to subclasses, but it didn't handle the parametrised generic properly.  This tiny but important patch fixes #2645.\r\n\r\nCC @HypothesisWorks/hypothesis-python-contributors; review should be quick!", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2646/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2646/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2645", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2645/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2645/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2645/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2645", "id": 727253142, "node_id": "MDU6SXNzdWU3MjcyNTMxNDI=", "number": 2645, "title": "Iterable strategy gives elements of wrong types", "user": {"login": "tsx", "id": 912719, "node_id": "MDQ6VXNlcjkxMjcxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/912719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsx", "html_url": "https://github.com/tsx", "followers_url": "https://api.github.com/users/tsx/followers", "following_url": "https://api.github.com/users/tsx/following{/other_user}", "gists_url": "https://api.github.com/users/tsx/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsx/subscriptions", "organizations_url": "https://api.github.com/users/tsx/orgs", "repos_url": "https://api.github.com/users/tsx/repos", "events_url": "https://api.github.com/users/tsx/events{/privacy}", "received_events_url": "https://api.github.com/users/tsx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-10-22T10:17:54Z", "updated_at": "2020-10-24T03:21:35Z", "closed_at": "2020-10-24T03:21:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears to give me tuples of ints when asked for iterables of instances of my own class. Generating individual instances of my own class the same way (via annotation) works perfectly.\r\n\r\nVersion: 5.37.4. Also tried current master - same issue.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom typing import Iterable\r\n\r\nfrom hypothesis import given, infer\r\n\r\n\r\nclass My:\r\n    def __init__(self, a: str):\r\n        self.a = a\r\n\r\n\r\n@given(i=infer)\r\ndef test_iterable(i: Iterable[My]):\r\n    assert all(isinstance(e, My) for e in i)\r\n```\r\n\r\nFails with:\r\n\r\n```\r\n    @given(i=infer)\r\n>   def test_iterable(i: Iterable[My]):\r\n\r\nrepro.py:12:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ni = (0,)\r\n\r\n    @given(i=infer)\r\n    def test_iterable(i: Iterable[My]):\r\n>       assert all(isinstance(e, My) for e in i)\r\nE       assert False\r\nE        +  where False = all(<generator object test_iterable.<locals>.<genexpr> at 0x7fcb12b74510>)\r\n\r\nrepro.py:13: AssertionError\r\n--------------------------- Hypothesis ---------------------------\r\nFalsifying example: test_iterable(\r\n    i=(0,),\r\n)\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2645/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2603", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2603/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2603/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2603/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2603", "id": 694384771, "node_id": "MDU6SXNzdWU2OTQzODQ3NzE=", "number": 2603, "title": "`st.builds()` works incorrectly with annotated `__init__`", "user": {"login": "sobolevn", "id": 4660275, "node_id": "MDQ6VXNlcjQ2NjAyNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sobolevn", "html_url": "https://github.com/sobolevn", "followers_url": "https://api.github.com/users/sobolevn/followers", "following_url": "https://api.github.com/users/sobolevn/following{/other_user}", "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions", "organizations_url": "https://api.github.com/users/sobolevn/orgs", "repos_url": "https://api.github.com/users/sobolevn/repos", "events_url": "https://api.github.com/users/sobolevn/events{/privacy}", "received_events_url": "https://api.github.com/users/sobolevn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-09-06T13:38:33Z", "updated_at": "2020-09-09T13:31:37Z", "closed_at": "2020-09-09T13:31:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The simplest reproduction is:\r\n\r\n```python\r\nfrom typing import Generic, TypeVar\r\n\r\nfrom hypothesis import given\r\nfrom hypothesis import strategies as st\r\n\r\n_ValueType = TypeVar('_ValueType')\r\n\r\n\r\nclass Wrapper(Generic[_ValueType]):\r\n    _inner_value: _ValueType\r\n\r\n    def __init__(self, inner_value: _ValueType) -> None:\r\n        self._inner_value = inner_value\r\n\r\n\r\n@given(st.builds(Wrapper))\r\ndef test_wrapper(wrapper):\r\n    assert isinstance(wrapper, Wrapper)\r\n\r\n```\r\n\r\nOutputs:\r\n\r\n```\r\n====================================== FAILURES ======================================\r\n____________________________________ test_wrapper ____________________________________\r\n\r\n    @given(st.builds(Wrapper))\r\n>   def test_wrapper(wrapper):\r\n\r\nex2.py:24: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n.venv/lib/python3.7/site-packages/hypothesis/core.py:684: in _execute_once_for_engine\r\n    escalate_hypothesis_internal_error()\r\n.venv/lib/python3.7/site-packages/hypothesis/core.py:655: in _execute_once_for_engine\r\n    result = self.execute_once(data)\r\n.venv/lib/python3.7/site-packages/hypothesis/core.py:610: in execute_once\r\n    result = self.test_runner(data, run)\r\n.venv/lib/python3.7/site-packages/hypothesis/executors.py:52: in default_new_style_executor\r\n    return function(data)\r\n.venv/lib/python3.7/site-packages/hypothesis/core.py:550: in run\r\n    args, kwargs = data.draw(self.search_strategy)\r\n.venv/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:889: in draw\r\n    return strategy.do_draw(self)\r\n.venv/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py:57: in do_draw\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n.venv/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py:57: in <genexpr>\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n.venv/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:884: in draw\r\n    return strategy.do_draw(self)\r\n.venv/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py:650: in do_draw\r\n    result = self.pack(data.draw(self.mapped_strategy))\r\n.venv/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:884: in draw\r\n    return strategy.do_draw(self)\r\n.venv/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py:150: in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n.venv/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:884: in draw\r\n    return strategy.do_draw(self)\r\n.venv/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py:650: in do_draw\r\n    result = self.pack(data.draw(self.mapped_strategy))\r\n.venv/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:884: in draw\r\n    return strategy.do_draw(self)\r\n.venv/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py:57: in do_draw\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n.venv/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py:57: in <genexpr>\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n.venv/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:884: in draw\r\n    return strategy.do_draw(self)\r\n.venv/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py:150: in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n.venv/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:884: in draw\r\n    return strategy.do_draw(self)\r\n.venv/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py:650: in do_draw\r\n    result = self.pack(data.draw(self.mapped_strategy))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nvalue = ((), {})\r\n\r\n>       lambda value: target(*value[0], **value[1])  # type: ignore\r\n    )\r\nE   TypeError: __init__() missing 1 required positional argument: 'inner_value'\r\n\r\n.venv/lib/python3.7/site-packages/hypothesis/strategies/_internal/core.py:1313: TypeError\r\n```\r\n\r\nWhy does this happen?\r\n\r\nMy debugging session shows that:\r\n- `required` [here](https://github.com/HypothesisWorks/hypothesis/blob/d1efdd688d889931427afa0defdc4abdbfc95c1a/hypothesis-python/src/hypothesis/strategies/_internal/core.py#L1282) is equal to `{'inner_value'}`\r\n- But, since [here we fetch annotations](https://github.com/HypothesisWorks/hypothesis/blob/d1efdd688d889931427afa0defdc4abdbfc95c1a/hypothesis-python/src/hypothesis/strategies/_internal/core.py#L1291) from the object itself, not its `__init__` method. It results in `{'_inner_value': ~_ValueType}`\r\n- And since these two sets do not match, the [resulting set here](https://github.com/HypothesisWorks/hypothesis/blob/d1efdd688d889931427afa0defdc4abdbfc95c1a/hypothesis-python/src/hypothesis/strategies/_internal/core.py#L1297) is empty\r\n- And that's why we have this error \ud83d\ude22 \r\n\r\nI can fix it! The only question I have is: \r\nIs it ok to chage how we get annotation from `target` if we are dealing with `__init__`?", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2603/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2603/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2564", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2564/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2564/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2564/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2564", "id": 686055943, "node_id": "MDU6SXNzdWU2ODYwNTU5NDM=", "number": 2564, "title": "Problems with hypothesis entrypoints", "user": {"login": "sobolevn", "id": 4660275, "node_id": "MDQ6VXNlcjQ2NjAyNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4660275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sobolevn", "html_url": "https://github.com/sobolevn", "followers_url": "https://api.github.com/users/sobolevn/followers", "following_url": "https://api.github.com/users/sobolevn/following{/other_user}", "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions", "organizations_url": "https://api.github.com/users/sobolevn/orgs", "repos_url": "https://api.github.com/users/sobolevn/repos", "events_url": "https://api.github.com/users/sobolevn/events{/privacy}", "received_events_url": "https://api.github.com/users/sobolevn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 587683606, "node_id": "MDU6TGFiZWw1ODc2ODM2MDY=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/docs", "name": "docs", "color": "c2e0c6", "default": false, "description": "documentation could *always* be better"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-08-26T06:42:32Z", "updated_at": "2020-10-02T14:47:45Z", "closed_at": "2020-10-02T14:47:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently I am testing out this new cool `entrypoints` feature. #2556 \r\nAnd it does not work correctly for me.\r\nI specify an entrypoint and nothing happens. The entrypoint function is not getting called.\r\n\r\nI am following this example: https://github.com/HypothesisWorks/hypothesis/commit/4ca04cf85b1389f0233dc652a5a74f15d2922c05#diff-94fd9cebb412c332ed91ff584ee7c2f3R129-R155\r\n\r\nThe problem is best shown by this piece of code:\r\n\r\n```python\r\n# module.py\r\n\r\nprint('Module imported!')\r\n\r\ndef _hypothesis_setup_hook():\r\n    print('func called')\r\n```\r\n\r\nThen I add it to the `setup.py` the same way it is shown in the docs.\r\nNow, let's try to call `run()` function:\r\n\r\n```python\r\n>>> for entry_point in pkg_resources.iter_entry_points(\"hypothesis\"):\r\n...     print(entry_point)\r\n...     entry_point.load()\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n_ = mymodule:_hypothesis_setup_hook\r\nModule imported!\r\n<function _hypothesis_setup_hook at 0x100f20ca0>\r\n```\r\n\r\nWhen I change this code to actually execute a function, it works:\r\n\r\n```python\r\n>>> for entry_point in pkg_resources.iter_entry_points(\"hypothesis\"):\r\n...     entry_point.load()()  # calling it now\r\n```\r\n\r\nOutputs:\r\n\r\n```\r\nModule imported!\r\nfunc called\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2564/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2564/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2469", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2469/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2469/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2469/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2469", "id": 641652662, "node_id": "MDU6SXNzdWU2NDE2NTI2NjI=", "number": 2469, "title": "Deprecation Warning Message doesn't handle parameterized test cases", "user": {"login": "fubuloubu", "id": 3859395, "node_id": "MDQ6VXNlcjM4NTkzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3859395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fubuloubu", "html_url": "https://github.com/fubuloubu", "followers_url": "https://api.github.com/users/fubuloubu/followers", "following_url": "https://api.github.com/users/fubuloubu/following{/other_user}", "gists_url": "https://api.github.com/users/fubuloubu/gists{/gist_id}", "starred_url": "https://api.github.com/users/fubuloubu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fubuloubu/subscriptions", "organizations_url": "https://api.github.com/users/fubuloubu/orgs", "repos_url": "https://api.github.com/users/fubuloubu/repos", "events_url": "https://api.github.com/users/fubuloubu/events{/privacy}", "received_events_url": "https://api.github.com/users/fubuloubu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-19T02:07:42Z", "updated_at": "2020-06-19T07:16:07Z", "closed_at": "2020-06-19T07:16:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was having a problem with a warning message in Hypothesis that throws an error because it was parameterized test cases. Here is the trace:\r\n\r\n```\r\n             ...\r\n            # Warn about function-scoped fixtures, excluding autouse fixtures because\r\n            # the advice is probably not actionable and the status quo seems OK...\r\n            # See https://github.com/HypothesisWorks/hypothesis/issues/377 for detail.\r\n            msg = item.nodeid + (\r\n                \" uses the %r fixture, which is reset between function calls but not \"\r\n                \"between test cases generated by `@given(...)`.  You can change it to \"\r\n                \"a module- or session-scoped fixture if it is safe to reuse; if not \"\r\n                \"we recommend using a context manager inside your test function.  See \"\r\n                \"https://docs.pytest.org/en/latest/fixture.html#sharing-test-data \"\r\n                \"for details on fixture scope.\"\r\n            )\r\n            argnames = None\r\n            for fx_defs in item._request._fixturemanager.getfixtureinfo(\r\n                node=item, func=item.function, cls=None\r\n            ).name2fixturedefs.values():\r\n                if argnames is None:\r\n                    argnames = frozenset(signature(item.function).parameters)\r\n                for fx in fx_defs:\r\n                    if fx.argname in argnames:\r\n                        active_fx = item._request._get_active_fixturedef(fx.argname)\r\n                        if active_fx.scope == \"function\":\r\n>                           note_deprecation(msg % (fx.argname,), since=\"2020-02-29\")\r\nE                           ValueError: unsupported format character ']' (0x5d) at index 68\r\n```\r\nYou can see the full trace here: https://github.com/vyperlang/vyper/pull/2012/checks?check_run_id=786507800#step:5:74\r\n\r\n---\r\n\r\nI tracked it down to this change, which introduced `msg` (in `v3.8.6`):\r\nhttps://github.com/HypothesisWorks/hypothesis/pull/2387/files#diff-f589f51ad1743b71b37b1cbce2d8031bR152-R159\r\n\r\nApparently, string concatenation using `+` doesn't like parametrized test node ids for whatever reason (e.g. `test_something_parametrized[1]`), so this is the problem.\r\n\r\nMy proposed solution would be to stick `%s` back into `msg`, and augment the deprecation notice with `item.nodeid` like it used to be. It at least works for me when I monkey patch it locally.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2469/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2462", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2462/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2462/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2462/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2462", "id": 637668711, "node_id": "MDU6SXNzdWU2Mzc2Njg3MTE=", "number": 2462, "title": "fake_subTest() missing 1 required positional argument: 'self'", "user": {"login": "jimmy-lt", "id": 386933, "node_id": "MDQ6VXNlcjM4NjkzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/386933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimmy-lt", "html_url": "https://github.com/jimmy-lt", "followers_url": "https://api.github.com/users/jimmy-lt/followers", "following_url": "https://api.github.com/users/jimmy-lt/following{/other_user}", "gists_url": "https://api.github.com/users/jimmy-lt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimmy-lt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimmy-lt/subscriptions", "organizations_url": "https://api.github.com/users/jimmy-lt/orgs", "repos_url": "https://api.github.com/users/jimmy-lt/repos", "events_url": "https://api.github.com/users/jimmy-lt/events{/privacy}", "received_events_url": "https://api.github.com/users/jimmy-lt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-12T10:56:36Z", "updated_at": "2020-07-27T06:25:43Z", "closed_at": "2020-07-27T06:25:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hypotesis is failing when running a `unittest` with a subTest().\r\n\r\n```py\r\nTraceback (most recent call last):\r\n  File \"/tests/common/test_components.py\", line 91, in test__located_component_multiple_components_registration\r\n    c1_name=registry_identifier_strategy(),\r\n  File \"/lib/python3.8/site-packages/hypothesis/core.py\", line 1102, in wrapped_test\r\n    raise the_error_hypothesis_found\r\n  File \"/tests/common/test_components.py\", line 150, in test__located_component_multiple_components_registration\r\n    with self.subTest(action='count'):\r\n  File \"/usr/lib/python3.8/contextlib.py\", line 240, in helper\r\n    return _GeneratorContextManager(func, args, kwds)\r\n  File \"/usr/lib/python3.8/contextlib.py\", line 83, in __init__\r\n    self.gen = func(*args, **kwds)\r\nTypeError: fake_subTest() missing 1 required positional argument: 'self'\r\n```\r\n\r\n### Version information\r\n\r\n* Python 3.8.3\r\n* hypothesis 5.16.1", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2462/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2444", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2444/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2444/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2444/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2444", "id": 621977996, "node_id": "MDU6SXNzdWU2MjE5Nzc5OTY=", "number": 2444, "title": "Python 3.9: get_type cannot resolve some typing types to a strategy", "user": {"login": "encukou", "id": 302922, "node_id": "MDQ6VXNlcjMwMjkyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/encukou", "html_url": "https://github.com/encukou", "followers_url": "https://api.github.com/users/encukou/followers", "following_url": "https://api.github.com/users/encukou/following{/other_user}", "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}", "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/encukou/subscriptions", "organizations_url": "https://api.github.com/users/encukou/orgs", "repos_url": "https://api.github.com/users/encukou/repos", "events_url": "https://api.github.com/users/encukou/events{/privacy}", "received_events_url": "https://api.github.com/users/encukou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-20T18:07:34Z", "updated_at": "2020-05-21T14:15:32Z", "closed_at": "2020-05-21T14:15:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Under Python 3.9 with the [test & tools libraries](https://github.com/HypothesisWorks/hypothesis/blob/master/CONTRIBUTING.rst#installing-from-source-and-testing) installed, `test_lookup.test_resolves_weird_types` fails to resolve `typing.Sequence` and `typing.Mapping` into a strategy. It tries to resolve the following types:\r\n\r\n* `collections.abc.ByteString` (a `typing.Sequence`)\r\n* `collections.UserString` (a `typing.Sequence`)\r\n* `sortedcontainers.sorteddict.SortedKeysView` (a `typing.Sequence`)\r\n* `more_itertools.more.SequenceView` (a `typing.Sequence`)\r\n* `os._Environ` (a `typing.Mapping`)\r\n\r\nIt seems like any type registered as a `collections.abc.Mapping` is tried when resolving `typing.Mapping`, and the same for `Sequence`. But I am not sure what the code is doing nor what it should be doing. \r\n\r\n\r\n<details><summary>Example traceback</summary><pre><code>\r\n______________________________________________________ test_resolves_weird_types[typ0] _______________________________________________________\r\nTraceback (most recent call last):\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/tests/cover/test_lookup.py\", line 249, in test_resolves_weird_types\r\n    from_type(typ).example()\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/strategies.py\", line 315, in example\r\n    example_generating_inner_function()\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/strategies.py\", line 303, in example_generating_inner_function\r\n    @settings(\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/core.py\", line 1102, in wrapped_test\r\n    raise the_error_hypothesis_found\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/core.py\", line 1071, in wrapped_test\r\n    state.run_engine()\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/core.py\", line 732, in run_engine\r\n    runner.run()\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\", line 458, in run\r\n    self._run()\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\", line 857, in _run\r\n    self.generate_new_examples()\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\", line 661, in generate_new_examples\r\n    minimal_example = self.cached_test_function(\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\", line 1034, in cached_test_function\r\n    self.test_function(data)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\", line 180, in test_function\r\n    self.__stoppable_test_function(data)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\", line 162, in __stoppable_test_function\r\n    self._test_function(data)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/core.py\", line 685, in _execute_once_for_engine\r\n    escalate_hypothesis_internal_error()\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/core.py\", line 656, in _execute_once_for_engine\r\n    result = self.execute_once(data)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/core.py\", line 611, in execute_once\r\n    result = self.test_runner(data, run)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/executors.py\", line 52, in default_new_style_executor\r\n    return function(data)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/core.py\", line 552, in run\r\n    args, kwargs = data.draw(self.search_strategy)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/data.py\", line 889, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/collections.py\", line 57, in do_draw\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/collections.py\", line 57, in &lt;genexpr>\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/data.py\", line 884, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/strategies.py\", line 658, in do_draw\r\n    result = self.pack(data.draw(self.mapped_strategy))\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/data.py\", line 884, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/lazy.py\", line 150, in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/data.py\", line 884, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/strategies.py\", line 658, in do_draw\r\n    result = self.pack(data.draw(self.mapped_strategy))\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/data.py\", line 884, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/collections.py\", line 57, in do_draw\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/collections.py\", line 57, in &lt;genexpr>\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/data.py\", line 884, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/flatmapped.py\", line 42, in do_draw\r\n    return data.draw(expanded_source)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/data.py\", line 871, in draw\r\n    strategy.validate()\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/strategies.py\", line 378, in validate\r\n    self.do_validate()\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/lazy.py\", line 118, in do_validate\r\n    w.validate()\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/strategies.py\", line 379, in validate\r\n    self.is_empty\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/strategies.py\", line 126, in accept\r\n    recur(self)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/strategies.py\", line 122, in recur\r\n    mapping[strat] = getattr(strat, calculation)(recur)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/deferred.py\", line 80, in calc_is_empty\r\n    return recur(self.wrapped_strategy)\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/deferred.py\", line 43, in wrapped_strategy\r\n    result = self.__definition()\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/core.py\", line 1338, in &lt;lambda>\r\n    lambda thing: deferred(lambda: _from_type(thing)),\r\n  File \"/home/pviktori/dev/hypothesis/hypothesis-python/src/hypothesis/strategies/_internal/core.py\", line 1452, in _from_type\r\n    raise ResolutionFailed(\r\nhypothesis.errors.ResolutionFailed: Could not resolve &lt;class 'sortedcontainers.sorteddict.SortedItemsView'> to a strategy; consider using register_type_strategy\r\n</code></pre></details>", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2444/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2441", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2441/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2441/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2441/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2441", "id": 621945809, "node_id": "MDExOlB1bGxSZXF1ZXN0NDIwOTAzMTM2", "number": 2441, "title": "Python 3.9: Treat missing __args__ on generic types as None", "user": {"login": "encukou", "id": 302922, "node_id": "MDQ6VXNlcjMwMjkyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/302922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/encukou", "html_url": "https://github.com/encukou", "followers_url": "https://api.github.com/users/encukou/followers", "following_url": "https://api.github.com/users/encukou/following{/other_user}", "gists_url": "https://api.github.com/users/encukou/gists{/gist_id}", "starred_url": "https://api.github.com/users/encukou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/encukou/subscriptions", "organizations_url": "https://api.github.com/users/encukou/orgs", "repos_url": "https://api.github.com/users/encukou/repos", "events_url": "https://api.github.com/users/encukou/events{/privacy}", "received_events_url": "https://api.github.com/users/encukou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-20T17:22:02Z", "updated_at": "2020-05-21T16:13:07Z", "closed_at": "2020-05-21T14:15:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2441", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2441", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2441.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2441.patch", "merged_at": "2020-05-21T14:15:32Z"}, "body": "In Python 3.9, the `__args__` attribute is unset rather than set to None on types that aren't specialized.\r\n\r\nSee:\r\n- https://docs.python.org/3.9/whatsnew/changelog.html?highlight=__args__#id2 (search `__args__`)\r\n- https://bugs.python.org/issue40397\r\n\r\nCloses #2444.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2441/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2435", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2435/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2435/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2435/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2435", "id": 620186137, "node_id": "MDExOlB1bGxSZXF1ZXN0NDE5NDgyNDQw", "number": 2435, "title": "Implement thread-local strategy cache", "user": {"login": "Stranger6667", "id": 1236561, "node_id": "MDQ6VXNlcjEyMzY1NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1236561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stranger6667", "html_url": "https://github.com/Stranger6667", "followers_url": "https://api.github.com/users/Stranger6667/followers", "following_url": "https://api.github.com/users/Stranger6667/following{/other_user}", "gists_url": "https://api.github.com/users/Stranger6667/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stranger6667/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stranger6667/subscriptions", "organizations_url": "https://api.github.com/users/Stranger6667/orgs", "repos_url": "https://api.github.com/users/Stranger6667/repos", "events_url": "https://api.github.com/users/Stranger6667/events{/privacy}", "received_events_url": "https://api.github.com/users/Stranger6667/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-18T12:54:33Z", "updated_at": "2020-05-19T08:57:39Z", "closed_at": "2020-05-19T08:50:05Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2435", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2435", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2435.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2435.patch", "merged_at": "2020-05-19T08:50:05Z"}, "body": "Resolves #2433 \r\n\r\nBased on the discussion there. This approach implements a per-thread cache instance, rather than a single cache instance with storage inside.\r\n\r\nPosting it for initial review, will a test & notes later. @Zac-HD @DRMacIver please take a look\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2435/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2433", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2433/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2433/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2433/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2433", "id": 619486798, "node_id": "MDU6SXNzdWU2MTk0ODY3OTg=", "number": 2433, "title": "Strategy cache thread-safety", "user": {"login": "Stranger6667", "id": 1236561, "node_id": "MDQ6VXNlcjEyMzY1NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1236561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stranger6667", "html_url": "https://github.com/Stranger6667", "followers_url": "https://api.github.com/users/Stranger6667/followers", "following_url": "https://api.github.com/users/Stranger6667/following{/other_user}", "gists_url": "https://api.github.com/users/Stranger6667/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stranger6667/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stranger6667/subscriptions", "organizations_url": "https://api.github.com/users/Stranger6667/orgs", "repos_url": "https://api.github.com/users/Stranger6667/repos", "events_url": "https://api.github.com/users/Stranger6667/events{/privacy}", "received_events_url": "https://api.github.com/users/Stranger6667/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-16T14:24:27Z", "updated_at": "2020-05-19T08:50:05Z", "closed_at": "2020-05-19T08:50:05Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nI encountered a thread-safety issue when multiple threads create strategies. It happens in Schemathesis and the workflow is:\r\n- multiple workers are spawned and consume incoming events\r\n- each event contains data, that is used to create a strategy via `hypothesis_jsonschema.from_schema` \r\n\r\nWith some probability, a worker thread can fail with an exception like this:\r\n\r\n```python-traceback\r\nFile /.virtualenvs/schemathesis/lib/python3.8/site-packages/hypothesis/strategies/_internal/core.py\", line 172, in cached_strategy\r\nE             STRATEGY_CACHE[cache_key] = result\r\nE           File \"/.virtualenvs/schemathesis/lib/python3.8/site-packages/hypothesis/internal/cache.py\", line 121, in __setitem__\r\nE             assert evicted.score <= self.data[0].score\r\nE         AssertionError: assert [1, 10062] <= [1, 6901]\r\n```\r\n\r\nHowever, this can be reproduced with this snippet:\r\n\r\n```python\r\nimport threading\r\nfrom hypothesis import strategies as st                                                                                                                                                                                                                                                                                       \r\nfrom functools import partial                                                                                                                                                                                                                                                                                   \r\n\r\ndef target(): \r\n     for _ in range(1000): \r\n         st.builds(partial(str)) \r\n                                                                                                                                                                                                                                                                                                                 \r\nfor _ in range(4): \r\n     worker = threading.Thread(target=target) \r\n     worker.start()\r\n```\r\n\r\nEnvironment:\r\n- Python 3.8.2\r\n- Hypothesis 5.14.0\r\n\r\nAnd the output is:\r\n\r\n```python-traceback                                                                                                                                                                                                                                         \r\nException in thread Thread-2:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\r\nException in thread Thread-3:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\r\n    self.run()\r\n  File \"/usr/lib/python3.8/threading.py\", line 870, in run\r\nIn [8]:     self._target(*self._args, **self._kwargs)                                                                                                                                                                                                                                                                   \r\n  File \"<ipython-input-4-5e40ee0ad813>\", line 3, in target\r\n    self.run()\r\n  File \"/usr/lib/python3.8/threading.py\", line 870, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"<ipython-input-4-5e40ee0ad813>\", line 3, in target\r\n  File \"/.virtualenvs/schemathesis/lib/python3.8/site-packages/hypothesis/strategies/_internal/core.py\", line 1177, in builds\r\n  File \"/.virtualenvs/schemathesis/lib/python3.8/site-packages/hypothesis/strategies/_internal/core.py\", line 1177, in builds\r\n    @defines_strategy\r\n  File \"/.virtualenvs/schemathesis/lib/python3.8/site-packages/hypothesis/strategies/_internal/core.py\", line 172, in cached_strategy\r\n    STRATEGY_CACHE[cache_key] = result\r\n  File \"/.virtualenvs/schemathesis/lib/python3.8/site-packages/hypothesis/internal/cache.py\", line 119, in __setitem__\r\n    @defines_strategy\r\n  File \"/.virtualenvs/schemathesis/lib/python3.8/site-packages/hypothesis/strategies/_internal/core.py\", line 172, in cached_strategy\r\n    assert evicted.score <= self.data[0].score\r\nAssertionError\r\n    STRATEGY_CACHE[cache_key] = result\r\n  File \"/.virtualenvs/schemathesis/lib/python3.8/site-packages/hypothesis/internal/cache.py\", line 119, in __setitem__\r\n    assert evicted.score <= self.data[0].score\r\nAssertionError\r\n```\r\n\r\nAs far as I see it is caused by shared storage inside `hypothesis.strategies._internal.core.STRATEGY_CACHE` and access to it is not thread-safe.\r\n\r\nI don't know if such usage workflow was expected, but a trick with `threading.local()` seems to work\r\n\r\n```\r\nclass GenericCache:\r\n    __slots__ = (\"max_size\", \"__pinned_entry_count\", \"_storage\")\r\n\r\n    def __init__(self, max_size):\r\n        self.max_size = max_size\r\n        self._storage = threading.local()\r\n\r\n    @property\r\n    def data(self):\r\n        try:\r\n            return self._storage.data\r\n        except AttributeError:\r\n            self._storage.data = []\r\n            return self._storage.data\r\n\r\n    @property\r\n    def keys_to_indices(self):\r\n        ...\r\n```\r\n(a straightforward implementation, not sure if it will work in 100% cases)\r\n\r\nI assume that alternative would be using locks either in Hypothesis or on the Schemathesis side, which doesn't seem nice to me.\r\n\r\nWhat do you think about making this cache thread-safe?\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2433/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2433/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2406", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2406/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2406/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2406/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2406", "id": 604138524, "node_id": "MDU6SXNzdWU2MDQxMzg1MjQ=", "number": 2406, "title": "`KeyError` in `draw_capped_multipart`", "user": {"login": "RUrlus", "id": 18510572, "node_id": "MDQ6VXNlcjE4NTEwNTcy", "avatar_url": "https://avatars.githubusercontent.com/u/18510572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RUrlus", "html_url": "https://github.com/RUrlus", "followers_url": "https://api.github.com/users/RUrlus/followers", "following_url": "https://api.github.com/users/RUrlus/following{/other_user}", "gists_url": "https://api.github.com/users/RUrlus/gists{/gist_id}", "starred_url": "https://api.github.com/users/RUrlus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RUrlus/subscriptions", "organizations_url": "https://api.github.com/users/RUrlus/orgs", "repos_url": "https://api.github.com/users/RUrlus/repos", "events_url": "https://api.github.com/users/RUrlus/events{/privacy}", "received_events_url": "https://api.github.com/users/RUrlus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-04-21T17:03:56Z", "updated_at": "2020-04-24T08:42:15Z", "closed_at": "2020-04-22T01:06:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nA `KeyError` is raised in `draw_capped_multipart` in version 5.8.1 and 5.10.1 that is not raised in 5.8.0.\r\n\r\nA reproducible example and full stacktrace are given below.\r\n\r\n**Error**:\r\n\r\n```python\r\ndata = ConjectureData(VALID, 1 bytes, frozen), min_value = Timestamp('2017-01-01 00:00:00'), max_value = Timestamp('2019-01-01 00:00:00')\r\n\r\n    def draw_capped_multipart(data, min_value, max_value):\r\n        assert isinstance(min_value, (dt.date, dt.time, dt.datetime))\r\n        assert type(min_value) == type(max_value)\r\n        assert min_value <= max_value\r\n        result = {}\r\n        cap_low, cap_high = True, True\r\n        duration_names_by_type = {\r\n            dt.date: DATENAMES,\r\n            dt.time: TIMENAMES,\r\n            dt.datetime: DATENAMES + TIMENAMES,\r\n        }\r\n>       for name in duration_names_by_type[type(min_value)]:\r\nE       KeyError: <class 'pandas._libs.tslibs.timestamps.Timestamp'>\r\n```\r\n<details><summary>Reproducible code:</summary>\r\n<p>\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\nfrom hypothesis import given, settings\r\nimport hypothesis.strategies as hst\r\nfrom hypothesis.extra import pandas as hpd\r\n\r\n@given(\r\n    hpd.data_frames(columns=[\r\n        hpd.column(name='prog_start',\r\n                   elements=hst.datetimes(\r\n                       min_value=pd.Timestamp(2017, 1, 1),\r\n                       max_value=pd.Timestamp(2019, 1, 1)\r\n                   ), unique=True),\r\n        hpd.column(name='mat_code',\r\n                   elements=hst.integers(min_value=100)),\r\n        hpd.column(name='SOME***@#!@%*FLoat',\r\n                   elements=hst.floats(max_value=1000.0)\r\n                   ),\r\n        hpd.column(name='useful_STR',\r\n                   elements=hst.text()\r\n                   ),\r\n        ], index=hpd.range_indexes(min_size=3)\r\n    )\r\n)\r\n@settings(deadline=None)\r\ndef test_hypothesis_testing(df):\r\n    pass\r\n```\r\n</p>\r\n</details>\r\n\r\n<details><summary>full stacktrace:</summary>\r\n<p>\r\n\r\n```python\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/core.py:678: in _execute_once_for_engine\r\n    escalate_hypothesis_internal_error()\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/core.py:649: in _execute_once_for_engine\r\n    result = self.execute_once(data)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/core.py:604: in execute_once\r\n    result = self.test_runner(data, run)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/executors.py:52: in default_new_style_executor\r\n    return function(data)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/core.py:545: in run\r\n    args, kwargs = data.draw(self.search_strategy)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:893: in draw\r\n    return strategy.do_draw(self)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py:57: in do_draw\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py:57: in <genexpr>\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:888: in draw\r\n    return strategy.do_draw(self)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py:658: in do_draw\r\n    result = self.pack(data.draw(self.mapped_strategy))\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:888: in draw\r\n    return strategy.do_draw(self)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py:150: in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:888: in draw\r\n    return strategy.do_draw(self)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py:658: in do_draw\r\n    result = self.pack(data.draw(self.mapped_strategy))\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:888: in draw\r\n    return strategy.do_draw(self)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py:57: in do_draw\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py:57: in <genexpr>\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:888: in draw\r\n    return strategy.do_draw(self)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py:150: in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:888: in draw\r\n    return strategy.do_draw(self)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py:150: in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:888: in draw\r\n    return strategy.do_draw(self)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/core.py:1722: in do_draw\r\n    return self.definition(data.draw, *self.args, **self.kwargs)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/extra/pandas/impl.py:584: in just_draw_columns\r\n    value = draw(c.elements)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:888: in draw\r\n    return strategy.do_draw(self)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py:150: in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:888: in draw\r\n    return strategy.do_draw(self)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/datetime.py:131: in do_draw\r\n    result = self.draw_naive_datetime_and_combine(data, tz)\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/datetime.py:145: in draw_naive_datetime_and_combine\r\n    result = draw_capped_multipart(data, self.min_value, self.max_value)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ndata = ConjectureData(VALID, 1 bytes, frozen), min_value = Timestamp('2017-01-01 00:00:00'), max_value = Timestamp('2019-01-01 00:00:00')\r\n\r\n    def draw_capped_multipart(data, min_value, max_value):\r\n        assert isinstance(min_value, (dt.date, dt.time, dt.datetime))\r\n        assert type(min_value) == type(max_value)\r\n        assert min_value <= max_value\r\n        result = {}\r\n        cap_low, cap_high = True, True\r\n        duration_names_by_type = {\r\n            dt.date: DATENAMES,\r\n            dt.time: TIMENAMES,\r\n            dt.datetime: DATENAMES + TIMENAMES,\r\n        }\r\n>       for name in duration_names_by_type[type(min_value)]:\r\nE       KeyError: <class 'pandas._libs.tslibs.timestamps.Timestamp'>\r\n\r\n../../../../.pyenv/versions/3.7.5/envs/TOOLS/lib/python3.7/site-packages/hypothesis/strategies/_internal/datetime.py:92: KeyError\r\n========================================================================================================== short test summary info ===========================================================================================================\r\nFAILED hypothesis_bug.py::test_hypothesis_testing - KeyError: <class 'pandas._libs.tslibs.timestamps.Timestamp'>\r\n```\r\n</p>\r\n</details>", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2406/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2372", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2372/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2372/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2372/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2372", "id": 581183520, "node_id": "MDExOlB1bGxSZXF1ZXN0Mzg4MjgzMTQ2", "number": 2372, "title": "Give `from_model` a positional-only argument", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-14T12:14:56Z", "updated_at": "2020-03-18T23:15:01Z", "closed_at": "2020-03-18T23:14:58Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2372", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2372", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2372.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2372.patch", "merged_at": "2020-03-18T23:14:58Z"}, "body": "Well, as much as possible before Python 3.8 anyway.  Closes #2369. ", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2372/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2369", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2369/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2369/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2369/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2369", "id": 578896868, "node_id": "MDU6SXNzdWU1Nzg4OTY4Njg=", "number": 2369, "title": "Parameter name clash in extra.django.from_model", "user": {"login": "DanLipsitt", "id": 578773, "node_id": "MDQ6VXNlcjU3ODc3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/578773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanLipsitt", "html_url": "https://github.com/DanLipsitt", "followers_url": "https://api.github.com/users/DanLipsitt/followers", "following_url": "https://api.github.com/users/DanLipsitt/following{/other_user}", "gists_url": "https://api.github.com/users/DanLipsitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanLipsitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanLipsitt/subscriptions", "organizations_url": "https://api.github.com/users/DanLipsitt/orgs", "repos_url": "https://api.github.com/users/DanLipsitt/repos", "events_url": "https://api.github.com/users/DanLipsitt/events{/privacy}", "received_events_url": "https://api.github.com/users/DanLipsitt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-03-10T22:25:01Z", "updated_at": "2020-03-18T23:14:58Z", "closed_at": "2020-03-18T23:14:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "`from_model`'s first argument is `model`:\r\n\r\nhttps://github.com/HypothesisWorks/hypothesis/blob/d159096999e9e65c77039a25f539ea0717a9f1de/hypothesis-python/src/hypothesis/extra/django/_impl.py#L57-L59\r\n\r\nThis leads to an error when trying to write a strategy for a class that has a field named `model`. For example:\r\n\r\n```python\r\nfrom django.db.models import Model, CharField\r\nclass Car(Model):\r\n    model = CharField(help_text=\"The model of the car.\")\r\n\r\ncar_strategy = from_model(Car, model='Mustang')\r\n```\r\n\r\nThis will result in the following error:\r\n\r\n```\r\nTypeError: from_model() got multiple values for argument 'model'\r\n```\r\n\r\nPerhaps the first argument to `from_model` could be named `_model` or `_hypothesis_model` or something like that?", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2369/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2369/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2363", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2363/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2363/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2363/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2363", "id": 573454817, "node_id": "MDExOlB1bGxSZXF1ZXN0MzgxOTczOTk5", "number": 2363, "title": "Ensure stateful vars are defined before use", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-01T01:49:46Z", "updated_at": "2020-04-15T10:41:21Z", "closed_at": "2020-03-24T20:24:50Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2363", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2363", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2363.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2363.patch", "merged_at": "2020-03-24T20:24:50Z"}, "body": "Fixes #2341, after considerably more frustrated debugging than the diff might suggest :sweat_smile: ", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2363/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2354", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2354/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2354/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2354/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2354", "id": 565341051, "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDAwMjAw", "number": 2354, "title": "Handle `datetime64`, `timedelta64` dtypes without time units", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-14T13:55:48Z", "updated_at": "2020-02-16T22:10:47Z", "closed_at": "2020-02-16T22:10:41Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2354", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2354", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2354.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2354.patch", "merged_at": "2020-02-16T22:10:41Z"}, "body": "Closes #2351. \r\n\r\nContrary to my suggestion in that issue, I didn't add any validation logic to `from_dtype()` - generating scalars with varied units is at least potentially useful.  Improving `arrays()` so that we no longer infer such inconsistent strategies, and give a better error message if one is explicitly passed, is IMO sufficient.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2354/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2354/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2351", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2351/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2351/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2351/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2351", "id": 564352490, "node_id": "MDU6SXNzdWU1NjQzNTI0OTA=", "number": 2351, "title": "Numpy strategy fails with timedelta64 dtype", "user": {"login": "langfield", "id": 35980963, "node_id": "MDQ6VXNlcjM1OTgwOTYz", "avatar_url": "https://avatars.githubusercontent.com/u/35980963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/langfield", "html_url": "https://github.com/langfield", "followers_url": "https://api.github.com/users/langfield/followers", "following_url": "https://api.github.com/users/langfield/following{/other_user}", "gists_url": "https://api.github.com/users/langfield/gists{/gist_id}", "starred_url": "https://api.github.com/users/langfield/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/langfield/subscriptions", "organizations_url": "https://api.github.com/users/langfield/orgs", "repos_url": "https://api.github.com/users/langfield/repos", "events_url": "https://api.github.com/users/langfield/events{/privacy}", "received_events_url": "https://api.github.com/users/langfield/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-12T23:53:51Z", "updated_at": "2020-02-16T22:10:41Z", "closed_at": "2020-02-16T22:10:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting an error I can't make sense of when generating a numpy array with `dtype=np.dtype(\"m8\")`, which corresponds to `dtype=timedelta64`, and `shape=(1,1)`.\r\nThe trace is given below.\r\n\r\nAny help would be greatly appreciated!\r\n\r\nIf it's useful to know, the context is that I'm trying to write a strategy which will generate an arbitrary numpy array of any valid type and shape, within reasonable memory constraints.\r\n\r\n```\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.7.6, pytest-5.3.2, py-1.8.1, pluggy-0.13.1\r\nrootdir: /home/whitaker/pkgs/asta\r\nplugins: hypothesis-4.57.1\r\ncollected 1 item\r\n\r\nasta/tests/test_array.py F                                               [100%]\r\n\r\n=================================== FAILURES ===================================\r\n_____________________ test_array_passes_generic_isinstance _____________________\r\n\r\n    @given(hnp.arrays(dtype=strats.dtypes(), shape=strats.shapes()))\r\n>   def test_array_passes_generic_isinstance(arr: Array) -> None:\r\n\r\nasta/tests/test_array.py:14: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/core.py:698: in _execute_once_for_engine\r\n    escalate_hypothesis_internal_error()\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/core.py:669: in _execute_once_for_engine\r\n    result = self.execute_once(data)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/core.py:624: in execute_once\r\n    result = self.test_runner(data, run)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/executors.py:56: in default_new_style_executor\r\n    return function(data)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/core.py:565: in run\r\n    args, kwargs = data.draw(self.search_strategy)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:887: in draw\r\n    return strategy.do_draw(self)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py:61: in do_draw\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py:61: in <genexpr>\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:882: in draw\r\n    return strategy.do_draw(self)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py:669: in do_draw\r\n    result = self.pack(data.draw(self.mapped_strategy))\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:882: in draw\r\n    return strategy.do_draw(self)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py:156: in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:882: in draw\r\n    return strategy.do_draw(self)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py:669: in do_draw\r\n    result = self.pack(data.draw(self.mapped_strategy))\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:882: in draw\r\n    return strategy.do_draw(self)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py:61: in do_draw\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py:61: in <genexpr>\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:882: in draw\r\n    return strategy.do_draw(self)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py:156: in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:882: in draw\r\n    return strategy.do_draw(self)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/strategies/_internal/flatmapped.py:46: in do_draw\r\n    return data.draw(expanded_source)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:882: in draw\r\n    return strategy.do_draw(self)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py:156: in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:882: in draw\r\n    return strategy.do_draw(self)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/strategies/_internal/flatmapped.py:46: in do_draw\r\n    return data.draw(expanded_source)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:882: in draw\r\n    return strategy.do_draw(self)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py:156: in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:882: in draw\r\n    return strategy.do_draw(self)\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/extra/numpy.py:275: in do_draw\r\n    self.set_element(data, one_element, 0, self.fill)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <hypothesis.extra.numpy.ArrayStrategy object at 0x7f370ea63bd0>\r\ndata = ConjectureData(VALID, 14 bytes, frozen)\r\nresult = array([0], dtype=timedelta64), idx = 0\r\nstrategy = from_dtype(dtype('<m8'))\r\n\r\n    def set_element(self, data, result, idx, strategy=None):\r\n        strategy = strategy or self.element_strategy\r\n        val = data.draw(strategy)\r\n>       result[idx] = val\r\nE       TypeError: Cannot cast NumPy timedelta64 scalar from metadata [Y] to  according to the rule 'same_kind'\r\n\r\n../../conda3/envs/bees/lib/python3.7/site-packages/hypothesis/extra/numpy.py:161: TypeError\r\n----------------------------- Captured stdout call -----------------------------\r\nType id: m8\r\n---------------------------------- Hypothesis ----------------------------------\r\nYou can add @seed(122549914271068826677002920208694012959) to this test or run pytest with --hypothesis-seed=122549914271068826677002920208694012959 to reproduce this failure.\r\n============================== 1 failed in 0.35s ===============================\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2351/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2351/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2341", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2341/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2341/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2341/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2341", "id": 559668548, "node_id": "MDU6SXNzdWU1NTk2Njg1NDg=", "number": 2341, "title": "Stateful printing referring to undefined variable", "user": {"login": "bmerry", "id": 1963944, "node_id": "MDQ6VXNlcjE5NjM5NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1963944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmerry", "html_url": "https://github.com/bmerry", "followers_url": "https://api.github.com/users/bmerry/followers", "following_url": "https://api.github.com/users/bmerry/following{/other_user}", "gists_url": "https://api.github.com/users/bmerry/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmerry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmerry/subscriptions", "organizations_url": "https://api.github.com/users/bmerry/orgs", "repos_url": "https://api.github.com/users/bmerry/repos", "events_url": "https://api.github.com/users/bmerry/events{/privacy}", "received_events_url": "https://api.github.com/users/bmerry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-02-04T11:51:34Z", "updated_at": "2020-03-24T20:24:50Z", "closed_at": "2020-03-24T20:24:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Run this example with pytest (hypothesis 5.4.1, but also seen with 4.57.1):\r\n```python\r\nimport hypothesis.strategies as st\r\nfrom hypothesis.stateful import RuleBasedStateMachine, Bundle, initialize, rule\r\n\r\n\r\nclass MyStateMachine(RuleBasedStateMachine):\r\n    data = Bundle('data')\r\n\r\n    @initialize(target=data, value=st.integers())\r\n    def init_data(self, value):\r\n        return value\r\n\r\n    @rule(d=data)\r\n    def mostly_fails(self, d):\r\n        assert d == 42\r\n\r\n\r\nTest = MyStateMachine.TestCase\r\n```\r\n\r\nIt reports this falsifying example:\r\n```\r\nFalsifying example:\r\nstate = MyStateMachine()\r\nv1 = state.init_data(value=v1)\r\nstate.mostly_fails(d=v1)\r\nstate.teardown()\r\n```\r\n\r\nBut v1 is never initially defined.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2341/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2334", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2334/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2334/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2334/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2334", "id": 558435936, "node_id": "MDU6SXNzdWU1NTg0MzU5MzY=", "number": 2334, "title": "hypothesis 5.4.0 broken on python3.5.2 on Linux", "user": {"login": "guihao-liang", "id": 14238915, "node_id": "MDQ6VXNlcjE0MjM4OTE1", "avatar_url": "https://avatars.githubusercontent.com/u/14238915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guihao-liang", "html_url": "https://github.com/guihao-liang", "followers_url": "https://api.github.com/users/guihao-liang/followers", "following_url": "https://api.github.com/users/guihao-liang/following{/other_user}", "gists_url": "https://api.github.com/users/guihao-liang/gists{/gist_id}", "starred_url": "https://api.github.com/users/guihao-liang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guihao-liang/subscriptions", "organizations_url": "https://api.github.com/users/guihao-liang/orgs", "repos_url": "https://api.github.com/users/guihao-liang/repos", "events_url": "https://api.github.com/users/guihao-liang/events{/privacy}", "received_events_url": "https://api.github.com/users/guihao-liang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 602737425, "node_id": "MDU6TGFiZWw2MDI3Mzc0MjU=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/tests/build/CI", "name": "tests/build/CI", "color": "fbca04", "default": false, "description": "about testing or deployment *of* Hypothesis"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-02-01T00:02:08Z", "updated_at": "2020-02-06T04:31:17Z", "closed_at": "2020-02-06T04:31:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**hypothesis** version in my virtualenv,\r\n```\r\n$ pip freeze | grep hypo\r\nhypothesis==5.4.0\r\n$ pip freeze | grep pytest\r\npytest==5.3.5\r\n$ uname -a\r\nLinux erdos 4.15.0-72-generic #81~16.04.1-Ubuntu SMP Tue Nov 26 16:34:21 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\n**Python** version,\r\n```\r\n$ python --version\r\nPython 3.5.2\r\n```\r\n\r\n**repro**,\r\n```\r\n$ pytest --version\r\nTraceback (most recent call last):\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/hypothesis/internal/compat.py\", line 78, in <module>\r\n    typing_root_type = (typing._Final, typing._GenericAlias)  # type: ignore\r\nAttributeError: module 'typing' has no attribute '_Final'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/bin/pytest\", line 8, in <module>\r\n    sys.exit(main())\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 73, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 224, in _prepareconfig\r\n    pluginmanager=pluginmanager, args=args\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/pluggy/hooks.py\", line 286, in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/pluggy/manager.py\", line 87, in <lambda>\r\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/pluggy/callers.py\", line 203, in _multicall\r\n    gen.send(outcome)\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/_pytest/helpconfig.py\", line 89, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/pluggy/callers.py\", line 80, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/pluggy/callers.py\", line 187, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 794, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 1000, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 948, in _preparse\r\n    self.pluginmanager.load_setuptools_entrypoints(\"pytest11\")\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/pluggy/manager.py\", line 299, in load_setuptools_entrypoints\r\n    plugin = ep.load()\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/importlib_metadata/__init__.py\", line 94, in load\r\n    module = import_module(match.group('module'))\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/lib/python3.5/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 944, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 222, in _call_with_frames_removed\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 944, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 222, in _call_with_frames_removed\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/_pytest/assertion/rewrite.py\", line 143, in exec_module\r\n    exec(co, module.__dict__)\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/hypothesis/__init__.py\", line 24, in <module>\r\n    from hypothesis._settings import HealthCheck, Phase, Verbosity, settings\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/_pytest/assertion/rewrite.py\", line 143, in exec_module\r\n    exec(co, module.__dict__)\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/hypothesis/_settings.py\", line 37, in <module>\r\n    from hypothesis.internal.reflection import get_pretty_function_description\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/_pytest/assertion/rewrite.py\", line 143, in exec_module\r\n    exec(co, module.__dict__)\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/hypothesis/internal/reflection.py\", line 29, in <module>\r\n    from hypothesis.internal.compat import (\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/_pytest/assertion/rewrite.py\", line 143, in exec_module\r\n    exec(co, module.__dict__)\r\n  File \"/home/guihao/nightly_build/guicreate/deps/env/local/lib/python3.5/site-packages/hypothesis/internal/compat.py\", line 81, in <module>\r\n    typing_root_type = (typing.TypingMeta, typing.TypeVar, typing._Union)  # type: ignore\r\nAttributeError: module 'typing' has no attribute '_Union'\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2334/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2334/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2329", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2329/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2329/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2329/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2329", "id": 552632663, "node_id": "MDExOlB1bGxSZXF1ZXN0MzY1MTAxMzYy", "number": 2329, "title": "Roll back 5.2.0 (numpy unicode fun) for now", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 590515268, "node_id": "MDU6TGFiZWw1OTA1MTUyNjg=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/flaky-tests", "name": "flaky-tests", "color": "5319e7", "default": false, "description": "for when our tests only sometimes pass"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-21T05:27:05Z", "updated_at": "2020-01-21T05:48:32Z", "closed_at": "2020-01-21T05:48:29Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2329", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2329", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2329.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2329.patch", "merged_at": "2020-01-21T05:48:29Z"}, "body": "Because https://github.com/numpy/numpy/issues/15363.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2329/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2329/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2319", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2319/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2319/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2319/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2319", "id": 548480511, "node_id": "MDU6SXNzdWU1NDg0ODA1MTE=", "number": 2319, "title": "Hypothesis' error reporting is broken in IPython (on Windows)", "user": {"login": "rsokl", "id": 29104956, "node_id": "MDQ6VXNlcjI5MTA0OTU2", "avatar_url": "https://avatars.githubusercontent.com/u/29104956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsokl", "html_url": "https://github.com/rsokl", "followers_url": "https://api.github.com/users/rsokl/followers", "following_url": "https://api.github.com/users/rsokl/following{/other_user}", "gists_url": "https://api.github.com/users/rsokl/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsokl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsokl/subscriptions", "organizations_url": "https://api.github.com/users/rsokl/orgs", "repos_url": "https://api.github.com/users/rsokl/repos", "events_url": "https://api.github.com/users/rsokl/events{/privacy}", "received_events_url": "https://api.github.com/users/rsokl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-11T21:09:26Z", "updated_at": "2020-01-12T15:49:13Z", "closed_at": "2020-01-12T15:49:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Introduced in #2313 \r\n\r\nContext: running a failing test in IPython on Windows, using Hypothesis 5.1.4\r\n\r\n`WinError123` is raised from `pathlib` when running a failing Hypothesis test in the IPython console or a notebook:\r\n\r\n```python\r\n@given(x=st.booleans())\r\ndef test(x):\r\n    assert False\r\n```\r\n```python\r\n>>> test()\r\n\r\nYou can add @seed(210798464927815903715427164820480292552) to this test to reproduce this failure.\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n~\\Anaconda3\\envs\\testing2\\lib\\site-packages\\hypothesis\\core.py in _execute_once_for_engine(self, data)\r\n    646         try:\r\n--> 647             result = self.execute_once(data)\r\n    648             if result is not None:\r\n\r\n~\\Anaconda3\\envs\\testing2\\lib\\site-packages\\hypothesis\\core.py in execute_once(self, data, print_example, is_final, expected_failure)\r\n    601         # In most cases this will delegate straight to `run(data)`.\r\n--> 602         result = self.test_runner(data, run)\r\n    603 \r\n\r\n~\\Anaconda3\\envs\\testing2\\lib\\site-packages\\hypothesis\\executors.py in default_new_style_executor(data, function)\r\n     51 def default_new_style_executor(data, function):\r\n---> 52     return function(data)\r\n     53 \r\n\r\n~\\Anaconda3\\envs\\testing2\\lib\\site-packages\\hypothesis\\core.py in run(data)\r\n    597                             report(output.getvalue())\r\n--> 598                         return test(*args, **kwargs)\r\n    599 \r\n\r\n<ipython-input-18-f7c304bea5eb> in test_range_length(x)\r\n      3 @given(x=st.booleans())\r\n----> 4 def test_range_length(x):\r\n      5     assert False\r\n\r\n~\\Anaconda3\\envs\\testing2\\lib\\site-packages\\hypothesis\\core.py in test(*args, **kwargs)\r\n    521                 start = benchmark_time()\r\n--> 522                 result = self.test(*args, **kwargs)\r\n    523                 finish = benchmark_time()\r\n\r\n<ipython-input-18-f7c304bea5eb> in test_range_length(x)\r\n      4 def test_range_length(x):\r\n----> 5     assert False\r\n      6 \r\n\r\nAssertionError: \r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nOSError                                   Traceback (most recent call last)\r\n<ipython-input-18-f7c304bea5eb> in <module>\r\n      5     assert False\r\n      6 \r\n----> 7 test_range_length()\r\n      8 # </COGINST>\r\n\r\n<ipython-input-18-f7c304bea5eb> in test_range_length()\r\n      2 # <COGINST>\r\n      3 @given(x=st.booleans())\r\n----> 4 def test_range_length(x):\r\n      5     assert False\r\n      6 \r\n\r\n~\\Anaconda3\\envs\\testing2\\lib\\site-packages\\hypothesis\\core.py in wrapped_test(*arguments, **kwargs)\r\n   1078                         get_trimmed_traceback()\r\n   1079                     )\r\n-> 1080                     raise the_error_hypothesis_found\r\n   1081 \r\n   1082         # After having created the decorated test function, we need to copy\r\n\r\n~\\Anaconda3\\envs\\testing2\\lib\\pathlib.py in resolve(self, strict)\r\n   1159         if self._closed:\r\n   1160             self._raise_closed()\r\n-> 1161         s = self._flavour.resolve(self, strict=strict)\r\n   1162         if s is None:\r\n   1163             # No symlink resolution => for consistency, raise an error if\r\n\r\n~\\Anaconda3\\envs\\testing2\\lib\\pathlib.py in resolve(self, path, strict)\r\n    203                 while True:\r\n    204                     try:\r\n--> 205                         s = self._ext_to_normal(_getfinalpathname(s))\r\n    206                     except FileNotFoundError:\r\n    207                         previous_s = s\r\n\r\nOSError: [WinError 123] The filename, directory name, or volume label syntax is incorrect: '<ipython-input-18-f7c304bea5eb>'\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2319/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2319/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2318", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2318/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2318/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2318/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2318", "id": 548480065, "node_id": "MDU6SXNzdWU1NDg0ODAwNjU=", "number": 2318, "title": "Error on Python 3.5.1: TypeError: Bound must be a type. Got <built-in function callable>.", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-11T21:04:56Z", "updated_at": "2020-01-12T15:49:13Z", "closed_at": "2020-01-12T15:49:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using hypothesis 5.1.4 with Python 3.5.1:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/bin/pytest\", line 8, in <module>\r\n    sys.exit(main())\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 72, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 223, in _prepareconfig\r\n    pluginmanager=pluginmanager, args=args\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/pluggy/hooks.py\", line 286, in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/pluggy/manager.py\", line 87, in <lambda>\r\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/pluggy/callers.py\", line 203, in _multicall\r\n    gen.send(outcome)\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/_pytest/helpconfig.py\", line 89, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/pluggy/callers.py\", line 80, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/pluggy/callers.py\", line 187, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 793, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 999, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 947, in _preparse\r\n    self.pluginmanager.load_setuptools_entrypoints(\"pytest11\")\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/pluggy/manager.py\", line 299, in load_setuptools_entrypoints\r\n    plugin = ep.load()\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/importlib_metadata/__init__.py\", line 94, in load\r\n    module = import_module(match.group('module'))\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 944, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 222, in _call_with_frames_removed\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 944, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 222, in _call_with_frames_removed\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/_pytest/assertion/rewrite.py\", line 143, in exec_module\r\n    exec(co, module.__dict__)\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/hypothesis/__init__.py\", line 24, in <module>\r\n    from hypothesis._settings import HealthCheck, Phase, Verbosity, settings\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/_pytest/assertion/rewrite.py\", line 143, in exec_module\r\n    exec(co, module.__dict__)\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/hypothesis/_settings.py\", line 37, in <module>\r\n    from hypothesis.internal.reflection import get_pretty_function_description\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/_pytest/assertion/rewrite.py\", line 143, in exec_module\r\n    exec(co, module.__dict__)\r\n  File \"/home/travis/build/pytest-dev/pytest/.tox/py35-xdist/lib/python3.5/site-packages/hypothesis/internal/reflection.py\", line 37, in <module>\r\n    C = TypeVar(\"C\", bound=callable)\r\n  File \"/opt/python/3.5.1/lib/python3.5/typing.py\", line 405, in __new__\r\n    self.__bound__ = _type_check(bound, \"Bound must be a type.\")\r\n  File \"/opt/python/3.5.1/lib/python3.5/typing.py\", line 299, in _type_check\r\n    raise TypeError(msg + \" Got %.100r.\" % (arg,))\r\nTypeError: Bound must be a type. Got <built-in function callable>.\r\n```\r\n\r\n(via https://github.com/pytest-dev/pytest/pull/6440#issuecomment-573353958)", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2318/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2318/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2313", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2313/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2313/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2313/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2313", "id": 548077916, "node_id": "MDExOlB1bGxSZXF1ZXN0MzYxNDQ4ODk4", "number": 2313, "title": "Fix is_hypothesis_file internal function", "user": {"login": "vxgmichel", "id": 7490006, "node_id": "MDQ6VXNlcjc0OTAwMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7490006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vxgmichel", "html_url": "https://github.com/vxgmichel", "followers_url": "https://api.github.com/users/vxgmichel/followers", "following_url": "https://api.github.com/users/vxgmichel/following{/other_user}", "gists_url": "https://api.github.com/users/vxgmichel/gists{/gist_id}", "starred_url": "https://api.github.com/users/vxgmichel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vxgmichel/subscriptions", "organizations_url": "https://api.github.com/users/vxgmichel/orgs", "repos_url": "https://api.github.com/users/vxgmichel/repos", "events_url": "https://api.github.com/users/vxgmichel/events{/privacy}", "received_events_url": "https://api.github.com/users/vxgmichel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-10T13:24:46Z", "updated_at": "2020-01-11T05:22:37Z", "closed_at": "2020-01-11T05:22:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2313", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2313", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2313.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2313.patch", "merged_at": "2020-01-11T05:22:37Z"}, "body": "This function used to incorrectly return `True` for files belonging to modules of the form `hypothesis{suffix}`. It now returns `False` for such files.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2313/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2311", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2311/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2311/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2311/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2311", "id": 546861692, "node_id": "MDU6SXNzdWU1NDY4NjE2OTI=", "number": 2311, "title": "Cannot unpack non-iterable MultipleResults object", "user": {"login": "vxgmichel", "id": 7490006, "node_id": "MDQ6VXNlcjc0OTAwMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7490006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vxgmichel", "html_url": "https://github.com/vxgmichel", "followers_url": "https://api.github.com/users/vxgmichel/followers", "following_url": "https://api.github.com/users/vxgmichel/following{/other_user}", "gists_url": "https://api.github.com/users/vxgmichel/gists{/gist_id}", "starred_url": "https://api.github.com/users/vxgmichel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vxgmichel/subscriptions", "organizations_url": "https://api.github.com/users/vxgmichel/orgs", "repos_url": "https://api.github.com/users/vxgmichel/repos", "events_url": "https://api.github.com/users/vxgmichel/events{/privacy}", "received_events_url": "https://api.github.com/users/vxgmichel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-08T13:30:23Z", "updated_at": "2020-01-09T01:49:15Z", "closed_at": "2020-01-09T01:49:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi !\r\n\r\nI ran into a problem with the falsifying examples produced by stateful testing with multiple results. \r\n\r\nConsider the following state machine:\r\n```python\r\nfrom hypothesis.stateful import Bundle, RuleBasedStateMachine\r\nfrom hypothesis.stateful import rule, multiple, initialize\r\n\r\n\r\nclass DatabaseComparison(RuleBasedStateMachine):\r\n\r\n    values = Bundle(\"values\")\r\n\r\n    @initialize(target=values)\r\n    def produce(self):\r\n        return multiple(1, 2, 3)\r\n\r\n    @rule(v=values)\r\n    def check(self, v):\r\n        assert v == 1\r\n\r\n\r\nTestDBComparison = DatabaseComparison.TestCase\r\n```\r\nIt legitimately fails with the following info:\r\n```\r\nE       AssertionError: assert 3 == 1\r\n\r\ntest_hypo.py:16: AssertionError\r\n---------------------- Hypothesis --------------------\r\nFalsifying example:\r\nstate = DatabaseComparison()\r\nv1, v2, v3 = state.produce()\r\nstate.check(v=v3)\r\nstate.teardown()\r\n```\r\nLet's put the falsifying example into a dedicated test:\r\n```python\r\ndef test_reproduce():\r\n    state = DatabaseComparison()\r\n    v1, v2, v3 = state.produce()\r\n    state.check(v=v3)\r\n    state.teardown()\r\n```\r\nThe problem is that the test fails with the following error:\r\n```\r\n    def test_reproduce():\r\n        state = DatabaseComparison()\r\n>       v1, v2, v3 = state.produce()\r\nE       TypeError: cannot unpack non-iterable MultipleResults object\r\n\r\ntest_hypo.py:24: TypeError\r\n```\r\nThis can be fixed with the following change:\r\n```python\r\ndef test_reproduce_fixed():\r\n    state = DatabaseComparison()\r\n    v1, v2, v3 = state.produce().values\r\n    state.check(v=v3)\r\n    state.teardown()\r\n```\r\nWhich does produce the right error:\r\n```\r\nE       assert 3 == 1\r\n\r\ntest_hypo.py:16: AssertionError\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2311/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2311/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2291", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2291/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2291/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2291/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2291", "id": 541313753, "node_id": "MDU6SXNzdWU1NDEzMTM3NTM=", "number": 2291, "title": "one_of shows duplicate strategies for from_type(Hashable)", "user": {"login": "leaprovenzano", "id": 9937295, "node_id": "MDQ6VXNlcjk5MzcyOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9937295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leaprovenzano", "html_url": "https://github.com/leaprovenzano", "followers_url": "https://api.github.com/users/leaprovenzano/followers", "following_url": "https://api.github.com/users/leaprovenzano/following{/other_user}", "gists_url": "https://api.github.com/users/leaprovenzano/gists{/gist_id}", "starred_url": "https://api.github.com/users/leaprovenzano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leaprovenzano/subscriptions", "organizations_url": "https://api.github.com/users/leaprovenzano/orgs", "repos_url": "https://api.github.com/users/leaprovenzano/repos", "events_url": "https://api.github.com/users/leaprovenzano/events{/privacy}", "received_events_url": "https://api.github.com/users/leaprovenzano/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2019-12-21T10:55:59Z", "updated_at": "2019-12-30T23:50:00Z", "closed_at": "2019-12-30T12:31:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\nhypothesis: 4.56.1\r\npython : 3.7.4\r\n\r\n----\r\n\r\nfollowing on from https://github.com/HypothesisWorks/hypothesis/pull/2274 `from_type(typing.Hashable)` is no longer erroring for me. (again thanks to @Zac-HD for all the help!) . That said... I am finding some more odd stuff with `from_type` particularly around generics & abcs. I will try and post separate issues and link them since I don't want to muddle things up.\r\n\r\nThis one is more of a question....\r\n\r\n\r\n```python\r\nfrom typing import Hashable\r\nfrom hypothesis import strategies as st\r\n\r\nstrat = st.from_type(Hashable)\r\nprint(strat.branches)\r\n```\r\n```\r\n[none(),\r\n just(NotImplemented),\r\n dates(),\r\n times(),\r\n timezones(),\r\n just(Ellipsis),\r\n nested_dtypes(),\r\n builds(BytesIO, binary()),\r\n complex_numbers(),\r\n binary(),\r\n complex_numbers(),\r\n floats(),\r\n complex_numbers(),\r\n builds(StringIO, text())]\r\n```\r\n\r\nas you can see above `complex_numbers()` appears 3 times in the branches.  This strategy is double wrapped in a deferred strategy so to get to the inner i think its `strat.wrapped_strategy.wrapped_strategy`.\r\n\r\n**QUESTION** :Is this going to cause issues with shrinking?  Shouldn't `one_of` resolve dupes in all cases? Or is this not a problem?\r\n\r\nI tried doing \r\n```python\r\nst.deferred(lambda : st.deferred( lambda : st.one_of([st.integers(), st.integers()])))\r\n```\r\n and saw that in that case branches were properly reduced to:\r\n ```[integers()]```\r\nso maybe it's just something going on with `from_type`....  or maybe just a repr issue...\r\n\r\nI also have some suggestions about the content of this strategy but again i will post those in another issue since it's a broader thing around strategy content on abcs. ", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2291/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2291/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2274", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2274/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2274/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2274/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2274", "id": 537723586, "node_id": "MDExOlB1bGxSZXF1ZXN0MzUzMDI4MDM3", "number": 2274, "title": "Hashable from type bug", "user": {"login": "leaprovenzano", "id": 9937295, "node_id": "MDQ6VXNlcjk5MzcyOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9937295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leaprovenzano", "html_url": "https://github.com/leaprovenzano", "followers_url": "https://api.github.com/users/leaprovenzano/followers", "following_url": "https://api.github.com/users/leaprovenzano/following{/other_user}", "gists_url": "https://api.github.com/users/leaprovenzano/gists{/gist_id}", "starred_url": "https://api.github.com/users/leaprovenzano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leaprovenzano/subscriptions", "organizations_url": "https://api.github.com/users/leaprovenzano/orgs", "repos_url": "https://api.github.com/users/leaprovenzano/repos", "events_url": "https://api.github.com/users/leaprovenzano/events{/privacy}", "received_events_url": "https://api.github.com/users/leaprovenzano/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-13T19:11:26Z", "updated_at": "2019-12-15T08:25:48Z", "closed_at": "2019-12-15T02:48:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2274", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2274", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2274.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2274.patch", "merged_at": "2019-12-15T02:48:04Z"}, "body": "this is a little fix for https://github.com/HypothesisWorks/hypothesis/issues/2272\r\n\r\nthis is my first pr to the project so please let me know if there's anything i'm missing  in the PR there is or anything you'd like changed.... I've tried to keep with the style as much as possible.\r\n\r\nI ended up handling it directly in the `from_typing_type`... was hoping not to but given subclass checks later down the line and the fact that so many container types covered later are virtual subclass of collections.abc.Hashable, or Sized it it seemed like a fools mission. \r\n\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2274/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2274/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2272", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2272/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2272/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2272/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2272", "id": 537532648, "node_id": "MDU6SXNzdWU1Mzc1MzI2NDg=", "number": 2272, "title": "typing.Hashable and typing.Sized error on inference", "user": {"login": "leaprovenzano", "id": 9937295, "node_id": "MDQ6VXNlcjk5MzcyOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9937295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leaprovenzano", "html_url": "https://github.com/leaprovenzano", "followers_url": "https://api.github.com/users/leaprovenzano/followers", "following_url": "https://api.github.com/users/leaprovenzano/following{/other_user}", "gists_url": "https://api.github.com/users/leaprovenzano/gists{/gist_id}", "starred_url": "https://api.github.com/users/leaprovenzano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leaprovenzano/subscriptions", "organizations_url": "https://api.github.com/users/leaprovenzano/orgs", "repos_url": "https://api.github.com/users/leaprovenzano/repos", "events_url": "https://api.github.com/users/leaprovenzano/events{/privacy}", "received_events_url": "https://api.github.com/users/leaprovenzano/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-13T12:48:28Z", "updated_at": "2019-12-15T02:48:05Z", "closed_at": "2019-12-15T02:48:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## typing.Hashable and typing.Sized error on inference\r\n\r\nVersion: 4.53.2\r\nPython : 3.7.4\r\n\r\n\r\nheres an minimum example to reproduce the error: \r\n\r\n```python\r\nfrom typing import Hashable\r\nfrom hypothesis import given, infer\r\n\r\n\r\n@given(key=infer)\r\ndef test_setitem_with_hashable(key: Hashable):\r\n    d = dict()\r\n    d[key] = 1\r\n    assert d[key] == 1\r\n\r\n```\r\n\r\n**expected behaviour**: infer infers a strategy of hashable objects from my type hint OR errors gracefully and tells me I can't use `typing.Hashable`.\r\n\r\n**actual behaviour**:\r\n\r\ninferring a strategy based on `typing.Hashable` type fails when we try and to index an empty `__args__` tuple in  `resolve_FrozenSet` as you can see from the tailend of this traceback:\r\n```\r\nenv/lib/python3.7/site-packages/hypothesis/strategies/_internal/core.py:1452: in from_type\r\n    return types.from_typing_type(thing)\r\nenv/lib/python3.7/site-packages/hypothesis/strategies/_internal/types.py:182: in from_typing_type\r\n    for k, v in mapping.items()\r\nenv/lib/python3.7/site-packages/hypothesis/strategies/_internal/types.py:183: in <listcomp>\r\n    if sum(try_issubclass(k, T) for T in mapping) == 1\r\nenv/lib/python3.7/site-packages/hypothesis/strategies/_internal/types.py:340: in really_inner\r\n    return func(thing)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nthing = typing.Hashable\r\n\r\n    @register(typing.FrozenSet, st.builds(frozenset))\r\n    def resolve_FrozenSet(thing):\r\n>       return st.frozensets(st.from_type(thing.__args__[0]))\r\nE       IndexError: tuple index out of range\r\n\r\nenv/lib/python3.7/site-packages/hypothesis/strategies/_internal/types.py:377: IndexError\r\n```\r\n\r\n\r\n`typing.Hashable` does not accept type args via `__class_getitem__` (it would make no sense) and `typing.Hashable.__args__` exists but is an empty tuple ( which is also a bit silly but whatever). \r\nto be clear this works just fine:\r\n\r\n```\r\nfrom collections.abc import Hashable\r\nfrom hypothesis import given, infer\r\n\r\n\r\n@given(key=infer)\r\ndef test_setitem_with_hashable(key: Hashable):\r\n    d = dict()\r\n    d[key] = 1\r\n    assert d[key] == 1\r\n```\r\n\r\nwhich is good because `typing.Hashable.__origin__` is `collections.abc.Hashable`.\r\n\r\n\r\nI had a look for other things in the typing module with these properties and i can see that `typing.Sized` has precisely the same issue (and also works fine with `from_type(typing.Sized.__origin__)`).\r\n\r\n\r\n---\r\n## how can I help?\r\nI'm happy to put up a PR to patch these in to [strategies._internal.types.py](https://github.com/HypothesisWorks/hypothesis/blob/master/hypothesis-python/src/hypothesis/strategies/_internal/types.py#L315.)\r\n\r\nLet me know if you're happy for me to go ahead i will get to work on a PR.\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2272/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2272/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2269", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2269/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2269/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2269/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2269", "id": 535633724, "node_id": "MDExOlB1bGxSZXF1ZXN0MzUxMzExODMy", "number": 2269, "title": "Fix from_type bytestring/sequence issues", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-10T10:25:28Z", "updated_at": "2019-12-17T17:58:46Z", "closed_at": "2019-12-16T22:30:38Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2269", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2269", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2269.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2269.patch", "merged_at": "2019-12-16T22:30:38Z"}, "body": "This bug turned out to be surprisingly subtle: it turns on the fact that `typing.ByteString` has a registered strategy (namely `st.binary()`), is a subclass of `typing.Sequence`, but is *not* a generic type.\r\n\r\nThe solution is an inelegant hack, like everything else in the ~~`typing` module~~ `from_type` backend, but has the considerable advantage of working.\r\n\r\nWe still consider `bytes` to be a subclass of `Sequence[int]` though, or any `Sequence[Union[int, ...]]` - it wouldn't do to let people relax *too* much :grin: \r\n\r\n\r\n\r\n\r\nFixes #2257, cc @mvaled ", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2269/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 1, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2269/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2257", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2257/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2257/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2257/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2257", "id": 532772067, "node_id": "MDU6SXNzdWU1MzI3NzIwNjc=", "number": 2257, "title": "Wrong data generation using dataclasses, Sequence and from_type", "user": {"login": "mvaled", "id": 270825, "node_id": "MDQ6VXNlcjI3MDgyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/270825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvaled", "html_url": "https://github.com/mvaled", "followers_url": "https://api.github.com/users/mvaled/followers", "following_url": "https://api.github.com/users/mvaled/following{/other_user}", "gists_url": "https://api.github.com/users/mvaled/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvaled/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvaled/subscriptions", "organizations_url": "https://api.github.com/users/mvaled/orgs", "repos_url": "https://api.github.com/users/mvaled/repos", "events_url": "https://api.github.com/users/mvaled/events{/privacy}", "received_events_url": "https://api.github.com/users/mvaled/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-04T15:49:47Z", "updated_at": "2019-12-16T22:30:38Z", "closed_at": "2019-12-16T22:30:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hypothesis `from_type` sometimes generates bytes when the dataclass has an attribute of type `Sequence[X]`:\r\n\r\n```python\r\n>>> from dataclasses import dataclass\r\n>>> from typing import Sequence\r\n>>> @dataclass\r\n... class Item:\r\n...     name: str\r\n...     \r\n\r\n>>> @dataclass\r\n... class Row:\r\n...     name: str\r\n...     items: Sequence[Item]\r\n...     \r\n\r\n>>> strategies.from_type(Row).example()   # <--- Wrong data type\r\nRow(name='', items=b'\\x00')\r\n\r\n>>> strategies.from_type(Row).example()\r\nRow(name='\\x13', items=[])\r\n\r\n>>> strategies.from_type(Row).example()\r\nRow(name='', items=[Item(name='')])\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2257/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2257/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2248", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2248/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2248/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2248/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2248", "id": 530660538, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ3MjgxMTE5", "number": 2248, "title": "Fix UniqueSampledListStrategy bug", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-01T02:52:58Z", "updated_at": "2019-12-02T10:00:59Z", "closed_at": "2019-12-01T15:22:39Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2248", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2248", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2248.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2248.patch", "merged_at": "2019-12-01T15:22:39Z"}, "body": "Closes #2247, which in turn dates to #2031.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2248/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2248/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2247", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2247/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2247/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2247/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2247", "id": 530647546, "node_id": "MDU6SXNzdWU1MzA2NDc1NDY=", "number": 2247, "title": "Internal error for unique lists", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-01T00:19:32Z", "updated_at": "2019-12-01T15:22:39Z", "closed_at": "2019-12-01T15:22:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```python\r\nfrom hypothesis import given, strategies as st\r\n\r\n@given(st.lists(st.sampled_from([0, 0.0]), unique=True, min_size=1))\r\ndef t(x): pass\r\n\r\nt()\r\n```\r\n\r\ntriggers an assertion via `conjecture.utils.integer_range(data, lower=0, upper=-1)`", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2247/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2247/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2245", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2245/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2245/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2245/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2245", "id": 530550174, "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ3MjA1MzU2", "number": 2245, "title": "Generate longer strings for unsized dtypes", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-30T08:29:58Z", "updated_at": "2019-12-08T03:29:39Z", "closed_at": "2019-12-01T22:30:45Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2245", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2245", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2245.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2245.patch", "merged_at": "2019-12-01T22:30:45Z"}, "body": "As proposed in https://github.com/HypothesisWorks/hypothesis/issues/2229#issuecomment-558352718, we now do *another* little dance to get around Numpy's premature (in this case) allocation for strings of length one only.  Closes #2229.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2245/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2245/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2231", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2231/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2231/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2231/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2231", "id": 528274104, "node_id": "MDU6SXNzdWU1MjgyNzQxMDQ=", "number": 2231, "title": "@example decorator not working with patched test", "user": {"login": "fulaphex", "id": 9135197, "node_id": "MDQ6VXNlcjkxMzUxOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/9135197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fulaphex", "html_url": "https://github.com/fulaphex", "followers_url": "https://api.github.com/users/fulaphex/followers", "following_url": "https://api.github.com/users/fulaphex/following{/other_user}", "gists_url": "https://api.github.com/users/fulaphex/gists{/gist_id}", "starred_url": "https://api.github.com/users/fulaphex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fulaphex/subscriptions", "organizations_url": "https://api.github.com/users/fulaphex/orgs", "repos_url": "https://api.github.com/users/fulaphex/repos", "events_url": "https://api.github.com/users/fulaphex/events{/privacy}", "received_events_url": "https://api.github.com/users/fulaphex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-25T18:55:44Z", "updated_at": "2021-09-13T10:23:31Z", "closed_at": "2021-09-13T10:23:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using `@given`, `@example` and `@mock.patch` on a test that is a method of a `TestCase` class fails with:\r\n```\r\nTypeError: test_bar() missing 1 required positional argument: 'self'\r\n```\r\nCode triggering the exception:\r\n```python3\r\nfrom hypothesis import given, example, strategies\r\nfrom unittest import mock, TestCase\r\n\r\ndef bar():\r\n    return 1\r\n\r\n\r\nclass FooTest(TestCase):\r\n    @given(baz=strategies.integers())\r\n    @example(baz=3)\r\n    @mock.patch(\"foo.bar\", lambda: 2)\r\n    def test_bar(self, baz):\r\n        pass\r\n        \r\n```\r\nFull error:\r\n```\r\n============================= test session starts ==============================\r\nplatform darwin -- Python 3.7.4, pytest-5.2.4, py-1.8.0, pluggy-0.13.0\r\nrootdir: /tmp\r\nplugins: hypothesis-4.47.0\r\ncollected 1 item\r\n\r\nfoo.py F                                                                 [100%]\r\n\r\n=================================== FAILURES ===================================\r\n_______________________________ FooTest.test_bar _______________________________\r\n\r\nargs = (<foo.FooTest testMethod=test_bar>,), keywargs = {}\r\n\r\n    @wraps(func)\r\n>   def patched(*args, **keywargs):\r\n\r\n/usr/local/Cellar/python/3.7.4_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1194: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/usr/local/lib/python3.7/site-packages/hypothesis/core.py:369: in execute_explicit_examples\r\n    print_example=True,\r\n/usr/local/lib/python3.7/site-packages/hypothesis/core.py:573: in execute_once\r\n    result = self.test_runner(data, run)\r\n/usr/local/lib/python3.7/site-packages/hypothesis/executors.py:56: in default_new_style_executor\r\n    return function(data)\r\n/usr/local/lib/python3.7/site-packages/hypothesis/core.py:569: in run\r\n    return test(*args, **kwargs)\r\n/usr/local/Cellar/python/3.7.4_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1194: in test_bar\r\n    def patched(*args, **keywargs):\r\n/usr/local/lib/python3.7/site-packages/hypothesis/core.py:533: in test\r\n    result = self.test(*args, **kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nargs = (), keywargs = {'baz': 3}, extra_args = []\r\nentered_patchers = [<unittest.mock._patch object at 0x10dcad090>]\r\nexc_info = (<class 'TypeError'>, TypeError(\"test_bar() missing 1 required positional argument: 'self'\"), <traceback object at 0x10dd1a280>)\r\npatching = <unittest.mock._patch object at 0x10dcad090>\r\narg = <function FooTest.<lambda> at 0x10dc9be60>\r\n\r\n    @wraps(func)\r\n    def patched(*args, **keywargs):\r\n        extra_args = []\r\n        entered_patchers = []\r\n    \r\n        exc_info = tuple()\r\n        try:\r\n            for patching in patched.patchings:\r\n                arg = patching.__enter__()\r\n                entered_patchers.append(patching)\r\n                if patching.attribute_name is not None:\r\n                    keywargs.update(arg)\r\n                elif patching.new is DEFAULT:\r\n                    extra_args.append(arg)\r\n    \r\n            args += tuple(extra_args)\r\n>           return func(*args, **keywargs)\r\nE           TypeError: test_bar() missing 1 required positional argument: 'self'\r\n\r\n/usr/local/Cellar/python/3.7.4_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:1209: TypeError\r\n---------------------------------- Hypothesis ----------------------------------\r\nFalsifying example: test_bar(baz=3)\r\n============================== 1 failed in 0.16s ===============================\r\n```\r\nChanging the order of the decorators, putting the `@mock.patch` as the outermost seems to solve the issue.\r\nI have checked multiple versions of hypothesis, the newest version for which the code above works fine is `4.46.2`, it's broken in `4.47.*`.\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2231/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2231/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2197", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2197/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2197/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2197/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2197", "id": 520331755, "node_id": "MDExOlB1bGxSZXF1ZXN0MzM4OTM4NTE5", "number": 2197, "title": "Count `charmap()` towards `text()` drawtime", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-09T04:32:41Z", "updated_at": "2019-11-11T10:51:21Z", "closed_at": "2019-11-11T10:51:15Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2197", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2197", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2197.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2197.patch", "merged_at": "2019-11-11T10:51:15Z"}, "body": "Closes #2108.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2197/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2197/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2195", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2195/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2195/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2195/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2195", "id": 520150180, "node_id": "MDU6SXNzdWU1MjAxNTAxODA=", "number": 2195, "title": "\"FailedHealthCheck: Data generation extremely slow\" when using strategies without filtering", "user": {"login": "SethMMorton", "id": 1596189, "node_id": "MDQ6VXNlcjE1OTYxODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1596189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SethMMorton", "html_url": "https://github.com/SethMMorton", "followers_url": "https://api.github.com/users/SethMMorton/followers", "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}", "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions", "organizations_url": "https://api.github.com/users/SethMMorton/orgs", "repos_url": "https://api.github.com/users/SethMMorton/repos", "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}", "received_events_url": "https://api.github.com/users/SethMMorton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 705939712, "node_id": "MDU6TGFiZWw3MDU5Mzk3MTI=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/performance", "name": "performance", "color": "e99695", "default": false, "description": "go faster!  use less memory!"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-11-08T17:52:40Z", "updated_at": "2019-11-28T14:50:25Z", "closed_at": "2019-11-28T14:50:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have what I believe is a fairly straightforward test that is using an out-of-the box strategy, but I am getting failed health checks that the data generation is very slow. The entire test file is at the bottom of this issue so you can let me know if there is anything glaringly wrong with the test.  This happened with hypothesis-4.43.8 and all active python versions.\r\n\r\n```\r\nFailedHealthCheck: Data generation is extremely slow: Only produced 6 valid examples in 1.09 seconds (0 invalid ones and 2 exceeded maximum size). Try decreasing size of the data you're generating (with e.g.max_size or max_leaves parameters).\r\n```\r\n\r\nWhat I am confused about is that I am just using `binary()` as-is for `@given`, so I have not provided a maximum size, nor have I defined what might be invalid.\r\n\r\nIs there something I should be taking into account when mixing `@given` with `@pytest.mark.parametrize`? Or is there something I need to know when using the `binary()` strategy that might be going on under the hood?  I realize I could just disable the health check for this test, but I'd like to understand what I am doing wrong.\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\nfrom __future__ import unicode_literals\r\n\r\nimport pytest\r\nfrom hypothesis import given\r\nfrom hypothesis.strategies import binary\r\nfrom natsort.ns_enum import ns\r\nfrom natsort.utils import parse_bytes_factory\r\n\r\n\r\n@pytest.mark.parametrize(\r\n    \"alg, example_func\",\r\n    [\r\n        (ns.DEFAULT, lambda x: (x,)),\r\n        (ns.IGNORECASE, lambda x: (x.lower(),)),\r\n        # With PATH, it becomes a tested tuple.\r\n        (ns.PATH, lambda x: ((x,),)),\r\n        (ns.PATH | ns.IGNORECASE, lambda x: ((x.lower(),),)),\r\n    ],\r\n)\r\n@given(x=binary())\r\ndef test_parse_bytest_factory_makes_function_that_returns_tuple(x, alg, example_func):\r\n    parse_bytes_func = parse_bytes_factory(alg)\r\n    assert parse_bytes_func(x) == example_func(x)\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2195/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2195/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2189", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2189/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2189/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2189/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2189", "id": 519570656, "node_id": "MDExOlB1bGxSZXF1ZXN0MzM4Mjg5MjE5", "number": 2189, "title": "Do not catch and record KeyboardInterrupt", "user": {"login": "aarchiba", "id": 136867, "node_id": "MDQ6VXNlcjEzNjg2Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/136867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aarchiba", "html_url": "https://github.com/aarchiba", "followers_url": "https://api.github.com/users/aarchiba/followers", "following_url": "https://api.github.com/users/aarchiba/following{/other_user}", "gists_url": "https://api.github.com/users/aarchiba/gists{/gist_id}", "starred_url": "https://api.github.com/users/aarchiba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aarchiba/subscriptions", "organizations_url": "https://api.github.com/users/aarchiba/orgs", "repos_url": "https://api.github.com/users/aarchiba/repos", "events_url": "https://api.github.com/users/aarchiba/events{/privacy}", "received_events_url": "https://api.github.com/users/aarchiba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-11-07T23:25:04Z", "updated_at": "2019-11-23T21:26:31Z", "closed_at": "2019-11-23T21:26:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2189", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2189", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2189.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2189.patch", "merged_at": "2019-11-23T21:26:31Z"}, "body": "When a KeyboardInterrupt occurs, `hypothesis` should not treat it as a normal exception raised by a test or by a strategy - in particular it should not retry running anything, it should exit more or less directly. Instead, #2186 shows that `hypothesis` retries the generation and finds it doesn't raise KeboardInterrupt the second time around, so `hypothesis` reports Flaky.\r\n\r\nThe goal of this PR is to reproduce this problem in the test suite and then to solve it.\r\n\r\nThere may be a related problem where `hypothesis` doesn't handle a test calling `sys.exit` (raising SystemExit) as well as it should.\r\n\r\nFixes #2186 ", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2189/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2189/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2186", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2186/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2186/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2186/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2186", "id": 519261463, "node_id": "MDU6SXNzdWU1MTkyNjE0NjM=", "number": 2186, "title": "hypothesis reports Flaky on KeyboardInterrupt", "user": {"login": "aarchiba", "id": 136867, "node_id": "MDQ6VXNlcjEzNjg2Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/136867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aarchiba", "html_url": "https://github.com/aarchiba", "followers_url": "https://api.github.com/users/aarchiba/followers", "following_url": "https://api.github.com/users/aarchiba/following{/other_user}", "gists_url": "https://api.github.com/users/aarchiba/gists{/gist_id}", "starred_url": "https://api.github.com/users/aarchiba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aarchiba/subscriptions", "organizations_url": "https://api.github.com/users/aarchiba/orgs", "repos_url": "https://api.github.com/users/aarchiba/repos", "events_url": "https://api.github.com/users/aarchiba/events{/privacy}", "received_events_url": "https://api.github.com/users/aarchiba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-11-07T13:19:08Z", "updated_at": "2019-11-23T21:26:31Z", "closed_at": "2019-11-23T21:26:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It should simply exit gracefully; especially in fuzzing modes it's often just worth running it until the user wants to do something else, so bizarre messages aren't a good response to KeyboardInterrupt. Ideally the traceback before the KeyboardInterrupt would let the user figure out whether something had gone into an infinite loop, but adding additional stuff afterward is definitely confusing. The below is a (partial, it overflowed my terminal's scrollbacl) traceback from when I hit control-C. It is... not very transparent, and the most apparent message is the \"Flaky\", which is untrue.\r\n\r\n```python\r\n...\r\n\r\n    def __stoppable_test_function(self, data):\r\n        \"\"\"Run ``self._test_function``, but convert a ``StopTest`` exception\r\n        into a normal return.\r\n        \"\"\"\r\n        try:\r\n>           self._test_function(data)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/engine.py:125: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <hypothesis.core.StateForActualGivenExecution object at 0x7f94142bcb38>\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def evaluate_test_data(self, data):\r\n        try:\r\n>           result = self.execute(data)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/core.py:598: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <hypothesis.core.StateForActualGivenExecution object at 0x7f94142bcb38>\r\ndata = ConjectureData(VALID, 24 bytes, frozen), print_example = False, is_final = False, expected_failure = None\r\n\r\n    def execute(self, data, print_example=False, is_final=False, expected_failure=None):\r\n        text_repr = [None]\r\n        if self.settings.deadline is None:\r\n            test = self.test\r\n        else:\r\n    \r\n            @proxies(self.test)\r\n            def test(*args, **kwargs):\r\n                self.__test_runtime = None\r\n                initial_draws = len(data.draw_times)\r\n                start = benchmark_time()\r\n                result = self.test(*args, **kwargs)\r\n                finish = benchmark_time()\r\n                internal_draw_time = sum(data.draw_times[initial_draws:])\r\n                runtime = datetime.timedelta(\r\n                    seconds=finish - start - internal_draw_time\r\n                )\r\n                self.__test_runtime = runtime\r\n                current_deadline = self.settings.deadline\r\n                if not is_final:\r\n                    current_deadline = (current_deadline // 4) * 5\r\n                if runtime >= current_deadline:\r\n                    raise DeadlineExceeded(runtime, self.settings.deadline)\r\n                return result\r\n    \r\n        def run(data):\r\n            if not hasattr(data, \"can_reproduce_example_from_repr\"):\r\n                data.can_reproduce_example_from_repr = True\r\n            with local_settings(self.settings):\r\n                with deterministic_PRNG():\r\n                    with BuildContext(data, is_final=is_final):\r\n                        args, kwargs = data.draw(self.search_strategy)\r\n                        if expected_failure is not None:\r\n                            text_repr[0] = arg_string(test, args, kwargs)\r\n    \r\n                        if print_example:\r\n                            example = \"%s(%s)\" % (\r\n                                test.__name__,\r\n                                arg_string(test, args, kwargs),\r\n                            )\r\n                            try:\r\n                                ast.parse(example)\r\n                            except SyntaxError:\r\n                                data.can_reproduce_example_from_repr = False\r\n                            report(\"Falsifying example: %s\" % (example,))\r\n                        elif current_verbosity() >= Verbosity.verbose:\r\n                            report(\r\n                                lambda: \"Trying example: %s(%s)\"\r\n                                % (test.__name__, arg_string(test, args, kwargs))\r\n                            )\r\n                        return test(*args, **kwargs)\r\n    \r\n>       result = self.test_runner(data, run)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/core.py:563: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\nfunction = <function StateForActualGivenExecution.execute.<locals>.run at 0x7f94130127b8>\r\n\r\n    def default_new_style_executor(data, function):\r\n>       return function(data)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/executors.py:56: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def run(data):\r\n        if not hasattr(data, \"can_reproduce_example_from_repr\"):\r\n            data.can_reproduce_example_from_repr = True\r\n        with local_settings(self.settings):\r\n            with deterministic_PRNG():\r\n                with BuildContext(data, is_final=is_final):\r\n>                   args, kwargs = data.draw(self.search_strategy)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/core.py:542: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = TupleStrategy((just(()), fixed_dictionaries({'delta': floats(min_value=-10000, max_value=10000),\r\n 'jds': unreasonable_jd(),\r\n 'scale': sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc'))}).map(lambda args: dict(args, **kwargs))))\r\nlabel = None\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = TupleStrategy((just(()), fixed_dictionaries({'delta': floats(min_value=-10000, max_value=10000),\r\n 'jds': unreasonable_jd(),\r\n 'scale': sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc'))}).map(lambda args: dict(args, **kwargs))))\r\nlabel = 9447048757421901795\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n                return strategy.do_draw(self)\r\n            else:\r\n                try:\r\n                    strategy.validate()\r\n                    start_time = benchmark_time()\r\n                    try:\r\n>                       return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:851: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = TupleStrategy((just(()), fixed_dictionaries({'delta': floats(min_value=-10000, max_value=10000),\r\n 'jds': unreasonable_jd(),\r\n 'scale': sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc'))}).map(lambda args: dict(args, **kwargs))))\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n>       return tuple(data.draw(e) for e in self.element_strategies)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/collections.py:60: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n.0 = <tuple_iterator object at 0x7f9413be9b70>\r\n\r\n>   return tuple(data.draw(e) for e in self.element_strategies)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/collections.py:60: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = fixed_dictionaries({'delta': floats(min_value=-10000, max_value=10000),\r\n 'jds': unreasonable_jd(),\r\n 'scale': sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc'))}).map(lambda args: dict(args, **kwargs))\r\nlabel = None\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = fixed_dictionaries({'delta': floats(min_value=-10000, max_value=10000),\r\n 'jds': unreasonable_jd(),\r\n 'scale': sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc'))}).map(lambda args: dict(args, **kwargs))\r\nlabel = 10700208128082112041\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = fixed_dictionaries({'delta': floats(min_value=-10000, max_value=10000),\r\n 'jds': unreasonable_jd(),\r\n 'scale': sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc'))}).map(lambda args: dict(args, **kwargs))\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n        # type: (ConjectureData) -> Ex\r\n        for _ in range(3):\r\n            i = data.index\r\n            try:\r\n                data.start_example(MAPPED_SEARCH_STRATEGY_DO_DRAW_LABEL)\r\n>               result = self.pack(data.draw(self.mapped_strategy))\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/strategies.py:570: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = fixed_dictionaries({'delta': floats(min_value=-10000, max_value=10000),\r\n 'jds': unreasonable_jd(),\r\n 'scale': sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc'))})\r\nlabel = None\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = fixed_dictionaries({'delta': floats(min_value=-10000, max_value=10000),\r\n 'jds': unreasonable_jd(),\r\n 'scale': sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc'))})\r\nlabel = 12000696373305623442\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = fixed_dictionaries({'delta': floats(min_value=-10000, max_value=10000),\r\n 'jds': unreasonable_jd(),\r\n 'scale': sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc'))})\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n>       return data.draw(self.wrapped_strategy)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/lazy.py:156: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = FixedKeysDictStrategy(('delta', 'jds', 'scale'), TupleStrategy((floats(min_value=-10000, max_value=10000), unreasonable_jd(), sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc')))))\r\nlabel = None\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = FixedKeysDictStrategy(('delta', 'jds', 'scale'), TupleStrategy((floats(min_value=-10000, max_value=10000), unreasonable_jd(), sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc')))))\r\nlabel = 12000696373305623442\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = FixedKeysDictStrategy(('delta', 'jds', 'scale'), TupleStrategy((floats(min_value=-10000, max_value=10000), unreasonable_jd(), sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc')))))\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n        # type: (ConjectureData) -> Ex\r\n        for _ in range(3):\r\n            i = data.index\r\n            try:\r\n                data.start_example(MAPPED_SEARCH_STRATEGY_DO_DRAW_LABEL)\r\n>               result = self.pack(data.draw(self.mapped_strategy))\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/strategies.py:570: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = TupleStrategy((floats(min_value=-10000, max_value=10000), unreasonable_jd(), sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc'))))\r\nlabel = None\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = TupleStrategy((floats(min_value=-10000, max_value=10000), unreasonable_jd(), sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc'))))\r\nlabel = 5375030803676309577\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = TupleStrategy((floats(min_value=-10000, max_value=10000), unreasonable_jd(), sampled_from(('tai', 'tcb', 'tcg', 'tdb', 'tt', 'ut1', 'utc'))))\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n>       return tuple(data.draw(e) for e in self.element_strategies)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/collections.py:60: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n.0 = <tuple_iterator object at 0x7f9413be9cf8>\r\n\r\n>   return tuple(data.draw(e) for e in self.element_strategies)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/collections.py:60: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen), strategy = unreasonable_jd(), label = None\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen), strategy = unreasonable_jd(), label = 9227067894999533075\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = unreasonable_jd(), data = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n>       return data.draw(self.wrapped_strategy)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/lazy.py:156: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = <hypothesis._strategies.CompositeStrategy object at 0x7f94142bc160>, label = None\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = <hypothesis._strategies.CompositeStrategy object at 0x7f94142bc160>, label = 9227067894999533075\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <hypothesis._strategies.CompositeStrategy object at 0x7f94142bc160>\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n>       return self.definition(data.draw, *self.args, **self.kwargs)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/_strategies.py:1911: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ndraw = <bound method ConjectureData.draw of ConjectureData(VALID, 24 bytes, frozen)>\r\n\r\n    @composite\r\n    def unreasonable_jd(draw):\r\n        return draw(one_of(reasonable_jd(),\r\n                           ordered_jd(),\r\n>                          unreasonable_ordinary_jd()))\r\n\r\nastropy/time/tests/test_precision.py:131: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = one_of(reasonable_jd(), ordered_jd(), unreasonable_ordinary_jd()), label = None\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = one_of(reasonable_jd(), ordered_jd(), unreasonable_ordinary_jd()), label = 11076910798766186203\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = one_of(reasonable_jd(), ordered_jd(), unreasonable_ordinary_jd())\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n        # type: (ConjectureData) -> Ex\r\n        n = len(self.element_strategies)\r\n        assert n > 0\r\n        if n == 1:\r\n            return data.draw(self.element_strategies[0])\r\n    \r\n        i = cu.integer_range(data, 0, n - 1)\r\n    \r\n>       return data.draw(self.element_strategies[i], label=self.branch_labels[i])\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/strategies.py:508: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen), strategy = ordered_jd(), label = 13750153062621414729\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen), strategy = ordered_jd(), label = 13750153062621414729\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ordered_jd(), data = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n>       return data.draw(self.wrapped_strategy)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/lazy.py:156: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = <hypothesis._strategies.CompositeStrategy object at 0x7f9413ec0780>, label = None\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = <hypothesis._strategies.CompositeStrategy object at 0x7f9413ec0780>, label = 13118283642048003977\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <hypothesis._strategies.CompositeStrategy object at 0x7f9413ec0780>\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n>       return self.definition(data.draw, *self.args, **self.kwargs)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/_strategies.py:1911: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ndraw = <bound method ConjectureData.draw of ConjectureData(VALID, 24 bytes, frozen)>\r\n\r\n    @composite\r\n    def ordered_jd(draw):\r\n        \"\"\"JD pair that is ordered but not necessarily near now\"\"\"\r\n>       return draw(floats(-1e7, 1e7)), draw(floats(-0.5, 0.5))\r\n\r\nastropy/time/tests/test_precision.py:124: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen), strategy = floats(min_value=-0.5, max_value=0.5), label = None\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen), strategy = floats(min_value=-0.5, max_value=0.5)\r\nlabel = 6361134527623872643\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = floats(min_value=-0.5, max_value=0.5), data = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n>       return data.draw(self.wrapped_strategy)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/lazy.py:156: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = one_of(floats(min_value=0.0, max_value=0.5), floats(min_value=0.0, max_value=0.5).map(neg)), label = None\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen)\r\nstrategy = one_of(floats(min_value=0.0, max_value=0.5), floats(min_value=0.0, max_value=0.5).map(neg))\r\nlabel = 6361134527623872643\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = one_of(floats(min_value=0.0, max_value=0.5), floats(min_value=0.0, max_value=0.5).map(neg))\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n        # type: (ConjectureData) -> Ex\r\n        n = len(self.element_strategies)\r\n        assert n > 0\r\n        if n == 1:\r\n            return data.draw(self.element_strategies[0])\r\n    \r\n        i = cu.integer_range(data, 0, n - 1)\r\n    \r\n>       return data.draw(self.element_strategies[i], label=self.branch_labels[i])\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/strategies.py:508: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen), strategy = floats(min_value=0.0, max_value=0.5)\r\nlabel = 17560280009627351640\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen), strategy = floats(min_value=0.0, max_value=0.5)\r\nlabel = 17560280009627351640\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = floats(min_value=0.0, max_value=0.5), data = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n>       return data.draw(self.wrapped_strategy)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/lazy.py:156: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen), strategy = FixedBoundedFloatStrategy(0.0, 0.5), label = None\r\n\r\n    def draw(self, strategy, label=None):\r\n        if self.is_find and not strategy.supports_find:\r\n            raise InvalidArgument(\r\n                (\r\n                    \"Cannot use strategy %r within a call to find (presumably \"\r\n                    \"because it would be invalid after the call had ended).\"\r\n                )\r\n                % (strategy,)\r\n            )\r\n    \r\n        if strategy.is_empty:\r\n            self.mark_invalid()\r\n    \r\n        if self.depth >= MAX_DEPTH:\r\n            self.mark_invalid()\r\n    \r\n>       return self.__draw(strategy, label=label)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:836: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen), strategy = FixedBoundedFloatStrategy(0.0, 0.5)\r\nlabel = 7254141549895781909\r\n\r\n    def __draw(self, strategy, label):\r\n        at_top_level = self.depth == 0\r\n        if label is None:\r\n            label = strategy.label\r\n        self.start_example(label=label)\r\n        try:\r\n            if not at_top_level:\r\n>               return strategy.do_draw(self)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:845: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = FixedBoundedFloatStrategy(0.0, 0.5), data = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def do_draw(self, data):\r\n        f = self.lower_bound + (\r\n            self.upper_bound - self.lower_bound\r\n>       ) * d.fractional_float(data)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/searchstrategy/numbers.py:169: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ndata = ConjectureData(VALID, 24 bytes, frozen)\r\n\r\n    def fractional_float(data):\r\n>       return (int_to_float(FLOAT_PREFIX | data.draw_bits(52)) - 1) / FULL_FLOAT\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/utils.py:162: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = ConjectureData(VALID, 24 bytes, frozen), n = 52, forced = None\r\n\r\n    def draw_bits(self, n, forced=None):\r\n        \"\"\"Return an ``n``-bit integer from the underlying source of\r\n        bytes. If ``forced`` is set to an integer will instead\r\n        ignore the underlying source and simulate a draw as if it had\r\n        returned that integer.\"\"\"\r\n        self.__assert_not_frozen(\"draw_bits\")\r\n        if n == 0:\r\n            return 0\r\n        assert n > 0\r\n        n_bytes = bits_to_bytes(n)\r\n        self.__check_capacity(n_bytes)\r\n    \r\n        if forced is not None:\r\n            buf = bytearray(int_to_bytes(forced, n_bytes))\r\n        else:\r\n            buf = bytearray(self._draw_bytes(self, n_bytes))\r\n        assert len(buf) == n_bytes\r\n    \r\n        # If we have a number of bits that is not a multiple of 8\r\n        # we have to mask off the high bits.\r\n        buf[0] &= BYTE_MASKS[n % 8]\r\n        buf = hbytes(buf)\r\n        result = int_from_bytes(buf)\r\n    \r\n>       self.observer.draw_bits(n, forced is not None, result)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:956: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <hypothesis.internal.conjecture.datatree.TreeRecordingObserver object at 0x7f9413db20f0>, n_bits = 52\r\nforced = False, value = 1897835254600418\r\n\r\n    def draw_bits(self, n_bits, forced, value):\r\n        i = self.__index_in_current_node\r\n        self.__index_in_current_node += 1\r\n        node = self.__current_node\r\n        assert len(node.bit_lengths) == len(node.values)\r\n        if i < len(node.bit_lengths):\r\n            if n_bits != node.bit_lengths[i]:\r\n                inconsistent_generation()\r\n            # Note that we don't check whether a previously\r\n            # forced value is now free. That will be caught\r\n            # if we ever split the node there, but otherwise\r\n            # may pass silently. This is acceptable because it\r\n            # means we skip a hash set lookup on every\r\n            # draw and that's a pretty niche failure mode.\r\n            if forced and i not in node.forced:\r\n                inconsistent_generation()\r\n            if value != node.values[i]:\r\n>               node.split_at(i)\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/datatree.py:321: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = TreeNode(bit_lengths=IntList([52, 3]), values=IntList([1102370613918253, 0]), _TreeNode__forced=None, transition=Conclusion(status=Status.VALID, interesting_origin=None), is_exhausted=False)\r\ni = 0\r\n\r\n    def split_at(self, i):\r\n        \"\"\"Splits the tree so that it can incorporate\r\n        a decision at the ``draw_bits`` call corresponding\r\n        to position ``i``, or raises ``Flaky`` if that was\r\n        meant to be a forced node.\"\"\"\r\n    \r\n>       if i in self.forced:\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/datatree.py:148: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = TreeNode(bit_lengths=IntList([52, 3]), values=IntList([1102370613918253, 0]), _TreeNode__forced=None, transition=Conclusion(status=Status.VALID, interesting_origin=None), is_exhausted=False)\r\n\r\n>   @property\r\n    def forced(self):\r\nE   KeyboardInterrupt\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/datatree.py:129: KeyboardInterrupt\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n    @given(sampled_from(_scales), unreasonable_jd(), floats(-10000, 10000))\r\n>   @example(scale='utc',\r\n             jds=(0.0, 2.2204460492503136e-13),\r\n             delta=6.661338147750941e-13)\r\n    @example(scale='utc',\r\n             jds=(2441682.5, 2.2204460492503136e-16),\r\n             delta=7.327471962526035e-12)\r\n    @example(scale='utc', jds=(0.0, 5.787592627370942e-13), delta=0.0)\r\n    def test_jd_add_subtract_round_trip(scale, jds, delta):\r\n\r\nastropy/time/tests/test_precision.py:428: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/optimiser.py:53: in run\r\n    self.hill_climb()\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/optimiser.py:109: in hill_climb\r\n    self.do_hill_climbing(random_non_empty)\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/optimiser.py:148: in do_hill_climbing\r\n    parameter=parameter, example_index=select_example(self.current_data)\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/optimiser.py:201: in attempt_to_improve\r\n    return self.consider_new_buffer(prefix + replacement + data.buffer[ex.end :])\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/optimiser.py:85: in consider_new_buffer\r\n    return self.consider_new_test_data(self.engine.cached_test_function(buffer))\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py:930: in freeze\r\n    self.observer.conclude_test(self.status, self.interesting_origin)\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/datatree.py:361: in conclude_test\r\n    inconsistent_generation()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n    def inconsistent_generation():\r\n        raise Flaky(\r\n>           \"Inconsistent data generation! Data generation behaved differently \"\r\n            \"between different runs. Is your data generation depending on external \"\r\n            \"state?\"\r\n        )\r\nE       hypothesis.errors.Flaky: Inconsistent data generation! Data generation behaved differently between different runs. Is your data generation depending on external state?\r\n\r\n../../../.virtualenvs/astropy/lib/python3.7/site-packages/hypothesis/internal/conjecture/datatree.py:40: Flaky\r\n----------------------------------------------------- Hypothesis ------------------------------------------------------\r\nYou can add @seed(181308649047304964118112440164661885706) to this test or run pytest with --hypothesis-seed=181308649047304964118112440164661885706 to reproduce this failure.\r\n================================================= 1 failed in 27.98s ==================================================\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2186/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2186/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2184", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2184/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2184/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2184/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2184", "id": 519170362, "node_id": "MDExOlB1bGxSZXF1ZXN0MzM3OTU5MzU4", "number": 2184, "title": "Properly validate strategies used with test methods", "user": {"login": "Zalathar", "id": 20290842, "node_id": "MDQ6VXNlcjIwMjkwODQy", "avatar_url": "https://avatars.githubusercontent.com/u/20290842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zalathar", "html_url": "https://github.com/Zalathar", "followers_url": "https://api.github.com/users/Zalathar/followers", "following_url": "https://api.github.com/users/Zalathar/following{/other_user}", "gists_url": "https://api.github.com/users/Zalathar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zalathar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zalathar/subscriptions", "organizations_url": "https://api.github.com/users/Zalathar/orgs", "repos_url": "https://api.github.com/users/Zalathar/repos", "events_url": "https://api.github.com/users/Zalathar/events{/privacy}", "received_events_url": "https://api.github.com/users/Zalathar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-07T10:16:28Z", "updated_at": "2019-11-09T00:17:21Z", "closed_at": "2019-11-08T10:33:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2184", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2184", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2184.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2184.patch", "merged_at": "2019-11-08T10:33:33Z"}, "body": "Due to the absence of a pass-through implementation of `WithRunner.do_validate`, strategies supplied to a test method (in a test class) were not being properly validated before running the test.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2184/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2169", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2169/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2169/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2169/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2169", "id": 516096951, "node_id": "MDExOlB1bGxSZXF1ZXN0MzM1NDEwMDg1", "number": 2169, "title": "Improved handling of typevars", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-01T12:58:31Z", "updated_at": "2019-12-08T03:29:55Z", "closed_at": "2019-11-03T02:34:56Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2169", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2169", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2169.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2169.patch", "merged_at": "2019-11-03T02:34:56Z"}, "body": "If your `TypeVar` has a bound that is treated as a union, it wasn't actually treated as a typevar... *until now*.  If you had two typevars with the same constraints, they werent' distinguished... *until now*.  (if you wanted bare typevars not to always be text, uh, that's a lot harder than it sounds)\r\n\r\nCloses #2094.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2169/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2169/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2166", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2166/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2166/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2166/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2166", "id": 516031030, "node_id": "MDExOlB1bGxSZXF1ZXN0MzM1MzYwMDE1", "number": 2166, "title": "Fix loading of charmap from cache file", "user": {"login": "robertknight", "id": 2458, "node_id": "MDQ6VXNlcjI0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertknight", "html_url": "https://github.com/robertknight", "followers_url": "https://api.github.com/users/robertknight/followers", "following_url": "https://api.github.com/users/robertknight/following{/other_user}", "gists_url": "https://api.github.com/users/robertknight/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertknight/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertknight/subscriptions", "organizations_url": "https://api.github.com/users/robertknight/orgs", "repos_url": "https://api.github.com/users/robertknight/repos", "events_url": "https://api.github.com/users/robertknight/events{/privacy}", "received_events_url": "https://api.github.com/users/robertknight/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-01T10:23:39Z", "updated_at": "2019-11-02T05:12:19Z", "closed_at": "2019-11-02T05:12:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2166", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2166", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2166.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2166.patch", "merged_at": "2019-11-02T05:12:19Z"}, "body": "Loading the cached charmap from disk always failed because the\r\n`GzipFile` was passed to `json.loads`, which expects a string. Use\r\n`json.load` instead, which accepts a file.\r\n\r\nThis fixes an issue where the first test in a test run that used the\r\ncharmap would be unexpectedly slow.\r\n\r\nFor context, see https://github.com/HypothesisWorks/hypothesis/issues/2108#issuecomment-548579704.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2166/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2166/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2162", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2162/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2162/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2162/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2162", "id": 514979692, "node_id": "MDExOlB1bGxSZXF1ZXN0MzM0NTE0NTk4", "number": 2162, "title": "Warn on settings without given at pytest_runtest_call", "user": {"login": "tommilligan", "id": 12255914, "node_id": "MDQ6VXNlcjEyMjU1OTE0", "avatar_url": "https://avatars.githubusercontent.com/u/12255914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommilligan", "html_url": "https://github.com/tommilligan", "followers_url": "https://api.github.com/users/tommilligan/followers", "following_url": "https://api.github.com/users/tommilligan/following{/other_user}", "gists_url": "https://api.github.com/users/tommilligan/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommilligan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommilligan/subscriptions", "organizations_url": "https://api.github.com/users/tommilligan/orgs", "repos_url": "https://api.github.com/users/tommilligan/repos", "events_url": "https://api.github.com/users/tommilligan/events{/privacy}", "received_events_url": "https://api.github.com/users/tommilligan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-30T21:00:53Z", "updated_at": "2019-11-01T03:14:13Z", "closed_at": "2019-11-01T03:14:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2162", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2162", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2162.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2162.patch", "merged_at": "2019-11-01T03:14:05Z"}, "body": "Closes #2160 \r\n\r\nIn the case where `@settings` is applied before `@given`, we set up a shim test function in case `@given` is not called. We then update this shim with attributes created by other decorators. When `@given` is applied, we replace the shim test function with the real test function.\r\n\r\nThis PR also copies any `hypothesis` attributes from the shim test function onto the real test function, preserving settings that have been applied by other decorators.\r\n\r\nThe test case added specifically reflects #2160, and checks that the examples added via the `hypothesis_explicit_examples` attribute.\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2162/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2160", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2160/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2160/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2160/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2160", "id": 514593762, "node_id": "MDU6SXNzdWU1MTQ1OTM3NjI=", "number": 2160, "title": "Order of `given` and `example` decorators matters", "user": {"login": "tommilligan", "id": 12255914, "node_id": "MDQ6VXNlcjEyMjU1OTE0", "avatar_url": "https://avatars.githubusercontent.com/u/12255914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommilligan", "html_url": "https://github.com/tommilligan", "followers_url": "https://api.github.com/users/tommilligan/followers", "following_url": "https://api.github.com/users/tommilligan/following{/other_user}", "gists_url": "https://api.github.com/users/tommilligan/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommilligan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommilligan/subscriptions", "organizations_url": "https://api.github.com/users/tommilligan/orgs", "repos_url": "https://api.github.com/users/tommilligan/repos", "events_url": "https://api.github.com/users/tommilligan/events{/privacy}", "received_events_url": "https://api.github.com/users/tommilligan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-30T11:31:25Z", "updated_at": "2019-11-01T03:14:06Z", "closed_at": "2019-11-01T03:14:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the [documentation of `hypothesis.given`](https://hypothesis.readthedocs.io/en/latest/reproducing.html#hypothesis.example), it is explicitly stated:\r\n\r\n> It doesn\u2019t matter whether you put the example decorator before or after given. Any permutation of the decorators in the above will do the same thing.\r\n\r\nHowever, `example` **must** come before `given`. The below test should fail, however it passes without running the explicit example:\r\n\r\n```python\r\n# test_bad.py\r\n\r\nfrom hypothesis import Phase, Verbosity, example, given, settings, strategies\r\n\r\n@given(strategies.booleans())\r\n@example(False)\r\n@settings(phases=[Phase.explicit], verbosity=Verbosity.debug)\r\ndef test_booleans(boolean: bool) -> None:\r\n    assert boolean\r\n\r\n```\r\n\r\nOutput:\r\n\r\n```log\r\n$ pytest -vvv -s\r\n========================================================= test session starts ==========================================================\r\nplatform linux -- Python 3.6.8, pytest-5.2.1, py-1.8.0, pluggy-0.13.0 -- /home/tom/reinfer/env/bin/python3.6\r\ncachedir: .pytest_cache\r\nbenchmark: 3.2.2 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\r\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/tom/Documents/personal/hypothesis-example-not-run/.hypothesis/examples')\r\nrootdir: /home/tom/Documents/personal/hypothesis-example-not-run\r\nplugins: cov-2.8.1, forked-1.1.1, benchmark-3.2.2, xdist-1.30.0, hypothesis-4.42.3, jobserver-1.0.0, flaky-3.6.1, timeout-1.3.3\r\ncollected 1 item\r\n\r\ntest_bad.py::test_booleans PASSED\r\n\r\n========================================================== 1 passed in 0.06s ===========================================================\r\n```\r\n\r\nThe following change makes the test fail, as expected:\r\n\r\n```diff\r\ndiff --git a/test_bad.py b/test_bad.py\r\nindex 2fd0521..7027831 100644\r\n--- a/test_bad.py\r\n+++ b/test_bad.py\r\n@@ -1,8 +1,8 @@\r\n from hypothesis import Phase, Verbosity, example, given, settings, strategies\r\n\r\n\r\n-@given(strategies.booleans())\r\n @example(False)\r\n+@given(strategies.booleans())\r\n @settings(phases=[Phase.explicit], verbosity=Verbosity.debug)\r\n def test_booleans(boolean: bool) -> None:\r\n     assert boolean\r\n```\r\n\r\n---\r\n\r\nPlatform: Ubuntu 18.04\r\nPython: 3.6.8\r\nHypothesis: 4.42.3", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2160/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2160/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2156", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2156/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2156/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2156/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2156", "id": 513862790, "node_id": "MDExOlB1bGxSZXF1ZXN0MzMzNTcwODk0", "number": 2156, "title": "Fix some flaky tests and fix a longstanding bug in recursive", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 590515268, "node_id": "MDU6TGFiZWw1OTA1MTUyNjg=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/flaky-tests", "name": "flaky-tests", "color": "5319e7", "default": false, "description": "for when our tests only sometimes pass"}, {"id": 602737425, "node_id": "MDU6TGFiZWw2MDI3Mzc0MjU=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/tests/build/CI", "name": "tests/build/CI", "color": "fbca04", "default": false, "description": "about testing or deployment *of* Hypothesis"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-29T11:48:18Z", "updated_at": "2019-10-30T02:22:10Z", "closed_at": "2019-10-30T02:22:04Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2156", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2156", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2156.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2156.patch", "merged_at": "2019-10-30T02:22:03Z"}, "body": "Some flaky tests are blocking #2153. Initially I thought these were caused by #2137 but apparently not! Possibly they were exposed by it, but they're actually two latent longstanding bugs in our test suite:\r\n\r\n* We genuinely don't have any examples that guarantee covering invalid base 64, because (on Python 3?) whitespace is stripped from decode\r\n* We were potentially catching a `StopTest` that we shouldn't.\r\n\r\nAdditionally in investigating and improving the testing of the `recursive` strategy to improve some missing coverage that I got there when I pushed the first set of changes, I discovered that our logic for how many branches we needed in `recursive` was wrong and we were stopping adding child strategies too soon, so I fixed that while I was there.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2156/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2156/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2145", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2145/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2145/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2145/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2145", "id": 508091801, "node_id": "MDExOlB1bGxSZXF1ZXN0MzI4OTUyNDE0", "number": 2145, "title": "Make stateful assign to multiple variables when printing steps that return MultipleResults", "user": {"login": "jbweston", "id": 6654709, "node_id": "MDQ6VXNlcjY2NTQ3MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/6654709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbweston", "html_url": "https://github.com/jbweston", "followers_url": "https://api.github.com/users/jbweston/followers", "following_url": "https://api.github.com/users/jbweston/following{/other_user}", "gists_url": "https://api.github.com/users/jbweston/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbweston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbweston/subscriptions", "organizations_url": "https://api.github.com/users/jbweston/orgs", "repos_url": "https://api.github.com/users/jbweston/repos", "events_url": "https://api.github.com/users/jbweston/events{/privacy}", "received_events_url": "https://api.github.com/users/jbweston/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-16T20:50:00Z", "updated_at": "2019-11-03T09:44:23Z", "closed_at": "2019-11-02T12:45:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2145", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2145", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2145.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2145.patch", "merged_at": "2019-11-02T12:45:29Z"}, "body": "If a rule returns MultipleResults then when a step using that rule\r\nis printed the return value should be expanded into multiple\r\nvariables. Currently this is not the case\r\n\r\nFixes #2139.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2145/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2145/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2139", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2139/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2139/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2139/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2139", "id": 507735328, "node_id": "MDU6SXNzdWU1MDc3MzUzMjg=", "number": 2139, "title": "stateful testing prints undefined variables", "user": {"login": "jbweston", "id": 6654709, "node_id": "MDQ6VXNlcjY2NTQ3MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/6654709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbweston", "html_url": "https://github.com/jbweston", "followers_url": "https://api.github.com/users/jbweston/followers", "following_url": "https://api.github.com/users/jbweston/following{/other_user}", "gists_url": "https://api.github.com/users/jbweston/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbweston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbweston/subscriptions", "organizations_url": "https://api.github.com/users/jbweston/orgs", "repos_url": "https://api.github.com/users/jbweston/repos", "events_url": "https://api.github.com/users/jbweston/events{/privacy}", "received_events_url": "https://api.github.com/users/jbweston/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-16T09:39:22Z", "updated_at": "2019-11-02T12:45:29Z", "closed_at": "2019-11-02T12:45:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### The Problem\r\nWhen stateful prints a falsifying example sometimes the example contains variables that are not defined. This means that one cannot simply copy/paste the example into a Python shell to reproduce it.\r\n\r\n### Example\r\n```python\r\nimport hypothesis.strategies as st\r\nfrom hypothesis.stateful import (\r\n    Bundle, RuleBasedStateMachine, rule, consumes, multiple\r\n)\r\n\r\nclass Foo(RuleBasedStateMachine):\r\n\r\n    bar = Bundle(\"bar\")\r\n\r\n    @rule(target=bar, l=st.lists(st.integers(), 2))\r\n    def step_one(self, l):\r\n        return multiple(*l)\r\n\r\n    @rule(n=consumes(bar), m=consumes(bar))\r\n    def step_two(self, n, m):\r\n        assert n + m > 10\r\n\r\nTestFoo = Foo.TestCase\r\n```\r\n\r\nRunning the above test (with `pytest`) I get the following traceback:\r\n\r\n```\r\n_________________________________________________ TestFoo.runTest __________________________________________________\r\n\r\nself = <hypothesis.stateful.Foo.TestCase testMethod=runTest>\r\n\r\n    def runTest(self):\r\n>       run_state_machine_as_test(state_machine_class)\r\n\r\n.local/miniconda/lib/python3.7/site-packages/hypothesis/stateful.py:243: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n.local/miniconda/lib/python3.7/site-packages/hypothesis/stateful.py:141: in run_state_machine_as_test\r\n    run_state_machine(state_machine_factory)\r\n.local/miniconda/lib/python3.7/site-packages/hypothesis/stateful.py:89: in run_state_machine\r\n    @given(st.data())\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = Foo({'bar': []}), n = 0, m = 0\r\n\r\n    @stateful.rule(n=stateful.consumes(bar), m=stateful.consumes(bar))\r\n    def step_two(self, n, m):\r\n>       assert n + m > 10\r\nE       AssertionError: assert (0 + 0) > 10\r\n\r\npoc.py:14: AssertionError\r\n---------------------------------------------------- Hypothesis ----------------------------------------------------\r\nFalsifying example: run_state_machine(factory=Foo, data=data(...))\r\nstate = Foo()\r\nv1 = state.step_one(l=[0, 0])\r\nstate.step_two(m=v2, n=v1)\r\nstate.teardown()\r\n```\r\n\r\nNote that the falsifying example at the bottom of the traceback refers to a variable `v2`, which was never defined.\r\n\r\nI suspect that this has to do with the fact that `rule_1` in the example returns `stateful.multiple`.\r\n\r\n\r\n\r\n### Extra Information\r\nPython version: `3.7.3`\r\nHypothesis version: `4.36.2`", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2139/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2139/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2095", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2095/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2095/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2095/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2095", "id": 494765087, "node_id": "MDU6SXNzdWU0OTQ3NjUwODc=", "number": 2095, "title": "AttributeError: module 'typing' has no attribute '_Final' (or '_Union')", "user": {"login": "brianwa84", "id": 22173987, "node_id": "MDQ6VXNlcjIyMTczOTg3", "avatar_url": "https://avatars.githubusercontent.com/u/22173987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianwa84", "html_url": "https://github.com/brianwa84", "followers_url": "https://api.github.com/users/brianwa84/followers", "following_url": "https://api.github.com/users/brianwa84/following{/other_user}", "gists_url": "https://api.github.com/users/brianwa84/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianwa84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianwa84/subscriptions", "organizations_url": "https://api.github.com/users/brianwa84/orgs", "repos_url": "https://api.github.com/users/brianwa84/repos", "events_url": "https://api.github.com/users/brianwa84/events{/privacy}", "received_events_url": "https://api.github.com/users/brianwa84/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-17T17:51:24Z", "updated_at": "2019-09-20T02:10:21Z", "closed_at": "2019-09-20T02:10:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Traceback (most recent call last):\r\n  File \"/tmpfs/bazel_tests_virtualenv/lib/python3.5/site-packages/hypothesis/internal/compat.py\", line 304, in <module>\r\n    typing_root_type = (typing._Final, typing._GenericAlias)  # type: ignore\r\nAttributeError: module 'typing' has no attribute '_Final'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/tmpfs/tmp/bazel/sandbox/linux-sandbox/725/execroot/tensorflow_probability/bazel-out/k8-opt/bin/tensorflow_probability/python/bijectors/bijector_properties_test_eager.runfiles/tensorflow_probability/tensorflow_probability/python/bijectors/bijector_properties_test.py\", line 23, in <module>\r\n    import hypothesis as hp\r\n  File \"/tmpfs/bazel_tests_virtualenv/lib/python3.5/site-packages/hypothesis/__init__.py\", line 27, in <module>\r\n    from hypothesis._settings import (\r\n  File \"/tmpfs/bazel_tests_virtualenv/lib/python3.5/site-packages/hypothesis/_settings.py\", line 40, in <module>\r\n    from hypothesis.internal.compat import integer_types, quiet_raise, string_types\r\n  File \"/tmpfs/bazel_tests_virtualenv/lib/python3.5/site-packages/hypothesis/internal/compat.py\", line 310, in <module>\r\n    typing._Union,\r\nAttributeError: module 'typing' has no attribute '_Union'", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2095/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2091", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2091/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2091/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2091/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2091", "id": 493949499, "node_id": "MDU6SXNzdWU0OTM5NDk0OTk=", "number": 2091, "title": "Attrs typing inference does not work with types from the typing module", "user": {"login": "Meallia", "id": 7398724, "node_id": "MDQ6VXNlcjczOTg3MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7398724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Meallia", "html_url": "https://github.com/Meallia", "followers_url": "https://api.github.com/users/Meallia/followers", "following_url": "https://api.github.com/users/Meallia/following{/other_user}", "gists_url": "https://api.github.com/users/Meallia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Meallia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Meallia/subscriptions", "organizations_url": "https://api.github.com/users/Meallia/orgs", "repos_url": "https://api.github.com/users/Meallia/repos", "events_url": "https://api.github.com/users/Meallia/events{/privacy}", "received_events_url": "https://api.github.com/users/Meallia/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-16T09:51:11Z", "updated_at": "2019-09-17T01:47:55Z", "closed_at": "2019-09-17T01:47:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When trying to use `builds` or `from_type` strategies with an attrs class using generic classes from the typing module such as `List[x]`, `Union[x,y]` or `Dict[x,y]` hypothesis fails.\r\n\r\nTrying to create a strategy from this class:\r\n```python\r\n@attr.s\r\nclass Inferrables(object):\r\n    type_typing_list = attr.ib(type=typing.List[int])\r\n    type_typing_dict = attr.ib(type=typing.Dict[str, int])\r\n    type_typing_union = attr.ib(type=typing.Union[str, int])\r\n\r\n@given(st.from_type(Inferrables))\r\ndef test_attrs_inference_from_type(c):\r\n    pass\r\n\r\n```\r\n\r\nWould fail with \r\n```\r\nhypothesis.errors.ResolutionFailed: Cannot infer a strategy from the default, validator, type, or converter for attribute=Attribute(name='type_typing_union', default=NOTHING, validator=None, repr=True, cmp=True, hash=None, init=True, metadata=mappingproxy({}), type=typing.Union[str, int], converter=None, kw_only=False) of class=<class 'tests.cover.test_attrs_inference.Inferrables'>\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2091/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2049", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2049/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2049/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2049/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2049", "id": 467741972, "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk3MzMwNDM4", "number": 2049, "title": "Detect and warn on float truncation in arrays", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-13T16:45:38Z", "updated_at": "2019-07-28T22:30:48Z", "closed_at": "2019-07-28T22:30:40Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2049", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2049", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2049.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2049.patch", "merged_at": "2019-07-28T22:30:40Z"}, "body": "Closes #1899.  Some users will probably find this pretty annoying, but we *do* have a `width` argument to `floats()` for exactly this reason, and it's used by our inferred strategies.  Unfortunately - and to my surprise - `numpy.can_cast(..., \"safe\")` does allow lossy downcasting.  So now we just compare exactly.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2049/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2027", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2027/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2027/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2027/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2027", "id": 462633341, "node_id": "MDU6SXNzdWU0NjI2MzMzNDE=", "number": 2027, "title": "Simple test never stop?", "user": {"login": "tahsmith", "id": 2762951, "node_id": "MDQ6VXNlcjI3NjI5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2762951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahsmith", "html_url": "https://github.com/tahsmith", "followers_url": "https://api.github.com/users/tahsmith/followers", "following_url": "https://api.github.com/users/tahsmith/following{/other_user}", "gists_url": "https://api.github.com/users/tahsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahsmith/subscriptions", "organizations_url": "https://api.github.com/users/tahsmith/orgs", "repos_url": "https://api.github.com/users/tahsmith/repos", "events_url": "https://api.github.com/users/tahsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/tahsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 705939712, "node_id": "MDU6TGFiZWw3MDU5Mzk3MTI=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/performance", "name": "performance", "color": "e99695", "default": false, "description": "go faster!  use less memory!"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-07-01T10:21:49Z", "updated_at": "2019-07-05T16:49:28Z", "closed_at": "2019-07-05T16:49:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following example seems to never pass, using hypothesis-4.24.6 running with pytest-5.0.0.\r\nGoing back to hypothesis 4.9.0, same pytest, the test passes almost instantly.\r\n\r\nThis looks like a regression but unsure.\r\n\r\n```python\r\nfrom hypothesis import given\r\nimport hypothesis.strategies as st\r\n\r\n\r\n@given(x=st.one_of(st.just(0)\r\n                   | st.just(1)),\r\n       y=st.one_of(st.just(0)\r\n                   | st.just(1)\r\n                   | st.just(2)))\r\ndef test_x_y(x, y):\r\n    assert True\r\n```\r\n\r\nSee also a stack overflow q I asked https://stackoverflow.com/questions/56831605/why-does-my-simple-finite-hypothesis-test-never-stop", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2027/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2015", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2015/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2015/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2015/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2015", "id": 458977719, "node_id": "MDExOlB1bGxSZXF1ZXN0MjkwNDM5ODYx", "number": 2015, "title": "Support newer typing backport too", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-21T02:29:47Z", "updated_at": "2019-06-21T06:24:18Z", "closed_at": "2019-06-21T06:24:05Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2015", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2015", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2015.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2015.patch", "merged_at": "2019-06-21T06:24:04Z"}, "body": "Closes #2014.\r\n\r\nI have checked that this still works on the previous version of the `typing` backport, but did not add an \"older backport\" environment to our CI matrix - we explicitly document that we only support the latest version of the `typing` ecosystem, and will be dropping Python 2 support at the end of this year anyway.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2015/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2015/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2014", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2014/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2014/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2014/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/2014", "id": 458584241, "node_id": "MDU6SXNzdWU0NTg1ODQyNDE=", "number": 2014, "title": "AttributeError: 'module' object has no attribute '_GenericAlias'", "user": {"login": "lazka", "id": 991986, "node_id": "MDQ6VXNlcjk5MTk4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/991986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lazka", "html_url": "https://github.com/lazka", "followers_url": "https://api.github.com/users/lazka/followers", "following_url": "https://api.github.com/users/lazka/following{/other_user}", "gists_url": "https://api.github.com/users/lazka/gists{/gist_id}", "starred_url": "https://api.github.com/users/lazka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lazka/subscriptions", "organizations_url": "https://api.github.com/users/lazka/orgs", "repos_url": "https://api.github.com/users/lazka/repos", "events_url": "https://api.github.com/users/lazka/events{/privacy}", "received_events_url": "https://api.github.com/users/lazka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-20T10:49:55Z", "updated_at": "2019-06-21T15:56:28Z", "closed_at": "2019-06-21T06:24:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Looks like the recent `typing` update broke hypothesis (Python 2 only):\r\n\r\n```python\r\n  File \"/home/travis/virtualenv/python2.7.14/lib/python2.7/site-packages/hypothesis/internal/compat.py\", line 302, in <module>\r\n    typing_root_type = (typing._Final, typing._GenericAlias)  # type: ignore\r\nAttributeError: 'module' object has no attribute '_GenericAlias'\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2014/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2014/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2000", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2000/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2000/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2000/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2000", "id": 451157595, "node_id": "MDExOlB1bGxSZXF1ZXN0Mjg0MzE5MzMw", "number": 2000, "title": "Fix spurious TypeError with a composite having keyword-only arguments.", "user": {"login": "SydneyUni-Jim", "id": 18296745, "node_id": "MDQ6VXNlcjE4Mjk2NzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/18296745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SydneyUni-Jim", "html_url": "https://github.com/SydneyUni-Jim", "followers_url": "https://api.github.com/users/SydneyUni-Jim/followers", "following_url": "https://api.github.com/users/SydneyUni-Jim/following{/other_user}", "gists_url": "https://api.github.com/users/SydneyUni-Jim/gists{/gist_id}", "starred_url": "https://api.github.com/users/SydneyUni-Jim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SydneyUni-Jim/subscriptions", "organizations_url": "https://api.github.com/users/SydneyUni-Jim/orgs", "repos_url": "https://api.github.com/users/SydneyUni-Jim/repos", "events_url": "https://api.github.com/users/SydneyUni-Jim/events{/privacy}", "received_events_url": "https://api.github.com/users/SydneyUni-Jim/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-06-02T06:11:45Z", "updated_at": "2019-06-04T14:21:48Z", "closed_at": "2019-06-04T14:21:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/2000", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/2000", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/2000.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/2000.patch", "merged_at": "2019-06-04T14:21:48Z"}, "body": "Fixes #1999.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2000/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/2000/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1999", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1999/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1999/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1999/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1999", "id": 451152860, "node_id": "MDU6SXNzdWU0NTExNTI4NjA=", "number": 1999, "title": "lists with unique_by \u2192 one_of \u2192 keyword-only composite = TypeError", "user": {"login": "SydneyUni-Jim", "id": 18296745, "node_id": "MDQ6VXNlcjE4Mjk2NzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/18296745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SydneyUni-Jim", "html_url": "https://github.com/SydneyUni-Jim", "followers_url": "https://api.github.com/users/SydneyUni-Jim/followers", "following_url": "https://api.github.com/users/SydneyUni-Jim/following{/other_user}", "gists_url": "https://api.github.com/users/SydneyUni-Jim/gists{/gist_id}", "starred_url": "https://api.github.com/users/SydneyUni-Jim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SydneyUni-Jim/subscriptions", "organizations_url": "https://api.github.com/users/SydneyUni-Jim/orgs", "repos_url": "https://api.github.com/users/SydneyUni-Jim/repos", "events_url": "https://api.github.com/users/SydneyUni-Jim/events{/privacy}", "received_events_url": "https://api.github.com/users/SydneyUni-Jim/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-02T04:47:18Z", "updated_at": "2019-06-04T14:21:48Z", "closed_at": "2019-06-04T14:21:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hypothesis 4.24.0, pytest 4.6.0, Python 3.7.3, macOS 10.14.5\r\n\r\nA TypeError is raised when a lists strategy with the unique_by argument is chained to a one_of strategy chained to a composite strategy that only has keyword-only arguments.\r\n\r\nThe following code demonstrates the issue. It raises `TypeError: g1() got an unexpected keyword argument 'kwarg1'`.\r\n\r\n```python\r\nfrom hypothesis import given\r\nimport hypothesis.strategies as st\r\n\r\n@st.composite\r\ndef g1(draw, *, kwarg1=None):\r\n  return draw(\r\n    st.fixed_dictionaries({'kwarg1': st.just(kwarg1), 'i': st.integers()})\r\n  )\r\n\r\ndef g2(*, kwarg1=None):\r\n  return st.one_of(g1(kwarg1=kwarg1))\r\n\r\ndef g3(*, kwarg1=None):\r\n  return st.lists(\r\n    g2(kwarg1=kwarg1),\r\n    min_size=1,\r\n    unique_by=lambda x: x['i']\r\n  )\r\n\r\n@given(g3())\r\ndef test_1(a):\r\n   assert True\r\n```\r\n\r\nThe TypeError is being raised by convert_keyword_arguments in reflection.py.\r\n\r\n```python\r\n    if kwargs and not argspec.varkw:\r\n        if len(kwargs) > 1:\r\n            raise TypeError(\r\n                \"%s() got unexpected keyword arguments %s\"\r\n                % (function.__name__, \", \".join(map(repr, kwargs)))\r\n            )\r\n ```\r\n\r\nWhen the TypeError is raised, convert_keyword_arguments is being called (indirectly) by event_to_string in engine.py as it tries to str a lazyformat object that has a __format_string of `'Retried draw from %r to satisfy filter'`. \r\n\r\nAfter applying any one of the following patches to the demonstration code, the TypeError is no longer raised.\r\n\r\nDon't use a keyword-only argument in the composite.\r\n```diff\r\n@@ -5 +5 @@\r\n-def g1(draw, *, kwarg1=None):\r\n+def g1(draw, kwarg1=None):\r\n``` \r\n\r\nDon't use a composite at the end of the chain.\r\n```diff\r\n@@ -4,3 +4,2 @@\r\n-@st.composite\r\n-def g1(draw, *, kwarg1=None):\r\n-  return draw(\r\n+def g1(*, kwarg1=None):\r\n+  return (\r\n```\r\n\r\nDon't use one_of in the middle of the chain.\r\n```diff\r\n@@ -11 +11 @@\r\n-  return st.one_of(g1(kwarg1=kwarg1))\r\n+  return g1(kwarg1=kwarg1)\r\n```\r\n\r\nDon't use unique_by in the lists stratergy.\r\n```diff\r\n@@ -17 +17 @@\r\n-    unique_by=lambda x: x['i']\r\n+    # unique_by=lambda x: x['i']\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1999/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1999/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1995", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1995/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1995/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1995/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1995", "id": 449035621, "node_id": "MDExOlB1bGxSZXF1ZXN0MjgyNjQ2NDMw", "number": 1995, "title": "Widen caught exception in rare database collision", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-28T02:22:29Z", "updated_at": "2019-05-28T12:27:36Z", "closed_at": "2019-05-28T12:27:31Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1995", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1995", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1995.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1995.patch", "merged_at": "2019-05-28T12:27:31Z"}, "body": "This patch fixes a very rare example database issue with file permissions.\r\n\r\nWhen running a test that uses both `@given` and `pytest.mark.parametrize`, using `pytest-xdist` on Windows, with failing examples in the database, two attempts to read a file could\r\noverlap and we caught `FileNotFound` but not other `PermissionError` or other `OSError`s.\r\n\r\nThis is obviously a pretty niche case due to the timing, but I've seen it twice in a \\~month while working on hypothesis-jsonschema... which has a 269-way parametrize over the entire upstream test suite and ``-n 16`` on a nice desktop \ud83d\ude04\r\n\r\n(for \"we should have distinct DB keys for different parametrize items\", see #1996)", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1995/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1995/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1982", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1982/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1982/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1982/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1982", "id": 444990153, "node_id": "MDU6SXNzdWU0NDQ5OTAxNTM=", "number": 1982, "title": "`floating_dtypes(sizes=(16, 32, 64))` spins endlessly without drawing a value", "user": {"login": "rsokl", "id": 29104956, "node_id": "MDQ6VXNlcjI5MTA0OTU2", "avatar_url": "https://avatars.githubusercontent.com/u/29104956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsokl", "html_url": "https://github.com/rsokl", "followers_url": "https://api.github.com/users/rsokl/followers", "following_url": "https://api.github.com/users/rsokl/following{/other_user}", "gists_url": "https://api.github.com/users/rsokl/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsokl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsokl/subscriptions", "organizations_url": "https://api.github.com/users/rsokl/orgs", "repos_url": "https://api.github.com/users/rsokl/repos", "events_url": "https://api.github.com/users/rsokl/events{/privacy}", "received_events_url": "https://api.github.com/users/rsokl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-16T14:31:03Z", "updated_at": "2019-05-27T03:24:49Z", "closed_at": "2019-05-27T03:24:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following test appears to run endlessly:\r\n```python\r\n@given(dtype=hnp.floating_dtypes(sizes=(16, 32, 64)))\r\ndef test_dtype(dtype):\r\n    assert True\r\n```\r\nStrangely, any tuple-pair of sizes (`(16, 32)`, `(16, 64)`, etc.) runs without issue. \r\n\r\nThe brief amount of time I had to step through this with a debugger did not reveal the culprit.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1982/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1982/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1972", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1972/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1972/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1972/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1972", "id": 441529611, "node_id": "MDU6SXNzdWU0NDE1Mjk2MTE=", "number": 1972, "title": "from_type(xrange) is broken", "user": {"login": "rsokl", "id": 29104956, "node_id": "MDQ6VXNlcjI5MTA0OTU2", "avatar_url": "https://avatars.githubusercontent.com/u/29104956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsokl", "html_url": "https://github.com/rsokl", "followers_url": "https://api.github.com/users/rsokl/followers", "following_url": "https://api.github.com/users/rsokl/following{/other_user}", "gists_url": "https://api.github.com/users/rsokl/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsokl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsokl/subscriptions", "organizations_url": "https://api.github.com/users/rsokl/orgs", "repos_url": "https://api.github.com/users/rsokl/repos", "events_url": "https://api.github.com/users/rsokl/events{/privacy}", "received_events_url": "https://api.github.com/users/rsokl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-08T03:05:26Z", "updated_at": "2019-05-08T12:40:46Z", "closed_at": "2019-05-08T12:40:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following test demonstrates this bug:\r\n\r\n```python\r\n@settings(max_examples=1000)\r\n@given(type_=st.from_type(xrange))\r\ndef test_from_type_xrange(type_):\r\n    pass\r\n```\r\n\r\n>OverflowError: Python int too large to convert to C long", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1972/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1972/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1965", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1965/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1965/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1965/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1965", "id": 441239919, "node_id": "MDU6SXNzdWU0NDEyMzk5MTk=", "number": 1965, "title": "Fix rare bug in `st.from_type(range)`", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-07T13:42:01Z", "updated_at": "2019-05-07T16:22:28Z", "closed_at": "2019-05-07T16:22:28Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It turns out that we missed a subtle bug when reviewing #1950: in the three-argument form of `range(start, stop, step)` (or `xrange`), `step` may be any integer *except zero*.\r\n\r\nWe would therefore like a follow-up patch that adds `.filter(bool)` to the three-argument form of both `range` and `xrange`.  You can imitate the changelog and addition to authors list from #1950; then `pip install black flake8` and run `black .` to check formatting and `flake8 --config=.flake8 .` (if on Python 3) to check that our linter is still happy.  Then open a pull request!", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1965/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1965/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1959", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1959/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1959/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1959/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1959", "id": 440789382, "node_id": "MDU6SXNzdWU0NDA3ODkzODI=", "number": 1959, "title": "Crash on CPython 3.8-dev: AttributeError: 'code' object has no attribute 'co_posonlyargcount' ", "user": {"login": "jab", "id": 64992, "node_id": "MDQ6VXNlcjY0OTky", "avatar_url": "https://avatars.githubusercontent.com/u/64992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jab", "html_url": "https://github.com/jab", "followers_url": "https://api.github.com/users/jab/followers", "following_url": "https://api.github.com/users/jab/following{/other_user}", "gists_url": "https://api.github.com/users/jab/gists{/gist_id}", "starred_url": "https://api.github.com/users/jab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jab/subscriptions", "organizations_url": "https://api.github.com/users/jab/orgs", "repos_url": "https://api.github.com/users/jab/repos", "events_url": "https://api.github.com/users/jab/events{/privacy}", "received_events_url": "https://api.github.com/users/jab/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 587047512, "node_id": "MDU6TGFiZWw1ODcwNDc1MTI=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/meta", "name": "meta", "color": "0e8a16", "default": false, "description": "for wider topics than the software itself"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-06T16:50:33Z", "updated_at": "2019-05-06T17:24:24Z", "closed_at": "2019-05-06T17:24:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "My project runs [daily hypothesis tests](https://travis-ci.org/jab/bidict/builds) with different versions of Python and the latest available hypothesis version. 6 days ago (in [build #1964](https://travis-ci.org/jab/bidict/builds/526507904)), the tests started failing for CPython 3.8-dev due to an uncaught error triggered by hypothesis/internal/compat.py (line 410, with hypothesis 4.18.3): `\"AttributeError: 'code' object has no attribute 'co_posonlyargcount'`. Every 3.8-dev build since then has failed similarly, including today's which pulled hypothesis 4.21.1. Builds have been succeeding for all other Python versions I'm testing against, and no changes have landed in my code during this time. I noticed that [hypothesis's .travis.yml](https://github.com/HypothesisWorks/hypothesis/blob/master/.travis.yml) doesn't test against CPython 3.8-dev, and didn't immediately see an issue already opened for this, so figured I'd report it in case it's worth looking into. Thanks! ", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1959/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1945", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1945/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1945/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1945/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1945", "id": 438752357, "node_id": "MDExOlB1bGxSZXF1ZXN0Mjc0NzEwMzgy", "number": 1945, "title": "Continue with unbiased generation while TargetSelector is empty", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 590515268, "node_id": "MDU6TGFiZWw1OTA1MTUyNjg=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/flaky-tests", "name": "flaky-tests", "color": "5319e7", "default": false, "description": "for when our tests only sometimes pass"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-30T12:28:14Z", "updated_at": "2019-04-30T15:11:41Z", "closed_at": "2019-04-30T15:11:38Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1945", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1945", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1945.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1945.patch", "merged_at": "2019-04-30T15:11:37Z"}, "body": "Fixes #1937.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1945/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1945/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1943", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1943/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1943/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1943/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1943", "id": 438460095, "node_id": "MDU6SXNzdWU0Mzg0NjAwOTU=", "number": 1943, "title": "Hypothesis breaks pytest on Python 3.8", "user": {"login": "pganssle", "id": 1377457, "node_id": "MDQ6VXNlcjEzNzc0NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1377457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pganssle", "html_url": "https://github.com/pganssle", "followers_url": "https://api.github.com/users/pganssle/followers", "following_url": "https://api.github.com/users/pganssle/following{/other_user}", "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}", "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions", "organizations_url": "https://api.github.com/users/pganssle/orgs", "repos_url": "https://api.github.com/users/pganssle/repos", "events_url": "https://api.github.com/users/pganssle/events{/privacy}", "received_events_url": "https://api.github.com/users/pganssle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-29T19:01:00Z", "updated_at": "2019-04-30T01:00:08Z", "closed_at": "2019-04-30T01:00:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Testing against Python version: `Python 3.8.0a3+ (heads/master:be6dbfb, Apr 29 2019, 14:45:16) `, if you install `pytest` and `hypothesis` together in a virtualenv and run `pytest` at all (even in an empty directory), it throws an error:\r\n\r\n```bash\r\n$ python -m virtualenv venv --python=python3.8\r\nRunning virtualenv with interpreter ~/.pyenv/shims/python3.8\r\nUsing base prefix '~/.pyenv/versions/3.8-dev'\r\nNew python executable in /tmp/hypotest/venv/bin/python3.8\r\nAlso creating executable in /tmp/hypotest/venv/bin/python\r\nInstalling setuptools, pip, wheel...\r\ndone.\r\n$ python3.8 --version\r\nPython 3.8.0a3+\r\n$ source venv/bin/activate\r\n(venv) $ python --version\r\nPython 3.8.0a3+\r\n(venv) $ pip install pytest\r\n...\r\n(venv) $ pytest\r\n======================= test session starts ======================\r\nplatform linux -- Python 3.8.0a3+, pytest-4.4.1, py-1.8.0, pluggy-0.9.0\r\nrootdir: /tmp/hypotest\r\ncollected 0 items\r\n================== no tests ran in 0.00 seconds ==================\r\n(venv) $ pip install hypothesis\r\n...\r\nSuccessfully installed hypothesis-4.18.0\r\n(venv) $ pip install hypothesis\r\n...\r\nTypeError: an integer is required (got type bytes)\r\n```\r\n\r\nThe full traceback is here, in a `details` block:\r\n\r\n<details>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/tmp/hypotest/venv/bin/pytest\", line 10, in <module>\r\n    sys.exit(main())\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 60, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 200, in _prepareconfig\r\n    return pluginmanager.hook.pytest_cmdline_parse(\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/pluggy/hooks.py\", line 289, in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/pluggy/manager.py\", line 68, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/pluggy/manager.py\", line 59, in <lambda>\r\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/pluggy/callers.py\", line 203, in _multicall\r\n    gen.send(outcome)\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/_pytest/helpconfig.py\", line 93, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 679, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 896, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 841, in _preparse\r\n    self.pluginmanager.load_setuptools_entrypoints(\"pytest11\")\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/pluggy/manager.py\", line 274, in load_setuptools_entrypoints\r\n    plugin = ep.load()\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/pkg_resources/__init__.py\", line 2434, in load\r\n    return self.resolve()\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/pkg_resources/__init__.py\", line 2440, in resolve\r\n    module = __import__(self.module_name, fromlist=['__name__'], level=0)\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/hypothesis/__init__.py\", line 29, in <module>\r\n    from hypothesis.core import PrintSettings, example, find, given, reproduce_failure, seed\r\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 655, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 618, in _load_backward_compatible\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/_pytest/assertion/rewrite.py\", line 299, in load_module\r\n    six.exec_(co, mod.__dict__)\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/hypothesis/core.py\", line 38, in <module>\r\n    import hypothesis.strategies as st\r\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 655, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 618, in _load_backward_compatible\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/_pytest/assertion/rewrite.py\", line 299, in load_module\r\n    six.exec_(co, mod.__dict__)\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/hypothesis/strategies.py\", line 20, in <module>\r\n    from hypothesis._strategies import (\r\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 655, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 618, in _load_backward_compatible\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/_pytest/assertion/rewrite.py\", line 299, in load_module\r\n    six.exec_(co, mod.__dict__)\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/hypothesis/_strategies.py\", line 267, in <module>\r\n    def nothing():\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/hypothesis/_strategies.py\", line 184, in cacheable\r\n    def cached_strategy(*args, **kwargs):\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/hypothesis/internal/reflection.py\", line 617, in accept\r\n    return impersonate(target)(\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/hypothesis/internal/reflection.py\", line 603, in accept\r\n    f.__code__ = update_code_location(\r\n  File \"/tmp/hypotest/venv/lib/python3.8/site-packages/hypothesis/internal/compat.py\", line 409, in update_code_location\r\n    return type(code)(*unpacked)\r\nTypeError: an integer is required (got type bytes)\r\n```\r\n\r\n</details>\r\n\r\nI'm not sure if this is a bug in hypothesis or a bug in CPython. It does suggest that adding a Python 3.8 nightly build to your CI matrix may be worthwhile, though.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1943/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1943/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1937", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1937/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1937/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1937/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1937", "id": 435202874, "node_id": "MDU6SXNzdWU0MzUyMDI4NzQ=", "number": 1937, "title": "`test_explore_an_arbitrary_language` is flaky, due to generation bug?", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 590515268, "node_id": "MDU6TGFiZWw1OTA1MTUyNjg=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/flaky-tests", "name": "flaky-tests", "color": "5319e7", "default": false, "description": "for when our tests only sometimes pass"}], "state": "closed", "locked": false, "assignee": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-04-19T14:51:04Z", "updated_at": "2019-04-30T15:11:38Z", "closed_at": "2019-04-30T15:11:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "[`test_explore_an_arbitrary_language`, in nocover, is very rarely flaky:](https://dev.azure.com/HypothesisWorks/Hypothesis/_build/results?buildId=1962&view=logs&jobId=e771faf7-decc-5078-b020-68d81ccdda55&taskId=f294e442-b720-52ee-9932-30c03a7f96ef&lineStart=465&lineEnd=495&colStart=1&colEnd=1)\r\n\r\n```python-traceback\r\n______________________ test_explore_an_arbitrary_language ______________________\r\n[gw1] linux2 -- Python 2.7.14 /home/vsts/work/1/s/hypothesis-python/.tox/py27-full/bin/python\r\nTraceback (most recent call last):\r\n  File \"/home/vsts/work/1/s/hypothesis-python/tests/nocover/test_explore_arbitrary_languages.py\", line 119, in test_explore_an_arbitrary_language\r\n    suppress_health_check=HealthCheck.all(),\r\n  File \"/home/vsts/work/1/s/hypothesis-python/.tox/py27-full/lib/python2.7/site-packages/hypothesis/core.py\", line 987, in wrapped_test\r\n    state.run()\r\n  File \"/home/vsts/work/1/s/hypothesis-python/.tox/py27-full/lib/python2.7/site-packages/hypothesis/core.py\", line 704, in run\r\n    info.__expected_traceback,\r\n  File \"/home/vsts/work/1/s/hypothesis-python/.tox/py27-full/lib/python2.7/site-packages/hypothesis/core.py\", line 571, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/home/vsts/work/1/s/hypothesis-python/.tox/py27-full/lib/python2.7/site-packages/hypothesis/executors.py\", line 56, in default_new_style_executor\r\n    return function(data)\r\n  File \"/home/vsts/work/1/s/hypothesis-python/.tox/py27-full/lib/python2.7/site-packages/hypothesis/core.py\", line 569, in run\r\n    return test(*args, **kwargs)\r\n  File \"/home/vsts/work/1/s/hypothesis-python/tests/nocover/test_explore_arbitrary_languages.py\", line 127, in test_explore_an_arbitrary_language\r\n    run_language_test_for(root, data, seed)\r\n  File \"/home/vsts/work/1/s/hypothesis-python/tests/nocover/test_explore_arbitrary_languages.py\", line 111, in run_language_test_for\r\n    runner.run()\r\n  File \"/home/vsts/work/1/s/hypothesis-python/.tox/py27-full/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 398, in run\r\n    self._run()\r\n  File \"/home/vsts/work/1/s/hypothesis-python/.tox/py27-full/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 763, in _run\r\n    self.generate_new_examples()\r\n  File \"/home/vsts/work/1/s/hypothesis-python/.tox/py27-full/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 744, in generate_new_examples\r\n    origin = self.target_selector.select()\r\n  File \"/home/vsts/work/1/s/hypothesis-python/.tox/py27-full/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 1003, in select\r\n    return self.random.choice(self.used_examples)\r\n  File \"/home/vsts/.cache/hypothesis-build-runtimes/python-versions/2.7.14/lib/python2.7/random.py\", line 277, in choice\r\n    return seq[int(self.random() * len(seq))]  # raises IndexError if seq is empty\r\nIndexError: list index out of range\r\n---------------------------------- Hypothesis ----------------------------------\r\nFalsifying example: test_explore_an_arbitrary_language(data=data(...))\r\nDraw 1: Branch(bits=11, children={})\r\nDraw 2: 187\r\nBranch(bits=11, children={\r\n    0: Terminal(status=Status.INTERESTING, payload=5),\r\n    64: Terminal(status=Status.INTERESTING, payload=2),\r\n    1891: Terminal(status=Status.INTERESTING, payload=5),\r\n    1894: Terminal(status=Status.INTERESTING, payload=7),\r\n    1575: Terminal(status=Status.INTERESTING, payload=2),\r\n    1224: Terminal(status=Status.INTERESTING, payload=3),\r\n    528: Terminal(status=Status.INTERESTING, payload=2),\r\n    439: Terminal(status=Status.INTERESTING, payload=7),\r\n    1753: Terminal(status=Status.INTERESTING, payload=2),\r\n    1658: Write(value='\\x05', child=Terminal(status=Status.INTERESTING, payload=5)),\r\n    543: Terminal(status=Status.INTERESTING, payload=7)\r\n})\r\n```\r\n\r\nbecause in `hypothesis.internal.conjecture.engine`, `TargetSelector.select()` is called before `.add()`.  This can happen if `self.test_function` *always* raises an exception until we move on to the mutation stage.  I think that never moving to the mutation stage before finding an input to mutate is sufficient to fix this:\r\n\r\n```diff\r\ndiff --git a/hypothesis-python/src/hypothesis/internal/conjecture/engine.py b/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\r\nindex 033ebbe..d461232 100644\r\n--- a/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\r\n+++ b/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\r\n@@ -680,7 +680,9 @@ class ConjectureRunner(object):\r\n\r\n         count = 0\r\n         while should_generate_more() and (\r\n-            count < 10 or self.health_check_state is not None\r\n+            count < 10\r\n+            or self.health_check_state is not None\r\n+            or len(self.target_selector) == 0\r\n         ):\r\n             prefix = self.generate_novel_prefix()\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1937/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1922", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1922/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1922/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1922/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1922", "id": 430126325, "node_id": "MDExOlB1bGxSZXF1ZXN0MjY4MDk1MDEw", "number": 1922, "title": "Fix assertion failure in sampled_from(...).filter(...) when there are few elements and all are rejected", "user": {"login": "Zalathar", "id": 20290842, "node_id": "MDQ6VXNlcjIwMjkwODQy", "avatar_url": "https://avatars.githubusercontent.com/u/20290842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zalathar", "html_url": "https://github.com/Zalathar", "followers_url": "https://api.github.com/users/Zalathar/followers", "following_url": "https://api.github.com/users/Zalathar/following{/other_user}", "gists_url": "https://api.github.com/users/Zalathar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zalathar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zalathar/subscriptions", "organizations_url": "https://api.github.com/users/Zalathar/orgs", "repos_url": "https://api.github.com/users/Zalathar/repos", "events_url": "https://api.github.com/users/Zalathar/events{/privacy}", "received_events_url": "https://api.github.com/users/Zalathar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-07T10:01:43Z", "updated_at": "2019-04-07T10:40:25Z", "closed_at": "2019-04-07T10:32:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1922", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1922", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1922.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1922.patch", "merged_at": "2019-04-07T10:32:31Z"}, "body": "This bug was accidentally introduced in #1904.\r\n\r\nThis fix was originally part of #1891 and #1921, but has been isolated into its own PR for a standalone release.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1922/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1922/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1918", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1918/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1918/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1918/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1918", "id": 429550036, "node_id": "MDExOlB1bGxSZXF1ZXN0MjY3NjY1MzU4", "number": 1918, "title": "Correctly restore global RNG state after using random_module()", "user": {"login": "Zalathar", "id": 20290842, "node_id": "MDQ6VXNlcjIwMjkwODQy", "avatar_url": "https://avatars.githubusercontent.com/u/20290842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zalathar", "html_url": "https://github.com/Zalathar", "followers_url": "https://api.github.com/users/Zalathar/followers", "following_url": "https://api.github.com/users/Zalathar/following{/other_user}", "gists_url": "https://api.github.com/users/Zalathar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zalathar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zalathar/subscriptions", "organizations_url": "https://api.github.com/users/Zalathar/orgs", "repos_url": "https://api.github.com/users/Zalathar/repos", "events_url": "https://api.github.com/users/Zalathar/events{/privacy}", "received_events_url": "https://api.github.com/users/Zalathar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 602737425, "node_id": "MDU6TGFiZWw2MDI3Mzc0MjU=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/tests/build/CI", "name": "tests/build/CI", "color": "fbca04", "default": false, "description": "about testing or deployment *of* Hypothesis"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-05T01:44:14Z", "updated_at": "2019-04-05T03:33:43Z", "closed_at": "2019-04-05T03:31:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1918", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1918", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1918.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1918.patch", "merged_at": "2019-04-05T03:31:42Z"}, "body": "The `random_module()` strategy sets global RNG state, and arranges for `BuildContext` to restore the original state afterwards.\r\n\r\nHowever, when `deterministic_PRNG` is nested inside `BuildContext`, this causes the outer state-restoring hook to accidentally restore the deterministic state, instead of the original state.\r\n\r\nThe solution is to reverse the nesting, so that each context manager restores the intended state.\r\n\r\n----\r\n\r\nFixes #1907, in conjunction with the changes to `test_one_dead_branch`.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1918/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1918/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1899", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1899/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1899/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1899/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1899", "id": 425565914, "node_id": "MDU6SXNzdWU0MjU1NjU5MTQ=", "number": 1899, "title": "exclude-min/exclude-max not reliable when drawing arrays of floats ", "user": {"login": "rsokl", "id": 29104956, "node_id": "MDQ6VXNlcjI5MTA0OTU2", "avatar_url": "https://avatars.githubusercontent.com/u/29104956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsokl", "html_url": "https://github.com/rsokl", "followers_url": "https://api.github.com/users/rsokl/followers", "following_url": "https://api.github.com/users/rsokl/following{/other_user}", "gists_url": "https://api.github.com/users/rsokl/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsokl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsokl/subscriptions", "organizations_url": "https://api.github.com/users/rsokl/orgs", "repos_url": "https://api.github.com/users/rsokl/repos", "events_url": "https://api.github.com/users/rsokl/events{/privacy}", "received_events_url": "https://api.github.com/users/rsokl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-26T17:56:06Z", "updated_at": "2019-07-28T22:30:40Z", "closed_at": "2019-07-28T22:30:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "hypothesis-4.14.0\r\n\r\nI'm not sure if this is necessarily a bug  or something that should be documented in the `arrays` strategy.\r\n\r\n```python\r\nimport numpy as np\r\nimport pytest\r\nimport hypothesis.strategies as st\r\nimport hypothesis.extra.numpy as hnp\r\n\r\n\r\n@pytest.mark.parametrize(\"dtype\", [np.float16, np.float32, np.float64])\r\n@pytest.mark.parametrize(\"max_\", [-1., 0., 1.])\r\n@given(st.data())\r\ndef test_bad_exclude_min_in_array(dtype, max_, data):\r\n    x = data.draw(\r\n        hnp.arrays(\r\n            dtype=dtype,\r\n            shape=(1,),\r\n            elements=st.floats(max_ - 1., max_, exclude_max=True)),\r\n        label=\"x\"\r\n    )\r\n    assert np.all(x < max_)\r\n```\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/29104956/55021043-779ac600-4fce-11e9-9935-959dde436b9c.png)\r\n\r\n```python\r\n@pytest.mark.parametrize(\"dtype\", [np.float16, np.float32, np.float64])\r\n@pytest.mark.parametrize(\"min_\", [-1., 0., 1.])\r\n@given(st.data())\r\ndef test_bad_float_exclude_max_in_array(dtype, min_, data):\r\n    x = data.draw(\r\n        hnp.arrays(\r\n            dtype=dtype,\r\n            shape=(1,),\r\n            elements=st.floats(min_, min_ + 1, exclude_min=True)),\r\n        label=\"x\"\r\n    )\r\n    assert np.all(min_ < x)\r\n```\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/29104956/55021149-a6b13780-4fce-11e9-9fcb-eb201222ba2b.png)\r\n\r\n\r\n(Sorry to leave a terse issue - I caught this at work and wanted to document it ASAP. Gotta run!)", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1899/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1860", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1860/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1860/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1860/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1860", "id": 419054021, "node_id": "MDExOlB1bGxSZXF1ZXN0MjU5Njc4MjI5", "number": 1860, "title": "Error on excluded infinite endpoints", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-09T09:50:14Z", "updated_at": "2019-03-18T23:36:27Z", "closed_at": "2019-03-18T23:36:24Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1860", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1860", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1860.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1860.patch", "merged_at": "2019-03-18T23:36:24Z"}, "body": "Because there's nothing we can possibly generate in those cases.  Closes #1859.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1860/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1859", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1859/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1859/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1859/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1859", "id": 419050238, "node_id": "MDU6SXNzdWU0MTkwNTAyMzg=", "number": 1859, "title": "Float strategy can generate infinite values, even if explicitly excluded", "user": {"login": "asmodehn", "id": 221256, "node_id": "MDQ6VXNlcjIyMTI1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/221256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asmodehn", "html_url": "https://github.com/asmodehn", "followers_url": "https://api.github.com/users/asmodehn/followers", "following_url": "https://api.github.com/users/asmodehn/following{/other_user}", "gists_url": "https://api.github.com/users/asmodehn/gists{/gist_id}", "starred_url": "https://api.github.com/users/asmodehn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asmodehn/subscriptions", "organizations_url": "https://api.github.com/users/asmodehn/orgs", "repos_url": "https://api.github.com/users/asmodehn/repos", "events_url": "https://api.github.com/users/asmodehn/events{/privacy}", "received_events_url": "https://api.github.com/users/asmodehn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-03-09T08:55:01Z", "updated_at": "2019-03-18T23:36:24Z", "closed_at": "2019-03-18T23:36:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "When specifying infinity as the max of min value for a float, and then excluding this value, it can still be generated.\r\n\r\nThis is easy to fix with simple strategies, but when generating min and max values from another strategy, and relying on the `exclude` parameter to specify open or closed intervals to draw a float, it may cause problems.\r\n\r\nHere is a sample code to reproduce the problem : \r\n```py\r\nimport pytest\r\nfrom hypothesis import given, settings, Verbosity\r\nfrom hypothesis.strategies import composite, floats, one_of\r\n\r\n@given(val=floats(max_value=float('-inf'), allow_nan=False, exclude_max=True))\r\n@settings(verbosity=Verbosity.verbose)\r\ndef test_should_be_always_true(val):\r\n    assert val != float('-inf')\r\n\r\n@given(val=floats(min_value=float('inf'), allow_nan=False, exclude_min=True))\r\n@settings(verbosity=Verbosity.verbose)\r\ndef test_should_be_always_true_aswell(val):\r\n    assert val != float('inf')\r\n        \r\nif __name__ == \"__main__\":\r\n    pytest.main([\"-s\", __file__])\r\n\r\n```\r\nI would have expected the strategy to fail somehow... but it succeeds and generate only infinity, even tho it should be excluded.\r\n\r\nSo running this script I get :\r\n```\r\n================================================================================================================================= FAILURES =================================================================================================================================\r\n________________________________________________________________________________________________________________________ test_should_be_always_true ________________________________________________________________________________________________________________________\r\n\r\n    @given(val=floats(max_value=float('-inf'), allow_nan=False, exclude_max=True))\r\n>   @settings(verbosity=Verbosity.verbose)\r\n    def test_should_be_always_true(val):\r\n\r\nfloat_inf_strat.py:6: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nval = -inf\r\n\r\n    @given(val=floats(max_value=float('-inf'), allow_nan=False, exclude_max=True))\r\n    @settings(verbosity=Verbosity.verbose)\r\n    def test_should_be_always_true(val):\r\n>       assert val != float('-inf')\r\nE       AssertionError: assert -inf != -inf\r\nE        +  where -inf = float('-inf')\r\n\r\nfloat_inf_strat.py:8: AssertionError\r\n-------------------------------------------------------------------------------------------------------------------------------- Hypothesis --------------------------------------------------------------------------------------------------------------------------------\r\nTrying example: test_should_be_always_true(val=-inf)\r\nTraceback (most recent call last):\r\n  File \"/home/alexv/Projects/tmp/float_inf_strat.py\", line 8, in test_should_be_always_true\r\n    assert val != float('-inf')\r\nAssertionError: assert -inf != -inf\r\n +  where -inf = float('-inf')\r\n\r\nTrying example: test_should_be_always_true(val=-inf)\r\nTraceback (most recent call last):\r\n  File \"/home/alexv/Projects/tmp/float_inf_strat.py\", line 8, in test_should_be_always_true\r\n    assert val != float('-inf')\r\nAssertionError: assert -inf != -inf\r\n +  where -inf = float('-inf')\r\n\r\nFalsifying example: test_should_be_always_true(val=-inf)\r\n____________________________________________________________________________________________________________________ test_should_be_always_true_aswell _____________________________________________________________________________________________________________________\r\n\r\n    @given(val=floats(min_value=float('inf'), allow_nan=False, exclude_min=True))\r\n>   @settings(verbosity=Verbosity.verbose)\r\n    def test_should_be_always_true_aswell(val):\r\n\r\nfloat_inf_strat.py:11: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nval = inf\r\n\r\n    @given(val=floats(min_value=float('inf'), allow_nan=False, exclude_min=True))\r\n    @settings(verbosity=Verbosity.verbose)\r\n    def test_should_be_always_true_aswell(val):\r\n>       assert val != float('inf')\r\nE       AssertionError: assert inf != inf\r\nE        +  where inf = float('inf')\r\n\r\nfloat_inf_strat.py:13: AssertionError\r\n-------------------------------------------------------------------------------------------------------------------------------- Hypothesis --------------------------------------------------------------------------------------------------------------------------------\r\nTrying example: test_should_be_always_true_aswell(val=inf)\r\nTraceback (most recent call last):\r\n  File \"/home/alexv/Projects/tmp/float_inf_strat.py\", line 13, in test_should_be_always_true_aswell\r\n    assert val != float('inf')\r\nAssertionError: assert inf != inf\r\n +  where inf = float('inf')\r\n\r\nTrying example: test_should_be_always_true_aswell(val=inf)\r\nTraceback (most recent call last):\r\n  File \"/home/alexv/Projects/tmp/float_inf_strat.py\", line 13, in test_should_be_always_true_aswell\r\n    assert val != float('inf')\r\nAssertionError: assert inf != inf\r\n +  where inf = float('inf')\r\n\r\nFalsifying example: test_should_be_always_true_aswell(val=inf)\r\n============================================================================================================================= warnings summary =============================================================================================================================\r\n/home/alexv/.virtualenvs/tmptesthyp/lib/python3.6/site-packages/_pytest/config/__init__.py:752\r\n  /home/alexv/.virtualenvs/tmptesthyp/lib/python3.6/site-packages/_pytest/config/__init__.py:752: PytestWarning: Module already imported so cannot be rewritten: hypothesis\r\n    self._mark_plugins_for_rewrite(hook)\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n=================================================================================================================== 2 failed, 1 warnings in 0.08 seconds ===================================================================================================================\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1859/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1859/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1839", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1839/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1839/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1839/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1839", "id": 413794988, "node_id": "MDU6SXNzdWU0MTM3OTQ5ODg=", "number": 1839, "title": "Off-by-one in step generation for block programs", "user": {"login": "Zalathar", "id": 20290842, "node_id": "MDQ6VXNlcjIwMjkwODQy", "avatar_url": "https://avatars.githubusercontent.com/u/20290842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zalathar", "html_url": "https://github.com/Zalathar", "followers_url": "https://api.github.com/users/Zalathar/followers", "following_url": "https://api.github.com/users/Zalathar/following{/other_user}", "gists_url": "https://api.github.com/users/Zalathar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zalathar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zalathar/subscriptions", "organizations_url": "https://api.github.com/users/Zalathar/orgs", "repos_url": "https://api.github.com/users/Zalathar/repos", "events_url": "https://api.github.com/users/Zalathar/events{/privacy}", "received_events_url": "https://api.github.com/users/Zalathar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 590824336, "node_id": "MDU6TGFiZWw1OTA4MjQzMzY=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/test-case-reduction", "name": "test-case-reduction", "color": "0052cc", "default": false, "description": "about efficiently finding smaller failing examples"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-24T08:14:41Z", "updated_at": "2019-02-28T02:46:11Z", "closed_at": "2019-02-28T02:46:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is the code that generates indices to run each block program at:\r\n\r\nhttps://github.com/HypothesisWorks/hypothesis/blob/931796887bfb2f498d5e017215a9c755670efa1c/hypothesis-python/src/hypothesis/internal/conjecture/shrinker.py#L1322-L1326\r\n\r\nFor example, if our shrink target has 100 blocks (indices 0\u201399), and the block program has 2 steps, then we'll generate indices `hrange(98)`, i.e. 0\u201397.\r\n\r\nThis means that we will never try running the block program against at block 98, covering blocks [98,&nbsp;99]. In theory, that's a bug.\r\n\r\nFor `block_program(\"XX\")` this isn't a problem, because deleting a suffix of the current target is guaranteed to be useless (and will be caught by the tree cache anyway).\r\n\r\nFor `block_program(\"-XX\")` we could conceivably miss a legal shrink, though I'm not sure how likely that is in practice.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1839/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1839/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1815", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1815/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1815/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1815/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1815", "id": 410520106, "node_id": "MDExOlB1bGxSZXF1ZXN0MjUzMjQ0MjEx", "number": 1815, "title": "Return correct dtypes for zero dimensional arrays", "user": {"login": "rdturnermtl", "id": 28273671, "node_id": "MDQ6VXNlcjI4MjczNjcx", "avatar_url": "https://avatars.githubusercontent.com/u/28273671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdturnermtl", "html_url": "https://github.com/rdturnermtl", "followers_url": "https://api.github.com/users/rdturnermtl/followers", "following_url": "https://api.github.com/users/rdturnermtl/following{/other_user}", "gists_url": "https://api.github.com/users/rdturnermtl/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdturnermtl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdturnermtl/subscriptions", "organizations_url": "https://api.github.com/users/rdturnermtl/orgs", "repos_url": "https://api.github.com/users/rdturnermtl/repos", "events_url": "https://api.github.com/users/rdturnermtl/events{/privacy}", "received_events_url": "https://api.github.com/users/rdturnermtl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-14T22:24:00Z", "updated_at": "2019-02-18T06:30:16Z", "closed_at": "2019-02-18T06:30:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1815", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1815", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1815.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1815.patch", "merged_at": "2019-02-18T06:30:15Z"}, "body": "Fixes bug in `hypothesis.extra.numpy.arrays` where the desired data type is not always returned when a scalar array is requested. This change also ensures that a numpy `ndarray` is always returned from the `arrays` strategy. See discussion in pull request #1784.  For example,\r\n```\r\n>>> S=arrays('int32',(),elements=booleans())\r\n>>> x=S.example()\r\n>>> x\r\nTrue\r\n```\r\nand\r\n```\r\n>>> S=arrays('>i2',())\r\n>>> x=S.example()\r\n>>> x\r\n-31543\r\n>>> x.dtype\r\ndtype('int16')\r\n>>> x.dtype == '>i2'\r\nFalse\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1815/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1815/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1814", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1814/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1814/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1814/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1814", "id": 410506986, "node_id": "MDExOlB1bGxSZXF1ZXN0MjUzMjMzOTMz", "number": 1814, "title": "Run data generation and test body with the same deterministic PRNG", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-14T21:47:19Z", "updated_at": "2019-02-15T12:46:08Z", "closed_at": "2019-02-14T23:40:10Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1814", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1814", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1814.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1814.patch", "merged_at": "2019-02-14T23:40:10Z"}, "body": "Fixes #1813, which was caused by restoring the random state before we ever ran the body of the test.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1814/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1813", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1813/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1813/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1813/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1813", "id": 410427633, "node_id": "MDU6SXNzdWU0MTA0Mjc2MzM=", "number": 1813, "title": "`random_module()` not working, or am I misunderstanding the documentation?", "user": {"login": "HelloThisIsFlo", "id": 10831649, "node_id": "MDQ6VXNlcjEwODMxNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/10831649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HelloThisIsFlo", "html_url": "https://github.com/HelloThisIsFlo", "followers_url": "https://api.github.com/users/HelloThisIsFlo/followers", "following_url": "https://api.github.com/users/HelloThisIsFlo/following{/other_user}", "gists_url": "https://api.github.com/users/HelloThisIsFlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/HelloThisIsFlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HelloThisIsFlo/subscriptions", "organizations_url": "https://api.github.com/users/HelloThisIsFlo/orgs", "repos_url": "https://api.github.com/users/HelloThisIsFlo/repos", "events_url": "https://api.github.com/users/HelloThisIsFlo/events{/privacy}", "received_events_url": "https://api.github.com/users/HelloThisIsFlo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-14T18:13:52Z", "updated_at": "2019-02-15T10:21:18Z", "closed_at": "2019-02-14T23:40:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI would like to test a non-deterministic piece of code in a way that'd allow me to reproduce a failure. I thought the `random_module()` strategy would help me do that, but it doesn't seem to work as I expected.\r\n\r\n---\r\n#### Example\r\nI would think that the following example would return different values of `a` and `b` for each iteration of the tests. From what I understood, the `random_module()` strategy is supposed to call `random.seed(SEED)` before the test (where `SEED` is actually `rand_mod.seed` in this example).\r\n```python\r\n@given(random_module())\r\ndef test_random_module(rand_mod):\r\n    a = random.randint(0, 100)\r\n    b = random.randint(0, 100)\r\n    print(f'a={a} b={b} | Expected seed: {rand_mod.seed} ')\r\n```\r\nBut the result looks like this:\r\n```\r\na=49 b=97 | Expected seed: 16859\r\na=49 b=97 | Expected seed: 26741\r\na=49 b=97 | Expected seed: 107\r\na=49 b=97 | Expected seed: 100\r\na=49 b=97 | Expected seed: 38947\r\na=49 b=97 | Expected seed: 14469\r\na=49 b=97 | Expected seed: 52059\r\na=49 b=97 | Expected seed: 8055\r\na=49 b=97 | Expected seed: 180\r\n. . .\r\n```\r\n\r\n---\r\n#### Quick Fix\r\nA quick fix seems to be to generate `integers()` and then use that as a seed. I tested it seems it fits the reproducibility criteria. But obviously if I could use the `random_module()` strategy it'd be much more flexible and readable.\r\n\r\n```python\r\n@given(integers())\r\ndef test_random_module_quick_fix(seed):\r\n    deterministic_random = random.Random(seed)\r\n    with patch('random.randint', deterministic_random.randint):\r\n        a = random.randint(0, 100)\r\n        b = random.randint(0, 100)\r\n\r\n        print(f'QF: a={a} b={b} | Expected seed: {seed} ')\r\n```\r\n\r\n---\r\n#### Questions\r\n* Is this a bug? Or the intended behavior? \r\n* If it is the intended behavior, what does the `random_module()` strategy actually do?  \r\n   I couldn't see any difference when using it vs not.\r\n\r\nThanks for the great work on the framework, besides the headache of this afternoon trying to figure out the `random_module()` thing, I found the rest of the framework incredibly simple to use. After a few **minutes** only I was able to significantly shrink down some particularly verbose tests. Great job, that's amazing \ud83d\ude0d", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1813/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1813/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1787", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1787/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1787/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1787/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1787", "id": 405939891, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ5Nzg1OTg5", "number": 1787, "title": "Fix IGNORECASE bug in st.from_regex", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-02T02:48:36Z", "updated_at": "2019-12-08T03:30:28Z", "closed_at": "2019-02-03T09:56:06Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1787", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1787", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1787.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1787.patch", "merged_at": "2019-02-03T09:56:06Z"}, "body": "Closes #1786.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1787/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1786", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1786/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1786/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1786/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1786", "id": 405832916, "node_id": "MDU6SXNzdWU0MDU4MzI5MTY=", "number": 1786, "title": "from_lark fails for grammars with complex regexps", "user": {"login": "erezsh", "id": 731464, "node_id": "MDQ6VXNlcjczMTQ2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/731464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erezsh", "html_url": "https://github.com/erezsh", "followers_url": "https://api.github.com/users/erezsh/followers", "following_url": "https://api.github.com/users/erezsh/following{/other_user}", "gists_url": "https://api.github.com/users/erezsh/gists{/gist_id}", "starred_url": "https://api.github.com/users/erezsh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erezsh/subscriptions", "organizations_url": "https://api.github.com/users/erezsh/orgs", "repos_url": "https://api.github.com/users/erezsh/repos", "events_url": "https://api.github.com/users/erezsh/events{/privacy}", "received_events_url": "https://api.github.com/users/erezsh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-02-01T19:03:38Z", "updated_at": "2019-02-03T09:56:06Z", "closed_at": "2019-02-03T09:56:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried to generate an example of Python code, by loading Lark's builtin Python3 grammar, but I think it failed to generate one of the regexps.\r\n\r\n```python\r\nimport hypothesis.extra.lark\r\n\r\nh = hypothesis.extra.lark.from_lark(Lark.open('lark/examples/python3.lark', start='file_input')) \r\n\r\nh.example()\r\n```\r\nResults in the exception:\r\n```python\r\n  File \".local/lib/python3.6/site-packages/hypothesis/searchstrategy/regex.py\", line 185, in add_char\r\n    if self._ignorecase and re.match(c, c.swapcase(), re.IGNORECASE) is not None:\r\n  File \"/usr/lib64/python3.6/re.py\", line 172, in match\r\n    return _compile(pattern, flags).match(string)\r\n  File \"/usr/lib64/python3.6/re.py\", line 301, in _compile\r\n    p = sre_compile.compile(pattern, flags)\r\n  File \"/usr/lib64/python3.6/sre_compile.py\", line 562, in compile\r\n    p = sre_parse.parse(p, flags)\r\n  File \"/usr/lib64/python3.6/sre_parse.py\", line 855, in parse\r\n    p = _parse_sub(source, pattern, flags & SRE_FLAG_VERBOSE, 0)\r\n  File \"/usr/lib64/python3.6/sre_parse.py\", line 416, in _parse_sub\r\n    not nested and not items))\r\n  File \"/usr/lib64/python3.6/sre_parse.py\", line 616, in _parse\r\n    source.tell() - here + len(this))\r\nsre_constants.error: nothing to repeat at position 0\r\nnothing to repeat at position 0\r\n\r\n```\r\n\r\nBtw, this isn't high-priority. I  just found it while playing around, and thought you might want to know.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1786/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1786/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1772", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1772/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1772/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1772/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1772", "id": 402110707, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ2ODY4MjEy", "number": 1772, "title": "Patch cathetus floating-point imprecision which broke complex_numbers", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-23T07:47:38Z", "updated_at": "2019-01-23T10:38:09Z", "closed_at": "2019-01-23T10:38:04Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1772", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1772", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1772.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1772.patch", "merged_at": "2019-01-23T10:38:04Z"}, "body": "Closes #1748.  In short:\r\n\r\n- When `cathetus` was passed an extremely large hypotenuse and relatively small side length, it could calculate the remaining side as slightly longer than the hypotenuse.  In rarer circumstances still, this could return infinity for finite inputs.\r\n- `complex_numbers` calculates the bounds on the real part of each example based on the imaginary part.  If `allow_infinity=False` is passed, all bounds should be finite.  However, by the above bug it was possible to get an intermediate infinity which is also a bug.\r\n- `floats` now raises `InvalidArgument` if passed `min_value=inf, allow_infinity=False` because there is no legal value.  This bubbled out of `complex_numbers`, instead of both strategies silently generating disallowed values.\r\n\r\nSo we now clip the side length in the problematic cases, and the bug is fixed.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1772/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1748", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1748/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1748/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1748/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1748", "id": 396717177, "node_id": "MDU6SXNzdWUzOTY3MTcxNzc=", "number": 1748, "title": "Rare float overflow bug in complex_numbers strategy", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-01-08T01:41:12Z", "updated_at": "2019-01-23T10:38:04Z", "closed_at": "2019-01-23T10:38:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "[Hypothesis 3.86.0](https://hypothesis.readthedocs.io/en/latest/changes.html#v3-86-0) made `floats(min_value=inf, allow_infinity=False)` an error, because the arguments are contradictory and thus impossible to satisfy.\r\n\r\nMany test runs later, it turns out that this condition can sometimes be triggered by the following test:\r\n\r\nhttps://github.com/HypothesisWorks/hypothesis/blob/3c23c07ff3ca8401b36bd847e8fbd6a2096a09b6/hypothesis-python/tests/cover/test_complex_numbers.py#L96-L98\r\n\r\nStep one is obviously to write a test which can *quickly* trigger this bug (e.g. by only passing very large magnitude bounds), but by inspection I'm pretty sure it's somewhere in the following lines:\r\n\r\nhttps://github.com/HypothesisWorks/hypothesis/blob/3c23c07ff3ca8401b36bd847e8fbd6a2096a09b6/hypothesis-python/src/hypothesis/_strategies.py#L2011-L2021", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1748/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1732", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1732/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1732/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1732/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1732", "id": 395394498, "node_id": "MDU6SXNzdWUzOTUzOTQ0OTg=", "number": 1732, "title": "integers(min_value=0) always produces longs on Python 2", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-02T21:59:25Z", "updated_at": "2019-01-03T10:42:05Z", "closed_at": "2019-01-03T10:42:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```pycon\r\n>>> find(st.integers(min_value=0), lambda x: True)\r\n0L\r\n```\r\n\r\nThe underlying culprit seems to be that our `floor` and `ceil` functions in `hypothesis.internal.compat` always return `long` values. This is because we explicitly use `_long_int_type`.  It's unclear that this is necessary - using `int(x)` will generally do the right thing for values that don't fit into an `int`.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1732/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1730", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1730/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1730/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1730/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1730", "id": 395299580, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQxNzg2NjU5", "number": 1730, "title": "Handle errors that occur once a data object is already frozen", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-02T16:17:37Z", "updated_at": "2019-02-12T06:01:51Z", "closed_at": "2019-01-04T05:46:25Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1730", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1730", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1730.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1730.patch", "merged_at": "2019-01-04T05:46:25Z"}, "body": "Turns out that the reason that #1729's build is failing is because of a bug that has been latent for a *long* time. Essentially, errors in finally blocks are not handled correctly by `given`. @Zac-HD's port of the stateful testing to be given based meant that we could now also trigger this bug in stateful testing, it's just that we'd been lucky enough not to before now.\r\n\r\nBasically the problem is that if in the course of shrinking or generation we do something that causes the data to be frozen, but we do so in such a way that user code can raise an error after that happened, we would try to call `mark_interesting` on an already frozen data object, which is forbidden.\r\n\r\nThe fix is to not do that and instead to raise a new `StopTest` to replace the one that was suppressed by the user error.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1730/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1730/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1720", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1720/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1720/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1720/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1720", "id": 394639013, "node_id": "MDExOlB1bGxSZXF1ZXN0MjQxMzM0ODk1", "number": 1720, "title": "Fix floats() disallowed generation of infinity and bad error message", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-28T13:37:54Z", "updated_at": "2019-01-16T11:04:36Z", "closed_at": "2019-01-03T01:11:20Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1720", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1720", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1720.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1720.patch", "merged_at": "2019-01-03T01:11:19Z"}, "body": "Closes #1683 and closes #1707.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1720/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1720/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1718", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1718/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1718/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1718/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1718", "id": 394516506, "node_id": "MDU6SXNzdWUzOTQ1MTY1MDY=", "number": 1718, "title": "Coverage file \"branch-check\" gets truncated multiple times during coverage testing", "user": {"login": "Zalathar", "id": 20290842, "node_id": "MDQ6VXNlcjIwMjkwODQy", "avatar_url": "https://avatars.githubusercontent.com/u/20290842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zalathar", "html_url": "https://github.com/Zalathar", "followers_url": "https://api.github.com/users/Zalathar/followers", "following_url": "https://api.github.com/users/Zalathar/following{/other_user}", "gists_url": "https://api.github.com/users/Zalathar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zalathar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zalathar/subscriptions", "organizations_url": "https://api.github.com/users/Zalathar/orgs", "repos_url": "https://api.github.com/users/Zalathar/repos", "events_url": "https://api.github.com/users/Zalathar/events{/privacy}", "received_events_url": "https://api.github.com/users/Zalathar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 602737425, "node_id": "MDU6TGFiZWw2MDI3Mzc0MjU=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/tests/build/CI", "name": "tests/build/CI", "color": "fbca04", "default": false, "description": "about testing or deployment *of* Hypothesis"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-28T00:26:34Z", "updated_at": "2018-12-28T05:51:21Z", "closed_at": "2018-12-28T05:51:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As observed in #1712, the `branch-check` file that is written by `coverage.py` gets truncated multiple times during the coverage test run, instead of just once at the beginning.\r\n\r\n(This happens on `master` too, not just in the v4 PR branch.)\r\n\r\nPresumably this means that many of the entries are being lost, so the branch coverage checks aren't as thorough as they appear.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1718/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1707", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1707/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1707/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1707/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1707", "id": 392318222, "node_id": "MDU6SXNzdWUzOTIzMTgyMjI=", "number": 1707, "title": "Incorrect error message in floats strategy", "user": {"login": "vitalbmcdonald", "id": 42211811, "node_id": "MDQ6VXNlcjQyMjExODEx", "avatar_url": "https://avatars.githubusercontent.com/u/42211811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vitalbmcdonald", "html_url": "https://github.com/vitalbmcdonald", "followers_url": "https://api.github.com/users/vitalbmcdonald/followers", "following_url": "https://api.github.com/users/vitalbmcdonald/following{/other_user}", "gists_url": "https://api.github.com/users/vitalbmcdonald/gists{/gist_id}", "starred_url": "https://api.github.com/users/vitalbmcdonald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vitalbmcdonald/subscriptions", "organizations_url": "https://api.github.com/users/vitalbmcdonald/orgs", "repos_url": "https://api.github.com/users/vitalbmcdonald/repos", "events_url": "https://api.github.com/users/vitalbmcdonald/events{/privacy}", "received_events_url": "https://api.github.com/users/vitalbmcdonald/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-12-18T20:15:08Z", "updated_at": "2019-01-03T01:11:20Z", "closed_at": "2019-01-03T01:11:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "For the floats strategy, if `min_value` or `max_value` can not be represented by the `width`, one of these [error messages](https://github.com/HypothesisWorks/hypothesis/blob/master/hypothesis-python/src/hypothesis/strategies.py#L536&#L547) is raised. The issue is that the error message format variables are in the wrong order. It should be `(min_arg, width, min_value)` instead of `(min_value, width, min_arg)`. The same is true for the `max_value` error message.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1707/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1707/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1704", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1704/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1704/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1704/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1704", "id": 391991212, "node_id": "MDU6SXNzdWUzOTE5OTEyMTI=", "number": 1704, "title": "st.floats() with bounds do not shrink correctly", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 590824336, "node_id": "MDU6TGFiZWw1OTA4MjQzMzY=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/test-case-reduction", "name": "test-case-reduction", "color": "0052cc", "default": false, "description": "about efficiently finding smaller failing examples"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-18T04:23:47Z", "updated_at": "2021-03-15T03:40:25Z", "closed_at": "2021-03-15T03:40:25Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The `floats()` strategy has a well-defined shrinking order: the fractional part is simplified away, then it shrinks towards zero as for `integers()`.  While this is the case for *unbounded* floats, floats with bounds usually do *not* follow this shrinking order:\r\n\r\nhttps://github.com/HypothesisWorks/hypothesis/blob/7d1cf438bf7af2000ca84a8866e5d9dbc4b8995d/hypothesis-python/src/hypothesis/searchstrategy/numbers.py#L185-L188\r\n\r\nInstead, they shrink by simplifying the fraction of the allowed interval, with the lower bound as the minimal value.  This technique is also lossy for large ranges, as it can generate at most 2^52 distinct values.  The way that floats with one bound shrink as an offset to that bound is a relatively minor problem.\r\n\r\nTo fix this in the general case we will probably have to use [the \"shrink open\" trick explained here](https://github.com/HypothesisWorks/hypothesis/issues/1401#issuecomment-415965649) and [demonstrated here](https://github.com/Zac-HD/hypothesis/blob/f1f951d67f9161947a298db8d5aa12b24a633c2b/hypothesis-python/src/hypothesis/searchstrategy/strings.py#L78-L97) (from #1621), to split generation from shrinking.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1704/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1704/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1701", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1701/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1701/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1701/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1701", "id": 391919186, "node_id": "MDExOlB1bGxSZXF1ZXN0MjM5MzA2ODgx", "number": 1701, "title": "Don't error on a Lambda in a line with Unicode identifiers", "user": {"login": "alexwlchan", "id": 301220, "node_id": "MDQ6VXNlcjMwMTIyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/301220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexwlchan", "html_url": "https://github.com/alexwlchan", "followers_url": "https://api.github.com/users/alexwlchan/followers", "following_url": "https://api.github.com/users/alexwlchan/following{/other_user}", "gists_url": "https://api.github.com/users/alexwlchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexwlchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexwlchan/subscriptions", "organizations_url": "https://api.github.com/users/alexwlchan/orgs", "repos_url": "https://api.github.com/users/alexwlchan/repos", "events_url": "https://api.github.com/users/alexwlchan/events{/privacy}", "received_events_url": "https://api.github.com/users/alexwlchan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-12-17T22:37:11Z", "updated_at": "2018-12-29T23:52:52Z", "closed_at": "2018-12-29T23:52:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1701", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1701", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1701.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1701.patch", "merged_at": "2018-12-29T23:52:44Z"}, "body": "Closes #1700.\r\n\r\n@lucaswiman\u2019s guess is correct:\r\n\r\n> This seems to be an off-by-two error with this example (source is 'mbda x: abs(x) > 1e-5))'), so I'm guessing it's probably that col_offset is computed on the bytes of the original file (UTF-8 encoded in this case)\r\n\r\nThe `inspect` module gives you source code as Unicode strings, but computes the index with the raw bytes. Doing a quick round-trip to bytes and back (using the same encoding detection as inspect is using) seems to fix this particular issue.\r\n\r\nFun little bug to dig into.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1701/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1701/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1700", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1700/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1700/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1700/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1700", "id": 391900802, "node_id": "MDU6SXNzdWUzOTE5MDA4MDI=", "number": 1700, "title": "Error with lambda in a line containing unicode identifiers", "user": {"login": "lucaswiman", "id": 123110, "node_id": "MDQ6VXNlcjEyMzExMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucaswiman", "html_url": "https://github.com/lucaswiman", "followers_url": "https://api.github.com/users/lucaswiman/followers", "following_url": "https://api.github.com/users/lucaswiman/following{/other_user}", "gists_url": "https://api.github.com/users/lucaswiman/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucaswiman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucaswiman/subscriptions", "organizations_url": "https://api.github.com/users/lucaswiman/orgs", "repos_url": "https://api.github.com/users/lucaswiman/repos", "events_url": "https://api.github.com/users/lucaswiman/events{/privacy}", "received_events_url": "https://api.github.com/users/lucaswiman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "alexwlchan", "id": 301220, "node_id": "MDQ6VXNlcjMwMTIyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/301220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexwlchan", "html_url": "https://github.com/alexwlchan", "followers_url": "https://api.github.com/users/alexwlchan/followers", "following_url": "https://api.github.com/users/alexwlchan/following{/other_user}", "gists_url": "https://api.github.com/users/alexwlchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexwlchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexwlchan/subscriptions", "organizations_url": "https://api.github.com/users/alexwlchan/orgs", "repos_url": "https://api.github.com/users/alexwlchan/repos", "events_url": "https://api.github.com/users/alexwlchan/events{/privacy}", "received_events_url": "https://api.github.com/users/alexwlchan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alexwlchan", "id": 301220, "node_id": "MDQ6VXNlcjMwMTIyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/301220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexwlchan", "html_url": "https://github.com/alexwlchan", "followers_url": "https://api.github.com/users/alexwlchan/followers", "following_url": "https://api.github.com/users/alexwlchan/following{/other_user}", "gists_url": "https://api.github.com/users/alexwlchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexwlchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexwlchan/subscriptions", "organizations_url": "https://api.github.com/users/alexwlchan/orgs", "repos_url": "https://api.github.com/users/alexwlchan/repos", "events_url": "https://api.github.com/users/alexwlchan/events{/privacy}", "received_events_url": "https://api.github.com/users/alexwlchan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-12-17T21:40:04Z", "updated_at": "2018-12-29T23:52:44Z", "closed_at": "2018-12-29T23:52:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`.filter(lambda ...)` fails when used on a line with unicode identifiers prior to the lambda declaration. For example:\r\n```python\r\nfrom hypothesis import given\r\nimport hypothesis.strategies as st\r\n\u03c0 = 3.1415\r\n\r\n@given(st.floats(min_value=-\u03c0, max_value=\u03c0).filter(lambda x: abs(x) > 1e-5))\r\ndef test_foo(bar):\r\n    pass\r\n```\r\n\r\nThis seems to be an off-by-two error with this example (`source` is `'mbda x: abs(x) > 1e-5))'`), so I'm guessing it's probably that `col_offset` is computed on the bytes of the original file (UTF-8 encoded in this case):\r\n```\r\n(Pdb) orig_source.encode('utf-8')[lambda_ast.col_offset :]\r\nb'lambda x: abs(x) > 1e-5))'\r\n```\r\n\r\n## Testing conditions\r\nPython 3.6 and 3.7; `hypothesis==3.83.2`, `pytest==4.0.2`.\r\n\r\n## Full error\r\n\r\n```python-traceback\r\n$ python3.6 -m pytest test2.py --tb=short\r\npyenv-implicit: found multiple python3.6 in pyenv. Use version 3.6.\r\n================================================================ test session starts ================================================================\r\nplatform darwin -- Python 3.6.5, pytest-4.0.2, py-1.7.0, pluggy-0.8.0\r\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/Users/lwiman/personal/nerdsniped/sine_testing/.hypothesis/examples')\r\nrootdir: /Users/lwiman/personal/nerdsniped/sine_testing, inifile:\r\nplugins: hypothesis-3.83.2\r\ncollected 1 item                                                                                                                                    \r\n\r\ntest2.py F                                                                                                                                    [100%]\r\n\r\n===================================================================== FAILURES ======================================================================\r\n_____________________________________________________________________ test_foo ______________________________________________________________________\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py:174: in test_function\r\n    self._test_function(data)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/core.py:625: in evaluate_test_data\r\n    escalate_hypothesis_internal_error()\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/core.py:605: in evaluate_test_data\r\n    result = self.execute(data)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/core.py:574: in execute\r\n    result = self.test_runner(data, run)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/executors.py:56: in default_new_style_executor\r\n    return function(data)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/core.py:551: in run\r\n    args, kwargs = data.draw(self.search_strategy)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py:224: in draw\r\n    return self.__draw(strategy, label=label)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py:239: in __draw\r\n    return strategy.do_draw(self)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/searchstrategy/collections.py:55: in do_draw\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/searchstrategy/collections.py:55: in <genexpr>\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py:224: in draw\r\n    return self.__draw(strategy, label=label)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py:233: in __draw\r\n    return strategy.do_draw(self)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/searchstrategy/strategies.py:576: in do_draw\r\n    result = self.pack(data.draw(self.mapped_strategy))\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py:224: in draw\r\n    return self.__draw(strategy, label=label)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py:233: in __draw\r\n    return strategy.do_draw(self)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/searchstrategy/lazy.py:156: in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py:224: in draw\r\n    return self.__draw(strategy, label=label)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py:233: in __draw\r\n    return strategy.do_draw(self)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/searchstrategy/strategies.py:576: in do_draw\r\n    result = self.pack(data.draw(self.mapped_strategy))\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py:224: in draw\r\n    return self.__draw(strategy, label=label)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py:233: in __draw\r\n    return strategy.do_draw(self)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/searchstrategy/collections.py:55: in do_draw\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/searchstrategy/collections.py:55: in <genexpr>\r\n    return tuple(data.draw(e) for e in self.element_strategies)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py:224: in draw\r\n    return self.__draw(strategy, label=label)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py:233: in __draw\r\n    return strategy.do_draw(self)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/searchstrategy/strategies.py:633: in do_draw\r\n    data.note_event(\"Aborted test because unable to satisfy %r\" % (self,))\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/searchstrategy/strategies.py:610: in __repr__\r\n    get_pretty_function_description(self.condition),\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/reflection.py:375: in get_pretty_function_description\r\n    result = extract_lambda_source(f)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/reflection.py:348: in extract_lambda_source\r\n    source = source[source.index(\"lambda\") :]\r\nE   ValueError: substring not found\r\n\r\nDuring handling of the above exception, another exception occurred:\r\ntest2.py:7: in test_foo\r\n    ???\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/lazyformat.py:29: in __str__\r\n    return self.__format_string % self.__args\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/searchstrategy/strategies.py:610: in __repr__\r\n    get_pretty_function_description(self.condition),\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/reflection.py:375: in get_pretty_function_description\r\n    result = extract_lambda_source(f)\r\n../../../.pyenv/versions/3.6/lib/python3.6/site-packages/hypothesis/internal/reflection.py:348: in extract_lambda_source\r\n    source = source[source.index(\"lambda\") :]\r\nE   ValueError: substring not found\r\n-------------------------------------------------------------------- Hypothesis ---------------------------------------------------------------------\r\nYou can add @seed(306900588268218898824024975885321058451) to this test or run pytest with --hypothesis-seed=306900588268218898824024975885321058451 to reproduce this failure.\r\n============================================================= 1 failed in 0.32 seconds ==============================================================\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1700/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1683", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1683/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1683/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1683/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1683", "id": 388331041, "node_id": "MDU6SXNzdWUzODgzMzEwNDE=", "number": 1683, "title": " The floats strategy with allow_infinite set to False returns infinity if min_value is large", "user": {"login": "vitalbmcdonald", "id": 42211811, "node_id": "MDQ6VXNlcjQyMjExODEx", "avatar_url": "https://avatars.githubusercontent.com/u/42211811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vitalbmcdonald", "html_url": "https://github.com/vitalbmcdonald", "followers_url": "https://api.github.com/users/vitalbmcdonald/followers", "following_url": "https://api.github.com/users/vitalbmcdonald/following{/other_user}", "gists_url": "https://api.github.com/users/vitalbmcdonald/gists{/gist_id}", "starred_url": "https://api.github.com/users/vitalbmcdonald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vitalbmcdonald/subscriptions", "organizations_url": "https://api.github.com/users/vitalbmcdonald/orgs", "repos_url": "https://api.github.com/users/vitalbmcdonald/repos", "events_url": "https://api.github.com/users/vitalbmcdonald/events{/privacy}", "received_events_url": "https://api.github.com/users/vitalbmcdonald/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-12-06T18:02:01Z", "updated_at": "2019-01-03T01:11:20Z", "closed_at": "2019-01-03T01:11:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Similar to issue #1476, when `allow_infinity` is set to `False` in conjunction with `min_value` set to a large value, infinity still can be returned. \r\n\r\nThe following code reproduces the error for on my computer, but I think the `min_value` may have to change depending on the system being used. \r\n```python\r\nfrom hypothesis.strategies import floats\r\nfrom hypothesis.errors import NoExamples\r\nimport math\r\n\r\nstrategy = floats(min_value=1e+302, allow_infinity=False, allow_nan=False).filter(lambda x: math.isinf(x))\r\n\r\ntry:\r\n    strategy.example()\r\nexcept NoExamples:\r\n    print(\"Expected result\")\r\nelse:\r\n    raise Exception(\"Strategy returned infinity\")\r\n```\r\n\r\nI think the culprit is [this map](https://github.com/HypothesisWorks/hypothesis/blob/master/hypothesis-python/src/hypothesis/strategies.py#L535).  I believe according to that code any positive `min_value` could result in infinity being returned, it is just more likely the larger the value provided. \r\n\r\nA workaround is adding a `.filter(lambda x: not math.isinf(x))` to any strategy. ", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1683/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1683/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1669", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1669/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1669/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1669/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1669", "id": 377685992, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI4NTY5NjMw", "number": 1669, "title": "Fix ceil and floor for Numpy ints on Py3", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-06T04:15:41Z", "updated_at": "2018-12-08T13:12:58Z", "closed_at": "2018-12-08T13:12:55Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1669", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1669", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1669.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1669.patch", "merged_at": "2018-12-08T13:12:55Z"}, "body": "Fixes #1667.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1669/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1669/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1667", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1667/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1667/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1667/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1667", "id": 377392056, "node_id": "MDU6SXNzdWUzNzczOTIwNTY=", "number": 1667, "title": "integers(x, x) can generate (x-1) if x is an int64", "user": {"login": "dycw", "id": 10572122, "node_id": "MDQ6VXNlcjEwNTcyMTIy", "avatar_url": "https://avatars.githubusercontent.com/u/10572122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dycw", "html_url": "https://github.com/dycw", "followers_url": "https://api.github.com/users/dycw/followers", "following_url": "https://api.github.com/users/dycw/following{/other_user}", "gists_url": "https://api.github.com/users/dycw/gists{/gist_id}", "starred_url": "https://api.github.com/users/dycw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dycw/subscriptions", "organizations_url": "https://api.github.com/users/dycw/orgs", "repos_url": "https://api.github.com/users/dycw/repos", "events_url": "https://api.github.com/users/dycw/events{/privacy}", "received_events_url": "https://api.github.com/users/dycw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-11-05T13:06:41Z", "updated_at": "2018-12-08T13:12:55Z", "closed_at": "2018-12-08T13:12:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nJust stumbled upon this by accident. Using hypothesis 3.68.0 and numpy 1.15.2:\r\n\r\n```python\r\nfrom hypothesis import given\r\nfrom hypothesis.strategies import data, integers\r\nfrom hypothesis.extra.numpy import from_dtype, integer_dtypes\r\n\r\n@given(data=data(), dtype=integer_dtypes())\r\ndef test_numpy_integers(data, dtype):\r\n    x = data.draw(from_dtype(dtype))\r\n    assert data.draw(integers(x, x)) == x\r\n```\r\n\r\nFor example, with the int64 type we can fail with `x = 9007199254740993`, with `integers()` generating `x - 1`. I've not seen examples of anything other than `x - 1` being generated.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1667/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1667/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1657", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1657/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1657/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1657/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1657", "id": 374317330, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI2MDQ1NTU2", "number": 1657, "title": "Fix from_type on Python 2", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-26T10:13:05Z", "updated_at": "2018-10-29T23:10:53Z", "closed_at": "2018-10-29T23:10:49Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1657", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1657", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1657.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1657.patch", "merged_at": "2018-10-29T23:10:48Z"}, "body": "```python\r\nclass C(object): pass\r\nfrom_type(C).example()\r\n```\r\n\r\nThanks to @ccxcz for reporting that this was broken on Python 2, because `required_args` returns None for non-callable types - such as the slot wrapper on `object.__init__`.  Closes #1655, closes #1656.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1657/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1657/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1656", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1656/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1656/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1656/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1656", "id": 374007632, "node_id": "MDU6SXNzdWUzNzQwMDc2MzI=", "number": 1656, "title": "__init__ inherited from object fails required_args() on Python-2.7", "user": {"login": "ccxcz", "id": 1307801, "node_id": "MDQ6VXNlcjEzMDc4MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1307801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccxcz", "html_url": "https://github.com/ccxcz", "followers_url": "https://api.github.com/users/ccxcz/followers", "following_url": "https://api.github.com/users/ccxcz/following{/other_user}", "gists_url": "https://api.github.com/users/ccxcz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccxcz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccxcz/subscriptions", "organizations_url": "https://api.github.com/users/ccxcz/orgs", "repos_url": "https://api.github.com/users/ccxcz/repos", "events_url": "https://api.github.com/users/ccxcz/events{/privacy}", "received_events_url": "https://api.github.com/users/ccxcz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-10-25T15:32:38Z", "updated_at": "2018-10-29T23:10:49Z", "closed_at": "2018-10-29T23:10:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "On Python 2.7 `getargspec()` fails on default `__init__` method. This in turn triggers bug #1655. The `required_args()` function can use `target.__init__ is object.__init__` to detect this case.\r\nTest for checking correct result is provided in https://github.com/ccxcz/hypothesis/tree/check-default-init", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1656/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1656/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1655", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1655/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1655/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1655/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1655", "id": 373998305, "node_id": "MDU6SXNzdWUzNzM5OTgzMDU=", "number": 1655, "title": "Objects for which getfullargspec() fails are handled incorrectly by from_type() and builds().", "user": {"login": "ccxcz", "id": 1307801, "node_id": "MDQ6VXNlcjEzMDc4MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1307801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccxcz", "html_url": "https://github.com/ccxcz", "followers_url": "https://api.github.com/users/ccxcz/followers", "following_url": "https://api.github.com/users/ccxcz/following{/other_user}", "gists_url": "https://api.github.com/users/ccxcz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccxcz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccxcz/subscriptions", "organizations_url": "https://api.github.com/users/ccxcz/orgs", "repos_url": "https://api.github.com/users/ccxcz/repos", "events_url": "https://api.github.com/users/ccxcz/events{/privacy}", "received_events_url": "https://api.github.com/users/ccxcz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-10-25T15:12:41Z", "updated_at": "2018-10-29T23:10:48Z", "closed_at": "2018-10-29T23:10:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some types of objects are considered callable but getfullargspec() fails on them. This is handled by required_args() by returning None. The functions from_type() and builds() don't seem to anticipate this and assume required_args always returns set. In case of from_type it ends up with:\r\n`AttributeError: 'NoneType' object has no attribute 'issubset'` while builds assumes this means the object should be called with no arguments.\r\nI've added tests to check for this in https://github.com/ccxcz/hypothesis/tree/check-uninspectable-callables", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1655/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1655/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1653", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1653/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1653/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1653/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1653", "id": 373761801, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI1NjE1MTk4", "number": 1653, "title": "Shrink errors from pytest.fail() in given, not just stateful testing", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-25T03:46:22Z", "updated_at": "2018-10-25T10:05:57Z", "closed_at": "2018-10-25T10:05:53Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1653", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1653", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1653.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1653.patch", "merged_at": "2018-10-25T10:05:53Z"}, "body": "Extracted from #1609 to match the behavior added to stateful testing in #1373, without the multiple-user-facing-feature \ud83d\udd0aklaxon\ud83d\udd0a going off.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1653/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1653/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1650", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1650/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1650/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1650/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1650", "id": 372988320, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI1MDI5NTAz", "number": 1650, "title": "Manage Numpy's global PRNG state too", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-23T13:02:29Z", "updated_at": "2018-12-08T10:26:53Z", "closed_at": "2018-12-08T10:26:49Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1650", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1650", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1650.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1650.patch", "merged_at": "2018-12-08T10:26:49Z"}, "body": "Turns out that `random` and `numpy.random` maintain independent global states, so now we handle the latter too - plus some fixes to documentation and a related small refactoring.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1650/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1649", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1649/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1649/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1649/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1649", "id": 372806317, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI0ODk0MTQy", "number": 1649, "title": "Critical fix for Python<2.7.9", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-10-23T04:46:16Z", "updated_at": "2018-10-26T10:15:46Z", "closed_at": "2018-10-23T07:46:55Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1649", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1649", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1649.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1649.patch", "merged_at": "2018-10-23T07:46:55Z"}, "body": "`exec` was incorrectly raising `SyntaxError` in nested functions even when passed explicit locals and globals mappings, so we now avoid trying to elide tracebacks on Python < 2.7.9 due to [BPO-21591](https://bugs.python.org/issue21591).\r\n\r\nCloses #1648.  I'm looking forward to [2020](https://pythonclock.org/)...\r\n\r\nCC @HypothesisWorks/hypothesis-python-contributors for a quick review?", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1649/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1649/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1648", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1648/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1648/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1648/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1648", "id": 372792443, "node_id": "MDU6SXNzdWUzNzI3OTI0NDM=", "number": 1648, "title": "SyntaxError on Python 2 with 3.79.2", "user": {"login": "reaperhulk", "id": 161495, "node_id": "MDQ6VXNlcjE2MTQ5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/161495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reaperhulk", "html_url": "https://github.com/reaperhulk", "followers_url": "https://api.github.com/users/reaperhulk/followers", "following_url": "https://api.github.com/users/reaperhulk/following{/other_user}", "gists_url": "https://api.github.com/users/reaperhulk/gists{/gist_id}", "starred_url": "https://api.github.com/users/reaperhulk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reaperhulk/subscriptions", "organizations_url": "https://api.github.com/users/reaperhulk/orgs", "repos_url": "https://api.github.com/users/reaperhulk/repos", "events_url": "https://api.github.com/users/reaperhulk/events{/privacy}", "received_events_url": "https://api.github.com/users/reaperhulk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-23T03:30:28Z", "updated_at": "2018-10-23T07:46:55Z", "closed_at": "2018-10-23T07:46:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The latest release causes a SyntaxError on older Python 2.7 (occurs on 2.7.3 and 2.7.5 in pyca/cryptography's CI):\r\n\r\n```python-traceback\r\nTraceback (most recent call last):\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/pytest.py\", line 77, in <module>\r\n    raise SystemExit(pytest.main())\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/_pytest/config/__init__.py\", line 49, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/_pytest/config/__init__.py\", line 186, in _prepareconfig\r\n    pluginmanager=pluginmanager, args=args\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/pluggy/hooks.py\", line 284, in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/pluggy/manager.py\", line 67, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/pluggy/manager.py\", line 61, in <lambda>\r\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/pluggy/callers.py\", line 203, in _multicall\r\n    gen.send(outcome)\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/_pytest/helpconfig.py\", line 89, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/pluggy/callers.py\", line 81, in get_result\r\n    _reraise(*ex)  # noqa\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/pluggy/callers.py\", line 187, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/_pytest/config/__init__.py\", line 656, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/_pytest/config/__init__.py\", line 828, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/_pytest/config/__init__.py\", line 780, in _preparse\r\n    self.pluginmanager.load_setuptools_entrypoints(\"pytest11\")\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/pluggy/manager.py\", line 267, in load_setuptools_entrypoints\r\n    plugin = ep.load()\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/pkg_resources/__init__.py\", line 2332, in load\r\n    return self.resolve()\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/pkg_resources/__init__.py\", line 2338, in resolve\r\n    module = __import__(self.module_name, fromlist=['__name__'], level=0)\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/hypothesis/__init__.py\", line 30, in <module>\r\n    from hypothesis.core import given, find, example, seed, reproduce_failure, \\\r\n  File \"/home/jenkins/workspace/4485-S2JEK2AOWI4X57D@2/cryptography/.tox/py27/local/lib/python2.7/site-packages/hypothesis/core.py\", line 948\r\n    exec(\r\nSyntaxError: unqualified exec is not allowed in function 'wrapped_test' it is a nested function\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1648/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1648/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1607", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1607/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1607/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1607/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1607", "id": 364902421, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE4OTc4NzYz", "number": 1607, "title": "Avoid caching internal strategy that has a reference to the test class", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-09-28T14:02:36Z", "updated_at": "2018-10-09T08:05:30Z", "closed_at": "2018-10-09T08:05:12Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1607", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1607", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1607.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1607.patch", "merged_at": "2018-10-09T08:05:12Z"}, "body": "For equivalent effect but better behaviour around memory use and garbage collection.  Fixes #493.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1607/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1607/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1606", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1606/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1606/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1606/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1606", "id": 364869966, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE4OTUzMTMz", "number": 1606, "title": "Validate strategy before starting the draw timer", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-28T12:33:34Z", "updated_at": "2018-10-03T15:30:35Z", "closed_at": "2018-10-03T15:22:18Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1606", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1606", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1606.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1606.patch", "merged_at": "2018-10-03T15:22:18Z"}, "body": "...because otherwise, time spend reifying the strategy is also counted towards the first draw call, which is just plain wrong.  Aside from producing incorrect statistics, it can also trigger the `too_slow` health check!\r\n\r\nFixes #1153.  Sadly there is no regression test, because every attempt I tried was flaky due to some horrible combination of caches and timing issues.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1606/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1606/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1595", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1595/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1595/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1595/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1595", "id": 362940263, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE3NTA4NDQy", "number": 1595, "title": "Fix internal error in recursive()", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-23T12:53:06Z", "updated_at": "2018-09-25T15:07:42Z", "closed_at": "2018-09-25T13:14:39Z", "author_association": "MEMBER", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/pulls/1595", "html_url": "https://github.com/HypothesisWorks/hypothesis/pull/1595", "diff_url": "https://github.com/HypothesisWorks/hypothesis/pull/1595.diff", "patch_url": "https://github.com/HypothesisWorks/hypothesis/pull/1595.patch", "merged_at": "2018-09-25T13:14:39Z"}, "body": "I tracked this down to a bug in OneOfStrategy, where if `bias is not None` the sampler might be operating off the pre-flattened list of strategies.  In the case where two strategies are identical, this can be shortened by flattening and thus trigger an IndexError.  The fix is simply to calculate the biased sampler values *after* flattening the strategies list, if we're using it at all.  Closes #1502.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1595/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1583", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1583/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1583/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1583/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1583", "id": 360682221, "node_id": "MDU6SXNzdWUzNjA2ODIyMjE=", "number": 1583, "title": "strategies.from_type doesn't work for the empty tuple type", "user": {"login": "lubieowoce", "id": 13698226, "node_id": "MDQ6VXNlcjEzNjk4MjI2", "avatar_url": "https://avatars.githubusercontent.com/u/13698226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lubieowoce", "html_url": "https://github.com/lubieowoce", "followers_url": "https://api.github.com/users/lubieowoce/followers", "following_url": "https://api.github.com/users/lubieowoce/following{/other_user}", "gists_url": "https://api.github.com/users/lubieowoce/gists{/gist_id}", "starred_url": "https://api.github.com/users/lubieowoce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lubieowoce/subscriptions", "organizations_url": "https://api.github.com/users/lubieowoce/orgs", "repos_url": "https://api.github.com/users/lubieowoce/repos", "events_url": "https://api.github.com/users/lubieowoce/events{/privacy}", "received_events_url": "https://api.github.com/users/lubieowoce/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-09-16T21:52:11Z", "updated_at": "2018-09-17T02:22:16Z", "closed_at": "2018-09-17T02:22:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "*edit: added expected behavior for clarity*\r\nPython==3.5.4, hypothesis==3.71.3\r\n\r\n#### Issue\r\n`strategies.from_type(typing.Tuple[()])` should return `()`, but crashes instead.\r\n\r\nFirst of all, I know this is a bit silly, since there is only one possible empty tuple, `()`, and hence not much to generate. It's also a pretty niche concern, but I think it'd be nice to support this for completeness. \r\n\r\nAccording to the `mypy` [docs](https://mypy.readthedocs.io/en/latest/builtin_types.html), the empty tuple has type `typing.Tuple[()]`. I couldn't find anything on this in the `typing` docs, but since Guido reviewed and merged [the commit](https://github.com/python/mypy/commit/71332d5857b36f4fa7e389bf9bf2c95776cd26f0) to `mypy's` docs ,  `Tuple[()]` seems like the official way to do it.\r\n\r\n#### Expected behavior\r\n```python\r\n>>> from typing import Tuple\r\n>>> from hypothesis.strategies import from_type\r\n>>> from_type(Tuple[()]).example()\r\n()\r\n```\r\n#### Actual behavior\r\n```python\r\n>>> from typing import Tuple\r\n>>> from hypothesis.strategies import from_type\r\n>>> from_type(Tuple[()]).example()\r\nTraceback (most recent call last):\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\strategies.py\", line 131, in recur\r\n    result = mapping[strat]\r\nKeyError: tuples(deferred(lambda: func(*args, **kwargs)))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\strategies.py\", line 131, in recur\r\n    result = mapping[strat]\r\nKeyError: tuples(deferred(lambda: func(*args, **kwargs)))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\strategies.py\", line 304, in example\r\n    phases=tuple(set(Phase) - {Phase.shrink}),\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\core.py\", line 979, in find\r\n    specifier.validate()\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\strategies.py\", line 380, in validate\r\n    self.is_empty\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\strategies.py\", line 142, in accept\r\n    recur(self)\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\strategies.py\", line 139, in recur\r\n    mapping[strat] = getattr(strat, calculation)(recur)\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\deferred.py\", line 81, in calc_is_empty\r\n    return recur(self.wrapped_strategy)\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\strategies.py\", line 139, in recur\r\n    mapping[strat] = getattr(strat, calculation)(recur)\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\lazy.py\", line 90, in calc_is_empty\r\n    return recur(self.wrapped_strategy)\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\lazy.py\", line 106, in wrapped_strategy\r\n    unwrap_strategies(s) for s in self.__args)\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\lazy.py\", line 106, in <genexpr>\r\n    unwrap_strategies(s) for s in self.__args)\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\lazy.py\", line 48, in unwrap_strategies\r\n    result = unwrap_strategies(s.wrapped_strategy)\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\searchstrategy\\deferred.py\", line 45, in wrapped_strategy\r\n    result = self.__definition()\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\strategies.py\", line 1200, in <lambda>\r\n    return deferred(lambda: func(*args, **kwargs))\r\n  File \"<venv path>\\lib\\site-packages\\hypothesis\\strategies.py\", line 1261, in from_type\r\n    raise InvalidArgument('thing=%s must be a type' % (thing,))\r\nhypothesis.errors.InvalidArgument: thing=() must be a type\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1583/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1583/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1576", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1576/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1576/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1576/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1576", "id": 360275210, "node_id": "MDU6SXNzdWUzNjAyNzUyMTA=", "number": 1576, "title": "Warnings in Python 3.8 (CPython master)", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-14T11:57:25Z", "updated_at": "2018-09-15T01:06:17Z", "closed_at": "2018-09-15T01:06:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Trying to install hypothesis shows the following warning in CPython master. I searched for the related warning and master branch but I couldn't find any issue so I am reporting it here.\r\n\r\n\r\n> /home/karthi/pandas-venv/lib/python3.8/site-packages/hypothesis/strategies.py:32: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  from collections import Sequence\r\n\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1576/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1576/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1558", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1558/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1558/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1558/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1558", "id": 356198298, "node_id": "MDU6SXNzdWUzNTYxOTgyOTg=", "number": 1558, "title": "3.70.0 fails on py3.5 on all platforms", "user": {"login": "jochym", "id": 5993422, "node_id": "MDQ6VXNlcjU5OTM0MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/5993422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jochym", "html_url": "https://github.com/jochym", "followers_url": "https://api.github.com/users/jochym/followers", "following_url": "https://api.github.com/users/jochym/following{/other_user}", "gists_url": "https://api.github.com/users/jochym/gists{/gist_id}", "starred_url": "https://api.github.com/users/jochym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jochym/subscriptions", "organizations_url": "https://api.github.com/users/jochym/orgs", "repos_url": "https://api.github.com/users/jochym/repos", "events_url": "https://api.github.com/users/jochym/events{/privacy}", "received_events_url": "https://api.github.com/users/jochym/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 602737425, "node_id": "MDU6TGFiZWw2MDI3Mzc0MjU=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/tests/build/CI", "name": "tests/build/CI", "color": "fbca04", "default": false, "description": "about testing or deployment *of* Hypothesis"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-01T12:19:32Z", "updated_at": "2018-09-03T11:29:40Z", "closed_at": "2018-09-03T10:22:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "See the logs:\r\nOSX: https://travis-ci.org/conda-forge/hypothesis-feedstock/jobs/423298695\r\nWin: https://ci.appveyor.com/project/conda-forge/hypothesis-feedstock/build/1.0.315/job/l8qn1pf6l36abb8d\r\nLinux: https://circleci.com/gh/conda-forge/hypothesis-feedstock/606?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link\r\n\r\nIt seems to be a single zip test.\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1558/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1546", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1546/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1546/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1546/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1546", "id": 355147708, "node_id": "MDU6SXNzdWUzNTUxNDc3MDg=", "number": 1546, "title": "Log message hiding interfers with pytest log caputure fixture.", "user": {"login": "jenshnielsen", "id": 548266, "node_id": "MDQ6VXNlcjU0ODI2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/548266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jenshnielsen", "html_url": "https://github.com/jenshnielsen", "followers_url": "https://api.github.com/users/jenshnielsen/followers", "following_url": "https://api.github.com/users/jenshnielsen/following{/other_user}", "gists_url": "https://api.github.com/users/jenshnielsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jenshnielsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jenshnielsen/subscriptions", "organizations_url": "https://api.github.com/users/jenshnielsen/orgs", "repos_url": "https://api.github.com/users/jenshnielsen/repos", "events_url": "https://api.github.com/users/jenshnielsen/events{/privacy}", "received_events_url": "https://api.github.com/users/jenshnielsen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-08-29T12:57:24Z", "updated_at": "2018-08-30T11:53:06Z", "closed_at": "2018-08-30T11:53:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "The log message hiding merged in #1535 interferes with pytests log capturing. \r\n\r\nIn the example below I am using the [caplog fixture](https://docs.pytest.org/en/latest/logging.html#caplog-fixture) to capture the log message and test that they are correct.\r\nIn this simple case just asserting the number of messages. This results in an empty record list in the first call with  3.69.11 but works as expected with 3.69.10\r\n\r\n```python\r\nimport logging\r\nfrom hypothesis import given, strategies\r\n\r\n@given(x=strategies.floats(min_value=-3, max_value=3))\r\ndef test_logcapture(x, caplog):\r\n\r\n    with caplog.at_level(logging.CRITICAL, logger='root'):\r\n        caplog.clear()\r\n        logging.critical(f\"x is {x}\")\r\n    assert len(caplog.records) == 1 \r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1546/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1546/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1521", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1521/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1521/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1521/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1521", "id": 354202311, "node_id": "MDU6SXNzdWUzNTQyMDIzMTE=", "number": 1521, "title": "example doesn't respect verbosity", "user": {"login": "sponster-au", "id": 42725456, "node_id": "MDQ6VXNlcjQyNzI1NDU2", "avatar_url": "https://avatars.githubusercontent.com/u/42725456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sponster-au", "html_url": "https://github.com/sponster-au", "followers_url": "https://api.github.com/users/sponster-au/followers", "following_url": "https://api.github.com/users/sponster-au/following{/other_user}", "gists_url": "https://api.github.com/users/sponster-au/gists{/gist_id}", "starred_url": "https://api.github.com/users/sponster-au/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sponster-au/subscriptions", "organizations_url": "https://api.github.com/users/sponster-au/orgs", "repos_url": "https://api.github.com/users/sponster-au/repos", "events_url": "https://api.github.com/users/sponster-au/events{/privacy}", "received_events_url": "https://api.github.com/users/sponster-au/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-08-27T06:57:46Z", "updated_at": "2018-09-16T06:04:42Z", "closed_at": "2018-09-16T06:04:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "If using the `@hypothesis.example` decorator, the `settings.default.verbosity` is changed to `Verbosity.normal`.\r\n\r\nThe following test case currently fails:\r\n\r\n```python\r\ndef test_example_respects_verbosity():\r\n    @settings(verbosity=Verbosity.verbose)\r\n    @example(x=99)\r\n    @given(integers())\r\n    def test(x):\r\n        assert settings.default.verbosity == Verbosity.verbose\r\n    test()\r\n````", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1521/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1502", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1502/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1502/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1502/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1502", "id": 352178843, "node_id": "MDU6SXNzdWUzNTIxNzg4NDM=", "number": 1502, "title": "IndexError in OneOfStrategy.do_draw (intermittent)", "user": {"login": "mulkieran", "id": 1218366, "node_id": "MDQ6VXNlcjEyMTgzNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1218366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mulkieran", "html_url": "https://github.com/mulkieran", "followers_url": "https://api.github.com/users/mulkieran/followers", "following_url": "https://api.github.com/users/mulkieran/following{/other_user}", "gists_url": "https://api.github.com/users/mulkieran/gists{/gist_id}", "starred_url": "https://api.github.com/users/mulkieran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mulkieran/subscriptions", "organizations_url": "https://api.github.com/users/mulkieran/orgs", "repos_url": "https://api.github.com/users/mulkieran/repos", "events_url": "https://api.github.com/users/mulkieran/events{/privacy}", "received_events_url": "https://api.github.com/users/mulkieran/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2018-08-20T15:10:59Z", "updated_at": "2018-09-25T13:14:39Z", "closed_at": "2018-09-25T13:14:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "You can see the trace in the Travis CI here: https://travis-ci.org/stratis-storage/hs-dbus-signature/jobs/418270565.\r\n\r\nThe source is available here: https://github.com/mulkieran/hs-dbus-signature/tree/master-hypothesis-2.\r\n\r\nThe interesting method is here: https://github.com/mulkieran/hs-dbus-signature/blob/master-hypothesis-2/tests/test_strategy.py#L107 and it is short but weird.\r\n\r\nEssentially, I wrote a strategy for generating arbitrary instance of the strategy that this is testing. I draw from that strategy to get a strategy to test, and then I draw from the particular strategy being tested to try to demonstrate that every strategy will at least yield some values. The strategy itself is built using the recursive strategy, which explains the depth of the stack trace.\r\n\r\nIf there is a better way to test that any strategy will at least yield something please let me know.\r\n\r\nIf this index error is actually demonstrating that one strategy has been found that does not yield any elements that would be cool, too.\r\n\r\nOccurs under coverage but also not under coverage, and not consistently under either, but always in OneOfStrategy.\r\n\r\nOccurs when code is this as well\r\n\r\n```\r\n    @given(strategies.data(), dbus_signature_strategy())  # pylint: disable=no-value-for-parameter\r\n    @settings(max_examples=50)\r\n    def testNoBlacklist(self, data, strategy):\r\n        \"\"\"\r\n        Just make sure there is a result for an arbitrary legal strategy.\r\n        \"\"\"\r\n        # pylint: disable=no-value-for-parameter\r\n        data.draw(strategy)\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1502/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1502/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1486", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1486/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1486/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1486/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1486", "id": 349675133, "node_id": "MDU6SXNzdWUzNDk2NzUxMzM=", "number": 1486, "title": "\"You can reproduce this example...\" doesn't respect Verbosity.quiet", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-10T22:28:57Z", "updated_at": "2018-09-08T07:27:29Z", "closed_at": "2018-09-08T07:27:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Since 3.44.0 we have the message \"You can reproduce this example by temporarily adding `@reproduce_failure(...)\" for failing tests, which is nice.\r\n\r\nWhat's less nice is that it shows up even if you have `verbosity=Verbosity.quiet` in your settings, but this should suppress all output from Hypothesis.\r\n\r\n`Verbosity.quiet` is [supposed to be enforced by report](https://github.com/HypothesisWorks/hypothesis/blob/master/hypothesis-python/src/hypothesis/reporting.py#L72) so my guess is that we're running this line outside of the current settings for the test.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1486/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1486/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1448", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1448/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1448/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1448/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1448", "id": 346476745, "node_id": "MDU6SXNzdWUzNDY0NzY3NDU=", "number": 1448, "title": "Problems with conda-forge builds", "user": {"login": "jochym", "id": 5993422, "node_id": "MDQ6VXNlcjU5OTM0MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/5993422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jochym", "html_url": "https://github.com/jochym", "followers_url": "https://api.github.com/users/jochym/followers", "following_url": "https://api.github.com/users/jochym/following{/other_user}", "gists_url": "https://api.github.com/users/jochym/gists{/gist_id}", "starred_url": "https://api.github.com/users/jochym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jochym/subscriptions", "organizations_url": "https://api.github.com/users/jochym/orgs", "repos_url": "https://api.github.com/users/jochym/repos", "events_url": "https://api.github.com/users/jochym/events{/privacy}", "received_events_url": "https://api.github.com/users/jochym/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 602737425, "node_id": "MDU6TGFiZWw2MDI3Mzc0MjU=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/tests/build/CI", "name": "tests/build/CI", "color": "fbca04", "default": false, "description": "about testing or deployment *of* Hypothesis"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-08-01T07:16:50Z", "updated_at": "2018-08-01T09:59:05Z", "closed_at": "2018-08-01T09:59:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems the recent versions (3.66.16-19) have some problems with few of the tests on our conda-forge builds (https://github.com/conda-forge/hypothesis-feedstock/pulls) on all platforms. Please look into it.\r\nI'm not knowledgeable enough about hypothesis internals to investigate but that blocks release of c-f packages. ", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1448/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1380", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1380/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1380/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1380/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1380", "id": 337870243, "node_id": "MDU6SXNzdWUzMzc4NzAyNDM=", "number": 1380, "title": "test_explore_an_arbitrary_language found a bug", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-07-03T12:05:23Z", "updated_at": "2018-07-04T12:40:25Z", "closed_at": "2018-07-04T12:40:25Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://travis-ci.org/HypothesisWorks/hypothesis/jobs/399408345#L1111\r\n\r\nAssigning to @DRMacIver, who added this test in #1302.  (:dog::wink:)", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1380/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1380/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1378", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1378/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1378/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1378/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1378", "id": 337807801, "node_id": "MDU6SXNzdWUzMzc4MDc4MDE=", "number": 1378, "title": "ImportError: cannot import name canonical_filename", "user": {"login": "adaszko", "id": 165678, "node_id": "MDQ6VXNlcjE2NTY3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/165678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adaszko", "html_url": "https://github.com/adaszko", "followers_url": "https://api.github.com/users/adaszko/followers", "following_url": "https://api.github.com/users/adaszko/following{/other_user}", "gists_url": "https://api.github.com/users/adaszko/gists{/gist_id}", "starred_url": "https://api.github.com/users/adaszko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adaszko/subscriptions", "organizations_url": "https://api.github.com/users/adaszko/orgs", "repos_url": "https://api.github.com/users/adaszko/repos", "events_url": "https://api.github.com/users/adaszko/events{/privacy}", "received_events_url": "https://api.github.com/users/adaszko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "alexwlchan", "id": 301220, "node_id": "MDQ6VXNlcjMwMTIyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/301220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexwlchan", "html_url": "https://github.com/alexwlchan", "followers_url": "https://api.github.com/users/alexwlchan/followers", "following_url": "https://api.github.com/users/alexwlchan/following{/other_user}", "gists_url": "https://api.github.com/users/alexwlchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexwlchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexwlchan/subscriptions", "organizations_url": "https://api.github.com/users/alexwlchan/orgs", "repos_url": "https://api.github.com/users/alexwlchan/repos", "events_url": "https://api.github.com/users/alexwlchan/events{/privacy}", "received_events_url": "https://api.github.com/users/alexwlchan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alexwlchan", "id": 301220, "node_id": "MDQ6VXNlcjMwMTIyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/301220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexwlchan", "html_url": "https://github.com/alexwlchan", "followers_url": "https://api.github.com/users/alexwlchan/followers", "following_url": "https://api.github.com/users/alexwlchan/following{/other_user}", "gists_url": "https://api.github.com/users/alexwlchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexwlchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexwlchan/subscriptions", "organizations_url": "https://api.github.com/users/alexwlchan/orgs", "repos_url": "https://api.github.com/users/alexwlchan/repos", "events_url": "https://api.github.com/users/alexwlchan/events{/privacy}", "received_events_url": "https://api.github.com/users/alexwlchan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-07-03T09:06:17Z", "updated_at": "2018-07-04T09:10:54Z", "closed_at": "2018-07-04T09:10:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm getting an import error on startup:\r\n\r\n```\r\n  File \"/Users/adaszko/repos/fieldaware/fieldaware-venv/lib/python2.7/site-packages/hypothesis/core.py\", line 38, in <module>\r\n    from coverage.files import canonical_filename\r\nImportError: cannot import name canonical_filename\r\n```\r\n\r\nI've downloaded https://files.pythonhosted.org/packages/4b/e4/5ebf3220993de03f2120a16d9e91cfd053f4c11ada0cf033f2bfe9683fcf/hypothesis-3.65.0-py2-none-any.whl and the `METADATA` file there specifies dependency on `coverage` without any version number:\r\n\r\n```\r\n% grep coverage METADATA\r\nRequires-Dist: coverage\r\n```\r\n\r\nMy local `coverage` is at `3.7.1`.  It works if I upgrade `coverage` to `4.4.1`, so I think there's an issue in hypothesis in that it doesn't specify the version bound on `coverage`.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1378/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1378/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1372", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1372/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1372/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1372/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1372", "id": 337217300, "node_id": "MDU6SXNzdWUzMzcyMTczMDA=", "number": 1372, "title": "Stateful testing: steps not printed on pytest.fail()", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-30T14:06:25Z", "updated_at": "2018-07-03T11:59:59Z", "closed_at": "2018-07-03T11:59:59Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Via [a longer case posted on stackoverflow](https://stackoverflow.com/questions/51068206), I found out that BaseException - or subclasses like `pytest.Failed` - skips the printing of the steps taken to produce the error.\r\n\r\n```python\r\nfrom hypothesis.stateful import RuleBasedStateMachine, rule\r\n\r\nclass RaisesProblem(RuleBasedStateMachine):\r\n\r\n    @rule()\r\n    def oops(self):\r\n        raise BaseException('The steps should be printed too!')\r\n\r\nTest = RaisesProblem.TestCase\r\n```\r\n\r\nSuggested resolution: there is probably somewhere which catches `Exception` but should catch `BaseException` (perhaps re-raising `HypothesisBaseException`).  Finding and fixing that might be enough, along with a regression test of course!", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1372/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1372/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1362", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1362/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1362/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1362/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1362", "id": 336081158, "node_id": "MDU6SXNzdWUzMzYwODExNTg=", "number": 1362, "title": "3.64.0 introduced breaking change to HypothesisHandle", "user": {"login": "mattsb42-aws", "id": 23565203, "node_id": "MDQ6VXNlcjIzNTY1MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/23565203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattsb42-aws", "html_url": "https://github.com/mattsb42-aws", "followers_url": "https://api.github.com/users/mattsb42-aws/followers", "following_url": "https://api.github.com/users/mattsb42-aws/following{/other_user}", "gists_url": "https://api.github.com/users/mattsb42-aws/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattsb42-aws/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattsb42-aws/subscriptions", "organizations_url": "https://api.github.com/users/mattsb42-aws/orgs", "repos_url": "https://api.github.com/users/mattsb42-aws/repos", "events_url": "https://api.github.com/users/mattsb42-aws/events{/privacy}", "received_events_url": "https://api.github.com/users/mattsb42-aws/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 587683606, "node_id": "MDU6TGFiZWw1ODc2ODM2MDY=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/docs", "name": "docs", "color": "c2e0c6", "default": false, "description": "documentation could *always* be better"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-06-27T05:24:55Z", "updated_at": "2018-06-27T17:27:08Z", "closed_at": "2018-06-27T10:01:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n============================================================================================ test session starts =============================================================================================\r\nplatform darwin -- Python 2.7.13, pytest-3.6.2, py-1.5.3, pluggy-0.6.0\r\nrootdir: /Users/bullocm/git/base64io-python, inifile: setup.cfg\r\nplugins: cov-2.5.1, hypothesis-3.64.0\r\ncollected 238 items / 1 errors                                                                                                                                                                               \r\n\r\n=================================================================================================== ERRORS ===================================================================================================\r\n__________________________________________________________________________ ERROR collecting test/functional/test_f_base64_stream.py __________________________________________________________________________\r\ntest/functional/test_f_base64_stream.py:43: in <module>\r\n    @hypothesis.given(source=BINARY)\r\n.tox/py27/lib/python2.7/site-packages/_pytest/mark/structures.py:213: in __call__\r\n    store_legacy_markinfo(func, self.mark)\r\n.tox/py27/lib/python2.7/site-packages/_pytest/mark/structures.py:250: in store_legacy_markinfo\r\n    holder.add_mark(mark)\r\nE   AttributeError: 'HypothesisHandle' object has no attribute 'add_mark'\r\n---------------------------------------------------------------------------------------------- Captured stderr -----------------------------------------------------------------------------------------------\r\n\r\n```\r\n\r\nEx:\r\nhttps://travis-ci.org/awslabs/base64io-python/builds/397145142\r\nhttps://travis-ci.org/awslabs/aws-dynamodb-encryption-python/builds/397189674\r\n\r\nTesting these pinning against Hypothesis 3.63.0, everything works as expected but when pinned against 3.64.0 these errors appear.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1362/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1362/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1346", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1346/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1346/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1346/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1346", "id": 335159586, "node_id": "MDU6SXNzdWUzMzUxNTk1ODY=", "number": 1346, "title": "Avoid \"impossible\" ZeroDivisionError we keep seeing", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-06-24T07:50:03Z", "updated_at": "2018-07-08T22:36:33Z", "closed_at": "2018-07-08T22:36:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://github.com/HypothesisWorks/hypothesis/blob/592bc7cd2c642bf273113083457444b4823021c9/hypothesis-python/src/hypothesis/statistics.py#L88-L95\r\n\r\nThis snippet occasionally leads to problems, when `total_drawtime` is nonzero but `total_runtime` *is* zero, causing test failures [like this one](https://ci.appveyor.com/project/DRMacIver/hypothesis/build/1.0.458/job/hl2d74810901ttf5#L926).  I'm not sure why this happens - it's been observed on Python 2 (without) and Python 3 (with) a monotonic clock, so there might be multiple causes - but the solution is pretty simple.  All you need to do to fix this is to change the first conditional to\r\n\r\n```python\r\nif total_drawtime <= 0.0 or total_runtime <= 0.0:\r\n```\r\n\r\nThen write up a short changelog (see guides/documentation.rst), add your name to the contributors list (in - and read! - contributing.rst), and open a pull request!  If you have any questions, just let me know and I'd be happy to help out.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1346/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1307", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1307/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1307/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1307/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1307", "id": 326857124, "node_id": "MDU6SXNzdWUzMjY4NTcxMjQ=", "number": 1307, "title": "Duplicate primary key while creating instances of Django model", "user": {"login": "timmartin", "id": 56920, "node_id": "MDQ6VXNlcjU2OTIw", "avatar_url": "https://avatars.githubusercontent.com/u/56920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timmartin", "html_url": "https://github.com/timmartin", "followers_url": "https://api.github.com/users/timmartin/followers", "following_url": "https://api.github.com/users/timmartin/following{/other_user}", "gists_url": "https://api.github.com/users/timmartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/timmartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timmartin/subscriptions", "organizations_url": "https://api.github.com/users/timmartin/orgs", "repos_url": "https://api.github.com/users/timmartin/repos", "events_url": "https://api.github.com/users/timmartin/events{/privacy}", "received_events_url": "https://api.github.com/users/timmartin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-05-27T22:38:53Z", "updated_at": "2018-06-20T03:53:44Z", "closed_at": "2018-06-20T03:53:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to create a strategy for testing a Django model, and I'm repeatedly getting integrity errors for a duplicate primary key.\r\n\r\nI believe the problem is in the way that Django objects are constructed using `get_or_create` when the primary key is one of the values generated as part of the strategy. We shouldn't pass all the fields to `get_or_create`, we should pass the primary key as a keyword arg and the remaining values as the `defaults` keyword arg. This way only the primary key is used for determining duplicate rows, rather than requiring the values of all fields to match.\r\n\r\nThis problem hit because my model has both a `OneToOneField` with `primary_key=True` and an `AutoLastModifiedField`. What I think happens is:\r\n\r\n- The instance is created and written to DB. The `AutoLastModifiedField` updates the value of `modified` at the last minute.\r\n- Hypothesis creates the same values and tries to create the object with `get_or_create`. However, this currently has to match every field. The existing row doesn't match because the `modified` value has changed, so a new object is created.\r\n- The new object can't be created, because there is a clashing primary key.\r\n\r\n```python\r\n    class User(AbstractBaseUser):\r\n        uuid = models.UUIDField(\r\n            # ...\r\n        )\r\n\r\n        first_name = models.CharField(max_length=64)\r\n        last_name = models.CharField(max_length=64)\r\n\r\n    class Teacher(models.Model):\r\n        user = models.OneToOneField(\r\n            User,\r\n            on_delete=models.CASCADE,\r\n            primary_key=True\r\n        )\r\n\r\n        modified = AutoLastModifiedField('modified')\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1307/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1307/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1299", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1299/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1299/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1299/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1299", "id": 325176457, "node_id": "MDU6SXNzdWUzMjUxNzY0NTc=", "number": 1299, "title": "IndexError in shrinking", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-22T07:46:00Z", "updated_at": "2018-09-17T12:18:29Z", "closed_at": "2018-09-17T12:18:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We (very occasionally - I've only seen it once so far in CI) see the following when running https://github.com/HypothesisWorks/hypothesis/blob/master/hypothesis-python/tests/nocover/test_boundary_exploration.py.\r\n\r\n```python-traceback\r\n  File \"/home/david/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\", line 1325, in greedy_shrink\r\n    self.shrink_offset_pairs()\r\n  File \"/home/david/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\", line 1581, in shrink_offset_pairs\r\n    block_val = int_from_block(j)\r\n  File \"/home/david/hypothesis/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\", line 1551, in int_from_block\r\n    return int_from_bytes(current[i])\r\nIndexError: list index out of range\r\n```\r\n\r\nCurrently adding `@reproduce_failure('3.57.0', 'AXicY2BgYARCECICgFQxglQDAADfAAg=')` to the test will trigger.\r\n\r\nI believe that this is because a mismatch between the number of blocks on `shrink_target` and current, and that the following patch fixes the problem:\r\n\r\n```diff\r\ndiff --git a/hypothesis-python/src/hypothesis/internal/conjecture/engine.py b/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\r\nindex 69aaa6f..2f37361 100644\r\n--- a/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\r\n+++ b/hypothesis-python/src/hypothesis/internal/conjecture/engine.py\r\n@@ -1574,21 +1574,20 @@ class Shrinker(object):\r\n             return self.incorporate_new_buffer(buffer)\r\n\r\n         i = 0\r\n-        while i < len(self.blocks):\r\n+        while i < len(current):\r\n             if not self.is_shrinking_block(i) and int_from_block(i) > 0:\r\n                 j = i + 1\r\n-                while j < len(self.shrink_target.blocks):\r\n+                while j < len(current):\r\n                     block_val = int_from_block(j)\r\n                     i_block_val = int_from_block(i)\r\n                     if not self.is_shrinking_block(j) \\\r\n                        and block_val > 0 and i_block_val > 0:\r\n                         offset = min(int_from_block(i),\r\n                                      int_from_block(j))\r\n-                        # Save current before shrinking\r\n-                        current = [self.shrink_target.buffer[u:v]\r\n-                                   for u, v in self.blocks]\r\n                         minimize_int(\r\n                             offset, lambda o: reoffset_pair((i, j), o))\r\n+                        current = [self.shrink_target.buffer[u:v]\r\n+                                   for u, v in self.blocks]\r\n                     j += 1\r\n             i += 1\r\n```\r\n\r\nThe reason this is an issue rather than a PR is that I cannot for the life of me come up with a simple reproduction of this bug after an hour or two of poking at it, and I don't want to go further down this rabbit hole right now.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1299/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1299/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1264", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1264/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1264/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1264/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1264", "id": 319255877, "node_id": "MDU6SXNzdWUzMTkyNTU4Nzc=", "number": 1264, "title": "Hypothesis is not compatible with Python 3.7.0b3's typing module.", "user": {"login": "mingwandroid", "id": 1042804, "node_id": "MDQ6VXNlcjEwNDI4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1042804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mingwandroid", "html_url": "https://github.com/mingwandroid", "followers_url": "https://api.github.com/users/mingwandroid/followers", "following_url": "https://api.github.com/users/mingwandroid/following{/other_user}", "gists_url": "https://api.github.com/users/mingwandroid/gists{/gist_id}", "starred_url": "https://api.github.com/users/mingwandroid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mingwandroid/subscriptions", "organizations_url": "https://api.github.com/users/mingwandroid/orgs", "repos_url": "https://api.github.com/users/mingwandroid/repos", "events_url": "https://api.github.com/users/mingwandroid/events{/privacy}", "received_events_url": "https://api.github.com/users/mingwandroid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-05-01T16:53:28Z", "updated_at": "2018-07-23T01:42:22Z", "closed_at": "2018-07-23T01:42:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "In order to account for changes to the Python typing module made by https://github.com/python/cpython/commit/d911e40e788fb679723d78b6ea11cabf46caed5a I am applying the following patch which may be ok, but more likely is not (the typing module is not something with which I am at all familiar):\r\n\r\n```diff\r\nFrom 27a17ef17be0e518ac06152442966e4dbb193fc5 Mon Sep 17 00:00:00 2001\r\nFrom: Ray Donnelly <mingw.android@gmail.com>\r\nDate: Tue, 1 May 2018 16:45:42 +0100\r\nSubject: [PATCH] Fix typing _ForwardRef and TypingMeta for Python 3.7\r\n\r\nThese fixes are likely incorrect though.\r\n---\r\n hypothesis-python/src/hypothesis/strategies.py | 13 +++++++++++--\r\n 1 file changed, 11 insertions(+), 2 deletions(-)\r\n\r\ndiff --git a/hypothesis-python/src/hypothesis/strategies.py b/hypothesis-python/src/hypothesis/strategies.py\r\nindex e324784b..82ebe842 100644\r\n--- a/hypothesis-python/src/hypothesis/strategies.py\r\n+++ b/hypothesis-python/src/hypothesis/strategies.py\r\n@@ -1067,6 +1067,11 @@ def from_type(thing):\r\n     from hypothesis.searchstrategy import types\r\n     try:\r\n         import typing\r\n+        # Since https://github.com/python/cpython/commit/d911e40e788fb679723d78b6ea11cabf46caed5a\r\n+        if hasattr(typing, '_ForwardRef'):\r\n+            typing_ForwardRef = typing._ForwardRef\r\n+        else:\r\n+            typing_ForwardRef = typing.ForwardRef\r\n         if not isinstance(thing, type):\r\n             # At runtime, `typing.NewType` returns an identity function rather\r\n             # than an actual type, but we can check that for a possible match\r\n@@ -1083,7 +1088,7 @@ def from_type(thing):\r\n                 return one_of([from_type(t) for t in args])\r\n         # We can't resolve forward references, and under Python 3.5 (only)\r\n         # a forward reference is an instance of type.  Hence, explicit check:\r\n-        elif type(thing) == typing._ForwardRef:  # pragma: no cover\r\n+        elif type(thing) == typing_ForwardRef:  # pragma: no cover\r\n             raise ResolutionFailed(\r\n                 'thing=%s cannot be resolved.  Upgrading to python>=3.6 may '\r\n                 'fix this problem via improvements to the typing module.'\r\n@@ -1112,7 +1117,11 @@ def from_type(thing):\r\n     # subclass and instance checks.\r\n     try:\r\n         import typing\r\n-        if isinstance(thing, typing.TypingMeta):\r\n+        if hasattr(typing, 'TypingMeta'):\r\n+            typing_TypeVar = typing.TypingMeta\r\n+        else:\r\n+            typing_TypeVar = typing.TypeVar\r\n+        if isinstance(thing, typing_TypeVar):\r\n             return types.from_typing_type(thing)\r\n     except ImportError:  # pragma: no cover\r\n         pass\r\n-- \r\n2.17.0\r\n```\r\n\r\nBest regards.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1264/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1254", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1254/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1254/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1254/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1254", "id": 317350352, "node_id": "MDU6SXNzdWUzMTczNTAzNTI=", "number": 1254, "title": "TypeError on unset `database_key` when using `--hypothesis-seed`", "user": {"login": "matthijskooijman", "id": 194491, "node_id": "MDQ6VXNlcjE5NDQ5MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/194491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthijskooijman", "html_url": "https://github.com/matthijskooijman", "followers_url": "https://api.github.com/users/matthijskooijman/followers", "following_url": "https://api.github.com/users/matthijskooijman/following{/other_user}", "gists_url": "https://api.github.com/users/matthijskooijman/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthijskooijman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthijskooijman/subscriptions", "organizations_url": "https://api.github.com/users/matthijskooijman/orgs", "repos_url": "https://api.github.com/users/matthijskooijman/repos", "events_url": "https://api.github.com/users/matthijskooijman/events{/privacy}", "received_events_url": "https://api.github.com/users/matthijskooijman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-04-24T18:48:03Z", "updated_at": "2018-09-24T16:01:21Z", "closed_at": "2018-09-23T05:31:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running some hypothesis tests under pytest, and was using a fixed\r\nseed using the `--hypothesis-seed` commandline option. At some point, I\r\ngot the below exception.\r\n\r\n```\r\n    return b'.'.join((self.database_key, b'secondary'))\r\nTypeError: sequence item 0: expected a bytes-like object, NoneType found\r\n```\r\n\r\nApparently the database_key is `None` here. A little investigation shows\r\nthat when using a custom seed, the `ConjectureRunner` is called without\r\na `database_key`:\r\n\r\nhttps://github.com/HypothesisWorks/hypothesis/blob/c877d1d7690c73a793bbaa02c1d9dd62e99aa9d0/hypothesis-python/src/hypothesis/core.py#L712-L715\r\n\r\nIt also seems that most methods check for a missing `database_key`, but\r\napparently `downgrade_buffer` does not:\r\n\r\nhttps://github.com/HypothesisWorks/hypothesis/blob/c877d1d7690c73a793bbaa02c1d9dd62e99aa9d0/hypothesis-python/src/hypothesis/internal/conjecture/engine.py#L379-L389\r\n\r\nI suspect this is a matter of adding a check, but I'm not too familiar\r\nwith the code.\r\n\r\nI have made a copy of my test setup to reproduce this bug. If needed, I\r\ncan see if I can produce a smaller example triggering this bug.\r\n\r\nHere's the full backtrace:\r\n\r\n```python-traceback\r\nTraceback (most recent call last):\r\n  File \"/home/matthijs/docs/MKIT/3Devo/FeFirmware/tools/test/pytest/test.py\", line 166, in test_from_raw\r\n    @given(\r\n  File \"hypothesis/core.py\", line 1045, in wrapped_test\r\n    state.run()\r\n  File \"hypothesis/core.py\", line 731, in run\r\n    runner.run()\r\n  File \"hypothesis/internal/conjecture/engine.py\", line 438, in run\r\n    self._run()\r\n  File \"hypothesis/internal/conjecture/engine.py\", line 773, in _run\r\n    self.shrink_interesting_examples()\r\n  File \"hypothesis/internal/conjecture/engine.py\", line 815, in shrink_interesting_examples\r\n    self.shrink(example, predicate)\r\n  File \"hypothesis/internal/conjecture/engine.py\", line 851, in shrink\r\n    s.shrink()\r\n  File \"hypothesis/internal/conjecture/engine.py\", line 1276, in shrink\r\n    self.greedy_shrink()\r\n  File \"hypothesis/internal/conjecture/engine.py\", line 1299, in greedy_shrink\r\n    self.zero_draws()\r\n  File \"hypothesis/internal/conjecture/engine.py\", line 1404, in zero_draws\r\n    prefix + hbytes(ex.length) + suffix\r\n  File \"hypothesis/internal/conjecture/engine.py\", line 1249, in cached_test_function\r\n    result = self.__engine.cached_test_function(buffer)\r\n  File \"hypothesis/internal/conjecture/engine.py\", line 914, in cached_test_function\r\n    self.test_function(result)\r\n  File \"hypothesis/internal/conjecture/engine.py\", line 243, in test_function\r\n    self.downgrade_buffer(existing.buffer)\r\n  File \"hypothesis/internal/conjecture/engine.py\", line 389, in downgrade_buffer\r\n    self.database_key, self.secondary_key, buffer)\r\n  File \"hypothesis/internal/conjecture/engine.py\", line 393, in secondary_key\r\n    return b'.'.join((self.database_key, b'secondary'))\r\nTypeError: sequence item 0: expected a bytes-like object, NoneType found\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1254/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1235", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1235/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1235/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1235/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1235", "id": 314335693, "node_id": "MDU6SXNzdWUzMTQzMzU2OTM=", "number": 1235, "title": "Deprecate the max_shrinks setting", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-14T15:04:20Z", "updated_at": "2018-06-30T11:40:28Z", "closed_at": "2018-06-30T11:40:28Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As discussed in #535, the `max_shrinks` setting is a mess.  There's no way to pick a meaningful value for it beyond \"none, default, lots\".  For \"none\" it's actually better to disable shrinking using the `phases` setting, because `max_shrinks=0` behaves identically to `max_shrinks=1`.\r\n\r\nThe setting should be removed; `max_shrinks=0` translated to `phases=tuple(Phase)[:Phase.shrink]` (deliberately changing behaviour to match expectation).\r\n\r\nIt would be nice to have an improved heuristic for shrinking - aiming to fully shrink large examples, but bail out of pathological cases quickly - but for the first pass we can simply hard-code the current default behaviour.  A second pass should consider #233.\r\n\r\nhttps://github.com/HypothesisWorks/hypothesis/compare/master...Zac-HD:no-max-shrinks is an updated copy of the work I did in #1211 before giving up; the tests *almost* all pass but there are a few that depend on the one shrink/no shrinks distinction and can't afford the perf cost of shrinking.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1235/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1235/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1230", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1230/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1230/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1230/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1230", "id": 314183790, "node_id": "MDU6SXNzdWUzMTQxODM3OTA=", "number": 1230, "title": "Internal assertion error thrown in builds() strategy", "user": {"login": "alexwlchan", "id": 301220, "node_id": "MDQ6VXNlcjMwMTIyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/301220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexwlchan", "html_url": "https://github.com/alexwlchan", "followers_url": "https://api.github.com/users/alexwlchan/followers", "following_url": "https://api.github.com/users/alexwlchan/following{/other_user}", "gists_url": "https://api.github.com/users/alexwlchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexwlchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexwlchan/subscriptions", "organizations_url": "https://api.github.com/users/alexwlchan/orgs", "repos_url": "https://api.github.com/users/alexwlchan/repos", "events_url": "https://api.github.com/users/alexwlchan/events{/privacy}", "received_events_url": "https://api.github.com/users/alexwlchan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-13T17:06:46Z", "updated_at": "2018-04-14T10:50:40Z", "closed_at": "2018-04-14T10:50:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hypothesis 3.55.4, Python 3.6.1. The following test reliably hits an internal assertion:\r\n\r\n```python\r\nimport hypothesis\r\nfrom hypothesis.strategies import (\r\n    builds, fixed_dictionaries, lists, sampled_from, sets, text\r\n)\r\n\r\n\r\nstrategy = builds(\r\n    lambda x, y: dict((list(x.items()) + list(y.items()))),\r\n    fixed_dictionaries({'0': text()}),\r\n    builds(\r\n        lambda dictionary, keys: {key: dictionary[key] for key in keys},\r\n        fixed_dictionaries({\r\n            '1': lists(elements=sampled_from(['a']))\r\n        }),\r\n        sets(elements=sampled_from(['1']))\r\n    )\r\n)\r\n\r\n@hypothesis.given(strategy)\r\ndef test_false_is_false(params):\r\n    hypothesis.assume(params.get('0') not in ('', '\\x00'))\r\n    assert False\r\n\r\n\r\ntest_false_is_false()\r\n```\r\n\r\n```console\r\n$ python minimal.py\r\nYou can add @seed(271280762001646821722234716191843127890) to this test to reproduce this failure.\r\nTraceback (most recent call last):\r\n  File \"minimal.py\", line 28, in <module>\r\n    test_false_is_false()\r\n  File \"minimal.py\", line 23, in test_false_is_false\r\n    def test_false_is_false(params):\r\n  File \"/Users/chana/.virtualenvs/tempenv-598466573bc3/lib/python3.6/site-packages/hypothesis/core.py\", line 1054, in wrapped_test\r\n    state.run()\r\n  File \"/Users/chana/.virtualenvs/tempenv-598466573bc3/lib/python3.6/site-packages/hypothesis/core.py\", line 730, in run\r\n    runner.run()\r\n  File \"/Users/chana/.virtualenvs/tempenv-598466573bc3/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py\", line 435, in run\r\n    self._run()\r\n  File \"/Users/chana/.virtualenvs/tempenv-598466573bc3/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py\", line 771, in _run\r\n    self.shrink_interesting_examples()\r\n  File \"/Users/chana/.virtualenvs/tempenv-598466573bc3/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py\", line 813, in shrink_interesting_examples\r\n    self.shrink(example, predicate)\r\n  File \"/Users/chana/.virtualenvs/tempenv-598466573bc3/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py\", line 849, in shrink\r\n    s.shrink()\r\n  File \"/Users/chana/.virtualenvs/tempenv-598466573bc3/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py\", line 1274, in shrink\r\n    self.greedy_shrink()\r\n  File \"/Users/chana/.virtualenvs/tempenv-598466573bc3/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py\", line 1295, in greedy_shrink\r\n    self.remove_discarded()\r\n  File \"/Users/chana/.virtualenvs/tempenv-598466573bc3/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py\", line 1787, in remove_discarded\r\n    self.__discarding_failed = not self.incorporate_new_buffer(attempt)\r\n  File \"/Users/chana/.virtualenvs/tempenv-598466573bc3/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py\", line 1221, in incorporate_new_buffer\r\n    assert sort_key(buffer) < sort_key(self.shrink_target.buffer)\r\nAssertionError\r\n```\r\n\r\nHow did I find this? I was testing the API at work with https://github.com/olipratt/swagger-conformance, and on my second run I hit this internal assertion. Quite a big of digging later, this strategy popped out.\r\n\r\nIt\u2019s _incredibly_ fragile. I tried quite a few changes to simplify the example, all of which led it to finding the more boring `assert False`.\r\n\r\nPS Having useful repr\u2019s for strategies was really useful here \u2013 it allowed me to strip away a whole bunch of the Swagger-parsing code, and trim down to a pure Hypothesis bug.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1230/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1230/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1213", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1213/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1213/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1213/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1213", "id": 311802781, "node_id": "MDU6SXNzdWUzMTE4MDI3ODE=", "number": 1213, "title": "find doesn't respect the 'deadline' setting", "user": {"login": "bukzor", "id": 640328, "node_id": "MDQ6VXNlcjY0MDMyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/640328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bukzor", "html_url": "https://github.com/bukzor", "followers_url": "https://api.github.com/users/bukzor/followers", "following_url": "https://api.github.com/users/bukzor/following{/other_user}", "gists_url": "https://api.github.com/users/bukzor/gists{/gist_id}", "starred_url": "https://api.github.com/users/bukzor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bukzor/subscriptions", "organizations_url": "https://api.github.com/users/bukzor/orgs", "repos_url": "https://api.github.com/users/bukzor/repos", "events_url": "https://api.github.com/users/bukzor/events{/privacy}", "received_events_url": "https://api.github.com/users/bukzor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-04-05T23:29:02Z", "updated_at": "2018-12-18T02:41:31Z", "closed_at": "2018-12-18T02:41:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I found this while trying to limit the duration of my hypothesis.stateful.RuleBasedStateMachine test, since it uses `find` rather than `given`, which does respect the deadline setting.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1213/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1213/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1167", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1167/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1167/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1167/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1167", "id": 305603064, "node_id": "MDU6SXNzdWUzMDU2MDMwNjQ=", "number": 1167, "title": "error importing Django, even when test doesn't use Django", "user": {"login": "fkromer", "id": 10199742, "node_id": "MDQ6VXNlcjEwMTk5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/10199742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fkromer", "html_url": "https://github.com/fkromer", "followers_url": "https://api.github.com/users/fkromer/followers", "following_url": "https://api.github.com/users/fkromer/following{/other_user}", "gists_url": "https://api.github.com/users/fkromer/gists{/gist_id}", "starred_url": "https://api.github.com/users/fkromer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fkromer/subscriptions", "organizations_url": "https://api.github.com/users/fkromer/orgs", "repos_url": "https://api.github.com/users/fkromer/repos", "events_url": "https://api.github.com/users/fkromer/events{/privacy}", "received_events_url": "https://api.github.com/users/fkromer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-03-15T15:32:38Z", "updated_at": "2018-03-20T01:16:48Z", "closed_at": "2018-03-20T01:16:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If created a hypothesis test like follows:\r\n\r\n```\r\nimport unittest\r\nfrom hypothesis import given\r\nfrom <custom-composite-strategy-module> import rc_visard_configurations\r\n\r\nclass TestComponentState(unittest.TestCase):\r\n    @given(rc_visard_configurations())\r\n    def test_config_does_not_crash_components(self, custom_composite_value_set):\r\n        ...\r\n```\r\n\r\nIf I run the test case with unittest I get an error which seem to relate to the Django  test runner.\r\n\r\n```\r\n\u276f python -m unittest test_fuzzying.TestComponentState.test_config_does_not_crash_components\r\nE\r\n======================================================================\r\nERROR: test_config_does_not_crash_components (test_fuzzying.TestComponentState)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"test_fuzzying.py\", line 30, in test_config_does_not_crash_components\r\n    def test_config_does_not_crash_components(self, rc_visard_config):\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/core.py\", line 978, in wrapped_test\r\n    if bad_django_TestCase(runner):  # pragma: no cover\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/internal/compat.py\", line 530, in bad_django_TestCase\r\n    from django.test import TransactionTestCase\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/test/__init__.py\", line 5, in <module>\r\n    from django.test.client import Client, RequestFactory\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/test/client.py\", line 11, in <module>\r\n    from django.contrib.auth import authenticate, login, logout, get_user_model\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/contrib/auth/__init__.py\", line 6, in <module>\r\n    from django.middleware.csrf import rotate_token\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/middleware/csrf.py\", line 14, in <module>\r\n    from django.utils.cache import patch_vary_headers\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/utils/cache.py\", line 26, in <module>\r\n    from django.core.cache import get_cache\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/core/cache/__init__.py\", line 69, in <module>\r\n    if DEFAULT_CACHE_ALIAS not in settings.CACHES:\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/conf/__init__.py\", line 54, in __getattr__\r\n    self._setup(name)\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/conf/__init__.py\", line 47, in _setup\r\n    % (desc, ENVIRONMENT_VARIABLE))\r\nImproperlyConfigured: Requested setting CACHES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.022s\r\n\r\nFAILED (errors=1)\r\n```\r\n\r\nHave I missed something or is there some issue with the Django integration?", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1167/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1167/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1164", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1164/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1164/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1164/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1164", "id": 304505535, "node_id": "MDU6SXNzdWUzMDQ1MDU1MzU=", "number": 1164, "title": "test_can_restrict_endianness fails on big-endian s390x", "user": {"login": "ginggs", "id": 1970404, "node_id": "MDQ6VXNlcjE5NzA0MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1970404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ginggs", "html_url": "https://github.com/ginggs", "followers_url": "https://api.github.com/users/ginggs/followers", "following_url": "https://api.github.com/users/ginggs/following{/other_user}", "gists_url": "https://api.github.com/users/ginggs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ginggs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ginggs/subscriptions", "organizations_url": "https://api.github.com/users/ginggs/orgs", "repos_url": "https://api.github.com/users/ginggs/repos", "events_url": "https://api.github.com/users/ginggs/events{/privacy}", "received_events_url": "https://api.github.com/users/ginggs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-03-12T19:17:29Z", "updated_at": "2018-03-15T00:12:53Z", "closed_at": "2018-03-15T00:12:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\n**test_can_restrict_endianness** fails on s390x, the only big-endian architecture being tested in Ubuntu.\r\nLinks to full tests logs can be found on the following page:\r\nhttp://autopkgtest.ubuntu.com/packages/p/python-hypothesis/bionic/s390x\r\n\r\nIs this by design?\r\n\r\nThe test fails when **dt=dtype('int16')** and **dt.byteorder == '='**\r\n```\r\n=================================== FAILURES ===================================\r\n_________________________ test_can_restrict_endianness _________________________\r\n\r\n    @given(nps.integer_dtypes(endianness='>'))\r\n>   def test_can_restrict_endianness(dt):\r\n\r\ntests/numpy/test_gen_data.py:189: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/usr/lib/python3/dist-packages/hypothesis/core.py:579: in execute\r\n    result = self.test_runner(data, run)\r\n/usr/lib/python3/dist-packages/hypothesis/executors.py:58: in default_new_style_executor\r\n    return function(data)\r\n/usr/lib/python3/dist-packages/hypothesis/core.py:571: in run\r\n    return test(*args, **kwargs)\r\ntests/numpy/test_gen_data.py:189: in test_can_restrict_endianness\r\n    def test_can_restrict_endianness(dt):\r\n/usr/lib/python3/dist-packages/hypothesis/core.py:518: in test\r\n    result = self.test(*args, **kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ndt = dtype('int16')\r\n\r\n    @given(nps.integer_dtypes(endianness='>'))\r\n    def test_can_restrict_endianness(dt):\r\n        if dt.itemsize == 1:\r\n            assert dt.byteorder == '|'\r\n        else:\r\n>           assert dt.byteorder == '>'\r\nE           AssertionError\r\n\r\ntests/numpy/test_gen_data.py:193: AssertionError\r\n---------------------------------- Hypothesis ----------------------------------\r\nFalsifying example: test_can_restrict_endianness(dt=dtype('int16'))\r\n======== 1 failed, 2156 passed, 4 skipped, 1 xfailed in 278.16 seconds =========\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1164/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1112", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1112/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1112/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1112/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1112", "id": 297036594, "node_id": "MDU6SXNzdWUyOTcwMzY1OTQ=", "number": 1112, "title": "FailedHealthCheck with hypothesis.extra.django for django.contrib.auth.models.User model", "user": {"login": "MrGreenTea", "id": 9407731, "node_id": "MDQ6VXNlcjk0MDc3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9407731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrGreenTea", "html_url": "https://github.com/MrGreenTea", "followers_url": "https://api.github.com/users/MrGreenTea/followers", "following_url": "https://api.github.com/users/MrGreenTea/following{/other_user}", "gists_url": "https://api.github.com/users/MrGreenTea/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrGreenTea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrGreenTea/subscriptions", "organizations_url": "https://api.github.com/users/MrGreenTea/orgs", "repos_url": "https://api.github.com/users/MrGreenTea/repos", "events_url": "https://api.github.com/users/MrGreenTea/events{/privacy}", "received_events_url": "https://api.github.com/users/MrGreenTea/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 31355957, "node_id": "MDU6TGFiZWwzMTM1NTk1Nw==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": "it's not broken, but we want it to be better"}, {"id": 587683606, "node_id": "MDU6TGFiZWw1ODc2ODM2MDY=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/docs", "name": "docs", "color": "c2e0c6", "default": false, "description": "documentation could *always* be better"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2018-02-14T10:04:08Z", "updated_at": "2018-02-25T23:51:33Z", "closed_at": "2018-02-25T23:51:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just use create the most simple strategy like this:\r\n`USER_STRATEGY = models.models(User)`\r\n\r\nThen I get a FailedHealthCheck:\r\n`hypothesis.errors.FailedHealthCheck: It looks like your strategy is filtering out a lot of data. Health check found 50 filtered examples but only 3 good ones. This will make your tests much slower ...`\r\n\r\nAny idea what I can do to get User objects for my tests?", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1112/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1112/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1111", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1111/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1111/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1111/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1111", "id": 296953809, "node_id": "MDU6SXNzdWUyOTY5NTM4MDk=", "number": 1111, "title": "Argument-renaming decorator should indent added docstring, error on old+new args", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 587683606, "node_id": "MDU6TGFiZWw1ODc2ODM2MDY=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/docs", "name": "docs", "color": "c2e0c6", "default": false, "description": "documentation could *always* be better"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-02-14T02:15:19Z", "updated_at": "2018-02-17T10:13:31Z", "closed_at": "2018-02-17T10:13:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Occasionally, we have changed the names of various arguments - for example to [`hypothesis.strategies.datetimes`](https://github.com/HypothesisWorks/hypothesis-python/blob/5f3e942504f4b3651481fd8bfa697d938a792f1b/src/hypothesis/strategies.py#L1375-L1384)\r\n\r\nThis is done via [`hypothesis.internal.renaming`](https://github.com/HypothesisWorks/hypothesis-python/blob/master/src/hypothesis/internal/renaming.py), which has two problems:\r\n\r\n1. ~~If both old and new arguments are given, the old overrides the new.  This should be an error - currently it  behaves exactly as if only the old argument was passed.  In my opinion this should be fixed in a minor release; while technically a breaking change the broken behavior has *always* been deprecated and never worked.  (cc @DRMacIver)\r\n   Raising `InvalidArgument` if `t in kwargs` before noting the deprecation would be sufficient, along with a test that giving a deprecated argument and the new argument that replaced it is an error.~~\r\n   This is simply not worth the effort to change again - the deprecation-free paths are working as intended, so we'll just clean it up in the eventual Hypothesis 4.0.\r\n\r\n2. A section mentioning the changes is appended to the docstring, but without any indentation.  This then changes the output of [`inspect.cleandoc`](https://docs.python.org/3/library/inspect.html#inspect.cleandoc), preserving indentation after the first line that would otherwise be removed.  [Here's an example](https://hypothesis.readthedocs.io/en/latest/data.html#hypothesis.strategies.datetimes) of the results via Sphinx (at tag 3.45.0, once we solve #1110).\r\n   Instead, we should either work out the minimal indentation for lines after the first and match that, or just call `cleandoc` on the docstring before appending to it \ud83d\ude09", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1111/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1104", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1104/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1104/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1104/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1104", "id": 295355112, "node_id": "MDU6SXNzdWUyOTUzNTUxMTI=", "number": 1104, "title": "strategy.builds can't create a class with a keyword argument named \"target\".", "user": {"login": "bmccutchon", "id": 8671821, "node_id": "MDQ6VXNlcjg2NzE4MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/8671821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmccutchon", "html_url": "https://github.com/bmccutchon", "followers_url": "https://api.github.com/users/bmccutchon/followers", "following_url": "https://api.github.com/users/bmccutchon/following{/other_user}", "gists_url": "https://api.github.com/users/bmccutchon/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmccutchon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmccutchon/subscriptions", "organizations_url": "https://api.github.com/users/bmccutchon/orgs", "repos_url": "https://api.github.com/users/bmccutchon/repos", "events_url": "https://api.github.com/users/bmccutchon/events{/privacy}", "received_events_url": "https://api.github.com/users/bmccutchon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-08T01:35:21Z", "updated_at": "2018-02-14T01:49:02Z", "closed_at": "2018-02-14T01:49:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "After a fresh `pip install hypothesis`, running this in the repl:\r\n\r\n```python\r\nfrom hypothesis import strategies as st\r\nimport collections\r\nSomething = collections.namedtuple('Something', ['target'])\r\nst.builds(Something, target=st.integers())\r\n```\r\n\r\nresults in the error:\r\n\r\n```\r\nTypeError: builds() got multiple values for keyword argument 'target'\r\n```\r\n\r\nThe reason seems to be because `builds`'s first argument is called `target`. Now, in this example, I could have just written `st.builds(Something, st.integers())`, but some classes require keyword arguments. \r\n\r\nThe only way I see of fixing this while maintaining backward compatibility would be to add a new method similar to builds that accepts a dict instead of `**kwargs`.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1104/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1104/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1085", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1085/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1085/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1085/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1085", "id": 291043838, "node_id": "MDU6SXNzdWUyOTEwNDM4Mzg=", "number": 1085, "title": "Hypothesis Hijacking of Coverage Collector Breaks Coverage of Unexecuted Files", "user": {"login": "theaeolianmachine", "id": 440353, "node_id": "MDQ6VXNlcjQ0MDM1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/440353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theaeolianmachine", "html_url": "https://github.com/theaeolianmachine", "followers_url": "https://api.github.com/users/theaeolianmachine/followers", "following_url": "https://api.github.com/users/theaeolianmachine/following{/other_user}", "gists_url": "https://api.github.com/users/theaeolianmachine/gists{/gist_id}", "starred_url": "https://api.github.com/users/theaeolianmachine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theaeolianmachine/subscriptions", "organizations_url": "https://api.github.com/users/theaeolianmachine/orgs", "repos_url": "https://api.github.com/users/theaeolianmachine/repos", "events_url": "https://api.github.com/users/theaeolianmachine/events{/privacy}", "received_events_url": "https://api.github.com/users/theaeolianmachine/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-01-24T00:34:26Z", "updated_at": "2018-08-29T01:54:02Z", "closed_at": "2018-08-29T01:54:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey Hypothesis contributors - thanks for contributing to such a useful library.\r\n\r\nRecently we were really befuddled that after using  [coverage](https://pypi.python.org/pypi/coverage/) for a long time, it was no longer respecting the `--source` flag, which searches for unexecuted Python files to include in the coverage report. For a team that's working up its code coverage, it's pretty essential to get a realistic picture of the code base.\r\n\r\nHowever, when you use hypothesis in any of the tests, it only reports on files that are hit by tests, over inflating this number. Note this is specifically with coverage + py.test + hypothesis. I spent a decent bit of time debugging this, and found the following:\r\n\r\nIn collector.py in coverage, [the Collector class has a save_data method](https://bitbucket.org/ned/coveragepy/src/20ba4848d893ebbab1561b95e93b3dae8cb76e15/coverage/collector.py?at=default&fileviewer=file-view-default#collector.py-376).\r\n\r\nOf note is that this function returns `False` if no activity has happened on any of its tracers, but returns `True` otherwise.\r\n\r\nHypothesis, in core.py has a [hijack_collector](https://github.com/HypothesisWorks/hypothesis-python/blob/master/src/hypothesis/core.py#L629)  function in StateForActualGivenExecution which adds on top of it. Of note is that this function does not return anything - it ignores the bool value returned from coverage's `Collector.save_data`, and being Python, `None` is technically returned.\r\n\r\nUnfortunately, this breaks coverage's `Coverage.get_data` function [which relies on it here](https://bitbucket.org/ned/coveragepy/src/20ba4848d893ebbab1561b95e93b3dae8cb76e15/coverage/control.py?at=default&fileviewer=file-view-default#control.py-835) because this conditional statement never gets run:\r\n```python\r\n        if self.collector.save_data(self.data):\r\n            self._post_save_work()\r\n```\r\n\r\nBecause `self.collector.save_data`, being overwritten by Hypothesis, doesn't return a bool, and instead returns `None`.\r\n\r\nI'm not sure what the best fix for hypothesis is, but a reasonable guess in `hijack_collector` would be:\r\n```python\r\n    def hijack_collector(self, collector):  # pragma: no cover\r\n        self.__existing_collector = collector\r\n        original_save_data = collector.save_data\r\n\r\n        def save_data(covdata):\r\n            data_saved = original_save_data(covdata) # Save whether there was any activity\r\n            if data_saved: # Only write hypothesis data if data was saved in the first place?\r\n                if collector.branch:\r\n                    covdata.add_arcs({\r\n                        filename: {\r\n                            arc: None\r\n                            for arc in self.coverage_data.arcs(filename)}\r\n                        for filename in self.files_to_propagate\r\n                    })\r\n                else:\r\n                    covdata.add_lines({\r\n                        filename: {\r\n                            line: None\r\n                            for line in self.coverage_data.lines(filename)}\r\n                        for filename in self.files_to_propagate\r\n                    })\r\n            collector.save_data = original_save_data\r\n            return data_saved # Make sure to return the correct boolean.\r\n\r\n        collector.save_data = save_data\r\n```\r\n\r\nHowever, given my time investment up to this point, I'll leave it to you all to figure out the best way to fix this.\r\n\r\nThanks! Let me know if you all have any questions.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1085/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1085/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1045", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1045/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1045/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1045/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1045", "id": 284172577, "node_id": "MDU6SXNzdWUyODQxNzI1Nzc=", "number": 1045, "title": "Postgres Django backend doesn't allow the null character in non-null strings", "user": {"login": "mr-bo-jangles", "id": 291570, "node_id": "MDQ6VXNlcjI5MTU3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/291570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mr-bo-jangles", "html_url": "https://github.com/mr-bo-jangles", "followers_url": "https://api.github.com/users/mr-bo-jangles/followers", "following_url": "https://api.github.com/users/mr-bo-jangles/following{/other_user}", "gists_url": "https://api.github.com/users/mr-bo-jangles/gists{/gist_id}", "starred_url": "https://api.github.com/users/mr-bo-jangles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mr-bo-jangles/subscriptions", "organizations_url": "https://api.github.com/users/mr-bo-jangles/orgs", "repos_url": "https://api.github.com/users/mr-bo-jangles/repos", "events_url": "https://api.github.com/users/mr-bo-jangles/events{/privacy}", "received_events_url": "https://api.github.com/users/mr-bo-jangles/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2017-12-22T14:12:11Z", "updated_at": "2018-12-17T00:01:40Z", "closed_at": "2018-01-06T10:27:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Generating Model instances with `@given` using a postgres backend db for testing gives me the following error. \r\n\r\nIt's making it really hard to test my stuff with Hypothesis because I'll have to manually specify all text fields to use something like `text(alphabet=characters(blacklisted_categories=('Cc', 'Cs')))`\r\n\r\n```\r\nError\r\nTraceback (most recent call last):\r\n  File \"/vagrant/savings_champion/products/tests/models.py\", line 33, in test_check_bonus\r\n    user=models(User),\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/core.py\", line 1001, in wrapped_test\r\n    state.run()\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/core.py\", line 725, in run\r\n    runner.run()\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/engine.py\", line 393, in run\r\n    self._run()\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/engine.py\", line 791, in _run\r\n    self.generate_new_examples()\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/engine.py\", line 706, in generate_new_examples\r\n    self.test_function(last_data)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/engine.py\", line 153, in test_function\r\n    self._test_function(data)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/core.py\", line 691, in evaluate_test_data\r\n    escalate_hypothesis_internal_error()\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/core.py\", line 663, in evaluate_test_data\r\n    result = self.execute(data, collect=True)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/core.py\", line 578, in execute\r\n    result = self.test_runner(data, run)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/executors.py\", line 78, in <lambda>\r\n    lambda: function(data)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/executors.py\", line 33, in execute\r\n    return function()\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/executors.py\", line 78, in <lambda>\r\n    lambda: function(data)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/core.py\", line 552, in run\r\n    args, kwargs = data.draw(self.search_strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 121, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 136, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/core.py\", line 180, in do_draw\r\n    return self.base.do_draw(data)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/lazy.py\", line 158, in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/collections.py\", line 60, in do_draw\r\n    data.draw(e) for e in self.element_strategies\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/collections.py\", line 56, in newtuple\r\n    return tuple(xs)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/collections.py\", line 60, in <genexpr>\r\n    data.draw(e) for e in self.element_strategies\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/strategies.py\", line 507, in do_draw\r\n    return self.pack(data.draw(self.mapped_strategy))\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/lazy.py\", line 158, in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/strategies.py\", line 507, in do_draw\r\n    return self.pack(data.draw(self.mapped_strategy))\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/collections.py\", line 60, in do_draw\r\n    data.draw(e) for e in self.element_strategies\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/collections.py\", line 56, in newtuple\r\n    return tuple(xs)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/collections.py\", line 60, in <genexpr>\r\n    data.draw(e) for e in self.element_strategies\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/lazy.py\", line 158, in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/strategies.py\", line 1550, in do_draw\r\n    return f(draw, *args, **kwargs)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/extra/django/models.py\", line 161, in _models_impl\r\n    return draw(strat)[0]\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/strategies.py\", line 1548, in draw\r\n    return data.draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/strategies.py\", line 507, in do_draw\r\n    return self.pack(data.draw(self.mapped_strategy))\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/lazy.py\", line 158, in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/collections.py\", line 60, in do_draw\r\n    data.draw(e) for e in self.element_strategies\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/collections.py\", line 56, in newtuple\r\n    return tuple(xs)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/collections.py\", line 60, in <genexpr>\r\n    data.draw(e) for e in self.element_strategies\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/strategies.py\", line 507, in do_draw\r\n    return self.pack(data.draw(self.mapped_strategy))\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/collections.py\", line 60, in do_draw\r\n    data.draw(e) for e in self.element_strategies\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/collections.py\", line 56, in newtuple\r\n    return tuple(xs)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/collections.py\", line 60, in <genexpr>\r\n    data.draw(e) for e in self.element_strategies\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/strategies.py\", line 1550, in do_draw\r\n    return f(draw, *args, **kwargs)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/extra/django/models.py\", line 161, in _models_impl\r\n    return draw(strat)[0]\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/strategies.py\", line 1548, in draw\r\n    return data.draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 125, in draw\r\n    return self.__draw(strategy)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/internal/conjecture/data.py\", line 132, in __draw\r\n    return strategy.do_draw(self)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/searchstrategy/strategies.py\", line 507, in do_draw\r\n    return self.pack(data.draw(self.mapped_strategy))\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/hypothesis/strategies.py\", line 970, in <lambda>\r\n    lambda value: target(*value[0], **value[1])\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/django/db/models/manager.py\", line 82, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/django/db/models/query.py\", line 487, in get_or_create\r\n    return self.get(**lookup), False\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/django/db/models/query.py\", line 397, in get\r\n    num = len(clone)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/django/db/models/query.py\", line 254, in __len__\r\n    self._fetch_all()\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/django/db/models/query.py\", line 1179, in _fetch_all\r\n    self._result_cache = list(self._iterable_class(self))\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/django/db/models/query.py\", line 54, in __iter__\r\n    results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/django/db/models/sql/compiler.py\", line 1063, in execute_sql\r\n    cursor.execute(sql, params)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/raven/contrib/django/client.py\", line 123, in execute\r\n    return real_execute(self, sql, params)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/django/db/backends/utils.py\", line 68, in execute\r\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/django/db/backends/utils.py\", line 77, in _execute_with_wrappers\r\n    return executor(sql, params, many, context)\r\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/django/db/backends/utils.py\", line 85, in _execute\r\n    return self.cursor.execute(sql, params)\r\nValueError: A string literal cannot contain NUL (0x00) characters.\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1045/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1045/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1028", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1028/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1028/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1028/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1028", "id": 282619942, "node_id": "MDU6SXNzdWUyODI2MTk5NDI=", "number": 1028, "title": "Block reordering doesn't run to completion", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 590824336, "node_id": "MDU6TGFiZWw1OTA4MjQzMzY=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/test-case-reduction", "name": "test-case-reduction", "color": "0052cc", "default": false, "description": "about efficiently finding smaller failing examples"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-16T12:16:15Z", "updated_at": "2017-12-16T12:26:11Z", "closed_at": "2017-12-16T12:25:54Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As part of its goal of lexicographic minimization, Hypothesis is supposed to reorder same sized blocks to be in sorted order (where possible). Apparently this doesn't work. The following test fails:\r\n\r\n```python\r\ndef test_reorder_blocks(monkeypatch):\r\n    def generate_new_examples(self):\r\n        self.test_function(ConjectureData.for_buffer(hbytes([3, 2, 1])))\r\n\r\n    monkeypatch.setattr(\r\n        ConjectureRunner, 'generate_new_examples', generate_new_examples)\r\n\r\n    @run_to_buffer\r\n    def x(data):\r\n        if sorted(data.draw_bytes(3)) == [1, 2, 3]:\r\n            data.mark_interesting()\r\n\r\n    assert x == hbytes([1, 2, 3])\r\n```\r\n\r\noutput:\r\n\r\n```\r\n  - b'\\x01\\x03\\x02'\r\n  ?          ^   ^\r\n  + b'\\x01\\x02\\x03'\r\n```\r\n\r\nSo it's happening partially but not totally.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1028/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1027", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1027/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1027/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1027/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/1027", "id": 282617353, "node_id": "MDU6SXNzdWUyODI2MTczNTM=", "number": 1027, "title": "Not clearing out examples found during shrinking from the primary key", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-16T11:24:55Z", "updated_at": "2017-12-17T10:25:15Z", "closed_at": "2017-12-17T10:25:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Historically we saved all interesting examples in the database key. Now we're supposed to save examples found during shrinking under the secondary key and remove them from the primary key. Apparently that isn't working correctly. The following test (extracted from some other work I'm doing) demonstrates this:\r\n\r\n```python\r\ndef test_clears_out_its_database_on_shrinking():\r\n    key = b'key'\r\n    db = InMemoryExampleDatabase()\r\n\r\n    def f(data):\r\n        if data.draw_bits(8) >= 127:\r\n            data.mark_interesting()\r\n\r\n    runner = ConjectureRunner(\r\n        f, settings=settings(database=db, max_examples=256), database_key=key)\r\n\r\n    for n in hrange(256):\r\n        db.save(runner.secondary_key, hbytes([n]))\r\n    runner.run()\r\n\r\n    assert len(list(db.fetch(key))) == 1\r\n```\r\n\r\nWhen I ran this it fails with 17 examples in the list, but I expect that depends on the random seed.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/1027/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/992", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/992/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/992/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/992/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/992", "id": 277108562, "node_id": "MDU6SXNzdWUyNzcxMDg1NjI=", "number": 992, "title": "regex strategy ignoring re.VERBOSE", "user": {"login": "AlvarBer", "id": 6422766, "node_id": "MDQ6VXNlcjY0MjI3NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6422766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlvarBer", "html_url": "https://github.com/AlvarBer", "followers_url": "https://api.github.com/users/AlvarBer/followers", "following_url": "https://api.github.com/users/AlvarBer/following{/other_user}", "gists_url": "https://api.github.com/users/AlvarBer/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlvarBer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlvarBer/subscriptions", "organizations_url": "https://api.github.com/users/AlvarBer/orgs", "repos_url": "https://api.github.com/users/AlvarBer/repos", "events_url": "https://api.github.com/users/AlvarBer/events{/privacy}", "received_events_url": "https://api.github.com/users/AlvarBer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-11-27T17:46:29Z", "updated_at": "2017-11-29T00:34:23Z", "closed_at": "2017-11-29T00:34:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a regex expression that uses re.VERBOSE flag for improved readability, and when it is used as a strategy it throws a `FailedHealthCheck`, however the same regex without the flag and compressed on a single line works fine.\r\n\r\nI suspect this is due to `from_regex` strategy ignoring the `re.VERBOSE flag` and trying to match the full regex including whitespace and newlines, a quick search in `searchstrategy/regex.py` shows that the VERBOSE flag is not checked anywhere.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/992/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/966", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/966/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/966/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/966/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/966", "id": 271710485, "node_id": "MDU6SXNzdWUyNzE3MTA0ODU=", "number": 966, "title": "settings.derandomize is ineffective for some strategies", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-11-07T05:00:35Z", "updated_at": "2018-04-14T09:28:58Z", "closed_at": "2018-04-14T09:28:58Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This was discovered while working on #962, and \"fixed\" by calling `random.seed(0)` before each doctest block.  Things that seem to be affected:\r\n\r\n- strategies using `.map` and `.filter`\r\n- `st.recursive` and `st.deferred`\r\n- `find`\r\n\r\nWhile `integers().example()` is unaffected, along with `tuple(...)`, `builds(...)`, etc.  I therefore suspect that something in the composition of strategies is making the derandomize machinery fail.\r\n\r\nNote that this has only been observed in output from `s.example()` - it is unknown whether it also affects tests defined with `@given`.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/966/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/961", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/961/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/961/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/961/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/961", "id": 270972045, "node_id": "MDU6SXNzdWUyNzA5NzIwNDU=", "number": 961, "title": "@given decorator doesn't supply \"self\" argument when used inline", "user": {"login": "ShadowLNC", "id": 6551471, "node_id": "MDQ6VXNlcjY1NTE0NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6551471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShadowLNC", "html_url": "https://github.com/ShadowLNC", "followers_url": "https://api.github.com/users/ShadowLNC/followers", "following_url": "https://api.github.com/users/ShadowLNC/following{/other_user}", "gists_url": "https://api.github.com/users/ShadowLNC/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShadowLNC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShadowLNC/subscriptions", "organizations_url": "https://api.github.com/users/ShadowLNC/orgs", "repos_url": "https://api.github.com/users/ShadowLNC/repos", "events_url": "https://api.github.com/users/ShadowLNC/events{/privacy}", "received_events_url": "https://api.github.com/users/ShadowLNC/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-03T13:07:50Z", "updated_at": "2021-09-10T04:04:07Z", "closed_at": "2021-09-10T04:04:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I \"decorate\" a class's method inline, it doesn't supply the `self` argument when the resultant function is called. If I accept an `*args` argument instead (as with `show`), it *is* passed to the method, so I do not understand why it doesn't work for a specific argument instead of all positional arguments.\r\n\r\nPlease note that because this is raising exceptions without handling, you will of course have to run the remaining lines by copy-pasting into the interpreter.\r\n\r\n(I'm aware this is not the intended use case for `given`. It's a reproducible example of inconsistent behaviour that I found, but I will not be using this code in my project. It may be related to #198 as that also involves the `@given` decorator.)\r\n\r\nPython 3.5.2 (x86_64, Win10), Hypothesis 3.33.0 (installed to a virtual environment).\r\n\r\n```python\r\nfrom hypothesis import given, strategies as strat\r\n\r\nclass MyTest:\r\n    @given(dq=strat.booleans())\r\n    def decorated(self, **kwargs):\r\n        # No *args as we don't have any extra positional arguments\r\n        print(kwargs)\r\n\r\n    def bare(self, **kwargs):\r\n        print(kwargs)\r\n\r\n    def show(*args, **kwargs):\r\n        print(args, kwargs)\r\n\r\ninstance = MyTest()\r\n\r\n# Works, even if not given functools.wraps(instance.bare)\r\n(lambda **kwargs: instance.bare(**kwargs))()\r\ninstance.decorated()\r\n\r\n# \"self\" not supplied, calling this gives this error:\r\n# TypeError: bare() missing 1 required positional argument: 'self'\r\nbroken = given(dq=strat.booleans())(instance.bare)\r\nbroken()\r\ninstance.decorated = broken\r\ninstance.decorated()  # Still broken.\r\n\r\n# With no argument, you can see it's still supplied, but not as \"self\".\r\ngiven(dq=strat.booleans())(instance.show)()\r\n\r\n# 2 Arguments supplied\r\ngiven(dq=strat.booleans())(instance.bare)(instance)\r\n```\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/961/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/961/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/946", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/946/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/946/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/946/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/946", "id": 266467631, "node_id": "MDU6SXNzdWUyNjY0Njc2MzE=", "number": 946, "title": "Using typing in a target function signature breaks `strategies.builds`", "user": {"login": "hoefling", "id": 4455652, "node_id": "MDQ6VXNlcjQ0NTU2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4455652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hoefling", "html_url": "https://github.com/hoefling", "followers_url": "https://api.github.com/users/hoefling/followers", "following_url": "https://api.github.com/users/hoefling/following{/other_user}", "gists_url": "https://api.github.com/users/hoefling/gists{/gist_id}", "starred_url": "https://api.github.com/users/hoefling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hoefling/subscriptions", "organizations_url": "https://api.github.com/users/hoefling/orgs", "repos_url": "https://api.github.com/users/hoefling/repos", "events_url": "https://api.github.com/users/hoefling/events{/privacy}", "received_events_url": "https://api.github.com/users/hoefling/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-18T12:03:19Z", "updated_at": "2017-11-01T12:54:45Z", "closed_at": "2017-11-01T12:54:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In our code, we rely a lot on typing feature that was first introduced in Python 3.5 (see [PEP-484](https://www.python.org/dev/peps/pep-0484/)) so the breakage of typed signatures is a major issue for us.\r\n\r\nTo reproduce run the following script with latest `hypothesis==3.33.0` and any of `python{3.5,3.6,3.7dev}`:\r\n```py\r\nfrom typing import Tuple\r\nfrom hypothesis import strategies as st\r\n\r\ndef target_untyped(num, flag):\r\n    return (num, flag, )\r\n\r\ndef target_typed(num: int, flag: bool) -> Tuple[int, bool]:\r\n    return (num, flag, )\r\n\r\nStrategyUntypedPositionalArgs = st.builds(\r\n    target_untyped,\r\n    st.integers(),\r\n    st.booleans(),\r\n)\r\n\r\nStrategyTypedPositionalArgs = st.builds(\r\n    target_typed,\r\n    st.integers(),\r\n    st.booleans(),\r\n)\r\n\r\n# target with untyped args works\r\nprint(StrategyUntypedPositionalArgs.example())\r\n\r\n# target with typed args raises TypeError\r\nprint(StrategyTypedPositionalArgs.example())\r\n```\r\n\r\nBisecting shows the first failing commit is:\r\n```sh\r\n7f9fe4ae8aa156f54a4a66a0044763129a8d1d37 is the first bad commit\r\ncommit 7f9fe4ae8aa156f54a4a66a0044763129a8d1d37\r\nAuthor: Zac-HD <zac.hatfield.dodds@gmail.com>\r\nDate:   Sun Jul 23 20:55:59 2017 +1000\r\n\r\n    Use from_type for missing required args to builds()\r\n\r\n:040000 040000 89f12436a970300b9f9500ace096ff4c0bbe29bd 1369e4cef83506b9a5bf17b3b2329a1670a846d9 M\tsrc\r\n```\r\n\r\nWorkaround suggestion: do not update to `3.14.0`, last working version is `3.13.0`.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/946/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/946/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/944", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/944/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/944/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/944/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/944", "id": 265762693, "node_id": "MDU6SXNzdWUyNjU3NjI2OTM=", "number": 944, "title": "Verbosity setting not always respected", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2017-10-16T13:04:44Z", "updated_at": "2018-09-16T06:04:42Z", "closed_at": "2018-09-16T06:04:42Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a fairly subtle bug I found while working on #931.\r\n\r\nAfter fixing the Django tests to use Dajngo-2.0 idioms, I ran into a weird issue with passing tests printing an `@seed` note even when they passed.\r\n\r\n```\r\n$python -m tests.django.manage test tests.django.toystore.test_basic_configuration\r\nOK\r\nCreating test database for alias 'default'...\r\nSystem check identified no issues (0 silenced).\r\nYou can add @seed(301236684161683320861498655448715075617) to this test to reproduce this failure.\r\nDestroying test database for alias 'default'...\r\n```\r\n\r\nThis happens because the inner test throws an error in example generation, therefore fails and prints a note, then passes because that's what the outer test wanted to see.  The **problem** is that adding `@setting(verbosity=Verbosity.quiet)` on the inner test should disable this message, but currently doesn't.\r\n\r\n[My initial fix is here](https://github.com/HypothesisWorks/hypothesis-python/compare/master...Zac-HD:verbosity-bug) - note that I had to use a `with settings(...)` because simply adding it to the test settings didn't work.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/944/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/944/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/911", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/911/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/911/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/911/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/911", "id": 262506229, "node_id": "MDU6SXNzdWUyNjI1MDYyMjk=", "number": 911, "title": "Deadline feature interacts poorly with slow data generation in interactive examples", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-03T16:59:16Z", "updated_at": "2017-11-21T09:26:38Z", "closed_at": "2017-11-21T09:26:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It turns out that currently one of the sources of slowness in Hypothesis for large examples is that our mutation loop is actually quite slow. In particular, replaying an example from a fixed buffer is *much* faster than generating it in the first place.\r\n\r\nThis has amusing consequences for deadlines. And by amusing I mean sad.\r\n\r\nThe following script reliably fails with a flaky error from the deadline (the binary search is required because the actual timings will vary from system to system so it's hard to find the deadline needed to trigger this, but I discovered this based on a more complicated real world example):\r\n\r\n```python\r\nfrom hypothesis import given, settings, unlimited, Verbosity\r\nimport hypothesis.strategies as st\r\nfrom hypothesis.errors import DeadlineExceeded\r\n\r\n\r\nif __name__ == '__main__':\r\n    lo = 1\r\n    hi = 1000\r\n\r\n    while lo + 1 < hi:\r\n        mid = (lo + hi) // 2\r\n\r\n        @settings(\r\n            deadline=mid, timeout=unlimited, max_examples=10,\r\n            verbosity=Verbosity.quiet, max_shrinks=0\r\n        )\r\n        @given(st.data())\r\n        def test_slow_draw(data):\r\n            for _ in range(1000):\r\n                data.draw(st.binary(min_size=1, max_size=1))\r\n\r\n        try:\r\n            test_slow_draw()\r\n            hi = mid\r\n        except DeadlineExceeded:\r\n            lo = mid\r\n```\r\n\r\nWhen I run this locally I get the following failure:\r\n\r\n```\r\nUnreliable test timings! On an initial run, this test took 161.08ms, which exceeded the deadline of 125.00ms, but on a subsequent run it took 78.93 ms, which did not. If you expect this sort of variability in your test timings, consider turning deadlines off for this test by setting deadline=None.\r\nFalsifying example: test_slow_draw(data=data(...))\r\nYou can add @seed(302934307671667531413257853548643485645) to this test to reproduce this failure.\r\nTraceback (most recent call last):\r\n  File \"slow_draw.py\", line 24, in <module>\r\n    test_slow_draw()\r\n  File \"slow_draw.py\", line 15, in test_slow_draw\r\n    deadline=mid, timeout=unlimited, max_examples=10,\r\n  File \"/home/david/scratch/v/lib/python3.5/site-packages/hypothesis/core.py\", line 1008, in wrapped_test\r\n    state.run()\r\n  File \"/home/david/scratch/v/lib/python3.5/site-packages/hypothesis/core.py\", line 900, in run\r\n    print_example=True, is_final=True\r\n  File \"/home/david/scratch/v/lib/python3.5/site-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/home/david/scratch/v/lib/python3.5/site-packages/hypothesis/core.py\", line 140, in run\r\n    return test(*args, **kwargs)\r\n  File \"/home/david/scratch/v/lib/python3.5/site-packages/hypothesis/core.py\", line 87, in test_or_flaky\r\n    ) % (test.__name__, text_repr,))\r\nhypothesis.errors.Flaky: Hypothesis test_slow_draw(data=data(...)) produces unreliable results: Falsified on the first call but did not on a subsequent one\r\n```\r\n\r\nThat's quite a big timing difference! Nearly a factor of two.\r\n\r\nI think this admits two solutions.\r\n\r\n* As part of the Smarkets work I will be adding a feature for measuring the total amount of time spent in the test *excluding* data generation. I think the deadline should be based on that, \r\n* I've been thinking that we should change the interface to `ConjectureData` so that it is always initialized with a buffer anyway and remove the closure based API. This would require some revamping to the mutator, but it could probably use that anyway! This would solve the problem by making generation and shrinking the same speed (within the test function that is).\r\n\r\nI think both solutions are worth doing on their own rights, and either would work for solving this as a problem.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/911/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/911/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/901", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/901/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/901/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/901/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/901", "id": 261360437, "node_id": "MDU6SXNzdWUyNjEzNjA0Mzc=", "number": 901, "title": "Support typing.NewType in `from_type`", "user": {"login": "Daenyth", "id": 14644, "node_id": "MDQ6VXNlcjE0NjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/14644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Daenyth", "html_url": "https://github.com/Daenyth", "followers_url": "https://api.github.com/users/Daenyth/followers", "following_url": "https://api.github.com/users/Daenyth/following{/other_user}", "gists_url": "https://api.github.com/users/Daenyth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Daenyth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Daenyth/subscriptions", "organizations_url": "https://api.github.com/users/Daenyth/orgs", "repos_url": "https://api.github.com/users/Daenyth/repos", "events_url": "https://api.github.com/users/Daenyth/events{/privacy}", "received_events_url": "https://api.github.com/users/Daenyth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-09-28T15:23:51Z", "updated_at": "2017-10-08T02:00:00Z", "closed_at": "2017-10-08T02:00:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using version 3.30.4\r\n\r\n```\r\nIn [13]: from typing import NewType, NamedTuple\r\n    ...: MyInt = NewType('MyInt', int)\r\n    ...: class T(NamedTuple):\r\n    ...:     x: MyInt\r\n    ...:     y: str\r\n    ...:\r\n```\r\nProduces a rather gross stack trace with `InvalidArgument: thing=<function NewType.<locals>.new_type at 0x107fd40d0> must be a type`\r\n\r\n\r\n<details>\r\n<summary> Trace </summary>\r\n\r\n```\r\nIn [14]: st.from_type(T).example()\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/strategies.py in cached_strategy(*args, **kwargs)\r\n    104         try:\r\n--> 105             return STRATEGY_CACHE[cache_key]\r\n    106         except TypeError:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/cache.py in __getitem__(self, key)\r\n     69     def __getitem__(self, key):\r\n---> 70         i = self.keys_to_indices[key]\r\n     71         result = self.data[i]\r\n\r\nKeyError: (<function from_type at 0x106c740d0>, ((<class 'type'>, <class '__main__.T'>),), frozenset())\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/strategies.py in cached_strategy(*args, **kwargs)\r\n    104         try:\r\n--> 105             return STRATEGY_CACHE[cache_key]\r\n    106         except TypeError:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/cache.py in __getitem__(self, key)\r\n     69     def __getitem__(self, key):\r\n---> 70         i = self.keys_to_indices[key]\r\n     71         result = self.data[i]\r\n\r\nKeyError: (<function from_type at 0x106c740d0>, ((<class 'function'>, <function NewType.<locals>.new_type at 0x107fd40d0>),), frozenset())\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nInvalidArgument                           Traceback (most recent call last)\r\n<ipython-input-14-87157b77bd3c> in <module>()\r\n----> 1 st.from_type(T).example()\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/searchstrategy/strategies.py in example(self, random)\r\n    284                     max_iterations=1000,\r\n    285                     database=None,\r\n--> 286                     verbosity=Verbosity.quiet,\r\n    287                 )\r\n    288             )\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/core.py in find(specifier, condition, settings, random, database_key)\r\n   1067         database_key=database_key,\r\n   1068     )\r\n-> 1069     runner.run()\r\n   1070     note_engine_for_statistics(runner)\r\n   1071     run_time = time.time() - start\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py in run(self)\r\n    380         with self.settings:\r\n    381             try:\r\n--> 382                 self._run()\r\n    383             except RunIsComplete:\r\n    384                 pass\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py in _run(self)\r\n    754\r\n    755         self.reuse_existing_examples()\r\n--> 756         self.generate_new_examples()\r\n    757\r\n    758         if (\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py in generate_new_examples(self)\r\n    655             draw_bytes=lambda data, n: self.__rewrite_for_novelty(\r\n    656                 data, hbytes(n)))\r\n--> 657         self.test_function(zero_data)\r\n    658\r\n    659         count = 0\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py in test_function(self, data)\r\n    122         self.call_count += 1\r\n    123         try:\r\n--> 124             self._test_function(data)\r\n    125             data.freeze()\r\n    126         except StopTest as e:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/core.py in template_condition(data)\r\n   1036             try:\r\n   1037                 data.is_find = True\r\n-> 1038                 result = data.draw(search)\r\n   1039                 data.note(result)\r\n   1040                 success = condition(result)\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in draw(self, strategy)\r\n    123             try:\r\n    124                 sys.settrace(None)\r\n--> 125                 return self.__draw(strategy)\r\n    126             finally:\r\n    127                 sys.settrace(original_tracer)\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in __draw(self, strategy)\r\n    132         self.start_example()\r\n    133         try:\r\n--> 134             return strategy.do_draw(self)\r\n    135         finally:\r\n    136             if not self.frozen:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/searchstrategy/lazy.py in do_draw(self, data)\r\n    165\r\n    166     def do_draw(self, data):\r\n--> 167         return data.draw(self.wrapped_strategy)\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in draw(self, strategy)\r\n    127                 sys.settrace(original_tracer)\r\n    128         else:\r\n--> 129             return self.__draw(strategy)\r\n    130\r\n    131     def __draw(self, strategy):\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in __draw(self, strategy)\r\n    132         self.start_example()\r\n    133         try:\r\n--> 134             return strategy.do_draw(self)\r\n    135         finally:\r\n    136             if not self.frozen:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/searchstrategy/strategies.py in do_draw(self, data)\r\n    505             i = data.index\r\n    506             try:\r\n--> 507                 return self.pack(data.draw(self.mapped_strategy))\r\n    508             except UnsatisfiedAssumption:\r\n    509                 if data.index == i:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in draw(self, strategy)\r\n    127                 sys.settrace(original_tracer)\r\n    128         else:\r\n--> 129             return self.__draw(strategy)\r\n    130\r\n    131     def __draw(self, strategy):\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in __draw(self, strategy)\r\n    132         self.start_example()\r\n    133         try:\r\n--> 134             return strategy.do_draw(self)\r\n    135         finally:\r\n    136             if not self.frozen:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/searchstrategy/lazy.py in do_draw(self, data)\r\n    165\r\n    166     def do_draw(self, data):\r\n--> 167         return data.draw(self.wrapped_strategy)\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in draw(self, strategy)\r\n    127                 sys.settrace(original_tracer)\r\n    128         else:\r\n--> 129             return self.__draw(strategy)\r\n    130\r\n    131     def __draw(self, strategy):\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in __draw(self, strategy)\r\n    132         self.start_example()\r\n    133         try:\r\n--> 134             return strategy.do_draw(self)\r\n    135         finally:\r\n    136             if not self.frozen:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/searchstrategy/collections.py in do_draw(self, data)\r\n     58     def do_draw(self, data):\r\n     59         return self.newtuple(\r\n---> 60             data.draw(e) for e in self.element_strategies\r\n     61         )\r\n     62\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/searchstrategy/collections.py in newtuple(self, xs)\r\n     54     def newtuple(self, xs):\r\n     55         \"\"\"Produce a new tuple of the correct type.\"\"\"\r\n---> 56         return tuple(xs)\r\n     57\r\n     58     def do_draw(self, data):\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/searchstrategy/collections.py in <genexpr>(.0)\r\n     58     def do_draw(self, data):\r\n     59         return self.newtuple(\r\n---> 60             data.draw(e) for e in self.element_strategies\r\n     61         )\r\n     62\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in draw(self, strategy)\r\n    127                 sys.settrace(original_tracer)\r\n    128         else:\r\n--> 129             return self.__draw(strategy)\r\n    130\r\n    131     def __draw(self, strategy):\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in __draw(self, strategy)\r\n    132         self.start_example()\r\n    133         try:\r\n--> 134             return strategy.do_draw(self)\r\n    135         finally:\r\n    136             if not self.frozen:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/searchstrategy/strategies.py in do_draw(self, data)\r\n    505             i = data.index\r\n    506             try:\r\n--> 507                 return self.pack(data.draw(self.mapped_strategy))\r\n    508             except UnsatisfiedAssumption:\r\n    509                 if data.index == i:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in draw(self, strategy)\r\n    127                 sys.settrace(original_tracer)\r\n    128         else:\r\n--> 129             return self.__draw(strategy)\r\n    130\r\n    131     def __draw(self, strategy):\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in __draw(self, strategy)\r\n    132         self.start_example()\r\n    133         try:\r\n--> 134             return strategy.do_draw(self)\r\n    135         finally:\r\n    136             if not self.frozen:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/searchstrategy/collections.py in do_draw(self, data)\r\n     58     def do_draw(self, data):\r\n     59         return self.newtuple(\r\n---> 60             data.draw(e) for e in self.element_strategies\r\n     61         )\r\n     62\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/searchstrategy/collections.py in newtuple(self, xs)\r\n     54     def newtuple(self, xs):\r\n     55         \"\"\"Produce a new tuple of the correct type.\"\"\"\r\n---> 56         return tuple(xs)\r\n     57\r\n     58     def do_draw(self, data):\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/searchstrategy/collections.py in <genexpr>(.0)\r\n     58     def do_draw(self, data):\r\n     59         return self.newtuple(\r\n---> 60             data.draw(e) for e in self.element_strategies\r\n     61         )\r\n     62\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in draw(self, strategy)\r\n    127                 sys.settrace(original_tracer)\r\n    128         else:\r\n--> 129             return self.__draw(strategy)\r\n    130\r\n    131     def __draw(self, strategy):\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in __draw(self, strategy)\r\n    132         self.start_example()\r\n    133         try:\r\n--> 134             return strategy.do_draw(self)\r\n    135         finally:\r\n    136             if not self.frozen:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/searchstrategy/strategies.py in do_draw(self, data)\r\n    505             i = data.index\r\n    506             try:\r\n--> 507                 return self.pack(data.draw(self.mapped_strategy))\r\n    508             except UnsatisfiedAssumption:\r\n    509                 if data.index == i:\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/strategies.py in <lambda>(value)\r\n    871         kwargs[ms] = from_type(hints[ms])\r\n    872     return tuples(tuples(*args), fixed_dictionaries(kwargs)).map(\r\n--> 873         lambda value: target(*value[0], **value[1])\r\n    874     )\r\n    875\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/strategies.py in lazy_error()\r\n    891\r\n    892             def lazy_error():\r\n--> 893                 raise error\r\n    894\r\n    895             return builds(lazy_error)\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/strategies.py in inner(*args, **kwargs)\r\n    886     def inner(*args, **kwargs):\r\n    887         try:\r\n--> 888             return func(*args, **kwargs)\r\n    889         except Exception as e:\r\n    890             error = e\r\n\r\n/Users/daenyth/.pyenv/versions/3.6.1/envs/obs-venv/lib/python3.6/site-packages/hypothesis/strategies.py in from_type(thing)\r\n    938         except ImportError:  # pragma: no cover\r\n    939             pass\r\n--> 940         raise InvalidArgument('thing=%s must be a type' % (thing,))\r\n    941     # Now that we know `thing` is a type, the first step is to check for an\r\n    942     # explicitly registered strategy.  This is the best (and hopefully most\r\n\r\nInvalidArgument: thing=<function NewType.<locals>.new_type at 0x107fd40d0> must be a type\r\n```\r\n\r\n</details>", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/901/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/883", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/883/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/883/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/883/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/883", "id": 259565794, "node_id": "MDU6SXNzdWUyNTk1NjU3OTQ=", "number": 883, "title": "Coverage ignores .coveragerc", "user": {"login": "lmshk", "id": 9641120, "node_id": "MDQ6VXNlcjk2NDExMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/9641120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lmshk", "html_url": "https://github.com/lmshk", "followers_url": "https://api.github.com/users/lmshk/followers", "following_url": "https://api.github.com/users/lmshk/following{/other_user}", "gists_url": "https://api.github.com/users/lmshk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lmshk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lmshk/subscriptions", "organizations_url": "https://api.github.com/users/lmshk/orgs", "repos_url": "https://api.github.com/users/lmshk/repos", "events_url": "https://api.github.com/users/lmshk/events{/privacy}", "received_events_url": "https://api.github.com/users/lmshk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-21T17:00:10Z", "updated_at": "2017-09-22T16:30:06Z", "closed_at": "2017-09-22T16:30:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Upgrading `hypothesis` beyond `3.29.0` broke our test setup: apparently, `hypothesis` now interferes with `coverage` and makes it ignore `.coveragerc`, causing lots of entries in the coverage report and violating `--fail-under=100`. (The entries now include missed paths in installed packages and in Python itself.)\r\n\r\n(Also, the upgrade tripled test running time and caused deprecation warnings of the type \"test took too long\"; possibly related: #879.)\r\n\r\nVersions:\r\n- Python: `3.6.2`\r\n- `hypothesis`: `3.30.0`\r\n- `coverage`: `4.4.1`\r\n- (`virtualenv`: `15.1.0`)\r\n\r\nSetting `use_coverage` to `False` fixed these issues.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/883/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/846", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/846/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/846/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/846/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/846", "id": 256551862, "node_id": "MDU6SXNzdWUyNTY1NTE4NjI=", "number": 846, "title": "Django test_is_blank_slate fails slow generation healthcheck", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 590515268, "node_id": "MDU6TGFiZWw1OTA1MTUyNjg=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/flaky-tests", "name": "flaky-tests", "color": "5319e7", "default": false, "description": "for when our tests only sometimes pass"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-11T00:10:04Z", "updated_at": "2017-09-13T08:40:09Z", "closed_at": "2017-09-13T08:40:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "    ERROR: test_is_blank_slate (tests.django.toystore.test_basic_configuration.TestConstraintsWithoutTransactions)\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      ...\r\n    hypothesis.errors.FailedHealthCheck: Data generation is extremely slow: \r\n        Only produced 10 valid examples in 1.06 seconds (0 invalid ones and 0 exceeded maximum size).\r\n\r\nThis is a rare but repeated failure on Travis ([eg](https://travis-ci.org/HypothesisWorks/hypothesis-python/jobs/273811998)), hence the flaky tests label.\r\n\r\n*However*, the actual test doesn't seem to be generating anything more than integers, which shouldn't be slow - and @DRMacIver suggested in #843 that \r\n\r\n> Django is a special case. In that case I'm almost certain it's not generation that's slow but Django's set up/teardown for transactional tests.\r\n\r\nwhich indicates we actually have a bug in the measurement of this generation time instead, which is probably affecting many to most users of `hypothesis.extra.django`.  Instead of suggesting that the slow generation healthcheck be disabled in these cases, we should just get better at measuring generation time.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/846/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/846/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/757", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/757/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/757/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/757/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/757", "id": 247155970, "node_id": "MDU6SXNzdWUyNDcxNTU5NzA=", "number": 757, "title": "UnicodeEncodeError being raised in py2 when running st.example()", "user": {"login": "CodyKochmann", "id": 6968406, "node_id": "MDQ6VXNlcjY5Njg0MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/6968406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CodyKochmann", "html_url": "https://github.com/CodyKochmann", "followers_url": "https://api.github.com/users/CodyKochmann/followers", "following_url": "https://api.github.com/users/CodyKochmann/following{/other_user}", "gists_url": "https://api.github.com/users/CodyKochmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/CodyKochmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CodyKochmann/subscriptions", "organizations_url": "https://api.github.com/users/CodyKochmann/orgs", "repos_url": "https://api.github.com/users/CodyKochmann/repos", "events_url": "https://api.github.com/users/CodyKochmann/events{/privacy}", "received_events_url": "https://api.github.com/users/CodyKochmann/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-08-01T18:14:23Z", "updated_at": "2017-08-05T08:54:40Z", "closed_at": "2017-08-04T17:30:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Normally I hate it when people just paste a traceback and don't have much to say in terms of the issue, but I really don't know how to fix this with hypothesis. \r\n\r\nThis is happening in python2 and I cant quite find a way to get hypothesis to explain any further.\r\n\r\nWhen I run `mystrategy.example()` which is built with \r\n```python\r\nmystrategy = st.none().map(my_garbage_generator.send)\r\n``` \r\nI end up getting the following exception after a few runs:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/cody/git/battle_tested/battle_tested/loaded_modules.py\", line 246, in <module>\r\n    out = garbage.example()\r\n  File \"/Users/cody/Library/Python/2.7/lib/python/site-packages/hypothesis/searchstrategy/strategies.py\", line 139, in example\r\n    verbosity=Verbosity.quiet,\r\n  File \"/Users/cody/Library/Python/2.7/lib/python/site-packages/hypothesis/core.py\", line 759, in find\r\n    runner.run()\r\n  File \"/Users/cody/Library/Python/2.7/lib/python/site-packages/hypothesis/internal/conjecture/engine.py\", line 240, in run\r\n    self._run()\r\n  File \"/Users/cody/Library/Python/2.7/lib/python/site-packages/hypothesis/internal/conjecture/engine.py\", line 460, in _run\r\n    self.new_buffer()\r\n  File \"/Users/cody/Library/Python/2.7/lib/python/site-packages/hypothesis/internal/conjecture/engine.py\", line 96, in new_buffer\r\n    self.test_function(self.last_data)\r\n  File \"/Users/cody/Library/Python/2.7/lib/python/site-packages/hypothesis/internal/conjecture/engine.py\", line 102, in test_function\r\n    self._test_function(data)\r\n  File \"/Users/cody/Library/Python/2.7/lib/python/site-packages/hypothesis/core.py\", line 729, in template_condition\r\n    data.note(result)\r\n  File \"/Users/cody/Library/Python/2.7/lib/python/site-packages/hypothesis/internal/conjecture/data.py\", line 100, in note\r\n    value = unicode_safe_repr(value)\r\n  File \"/Users/cody/Library/Python/2.7/lib/python/site-packages/hypothesis/internal/compat.py\", line 182, in unicode_safe_repr\r\n    r = repr(x)\r\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\u59a8' in position 10: ordinal not in range(128)\r\n```\r\n \r\nAny help in this issue would be deeply appreciated.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/757/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/751", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/751/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/751/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/751/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/751", "id": 246624536, "node_id": "MDU6SXNzdWUyNDY2MjQ1MzY=", "number": 751, "title": "Inexplicable test failures on 3.13.0+", "user": {"login": "mithrandi", "id": 856430, "node_id": "MDQ6VXNlcjg1NjQzMA==", "avatar_url": "https://avatars.githubusercontent.com/u/856430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mithrandi", "html_url": "https://github.com/mithrandi", "followers_url": "https://api.github.com/users/mithrandi/followers", "following_url": "https://api.github.com/users/mithrandi/following{/other_user}", "gists_url": "https://api.github.com/users/mithrandi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mithrandi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mithrandi/subscriptions", "organizations_url": "https://api.github.com/users/mithrandi/orgs", "repos_url": "https://api.github.com/users/mithrandi/repos", "events_url": "https://api.github.com/users/mithrandi/events{/privacy}", "received_events_url": "https://api.github.com/users/mithrandi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-07-31T01:37:56Z", "updated_at": "2017-08-03T09:47:13Z", "closed_at": "2017-08-01T16:34:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a test that looks something like this:\r\n```python\r\n@given(s.data(), fs.finapps(store))\r\n@settings(suppress_health_check=[HealthCheck.too_slow])\r\ndef test(data, finapp):\r\n    pass\r\n```\r\nOn Hypothesis 3.12.0 this works fine. On Hypothesis 3.13.0, every example is rejected, eventually hitting the timeout (if I turn up the verbosity, I see \"Run complete after 288 examples (0 valid) and 0 shrinks\").\r\n\r\nHowever, if I change it to this, which seems like it should be identical, then the test works fine on both versions of Hypothesis:\r\n```python\r\n@given(s.data())\r\n@settings(suppress_health_check=[HealthCheck.too_slow])\r\ndef test(data):\r\n    finapp = data.draw(fs.finapps(store))\r\n```\r\n\r\nUnfortunately this codebase is proprietary, and `fs.finapps` is a pretty complex strategy, so I'm not sure exactly where to start tracking this down, and I haven't had any luck constructing a minimal reproducer yet.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/751/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/751/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/739", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/739/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/739/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/739/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/739", "id": 245570554, "node_id": "MDU6SXNzdWUyNDU1NzA1NTQ=", "number": 739, "title": "decimals() fails on a range entirely between two integers", "user": {"login": "teepark", "id": 37182, "node_id": "MDQ6VXNlcjM3MTgy", "avatar_url": "https://avatars.githubusercontent.com/u/37182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teepark", "html_url": "https://github.com/teepark", "followers_url": "https://api.github.com/users/teepark/followers", "following_url": "https://api.github.com/users/teepark/following{/other_user}", "gists_url": "https://api.github.com/users/teepark/gists{/gist_id}", "starred_url": "https://api.github.com/users/teepark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teepark/subscriptions", "organizations_url": "https://api.github.com/users/teepark/orgs", "repos_url": "https://api.github.com/users/teepark/repos", "events_url": "https://api.github.com/users/teepark/events{/privacy}", "received_events_url": "https://api.github.com/users/teepark/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-07-26T00:13:43Z", "updated_at": "2017-08-21T13:07:58Z", "closed_at": "2017-08-21T13:07:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears `decimals()` is passing its `min_value` and `max_value` down to a call to `integers()`, which fails when there couldn't possibly be an integer between them (but there could be a decimal).\r\n\r\nminimal reproducible example:\r\n```python\r\nfrom decimal import Decimal\r\nfrom hypothesis import given, strategies as st\r\n\r\n@given(st.decimals(min_value=Decimal('0.1'), max_value=Decimal('0.3')))\r\ndef test_tight_decimal_range(num):\r\n    pass\r\n```\r\n\r\n```\r\ntmpproj.test_tight_decimal_range ... FAIL\r\n\r\n======================================================================\r\nFAIL: tmpproj.test_tight_decimal_range\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\r\n    self.test(*self.arg)\r\n  File \"/private/var/folders/fl/lt_vq2n17117s6n2qp9s7z2m0000gn/T/tmp.WjAPvqmP/tmpproj.py\", line 5, in test_tight_decimal_range\r\n    def test_tight_decimal_range(num):\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/core.py\", line 634, in wrapped_test\r\n    state.run()\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/core.py\", line 478, in run\r\n    runner.run()\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 235, in run\r\n    self._run()\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 387, in _run\r\n    self.test_function(data)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 97, in test_function\r\n    self._test_function(data)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/core.py\", line 465, in evaluate_test_data\r\n    escalate_hypothesis_internal_error()\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/core.py\", line 448, in evaluate_test_data\r\n    self.search_strategy, self.test,\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/executors.py\", line 58, in default_new_style_executor\r\n    return function(data)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/core.py\", line 103, in run\r\n    args, kwargs = data.draw(search_strategy)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/internal/conjecture/data.py\", line 104, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/deferred.py\", line 117, in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/internal/conjecture/data.py\", line 104, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/collections.py\", line 63, in do_draw\r\n    data.draw(e) for e in self.element_strategies\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/collections.py\", line 59, in newtuple\r\n    return tuple(xs)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/collections.py\", line 63, in <genexpr>\r\n    data.draw(e) for e in self.element_strategies\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/internal/conjecture/data.py\", line 104, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/strategies.py\", line 279, in do_draw\r\n    return self.pack(self.mapped_strategy.do_draw(data))\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/deferred.py\", line 117, in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/internal/conjecture/data.py\", line 104, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/strategies.py\", line 279, in do_draw\r\n    return self.pack(self.mapped_strategy.do_draw(data))\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/collections.py\", line 63, in do_draw\r\n    data.draw(e) for e in self.element_strategies\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/collections.py\", line 59, in newtuple\r\n    return tuple(xs)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/collections.py\", line 63, in <genexpr>\r\n    data.draw(e) for e in self.element_strategies\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/internal/conjecture/data.py\", line 104, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/deferred.py\", line 117, in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/internal/conjecture/data.py\", line 104, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/strategies.py\", line 225, in do_draw\r\n    return data.draw(self.element_strategies[i])\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/internal/conjecture/data.py\", line 104, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/strategies.py\", line 279, in do_draw\r\n    return self.pack(self.mapped_strategy.do_draw(data))\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/deferred.py\", line 117, in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/internal/conjecture/data.py\", line 104, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/flatmapped.py\", line 44, in do_draw\r\n    return data.draw(self.expand(source))\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/internal/conjecture/data.py\", line 104, in draw\r\n    return strategy.do_draw(self)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/deferred.py\", line 117, in do_draw\r\n    return data.draw(self.wrapped_strategy)\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/deferred.py\", line 79, in wrapped_strategy\r\n    *[unwrap_strategies(s) for s in self.__args],\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/deferred.py\", line 39, in unwrap_strategies\r\n    s = s.wrapped_strategy\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/searchstrategy/deferred.py\", line 81, in wrapped_strategy\r\n    for k, v in self.__kwargs.items()})\r\n  File \"/usr/local/lib/python2.7/site-packages/hypothesis/strategies.py\", line 232, in integers\r\n    assert min_int_value <= max_int_value\r\nAssertionError\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.014s\r\n\r\nFAILED (failures=1)\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/739/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/739/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/725", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/725/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/725/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/725/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/725", "id": 241881696, "node_id": "MDU6SXNzdWUyNDE4ODE2OTY=", "number": 725, "title": "FailedHealthCheck for decimals(places=X, allow_nan=False, allow_infinity=False)", "user": {"login": "goodspark", "id": 29210237, "node_id": "MDQ6VXNlcjI5MjEwMjM3", "avatar_url": "https://avatars.githubusercontent.com/u/29210237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goodspark", "html_url": "https://github.com/goodspark", "followers_url": "https://api.github.com/users/goodspark/followers", "following_url": "https://api.github.com/users/goodspark/following{/other_user}", "gists_url": "https://api.github.com/users/goodspark/gists{/gist_id}", "starred_url": "https://api.github.com/users/goodspark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goodspark/subscriptions", "organizations_url": "https://api.github.com/users/goodspark/orgs", "repos_url": "https://api.github.com/users/goodspark/repos", "events_url": "https://api.github.com/users/goodspark/events{/privacy}", "received_events_url": "https://api.github.com/users/goodspark/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2017-07-10T23:31:50Z", "updated_at": "2017-09-05T13:46:45Z", "closed_at": "2017-09-05T13:46:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "My tests have suddenly started failing with v3.12.0 due to failing health checks. Worked in v.3.11.6\r\n\r\nMinimum test code:\r\n```python\r\nfrom hypothesis.core import given\r\nfrom hypothesis.strategies import decimals\r\n\r\n@given(x=decimals(places=3, allow_nan=False, allow_infinity=False))\r\ndef test_asd(x):\r\n    print(x)\r\n```\r\n\r\nIf I remove `places`, this works again.\r\n\r\nOutput:\r\n```\r\n============================================================ FAILURES ============================================================\r\n____________________________________________________________ test_asd ____________________________________________________________\r\ntest.py:527: in test_asd\r\n    def test_asd(x):\r\nE   FailedHealthCheck: It looks like your strategy is filtering out a lot of data. Health check found 50 filtered examples but only 0 good ones. This will make your tests much slower, and also will probably distort the data generation quite a lot. You should adapt your strategy to filter less. This can also be caused by a low max_leaves parameter in recursive() calls\r\nE   See https://hypothesis.readthedocs.io/en/latest/healthchecks.html for more information about this. If you want to disable just this health check, add HealthCheck.filter_too_much to the suppress_health_check settings for this test.\r\n==================================================== 1 failed in 3.29 seconds ====================================================\r\nERROR: InvocationError: 'pytest -s test.py::test_asd'\r\n____________________________________________________________ summary _____________________________________________________________\r\nERROR:   py27: commands failed\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/725/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/725/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/700", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/700/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/700/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/700/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/700", "id": 237163074, "node_id": "MDU6SXNzdWUyMzcxNjMwNzQ=", "number": 700, "title": "--hypothesis-show-statistics doesn't work with pytest-xdist", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-06-20T10:27:49Z", "updated_at": "2018-12-11T12:53:49Z", "closed_at": "2018-12-11T12:53:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "If you use the flag while running with xdist then you'll get no statistics. This is presumably because the tests are running in a different process than the collector, so the data isn't getting communicated back.\r\n\r\nTo reproduce e.g. run `pytest --hypothesis-show-statistics tests/cover/test_testdecorators.py`, which will use the default Hypothesis configuration and run with two child runners and show no statistics.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/700/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/700/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/688", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/688/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/688/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/688/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/688", "id": 235018877, "node_id": "MDU6SXNzdWUyMzUwMTg4Nzc=", "number": 688, "title": "Sampled_from() should work with collections.OrderedDict", "user": {"login": "a3kov", "id": 813860, "node_id": "MDQ6VXNlcjgxMzg2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/813860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a3kov", "html_url": "https://github.com/a3kov", "followers_url": "https://api.github.com/users/a3kov/followers", "following_url": "https://api.github.com/users/a3kov/following{/other_user}", "gists_url": "https://api.github.com/users/a3kov/gists{/gist_id}", "starred_url": "https://api.github.com/users/a3kov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a3kov/subscriptions", "organizations_url": "https://api.github.com/users/a3kov/orgs", "repos_url": "https://api.github.com/users/a3kov/repos", "events_url": "https://api.github.com/users/a3kov/events{/privacy}", "received_events_url": "https://api.github.com/users/a3kov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-06-10T18:22:49Z", "updated_at": "2017-06-11T11:34:40Z", "closed_at": "2017-06-11T11:01:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "OrderedDict should satisfy the replayability requirement, so sampling from it should be possible.\r\nCurrently it raises exception:\r\n`HypothesisDeprecationWarning: Cannot sample from odict_values`", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/688/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/688/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/652", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/652/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/652/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/652/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/652", "id": 231811680, "node_id": "MDU6SXNzdWUyMzE4MTE2ODA=", "number": 652, "title": "Deprecation warning does not blame user code correctly", "user": {"login": "mithrandi", "id": 856430, "node_id": "MDQ6VXNlcjg1NjQzMA==", "avatar_url": "https://avatars.githubusercontent.com/u/856430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mithrandi", "html_url": "https://github.com/mithrandi", "followers_url": "https://api.github.com/users/mithrandi/followers", "following_url": "https://api.github.com/users/mithrandi/following{/other_user}", "gists_url": "https://api.github.com/users/mithrandi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mithrandi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mithrandi/subscriptions", "organizations_url": "https://api.github.com/users/mithrandi/orgs", "repos_url": "https://api.github.com/users/mithrandi/repos", "events_url": "https://api.github.com/users/mithrandi/events{/privacy}", "received_events_url": "https://api.github.com/users/mithrandi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 848276940, "node_id": "MDU6TGFiZWw4NDgyNzY5NDA=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/legibility", "name": "legibility", "color": "d4c5f9", "default": false, "description": "make errors helpful and Hypothesis grokable"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-05-27T16:21:33Z", "updated_at": "2018-09-30T14:18:21Z", "closed_at": "2018-09-30T14:18:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "From IRC:\r\n```\r\n<idnar> \u2026/hypothesis/searchstrategy/deferred.py:81: HypothesisDeprecationWarning: Use hypothesis.strategies.datetimes, which supports full-precision bounds and has a simpler API.\r\n<idnar> that message doesn't actually tell me _what_ is deprecated\r\n<tos9> idnar: It's hypothesis.extras.datetime.datetimes that's deprecated\r\n<tos9> But I think all the warnings are possibly missing a stacklevel\r\n<tos9> because they don't point at the calling code\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/652/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/652/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/634", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/634/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/634/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/634/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/634", "id": 229204942, "node_id": "MDU6SXNzdWUyMjkyMDQ5NDI=", "number": 634, "title": "Deployment of 3.8.4 and 3.8.5 has failed", "user": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 602737425, "node_id": "MDU6TGFiZWw2MDI3Mzc0MjU=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/tests/build/CI", "name": "tests/build/CI", "color": "fbca04", "default": false, "description": "about testing or deployment *of* Hypothesis"}], "state": "closed", "locked": false, "assignee": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-05-17T00:25:43Z", "updated_at": "2017-05-17T08:40:39Z", "closed_at": "2017-05-17T08:40:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "PyPI Error 500 for  [3.8.4](https://travis-ci.org/HypothesisWorks/hypothesis-python/jobs/232734534) and [3.8.5](https://travis-ci.org/HypothesisWorks/hypothesis-python/jobs/232749840); I've tried restarting the job a few times in case of transient failure but that didn't work.\r\n\r\n@DRMacIver, I think this is a case for your private key or admin powers.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/634/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/634/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/595", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/595/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/595/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/595/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/595", "id": 224552700, "node_id": "MDU6SXNzdWUyMjQ1NTI3MDA=", "number": 595, "title": "False positive HypothesisDeprecationWarning", "user": {"login": "Tinche", "id": 1909233, "node_id": "MDQ6VXNlcjE5MDkyMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1909233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tinche", "html_url": "https://github.com/Tinche", "followers_url": "https://api.github.com/users/Tinche/followers", "following_url": "https://api.github.com/users/Tinche/following{/other_user}", "gists_url": "https://api.github.com/users/Tinche/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tinche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tinche/subscriptions", "organizations_url": "https://api.github.com/users/Tinche/orgs", "repos_url": "https://api.github.com/users/Tinche/repos", "events_url": "https://api.github.com/users/Tinche/events{/privacy}", "received_events_url": "https://api.github.com/users/Tinche/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-04-26T18:04:52Z", "updated_at": "2017-05-15T10:09:49Z", "closed_at": "2017-05-15T10:09:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just upgraded to Hypothesis 3.8.2, and I'm getting the following warning:\r\n\r\n```\r\n.venv/lib/python3.6/site-packages/hypothesis/strategies.py:416: HypothesisDeprecationWarning: Cannot sample from <enum 'AnEnum'>, not a sequence.  Hypothesis goes to some length to ensure that sampling an element from a collection (with `sampled_from` or `choices`) is replayable and can be minimised.  To replay a saved example, the sampled values must have the same iteration order on every run - ruling out sets, dicts, etc due to hash randomisation.  Most cases can simply use `sorted(values)`, but mixed types or special values such as math.nan require careful handling - and note that when simplifying an example, Hypothesis treats earlier values as simpler.\r\n  elements = check_sample(elements)\r\n```\r\nIt's a great warning but I think I'm getting a false positive:\r\n```\r\nfrom hypothesis import given\r\nfrom hypothesis.strategies import sampled_from\r\n\r\nfrom enum import Enum\r\n\r\n\r\nclass AnEnum(Enum):\r\n    A = \"A\"\r\n    B = \"B\"\r\n\r\n\r\n@given(sampled_from(AnEnum))\r\ndef test_enum(e):\r\n    print(e)\r\n```\r\nAccording to https://docs.python.org/3/library/enum.html, \"Enumerations support iteration, in definition order\", so this should be fine, right?", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/595/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/595/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/560", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/560/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/560/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/560/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/560", "id": 223582781, "node_id": "MDU6SXNzdWUyMjM1ODI3ODE=", "number": 560, "title": "An interaction between pytest fixtures and @example broke in Hypothesis 3.7.3", "user": {"login": "alexwlchan", "id": 301220, "node_id": "MDQ6VXNlcjMwMTIyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/301220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexwlchan", "html_url": "https://github.com/alexwlchan", "followers_url": "https://api.github.com/users/alexwlchan/followers", "following_url": "https://api.github.com/users/alexwlchan/following{/other_user}", "gists_url": "https://api.github.com/users/alexwlchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexwlchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexwlchan/subscriptions", "organizations_url": "https://api.github.com/users/alexwlchan/orgs", "repos_url": "https://api.github.com/users/alexwlchan/repos", "events_url": "https://api.github.com/users/alexwlchan/events{/privacy}", "received_events_url": "https://api.github.com/users/alexwlchan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, {"login": "alexwlchan", "id": 301220, "node_id": "MDQ6VXNlcjMwMTIyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/301220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexwlchan", "html_url": "https://github.com/alexwlchan", "followers_url": "https://api.github.com/users/alexwlchan/followers", "following_url": "https://api.github.com/users/alexwlchan/following{/other_user}", "gists_url": "https://api.github.com/users/alexwlchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexwlchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexwlchan/subscriptions", "organizations_url": "https://api.github.com/users/alexwlchan/orgs", "repos_url": "https://api.github.com/users/alexwlchan/repos", "events_url": "https://api.github.com/users/alexwlchan/events{/privacy}", "received_events_url": "https://api.github.com/users/alexwlchan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2017-04-22T18:18:53Z", "updated_at": "2017-04-23T13:39:10Z", "closed_at": "2017-04-23T13:39:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Reported by ronan in IRC. [Part of the PyPy](http://buildbot.pypy.org/summary/longrepr?testname=test_composition%5BNFC-NFC-NFC%5D&builder=own-linux-x86-64&build=5881&mod=pypy.module.unicodedata.test.test_hyp) test suite started failing in Hypothesis 3.7.3.\r\n\r\nI\u2019ve reduced the failing behaviour in that test case to the following minimal example, which fails reliably on Python 3.6 for me. It fails in Hypothesis 3.7.3 but not 3.7.2.\r\n\r\n```python\r\nimport pytest\r\nfrom hypothesis import example, given\r\nfrom hypothesis.strategies import integers\r\n\r\n@pytest.fixture\r\ndef my_fixture():\r\n    pass\r\n\r\n@example(xs=1)\r\n@given(xs=integers())\r\ndef test_case(xs, my_fixture):\r\n    pass\r\n```\r\n\r\nPlaying with git bisect points to a5c1200 as the culprit, although that\u2019s such a big patch that I don\u2019t have time to dig into it further right now.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/560/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/560/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/523", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/523/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/523/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/523/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/523", "id": 221939550, "node_id": "MDU6SXNzdWUyMjE5Mzk1NTA=", "number": 523, "title": "test_prints_on_failure is flakey on CircleCI", "user": {"login": "alexwlchan", "id": 301220, "node_id": "MDQ6VXNlcjMwMTIyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/301220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexwlchan", "html_url": "https://github.com/alexwlchan", "followers_url": "https://api.github.com/users/alexwlchan/followers", "following_url": "https://api.github.com/users/alexwlchan/following{/other_user}", "gists_url": "https://api.github.com/users/alexwlchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexwlchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexwlchan/subscriptions", "organizations_url": "https://api.github.com/users/alexwlchan/orgs", "repos_url": "https://api.github.com/users/alexwlchan/repos", "events_url": "https://api.github.com/users/alexwlchan/events{/privacy}", "received_events_url": "https://api.github.com/users/alexwlchan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-15T10:07:12Z", "updated_at": "2017-07-31T03:32:50Z", "closed_at": "2017-07-31T03:32:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Third time in as many days that I\u2019ve seen the following flakey test in CircleCI:\r\n\r\n```\r\n____________________________ test_prints_on_failure ____________________________\r\n[gw1] darwin -- Python 2.7.10 /Users/distiller/.cache/hypothesis-build-runtimes/.tox/pypy-full/bin/python\r\ntests/cover/test_arbitrary_data.py:48: in test_prints_on_failure\r\n    assert 'Draw 1: [0, 0]' in result\r\nE   AssertionError: assert 'Draw 1: [0, 0]' in ''\r\n----------------------------- Captured stderr call -----------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/distiller/hypothesis-python/tests/common/utils.py\", line 51, in raises\r\n    assert False, \"Expected to raise an exception but didn't\"\r\nAssertionError: Expected to raise an exception but didn't\r\n============== 1 failed, 1172 passed, 2 skipped in 70.39 seconds ===============\r\n```\r\n\r\nOnly Python 2.7.10, and it\u2019s always this test. Usually clears up after a re-run, but we should understand why it keeps failing.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/523/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/514", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/514/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/514/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/514/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/514", "id": 221560892, "node_id": "MDU6SXNzdWUyMjE1NjA4OTI=", "number": 514, "title": "Hypothesis doesn't recognize unittest.SkipTest exception", "user": {"login": "coriolinus", "id": 7822926, "node_id": "MDQ6VXNlcjc4MjI5MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7822926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coriolinus", "html_url": "https://github.com/coriolinus", "followers_url": "https://api.github.com/users/coriolinus/followers", "following_url": "https://api.github.com/users/coriolinus/following{/other_user}", "gists_url": "https://api.github.com/users/coriolinus/gists{/gist_id}", "starred_url": "https://api.github.com/users/coriolinus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coriolinus/subscriptions", "organizations_url": "https://api.github.com/users/coriolinus/orgs", "repos_url": "https://api.github.com/users/coriolinus/repos", "events_url": "https://api.github.com/users/coriolinus/events{/privacy}", "received_events_url": "https://api.github.com/users/coriolinus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-04-13T13:19:12Z", "updated_at": "2017-07-20T21:57:16Z", "closed_at": "2017-07-20T14:50:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Narrative example of failure\r\n\r\nI haven't had time to construct a minimal example, so I'll give a full example of failure. I've recently updated a test in my Django project which conditionally skips a test in cases which no longer make sense. \r\n\r\nThe test in question is defined in an abstract base class of a couple other test classes which specialize it further. One branch of one test no longer makes sense in the context of one of the specialization classes. I can't solve this with `assume()` or `@unittest.skipIf()` because neither has enough contextual data. Instead, I `raise unittest.SkipTest()` at runtime if the test should be skipped.\r\n\r\nThe issue is that Hypothesis doesn't know about `unittest.SkipTest`, so produces failure output, as seen below:\r\n\r\n```shell\r\n(.venv) coriolinus$ ./manage.py test\r\nCreating test database for alias 'default'...\r\nInstalled 39 object(s) from 1 fixture(s)\r\nInstalled 21 object(s) from 1 fixture(s)\r\nInstalled 9579 object(s) from 1 fixture(s)\r\nInstalled 5 object(s) from 1 fixture(s)\r\nInstalled 6 object(s) from 1 fixture(s)\r\n.............................s.............................Falsifying example: test_admin_sees_everyone(self=<core.tests.test_user_profile_visibility.ProfileVisibilityTests testMethod=test_admin_sees_everyone>, data=data(...))\r\nDraw 1: <User: alpha>\r\ns..........................................\r\n----------------------------------------------------------------------\r\nRan 102 tests in 58.985s\r\n\r\nOK (skipped=2)\r\nDestroying test database for alias 'default'...\r\n(.venv) coriolinus$ pip list | grep hypothesis\r\nhypothesis (3.6.1)\r\n```\r\n\r\n# Expected behavior\r\n\r\nHypothesis does not produce failure output if a test raises `unittest.SkipTest`.\r\n\r\n# Observed behavior\r\n\r\nHypothesis produces failure output if a test raises `unittest.SkipTest`.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/514/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/514/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/493", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/493/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/493/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/493/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/493", "id": 220468165, "node_id": "MDU6SXNzdWUyMjA0NjgxNjU=", "number": 493, "title": "given prevents function local types from being garbage collected", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-04-09T12:32:08Z", "updated_at": "2018-10-09T08:05:12Z", "closed_at": "2018-10-09T08:05:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "A class defined inside a function should be suitable to be garbage collected, but given prevents that. Consider the following test:\r\n\r\n```python\r\n def test_local_types_are_garbage_collected():\r\n      store = [None]\r\n\r\n      def run_locally():\r\n          class Test(object):\r\n              @given(st.integers())\r\n              def test(self, i):\r\n                  pass\r\n          store[0] = weakref(Test)\r\n          Test().test()\r\n      run_locally()\r\n      del run_locally\r\n      assert store[0] is not None\r\n      gc.collect()\r\n      assert store[0]() is None\r\n```\r\n\r\nThis test fails, but passes if you remove the given and replace it with a normal method.\r\n\r\nI *believe* the likely culprit is the strategy cache - I think the way we're constructing the arguments to the test function is causing something to hang on to a reference to self. This is probably a sign of a more general problem we should worry about if so.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/493/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/493/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/491", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/491/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/491/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/491/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/491", "id": 220437384, "node_id": "MDU6SXNzdWUyMjA0MzczODQ=", "number": 491, "title": "Unspec'd Mock as an argument fails hypothesis health check", "user": {"login": "dangitall", "id": 882363, "node_id": "MDQ6VXNlcjg4MjM2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/882363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dangitall", "html_url": "https://github.com/dangitall", "followers_url": "https://api.github.com/users/dangitall/followers", "following_url": "https://api.github.com/users/dangitall/following{/other_user}", "gists_url": "https://api.github.com/users/dangitall/gists{/gist_id}", "starred_url": "https://api.github.com/users/dangitall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dangitall/subscriptions", "organizations_url": "https://api.github.com/users/dangitall/orgs", "repos_url": "https://api.github.com/users/dangitall/repos", "events_url": "https://api.github.com/users/dangitall/events{/privacy}", "received_events_url": "https://api.github.com/users/dangitall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-09T00:28:08Z", "updated_at": "2018-05-26T00:48:03Z", "closed_at": "2017-08-18T23:56:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I pass an unspec'd mock to a function that is decorated by `hypothesis.given` then regardless of what the function does, hypothesis flags the function for not returning `None`.\r\n\r\nThis snippet demonstrates the problem:\r\n```python\r\nfrom mock import Mock\r\nfrom hypothesis import given\r\nimport hypothesis.strategies as st\r\n\r\nclass Bar():\r\n    pass\r\n\r\n@given(inp=st.integers())\r\ndef test_foo_spec(bar, inp):\r\n    pass\r\n\r\ntest_foo_spec(Bar())            # Fine\r\ntest_foo_spec(Mock(Bar))        # Fine\r\ntest_foo_spec(Mock())           # Fails health check\r\n```\r\n\r\nwhich results in:\r\n```python-traceback\r\nTraceback (most recent call last):\r\n  File \"test_foo.py\", line 14, in <module>\r\n    test_foo_spec(Mock())           # Fails health check\r\n  File \"test_foo.py\", line 9, in test_foo_spec\r\n    def test_foo_spec(bar, inp):\r\n  File \"/Users/dan/.pyenv/versions/3.5.2/envs/test-hypo/lib/python3.5/site-packages/hypothesis/core.py\", line 477, in wrapped_test\r\n    runner.run()\r\n  File \"/Users/dan/.pyenv/versions/3.5.2/envs/test-hypo/lib/python3.5/site-packages/hypothesis/internal/conjecture/engine.py\", line 192, in run\r\n    self._run()\r\n  File \"/Users/dan/.pyenv/versions/3.5.2/envs/test-hypo/lib/python3.5/site-packages/hypothesis/internal/conjecture/engine.py\", line 313, in _run\r\n    self.new_buffer()\r\n  File \"/Users/dan/.pyenv/versions/3.5.2/envs/test-hypo/lib/python3.5/site-packages/hypothesis/internal/conjecture/engine.py\", line 76, in new_buffer\r\n    self.test_function(self.last_data)\r\n  File \"/Users/dan/.pyenv/versions/3.5.2/envs/test-hypo/lib/python3.5/site-packages/hypothesis/internal/conjecture/engine.py\", line 82, in test_function\r\n    self._test_function(data)\r\n  File \"/Users/dan/.pyenv/versions/3.5.2/envs/test-hypo/lib/python3.5/site-packages/hypothesis/core.py\", line 453, in evaluate_test_data\r\n    ) % (test.__name__, result), HealthCheck.return_value)\r\n  File \"/Users/dan/.pyenv/versions/3.5.2/envs/test-hypo/lib/python3.5/site-packages/hypothesis/core.py\", line 307, in fail_health_check\r\n    raise FailedHealthCheck(message)\r\nhypothesis.errors.FailedHealthCheck: Tests run under @given should return None, but test_foo_spec returned <Mock name='mock.execute_example()' id='4365662752'> instead.\r\nSee https://hypothesis.readthedocs.io/en/latest/healthchecks.html for more information about this. If you want to disable just this health check, add HealthCheck.return_value to the suppress_health_check settings for this test.\r\n```\r\n\r\nI am running 3.5.2 with these packages installed:\r\n```\r\nclick==6.7\r\nhypothesis==3.7.0\r\nmock==2.0.0\r\npbr==2.0.0\r\npy==1.4.33\r\npytest==3.0.7\r\nsix==1.10.0\r\nspark-parser==1.6.0\r\nuncompyle6==2.9.10\r\nxdis==3.2.4\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/491/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/491/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/439", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/439/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/439/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/439", "id": 204840760, "node_id": "MDU6SXNzdWUyMDQ4NDA3NjA=", "number": 439, "title": "Bug: ValueError: MySQL backend does not support timezone-aware datetimes when USE_TZ is False.", "user": {"login": "pwilczynskiclearcode", "id": 3940860, "node_id": "MDQ6VXNlcjM5NDA4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3940860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pwilczynskiclearcode", "html_url": "https://github.com/pwilczynskiclearcode", "followers_url": "https://api.github.com/users/pwilczynskiclearcode/followers", "following_url": "https://api.github.com/users/pwilczynskiclearcode/following{/other_user}", "gists_url": "https://api.github.com/users/pwilczynskiclearcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/pwilczynskiclearcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pwilczynskiclearcode/subscriptions", "organizations_url": "https://api.github.com/users/pwilczynskiclearcode/orgs", "repos_url": "https://api.github.com/users/pwilczynskiclearcode/repos", "events_url": "https://api.github.com/users/pwilczynskiclearcode/events{/privacy}", "received_events_url": "https://api.github.com/users/pwilczynskiclearcode/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-02-02T10:56:32Z", "updated_at": "2017-05-22T08:26:58Z", "closed_at": "2017-05-22T08:26:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nclass Dictionary(models.Model):\r\n    timestamp = models.DateTimeField(default=0)\r\n```\r\n\r\n```python\r\n----> 1 models(Dictionary).example()\r\n\r\n/usr/local/lib/python3.6/site-packages/hypothesis/searchstrategy/strategies.py in example(self, random)\r\n    112                     max_shrinks=0,\r\n    113                     max_iterations=1000,\r\n--> 114                     database=None\r\n    115                 )\r\n    116             )\r\n\r\n/usr/local/lib/python3.6/site-packages/hypothesis/core.py in find(specifier, condition, settings, random, database_key)\r\n    630         database_key=database_key,\r\n    631     )\r\n--> 632     runner.run()\r\n    633     note_engine_for_statistics(runner)\r\n    634     run_time = time.time() - start\r\n\r\n/usr/local/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py in run(self)\r\n    189         with self.settings:\r\n    190             try:\r\n--> 191                 self._run()\r\n    192             except RunIsComplete:\r\n    193                 pass\r\n\r\n/usr/local/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py in _run(self)\r\n    310                 self.last_data.status < Status.INTERESTING\r\n    311             ):\r\n--> 312                 self.new_buffer()\r\n    313 \r\n    314             mutator = self._new_mutator()\r\n\r\n/usr/local/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py in new_buffer(self)\r\n     73             distribution(self.random, n)\r\n     74         )\r\n---> 75         self.test_function(self.last_data)\r\n     76         self.last_data.freeze()\r\n     77 \r\n\r\n/usr/local/lib/python3.6/site-packages/hypothesis/internal/conjecture/engine.py in test_function(self, data)\r\n     79         self.call_count += 1\r\n     80         try:\r\n---> 81             self._test_function(data)\r\n     82             data.freeze()\r\n     83         except StopTest as e:\r\n\r\n/usr/local/lib/python3.6/site-packages/hypothesis/core.py in template_condition(data)\r\n    596             try:\r\n    597                 data.is_find = True\r\n--> 598                 result = data.draw(search)\r\n    599                 data.note(result)\r\n    600                 success = condition(result)\r\n\r\n/usr/local/lib/python3.6/site-packages/hypothesis/internal/conjecture/data.py in draw(self, strategy)\r\n    103         self.start_example()\r\n    104         try:\r\n--> 105             return strategy.do_draw(self)\r\n    106         finally:\r\n    107             if not self.frozen:\r\n\r\n/usr/local/lib/python3.6/site-packages/hypothesis/extra/django/models.py in do_draw(self, data)\r\n    196         try:\r\n    197             result, _ = self.model.objects.get_or_create(\r\n--> 198                 **self.arg_strategy.do_draw(data)\r\n    199             )\r\n    200             return result\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/manager.py in manager_method(self, *args, **kwargs)\r\n     83         def create_method(name, method):\r\n     84             def manager_method(self, *args, **kwargs):\r\n---> 85                 return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n     86             manager_method.__name__ = method.__name__\r\n     87             manager_method.__doc__ = method.__doc__\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/query.py in get_or_create(self, defaults, **kwargs)\r\n    471         self._for_write = True\r\n    472         try:\r\n--> 473             return self.get(**lookup), False\r\n    474         except self.model.DoesNotExist:\r\n    475             return self._create_object_from_params(lookup, params)\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/query.py in get(self, *args, **kwargs)\r\n    377         if self.query.can_filter() and not self.query.distinct_fields:\r\n    378             clone = clone.order_by()\r\n--> 379         num = len(clone)\r\n    380         if num == 1:\r\n    381             return clone._result_cache[0]\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/query.py in __len__(self)\r\n    236 \r\n    237     def __len__(self):\r\n--> 238         self._fetch_all()\r\n    239         return len(self._result_cache)\r\n    240 \r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/query.py in _fetch_all(self)\r\n   1085     def _fetch_all(self):\r\n   1086         if self._result_cache is None:\r\n-> 1087             self._result_cache = list(self.iterator())\r\n   1088         if self._prefetch_related_lookups and not self._prefetch_done:\r\n   1089             self._prefetch_related_objects()\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/query.py in __iter__(self)\r\n     52         # Execute the query. This will also fill compiler.select, klass_info,\r\n     53         # and annotations.\r\n---> 54         results = compiler.execute_sql()\r\n     55         select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,\r\n     56                                                   compiler.annotation_col_map)\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/sql/compiler.py in execute_sql(self, result_type)\r\n    822             result_type = NO_RESULTS\r\n    823         try:\r\n--> 824             sql, params = self.as_sql()\r\n    825             if not sql:\r\n    826                 raise EmptyResultSet\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/sql/compiler.py in as_sql(self, with_limits, with_col_aliases, subquery)\r\n    374             from_, f_params = self.get_from_clause()\r\n    375 \r\n--> 376             where, w_params = self.compile(self.where) if self.where is not None else (\"\", [])\r\n    377             having, h_params = self.compile(self.having) if self.having is not None else (\"\", [])\r\n    378             params = []\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/sql/compiler.py in compile(self, node, select_format)\r\n    351             sql, params = vendor_impl(self, self.connection)\r\n    352         else:\r\n--> 353             sql, params = node.as_sql(self, self.connection)\r\n    354         if select_format and not self.subquery:\r\n    355             return node.output_field.select_format(self, sql, params)\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/sql/where.py in as_sql(self, compiler, connection)\r\n     77         for child in self.children:\r\n     78             try:\r\n---> 79                 sql, params = compiler.compile(child)\r\n     80             except EmptyResultSet:\r\n     81                 empty_needed -= 1\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/sql/compiler.py in compile(self, node, select_format)\r\n    351             sql, params = vendor_impl(self, self.connection)\r\n    352         else:\r\n--> 353             sql, params = node.as_sql(self, self.connection)\r\n    354         if select_format and not self.subquery:\r\n    355             return node.output_field.select_format(self, sql, params)\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/lookups.py in as_sql(self, compiler, connection)\r\n    154     def as_sql(self, compiler, connection):\r\n    155         lhs_sql, params = self.process_lhs(compiler, connection)\r\n--> 156         rhs_sql, rhs_params = self.process_rhs(compiler, connection)\r\n    157         params.extend(rhs_params)\r\n    158         rhs_sql = self.get_rhs_op(connection, rhs_sql)\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/lookups.py in process_rhs(self, compiler, connection)\r\n     90             return '(' + sql + ')', params\r\n     91         else:\r\n---> 92             return self.get_db_prep_lookup(value, connection)\r\n     93 \r\n     94     def rhs_is_direct_value(self):\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/lookups.py in get_db_prep_lookup(self, value, connection)\r\n    180             [get_db_prep_value(v, connection, prepared=True) for v in value]\r\n    181             if self.get_db_prep_lookup_value_is_iterable else\r\n--> 182             [get_db_prep_value(value, connection, prepared=True)]\r\n    183         )\r\n    184 \r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/models/fields/__init__.py in get_db_prep_value(self, value, connection, prepared)\r\n   1437         if not prepared:\r\n   1438             value = self.get_prep_value(value)\r\n-> 1439         return connection.ops.adapt_datetimefield_value(value)\r\n   1440 \r\n   1441     def value_to_string(self, obj):\r\n\r\n/usr/local/lib/python3.6/site-packages/django/db/backends/mysql/operations.py in adapt_datetimefield_value(self, value)\r\n    147                 value = timezone.make_naive(value, self.connection.timezone)\r\n    148             else:\r\n--> 149                 raise ValueError(\"MySQL backend does not support timezone-aware datetimes when USE_TZ is False.\")\r\n    150 \r\n    151         if not self.connection.features.supports_microsecond_precision:\r\n\r\nValueError: MySQL backend does not support timezone-aware datetimes when USE_TZ is False.\r\n```\r\n```\r\n$ python --version\r\nPython 3.6.0\r\n$ pip freeze | grep hypothesis\r\nhypothesis==3.6.1\r\n```", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/439/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/439/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/429", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/429/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/429/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/429", "id": 201443041, "node_id": "MDU6SXNzdWUyMDE0NDMwNDE=", "number": 429, "title": "Mapping over a Django strategy can add invalid objects to the database", "user": {"login": "inglesp", "id": 28734, "node_id": "MDQ6VXNlcjI4NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/28734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inglesp", "html_url": "https://github.com/inglesp", "followers_url": "https://api.github.com/users/inglesp/followers", "following_url": "https://api.github.com/users/inglesp/following{/other_user}", "gists_url": "https://api.github.com/users/inglesp/gists{/gist_id}", "starred_url": "https://api.github.com/users/inglesp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inglesp/subscriptions", "organizations_url": "https://api.github.com/users/inglesp/orgs", "repos_url": "https://api.github.com/users/inglesp/repos", "events_url": "https://api.github.com/users/inglesp/events{/privacy}", "received_events_url": "https://api.github.com/users/inglesp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-01-18T00:10:08Z", "updated_at": "2018-12-09T05:48:34Z", "closed_at": "2018-12-09T05:48:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "<details>\r\n<summary>*Original issue text - new version edited by @Zac-HD*</summary>\r\n\r\nI'll come up with a better issue title when it's not midnight...\r\n\r\nThe following test will fail:\r\n\r\n```python\r\nfrom hypothesis.extra.django import TestCase as HypothesisTestCase\r\nfrom hypothesis.extra.django.models import models as hypothesis_models\r\nfrom hypothesis import given, settings, Verbosity\r\nfrom hypothesis import strategies as st\r\n\r\nfrom django.contrib.auth.models import Group, User\r\nfrom gallery.models import Directory\r\n\r\nclass Tests(HypothesisTestCase):\r\n    @settings(max_examples=100000, timeout=600, verbosity=Verbosity.debug)\r\n    @given(st.data())\r\n    def test_groups(self, data):\r\n        groups = data.draw(st.sets(hypothesis_models(Group)))\r\n        self.assertEqual(len(groups), Group.objects.count())\r\n```\r\n\r\nThe failure is:\r\n\r\n```python-traceback\r\n$ time ./manage.py test gallery.tests.test_hypothesis_repro\r\nCreating test database for alias 'default'...\r\nTrying example: test_groups(self=<gallery.tests.test_hypothesis_repro.Tests testMethod=test_groups>, data=data(...))\r\n[snip...]\r\nTrying example: test_groups(self=<gallery.tests.test_hypothesis_repro.Tests testMethod=test_groups>, data=data(...))\r\nShuffling suffixes while shrinking {16}\r\nRun complete after 13413 examples (13300 valid) and 9 shrinks\r\nFalsifying example: test_groups(self=<gallery.tests.test_hypothesis_repro.Tests testMethod=test_groups>, data=data(...))\r\nDraw 1: set()\r\nF\r\n======================================================================\r\nFAIL: test_groups (gallery.tests.test_hypothesis_repro.Tests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/inglesp/projects/inglesham-gallery/server/gallery/tests/test_hypothesis_repro.py\", line 11, in test_groups\r\n    @given(st.data())\r\n  File \"/Users/inglesp/.pyenv/versions/inglesham-gallery/lib/python3.6/site-packages/hypothesis/core.py\", line 524, in wrapped_test\r\n    print_example=True, is_final=True\r\n  File \"/Users/inglesp/.pyenv/versions/inglesham-gallery/lib/python3.6/site-packages/hypothesis/executors.py\", line 78, in <lambda>\r\n    lambda: function(data)\r\n  File \"/Users/inglesp/.pyenv/versions/inglesham-gallery/lib/python3.6/site-packages/hypothesis/executors.py\", line 33, in execute\r\n    return function()\r\n  File \"/Users/inglesp/.pyenv/versions/inglesham-gallery/lib/python3.6/site-packages/hypothesis/executors.py\", line 78, in <lambda>\r\n    lambda: function(data)\r\n  File \"/Users/inglesp/.pyenv/versions/inglesham-gallery/lib/python3.6/site-packages/hypothesis/core.py\", line 111, in run\r\n    return test(*args, **kwargs)\r\n  File \"/Users/inglesp/projects/inglesham-gallery/server/gallery/tests/test_hypothesis_repro.py\", line 14, in test_groups\r\n    self.assertEqual(len(groups), Group.objects.count())\r\nAssertionError: 0 != 1\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 124.412s\r\n\r\nFAILED (failures=1)\r\nDestroying test database for alias 'default'...\r\n```\r\n\r\nI haven't had the chance to dig into what's going on here, but it looks like a `Group` object is being incorrectly saved to the database.\r\n\r\nThe `max_examples` and `timeout` settings are necessary to hit this.\r\n\r\nI can reproduce this with other models, but lost patience with `django.contrib.auth.models.User`.  (Possibly related to #391?)\r\n\r\n</details>\r\n\r\nFiltering a strategy often involves drawing and then discarding examples, which works well in most cases.  However, drawing from a Django model strategy is stateful - because (by design) the draw has the side-effect of modifying the database.\r\n\r\nThis can cause tests like the following to fail:\r\n\r\n```python\r\nfrom hypothesis import given\r\nfrom hypothesis.extra.django import models, TestCase\r\n\r\nfrom django.contrib.auth.models import User\r\n\r\nclass Tests(TestCase):\r\n    @given(models.models(User).filter(lambda usr: len(usr.username) >= 5))\r\n    def test_filter_should_not_pollute_database(self, usr):\r\n        self.assertEqual(User.objects.count(), 1)\r\n```\r\n\r\nThis isn't *exactly* a bug, but we'd like to fix it.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/429/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/429/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/414", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/414/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/414/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/414", "id": 197132104, "node_id": "MDU6SXNzdWUxOTcxMzIxMDQ=", "number": 414, "title": "test_minimize_list_of_floats_on_large_structure is a bit flakey in Travis", "user": {"login": "alexwlchan", "id": 301220, "node_id": "MDQ6VXNlcjMwMTIyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/301220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexwlchan", "html_url": "https://github.com/alexwlchan", "followers_url": "https://api.github.com/users/alexwlchan/followers", "following_url": "https://api.github.com/users/alexwlchan/following{/other_user}", "gists_url": "https://api.github.com/users/alexwlchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexwlchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexwlchan/subscriptions", "organizations_url": "https://api.github.com/users/alexwlchan/orgs", "repos_url": "https://api.github.com/users/alexwlchan/repos", "events_url": "https://api.github.com/users/alexwlchan/events{/privacy}", "received_events_url": "https://api.github.com/users/alexwlchan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 590515268, "node_id": "MDU6TGFiZWw1OTA1MTUyNjg=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/flaky-tests", "name": "flaky-tests", "color": "5319e7", "default": false, "description": "for when our tests only sometimes pass"}, {"id": 602737425, "node_id": "MDU6TGFiZWw2MDI3Mzc0MjU=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/tests/build/CI", "name": "tests/build/CI", "color": "fbca04", "default": false, "description": "about testing or deployment *of* Hypothesis"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-22T09:37:47Z", "updated_at": "2017-05-23T09:36:48Z", "closed_at": "2017-05-23T09:35:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A couple of times now, we've had Travis runs where just this test fails. Restarting the job usually clears it up, but it's part of a 20+ minute job, so it would be nice if we didn't have to run it twice.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/414/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/414/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/402", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/402/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/402/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/402", "id": 194992033, "node_id": "MDU6SXNzdWUxOTQ5OTIwMzM=", "number": 402, "title": "Failures in teardown_example trigger an unhandled hypothesis exception", "user": {"login": "exarkun", "id": 254565, "node_id": "MDQ6VXNlcjI1NDU2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/254565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exarkun", "html_url": "https://github.com/exarkun", "followers_url": "https://api.github.com/users/exarkun/followers", "following_url": "https://api.github.com/users/exarkun/following{/other_user}", "gists_url": "https://api.github.com/users/exarkun/gists{/gist_id}", "starred_url": "https://api.github.com/users/exarkun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exarkun/subscriptions", "organizations_url": "https://api.github.com/users/exarkun/orgs", "repos_url": "https://api.github.com/users/exarkun/repos", "events_url": "https://api.github.com/users/exarkun/events{/privacy}", "received_events_url": "https://api.github.com/users/exarkun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-12T14:45:52Z", "updated_at": "2017-12-13T03:45:07Z", "closed_at": "2017-12-13T03:45:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider\r\n\r\n```\r\nfrom hypothesis import given, strategies\r\n\r\nfrom unittest import TestCase\r\n\r\nclass DemoTests(TestCase):\r\n    def teardown_example(self, ignored):\r\n        if getattr(self, \"ran\", False):\r\n            self.fail(\"oh no bad stuff\")\r\n\r\n    @given(strategies.integers())\r\n    def test_demo(self, i):\r\n        self.ran = True\r\n```\r\n\r\n(this looks a little weird but it's meant to be a minimal representative example of how teardown_example might be used to make hypothesis work with testtools' `expectThat` feature - which is meant to fail the test after the test method finishes and not interrupt it with an exception)\r\n\r\nThis fails with:\r\n\r\n```\r\n$ trial demo.py\r\ndemo\r\n  DemoTests\r\n    test_demo ...                                                       [ERROR]\r\n\r\n===============================================================================\r\n[ERROR]\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python2.7/unittest/case.py\", line 329, in run\r\n    testMethod()\r\n  File \"demo.py\", line 11, in test_demo\r\n    def test_demo(self, i):\r\n  File \".../hypothesis/core.py\", line 476, in wrapped_test\r\n    runner.run()\r\n  File \".../hypothesis/internal/conjecture/engine.py\", line 191, in run\r\n    self._run()\r\n  File \".../hypothesis/internal/conjecture/engine.py\", line 392, in _run\r\n    self.last_data.buffer[v:]\r\n  File \".../hypothesis/internal/conjecture/engine.py\", line 176, in incorporate_new_buffer\r\n    self.test_function(data)\r\n  File \".../hypothesis/internal/conjecture/engine.py\", line 81, in test_function\r\n    self._test_function(data)\r\n  File \".../hypothesis/core.py\", line 464, in evaluate_test_data\r\n    data.mark_interesting()\r\n  File \".../hypothesis/internal/conjecture/data.py\", line 166, in mark_interesting\r\n    self.__assert_not_frozen('mark_interesting')\r\n  File \".../hypothesis/internal/conjecture/data.py\", line 82, in __assert_not_frozen\r\n    name,))\r\nhypothesis.errors.Frozen: Cannot call mark_interesting on frozen TestData\r\n\r\ndemo.DemoTests.test_demo\r\n-------------------------------------------------------------------------------\r\nRan 1 tests in 0.251s\r\n\r\nFAILED (errors=1)\r\n```\r\n\r\nUsing Hypothesis 3.6.0, Python 2.7.12.", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/402/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/402/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/377", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/377/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/377/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/377", "id": 183643405, "node_id": "MDU6SXNzdWUxODM2NDM0MDU=", "number": 377, "title": "pytest function scoped fixtures should run once per example, not once per test", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 1362299252, "node_id": "MDU6TGFiZWwxMzYyMjk5MjUy", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/interop", "name": "interop", "color": "00c4a6", "default": false, "description": "how to play nicely with other packages"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2016-10-18T10:08:21Z", "updated_at": "2020-03-01T12:26:13Z", "closed_at": "2020-02-29T22:01:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Because of the way Hypothesis just exposes a single test function, pytest just runs its fixtures once for that function.\n\nThis is a long running problem with Hypothesis's interaction with pytest and there is [an open bug about it on the pytest side too](https://github.com/pytest-dev/pytest/issues/916).\n\nFixing this is tricky. The [fixtures-integration](https://github.com/HypothesisWorks/hypothesis-python/tree/fixtures-integration) branch has a partial prototype which makes _some_ progress towards making it work, but it's very far from complete and has a number of issues which are likely to need substantial work to fix.\n\nI [am currently seeking funding to work on this ticket](http://hypothesis.works/articles/pytest-integration-sponsorship/) and it is unlikely to make much progress without said funding.\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/377/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/377/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/320", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/320/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/320/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/320/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/320", "id": 154211085, "node_id": "MDU6SXNzdWUxNTQyMTEwODU=", "number": 320, "title": "docs: streaming() example raises InvalidArgument", "user": {"login": "wjt", "id": 86760, "node_id": "MDQ6VXNlcjg2NzYw", "avatar_url": "https://avatars.githubusercontent.com/u/86760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wjt", "html_url": "https://github.com/wjt", "followers_url": "https://api.github.com/users/wjt/followers", "following_url": "https://api.github.com/users/wjt/following{/other_user}", "gists_url": "https://api.github.com/users/wjt/gists{/gist_id}", "starred_url": "https://api.github.com/users/wjt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wjt/subscriptions", "organizations_url": "https://api.github.com/users/wjt/orgs", "repos_url": "https://api.github.com/users/wjt/repos", "events_url": "https://api.github.com/users/wjt/events{/privacy}", "received_events_url": "https://api.github.com/users/wjt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 587683606, "node_id": "MDU6TGFiZWw1ODc2ODM2MDY=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/docs", "name": "docs", "color": "c2e0c6", "default": false, "description": "documentation could *always* be better"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-11T10:32:38Z", "updated_at": "2017-04-25T16:34:09Z", "closed_at": "2017-04-25T16:34:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [Infinite Streams](http://hypothesis.readthedocs.io/en/latest/data.html#infinite-streams) section of the data generation docs contains the following example:\n\n``` python\n>>> from hypothesis.strategies import streaming, integers\n>>> x = streaming(integers()).example()\n>>> x\nStream(...)\n```\n\nBut if I run the first two incantations in a fresh Python 2.7.11 virtualenv with hypothesis 3.1.3, I instead see the following:\n\n``` python\n>>> from hypothesis.strategies import streaming, integers\n>>> x = streaming(integers()).example()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/searchstrategy/strategies.py\", line 115, in example\n    database=None\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/core.py\", line 648, in find\n    runner.run()\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 168, in run\n    self._run()\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 287, in _run\n    self.new_buffer()\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 61, in new_buffer\n    self.test_function(self.last_data)\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 68, in test_function\n    self._test_function(data)\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/core.py\", line 614, in template_condition\n    result = data.draw(search)\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/internal/conjecture/data.py\", line 97, in draw\n    ) % (strategy,))\nhypothesis.errors.InvalidArgument: Cannot use strategy streaming(integers()) within a call to find (presumably because it would be invalid after the call had ended).\n```\n\nThe [changelog for 3.0.0](http://hypothesis.readthedocs.io/en/latest/changes.html?highlight=streaming#id10) mentions that:\n\n> - choices and streaming strategies may no longer be used with find().\n\nand sure enough, `example()` is implemented in terms of `find()`. Is there another way to interactively experiment with a strategy that the documentation could suggest here?\n\nThe following `streaming()` example, from slightly further down the same section, fails differently:\n\n``` python\n>>> streaming(int).example()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/searchstrategy/strategies.py\", line 115, in example\n    database=None\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/core.py\", line 648, in find\n    runner.run()\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 168, in run\n    self._run()\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 287, in _run\n    self.new_buffer()\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 61, in new_buffer\n    self.test_function(self.last_data)\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/internal/conjecture/engine.py\", line 68, in test_function\n    self._test_function(data)\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/core.py\", line 614, in template_condition\n    result = data.draw(search)\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/internal/conjecture/data.py\", line 93, in draw\n    if self.is_find and not strategy.supports_find:\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/searchstrategy/deferred.py\", line 56, in supports_find\n    return self.wrapped_strategy.supports_find\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/searchstrategy/deferred.py\", line 68, in wrapped_strategy\n    **self.__kwargs\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/strategies.py\", line 581, in streaming\n    check_strategy(elements)\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/strategies.py\", line 1033, in check_strategy\n    check_type(SearchStrategy, arg)\n  File \"/tmp/tmp.AuVdBj9Wer/lib/python2.7/site-packages/hypothesis/strategies.py\", line 1029, in check_type\n    'Expected %s but got %r' % (typ_string, arg,))\nhypothesis.errors.InvalidArgument: Expected SearchStrategy but got <type 'int'>\n```\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/320/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/320/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/313", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/313/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/313/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/313/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/313", "id": 148824718, "node_id": "MDU6SXNzdWUxNDg4MjQ3MTg=", "number": 313, "title": "Verbose mode doesn't print explicit examples", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-04-16T07:00:18Z", "updated_at": "2017-06-17T15:51:43Z", "closed_at": "2017-06-17T15:51:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "To reproduce: Add a test with an example decorator, try running it in verbose mode, note that it doesn't print \"Trying example:\" for the ones provided by the decorators.\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/313/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/313/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/290", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/290/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/290/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/290", "id": 136391027, "node_id": "MDU6SXNzdWUxMzYzOTEwMjc=", "number": 290, "title": "Composite strategy doesn't copies keyword-only arguments", "user": {"login": "kxepal", "id": 785983, "node_id": "MDQ6VXNlcjc4NTk4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/785983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kxepal", "html_url": "https://github.com/kxepal", "followers_url": "https://api.github.com/users/kxepal/followers", "following_url": "https://api.github.com/users/kxepal/following{/other_user}", "gists_url": "https://api.github.com/users/kxepal/gists{/gist_id}", "starred_url": "https://api.github.com/users/kxepal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kxepal/subscriptions", "organizations_url": "https://api.github.com/users/kxepal/orgs", "repos_url": "https://api.github.com/users/kxepal/repos", "events_url": "https://api.github.com/users/kxepal/events{/privacy}", "received_events_url": "https://api.github.com/users/kxepal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2016-02-25T13:42:57Z", "updated_at": "2017-05-23T03:13:21Z", "closed_at": "2017-05-22T15:07:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```\n>>> import hypothesis\n>>> from hypothesis.strategies import composite\n>>> @composite\n... def func(draw, *, kwarg): pass\n>>> func(kwarg=1)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: func() got an unexpected keyword argument 'kwarg'\n```\n\nAnd it seems true:\n\n```\n>>> import inspect\n>>> inspect.getargspec(func)  # nothing good\nArgSpec(args=[], varargs=None, keywords=None, defaults=None)\n```\n\nMeanwhile:\n\n```\n>>> @composite\n... def func2(draw, *, kwarg, **rest): pass\n>>> func2(kwarg=1)  # ok\n```\n\nLet's try a simpler case:\n\n```\n>>> def cnuf(*, kwarg): pass\n... \n>>> inspect.getargspec(cnuf)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib64/python3.5/inspect.py\", line 1045, in getargspec\n    raise ValueError(\"Function has keyword-only arguments or annotations\"\nValueError: Function has keyword-only arguments or annotations, use getfullargspec() API which can support them\n>>> inspect.getfullargspec(cnuf)\nFullArgSpec(args=[], varargs=None, varkw=None, defaults=None, kwonlyargs=['kwarg'], kwonlydefaults=None, annotations={})\n```\n\nAha! So `inspect.getargspec` cannot see keyword-only arguments. And suddenly `composite` strategy [uses](https://github.com/DRMacIver/hypothesis/blob/3.0.4/src/hypothesis/strategies.py#L774) it for introspection.\n\nWould it be safe to replace `getargspec` with `getfullargspec`?\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/290/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/290/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/242", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/242/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/242/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/242", "id": 122301131, "node_id": "MDU6SXNzdWUxMjIzMDExMzE=", "number": 242, "title": "`IOError` on `import hypothesis.strategies`", "user": {"login": "rmoehn", "id": 311879, "node_id": "MDQ6VXNlcjMxMTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/311879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmoehn", "html_url": "https://github.com/rmoehn", "followers_url": "https://api.github.com/users/rmoehn/followers", "following_url": "https://api.github.com/users/rmoehn/following{/other_user}", "gists_url": "https://api.github.com/users/rmoehn/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmoehn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmoehn/subscriptions", "organizations_url": "https://api.github.com/users/rmoehn/orgs", "repos_url": "https://api.github.com/users/rmoehn/repos", "events_url": "https://api.github.com/users/rmoehn/events{/privacy}", "received_events_url": "https://api.github.com/users/rmoehn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}, {"id": 587683606, "node_id": "MDU6TGFiZWw1ODc2ODM2MDY=", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/docs", "name": "docs", "color": "c2e0c6", "default": false, "description": "documentation could *always* be better"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2015-12-15T15:46:53Z", "updated_at": "2018-04-05T11:29:34Z", "closed_at": "2018-04-05T11:29:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running Hypothesis in a Docker container. On the first run, everything works fine. One the second run I get this:\r\n\r\n```python-traceback\r\nTraceback (most recent call last):\r\n[\u2026]\r\n  File \"[my_test].py\", line 18, in <module>\r\n    import hypothesis.strategies as st\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/strategies.py\", line 71, in <module>\r\n    @defines_strategy\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/strategies.py\", line 51, in defines_strategy\r\n    @proxies(strategy_definition)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/internal/reflection.py\", line 497, in accept\r\n    copy_argspec(target.__name__, getargspec(target))(proxy)))\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/internal/reflection.py\", line 465, in accept\r\n    u'invocation': u', '.join(invocation_parts)\r\n  File \"/usr/local/lib/python2.7/dist-packages/hypothesis/internal/reflection.py\", line 372, in source_exec_as_module\r\n    f = open(temporary_filepath, u'w')\r\nIOError: [Errno 2] No such file or directory: u'/.hypothesis/eval_source/hypothesis_temporary_module_9abd2800900986980ad8f68a32f0005fc05800d8_53a57e8c-7a3a-4e9a-9a0c-8a8641d521d4.py'\r\n```\r\n\r\nThe immediate cause of the `IOError` appears to be that Hypothesis tries to create a directory directly beneath `/`. This has to do with my setup, so I don't blame you. My concern is that Hypothesis tries to create a directory somewhere in the file system on module load. This strikes me as unorthodox.\r\n\r\nSpecifically, [`hypothesis_home_dir()`](https://github.com/DRMacIver/hypothesis/blob/v1.13.0/src/hypothesis/settings.py#L51) creates a `.hypothesis` directory either under a directory specified by the undocumented environment variable `HYPOTHESIS_STORAGE_DIRECTORY` or under the current working directory. The latter case is what ultimately causes the above exception. The former case I now use to redirect the `.hypothesis` creation to some other place. This, however, is a nasty workaround.\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/242/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/242/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/198", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/198/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/198/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/198", "id": 111022028, "node_id": "MDU6SXNzdWUxMTEwMjIwMjg=", "number": 198, "title": "given's interaction with mock.patch decorator is broken in almost every way", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": {"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Zac-HD", "id": 12229877, "node_id": "MDQ6VXNlcjEyMjI5ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12229877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zac-HD", "html_url": "https://github.com/Zac-HD", "followers_url": "https://api.github.com/users/Zac-HD/followers", "following_url": "https://api.github.com/users/Zac-HD/following{/other_user}", "gists_url": "https://api.github.com/users/Zac-HD/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zac-HD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zac-HD/subscriptions", "organizations_url": "https://api.github.com/users/Zac-HD/orgs", "repos_url": "https://api.github.com/users/Zac-HD/repos", "events_url": "https://api.github.com/users/Zac-HD/events{/privacy}", "received_events_url": "https://api.github.com/users/Zac-HD/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2015-10-12T17:41:13Z", "updated_at": "2018-10-03T12:47:04Z", "closed_at": "2018-10-03T12:47:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "@waynew is trying to use unitest.mock's patch decorator together with Hypothesis's given and py.test's fixtures. He's not having a very good time of it, which is unsurprising because this combination almost entirely doesn't work.\r\n\r\nThe first way it goes wrong:\r\n\r\nYou can mostly use mock.patch with given if you don't care about py.test fixtures. For example, the following will work:\r\n\r\n``` python\r\nimport thing\r\nimport pytest\r\nimport hypothesis.strategies as st\r\nfrom hypothesis import given\r\nfrom unittest import mock\r\n\r\n@mock.patch('thing.fnord')\r\n@given(thing=st.text())\r\ndef test_a_thing(fnord, thing):\r\n    pass\r\n```\r\n\r\nBut if you try to add an extra named argument then everything will go wrong: Hypothesis will expose something with just _args and *_kwargs because that's what mock.patch gives it, so py.test won't be able to find the fixture.\r\n\r\nIt's unclear that there is a correct thing Hypothesis could do at this point. mock.patch _is_ using functools.wrap, so in Python 3 we could propagate the **wrapped** attribute, but AFAIK there's no equivalent in Python 2. Additionally, note that the signature of the wrapped function is not correct, because the first arguments are filled in manually. Historically, propagating wrapped has broken py.test (https://github.com/pytest-dev/pytest/issues/677), but this may be affected differently now?\r\n\r\nAnyway: Can of worms, unclear there's a correct thing to do here.\r\n\r\nThe second way it goes wrong is more amusing and is _probably_ fixable (update: was fixed in #779), or at least can be mitigated:\r\n\r\n``` python\r\nimport thing\r\nimport pytest\r\nimport hypothesis.strategies as st\r\nfrom hypothesis import given\r\nfrom unittest import mock\r\n\r\n@given(thing=st.text())\r\n@mock.patch('thing.fnord')\r\ndef test_a_thing(fnord, thing):\r\n    assert False\r\n```\r\n\r\nThis test passes.\r\n\r\nWhy does this test pass? It passes because Hypothesis can't currently tell the difference between being called as a bound method and just having an argument explicitly passed to it as the first positional argument. This means that it thinks that the mock is self and begins the shenanigans for [the executor API](http://hypothesis.readthedocs.org/en/latest/details.html#custom-function-execution). It looks for a method called execute_example, finds it, and then calls it with the test function.\r\n\r\nIt then of course immediately returns, never executing the test.\r\n\r\nPossible ways to work around:\r\n- Have given return a descriptor, so that we can actually detect if it's been bound as a method.\r\n- Explicitly check for being passed a mock instance as self (I don't want to do this one, but it would work)\r\n- Tell people not to do this, or to use autospec when using patch.\r\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/198/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/184", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/184/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/184/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/184", "id": 109578725, "node_id": "MDU6SXNzdWUxMDk1Nzg3MjU=", "number": 184, "title": "Hypothesis cannot be installed by `easy_install`", "user": {"login": "jerith", "id": 43731, "node_id": "MDQ6VXNlcjQzNzMx", "avatar_url": "https://avatars.githubusercontent.com/u/43731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jerith", "html_url": "https://github.com/jerith", "followers_url": "https://api.github.com/users/jerith/followers", "following_url": "https://api.github.com/users/jerith/following{/other_user}", "gists_url": "https://api.github.com/users/jerith/gists{/gist_id}", "starred_url": "https://api.github.com/users/jerith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jerith/subscriptions", "organizations_url": "https://api.github.com/users/jerith/orgs", "repos_url": "https://api.github.com/users/jerith/repos", "events_url": "https://api.github.com/users/jerith/events{/privacy}", "received_events_url": "https://api.github.com/users/jerith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2015-10-02T21:54:07Z", "updated_at": "2017-05-14T07:47:46Z", "closed_at": "2017-05-14T07:47:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sit back, dear reader, while I tell you a tale of sorrow and software, packaging and pain.\n\nA long time ago, when Python was new and the world was a simpler place, before `pip` roamed the earth, `easy_install` was the way to install packages. Its legacy lives on in `setuptools`, which still uses it in various situations.\n\nHere is what happens when various `setuptools` commands are invoked:\n\n`python setup.py egg_info` creates the `hypothesis.egg-info/` dir and fills it with a tasteful assortment of package metadata.\n`python setup.py sdist` builds egg-info, then constructs a source package that contains it along with the code.\n`python setup.py bdist_egg` builds egg-info, then constructs an egg zipfile that contains it along with the code.\n`python setup.py install` builds egg-info, then constructs an egg zipfile, then installs the egg it just built.\n`easy_install hypothesis` downloads the latest source tarball, extracts it, builds an egg zipfile from its contents, and then installs the egg it just built.\n\nThe observant among you may have noticed that one of these operations does not build egg-info. It's unnecessary when you're installing a source package, because the source package already contains the egg-info that was built during `python setup.py sdist`.\n\nAs mentioned above, when `easy_install` installs a source package, it does so by building an egg and then installing that egg. Specifically, it builds the egg from the contents of the source package and then looks in the location it put the freshly-built egg for a suitable egg to install. _And sometimes it doesn't find one._\n\nLet us now take a brief digression to understand how `setuptools` finds packages to install. Among the various mechanisms is a handler for zipfiles. This explicitly ignores zipfiles that end in `.whl`, because those are wheels. After that, it looks for either egg metadata (in which case it's found an egg) or a directory ending in `.egg` (which it then treats as a potential nested egg and examines further).\n\nIn order to build an egg, `setuptools` copies the egg-info and source files to a build dir, compiles the relevant source, and then zips up the build dir and gives the resulting archive a filename ending in `.egg`. Remember that when `setuptools` builds the egg from an sdist, it assumes the egg-info is already in the source tarball.\n\nWe now have a condition under which `setuptools` can fail to find an egg it has just built. All one needs is a source package that does not contain egg-info (or does not contain it in the location `setuptools` expects it).\n\nFor Hypothesis 1.11.4, `setuptools` expects the tarball to contain `hypothesis-1.11.4/hypothesis.egg-info/PKG-INFO`. What the source tarball actually contains is `hypothesis-1.11.4/src/hypothesis.egg-info/PKG-INFO`. Therefore, the egg it builds during installation lacks the required metadata and is treated as a non-egg zipfile. Installation then fails with a perfectly accurate error message that is completely incomprehensible without knowledge of the above.\n\nThe solution here is to make sure that the egg-info gets put in the place `setuptools` expects to find it in the source tarball.\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/184/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/184/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/181", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/181/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/181/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/181", "id": 108823770, "node_id": "MDU6SXNzdWUxMDg4MjM3NzA=", "number": 181, "title": "On Python 3, Hypothesis will incorrectly reject functions with non-ascii argument names", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-29T08:53:38Z", "updated_at": "2015-11-24T17:43:04Z", "closed_at": "2015-11-24T17:42:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "``` python\nfrom hypothesis import given, strategies as st\n\n@given(\u03bc=st.integers())\ndef test_hi(\u03bc):\n    assert \u03bc > 1\n```\n\nerrors with:\n\n```\ntest_foo.py:4: in <module>\n    @given(\u03bc=st.integers())\nprojects/hypothesis/src/hypothesis/core.py:459: in run_test_with_generator\n    test.__name__, argspec\nprojects/hypothesis/src/hypothesis/internal/reflection.py:415: in copy_argspec\n    check_valid_identifier(a)\nprojects/hypothesis/src/hypothesis/internal/reflection.py:339: in check_valid_identifier\n    (identifier,))\nE   ValueError: '\u03bc' is not a valid python identifier\n```\n\nAs per [PEP 3131](https://www.python.org/dev/peps/pep-3131/), \u03bc in fact _is_ a valid Python identifier.\n\nThis is almost certainly masking other things that can and will go wrong when that test is removed.\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/181/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/128", "repository_url": "https://api.github.com/repos/HypothesisWorks/hypothesis", "labels_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/128/comments", "events_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/128/events", "html_url": "https://github.com/HypothesisWorks/hypothesis/issues/128", "id": 102020316, "node_id": "MDU6SXNzdWUxMDIwMjAzMTY=", "number": 128, "title": "Example unexpectedly reused after upgrade", "user": {"login": "inglesp", "id": 28734, "node_id": "MDQ6VXNlcjI4NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/28734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inglesp", "html_url": "https://github.com/inglesp", "followers_url": "https://api.github.com/users/inglesp/followers", "following_url": "https://api.github.com/users/inglesp/following{/other_user}", "gists_url": "https://api.github.com/users/inglesp/gists{/gist_id}", "starred_url": "https://api.github.com/users/inglesp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inglesp/subscriptions", "organizations_url": "https://api.github.com/users/inglesp/orgs", "repos_url": "https://api.github.com/users/inglesp/repos", "events_url": "https://api.github.com/users/inglesp/events{/privacy}", "received_events_url": "https://api.github.com/users/inglesp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 31355955, "node_id": "MDU6TGFiZWwzMTM1NTk1NQ==", "url": "https://api.github.com/repos/HypothesisWorks/hypothesis/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": "something is clearly wrong here"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-08-19T23:08:41Z", "updated_at": "2017-05-31T04:03:43Z", "closed_at": "2017-05-31T04:03:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After upgrading from 1.10.1 to 1.10.2, an example that had been found by 1.10.1 was reused, even though 1.10.2 was able to find a much simpler example.  According to @DRMacIver on IRC, this is unexpected.  Deleting the `.hypothesis` directory fixed the problem.\n\nHere's a console log:\n\n```\n$ rm -rf .hypothesis/\n$ pip install hypothesis==1.10.1\nCollecting hypothesis==1.10.1\nInstalling collected packages: hypothesis\nSuccessfully installed hypothesis-1.10.1\n$ python\nPython 3.4.2 (default, Oct 19 2014, 17:52:17) \n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.51)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from hypothesis import __version__\n>>> __version__\n'1.10.1'\n>>> from hypothesis import find\n>>> from hypothesis.strategies import integers, lists, sampled_from\n>>> strategy = integers(min_value=0, max_value=10).flatmap(lambda w: lists(lists(sampled_from('ab'), min_size=w, max_size=w)))\n>>> find(strategy, lambda x: ['a', 'b'] in x)\n[['a', 'a'], ['b', 'b'], ['b', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'b'], ['a', 'a'], ['a', 'a'], ['a', 'a']]\n>>> \n$ ls .hypothesis/\neval_source examples.db\n$ sqlite3 .hypothesis/examples.db \n-- Loading resources from /Users/peteringlesby/.sqliterc\n\nSQLite version 3.7.13 2012-07-17 17:46:21\nEnter \".help\" for instructions\nEnter SQL statements terminated with a \";\"\nsqlite> .schema\nCREATE TABLE hypothesis_data_mapping(\n                    key text,\n                    value text,\n                    unique(key, value)\n                );\nsqlite> select * from hypothesis_data_mapping;\nkey                                     value                                                                                                                                                                             \n--------------------------------------  ---------------------------------------------------------------------------------------------                                                                                     \nfind(8695f2ab8a8391467c31bd6905de433f)  [\"2\", [5758837000167926026, 14393960490262869176, [[[0]], [[0, 0], [1, 1], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 1], [0, 0], [0, 0], [0, 0]], \"0\"]]]\nsqlite> ^D\n$ pip install hypothesis==1.10.2\nCollecting hypothesis==1.10.2\nInstalling collected packages: hypothesis\n  Found existing installation: hypothesis 1.10.1\n    Uninstalling hypothesis-1.10.1:\n      Successfully uninstalled hypothesis-1.10.1\nSuccessfully installed hypothesis-1.10.2\n$ python\nPython 3.4.2 (default, Oct 19 2014, 17:52:17) \n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.51)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from hypothesis import __version__\n>>> __version__\n'1.10.2'\n>>> from hypothesis import find\n>>> from hypothesis.strategies import integers, lists, sampled_from\n>>> strategy = integers(min_value=0, max_value=10).flatmap(lambda w: lists(lists(sampled_from('ab'), min_size=w, max_size=w)))\n>>> find(strategy, lambda x: ['a', 'b'] in x)\n[['a', 'a'], ['b', 'b'], ['b', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'a'], ['a', 'b'], ['a', 'a'], ['a', 'a'], ['a', 'a']]\n>>> \n$ rm -rf .hypothesis/\n$ python\nPython 3.4.2 (default, Oct 19 2014, 17:52:17) \n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.51)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from hypothesis import find\n>>> from hypothesis.strategies import integers, lists, sampled_from\n>>> strategy = integers(min_value=0, max_value=10).flatmap(lambda w: lists(lists(sampled_from('ab'), min_size=w, max_size=w)))\n>>> find(strategy, lambda x: ['a', 'b'] in x)\n[['a', 'b']]\n```\n", "reactions": {"url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/HypothesisWorks/hypothesis/issues/128/timeline", "performed_via_github_app": null, "state_reason": "completed"}]