[{"url": "https://api.github.com/repos/getmoto/moto/issues/6254", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6254/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6254/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6254/events", "html_url": "https://github.com/getmoto/moto/issues/6254", "id": 1683114456, "node_id": "I_kwDOAH5NfM5kUknY", "number": 6254, "title": "Publishing to a FIFO SNS topic with MessageDeduplicationId fails", "user": {"login": "niklasj", "id": 793228, "node_id": "MDQ6VXNlcjc5MzIyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/793228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niklasj", "html_url": "https://github.com/niklasj", "followers_url": "https://api.github.com/users/niklasj/followers", "following_url": "https://api.github.com/users/niklasj/following{/other_user}", "gists_url": "https://api.github.com/users/niklasj/gists{/gist_id}", "starred_url": "https://api.github.com/users/niklasj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niklasj/subscriptions", "organizations_url": "https://api.github.com/users/niklasj/orgs", "repos_url": "https://api.github.com/users/niklasj/repos", "events_url": "https://api.github.com/users/niklasj/events{/privacy}", "received_events_url": "https://api.github.com/users/niklasj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-04-25T12:51:22Z", "updated_at": "2023-04-25T15:33:59Z", "closed_at": "2023-04-25T15:33:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As of moto 4.1.7 I get an exception when publishing to a FIFO topic when content-based deduplication is disabled.\r\n\r\nHere's a snippet to demonstrate the problem:\r\n```python\r\n@mock_sns\r\n@mock_sqs\r\ndef test():\r\n    sns = boto3.resource(\"sns\", region_name=\"eu-north-1\")\r\n    topic = sns.create_topic(Name=\"topic.fifo\", Attributes={\"FifoTopic\": \"true\"})\r\n    sqs = boto3.resource(\"sqs\", region_name=\"eu-north-1\")\r\n    queue = sqs.create_queue(QueueName=\"queue.fifo\", Attributes={\"FifoQueue\": \"true\"})\r\n    topic.subscribe(Protocol=\"sqs\", Endpoint=queue.attributes[\"QueueArn\"], Attributes={\"RawMessageDelivery\": \"true\"})\r\n    topic.publish(Message=\"foo\", MessageGroupId=\"groupid\", MessageDeduplicationId=\"dedupid\")\r\n```\r\n\r\nThe expected behavior is for the MessageDeduplicationId to be passed along to the SQS queue. Instead it fails with the following traceback:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/njanlert/src/err.py\", line 16, in <module>\r\n    test()\r\n  File \"/Users/njanlert/src/env/lib/python3.11/site-packages/moto/core/models.py\", line 124, in wrapper\r\n    result = func(*args, **kwargs)\r\n             ^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/njanlert/src/env/lib/python3.11/site-packages/moto/core/models.py\", line 124, in wrapper\r\n    result = func(*args, **kwargs)\r\n             ^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/njanlert/src/err.py\", line 13, in test\r\n    topic.publish(Message=\"foo\", MessageGroupId=\"groupid\", MessageDeduplicationId=\"dedupid\")\r\n  File \"/Users/njanlert/src/env/lib/python3.11/site-packages/boto3/resources/factory.py\", line 580, in do_action\r\n    response = action(self, *args, **kwargs)\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/njanlert/src/env/lib/python3.11/site-packages/boto3/resources/action.py\", line 88, in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/njanlert/src/env/lib/python3.11/site-packages/botocore/client.py\", line 530, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/njanlert/src/env/lib/python3.11/site-packages/botocore/client.py\", line 960, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (InvalidParameterValue) when calling the Publish operation: The queue should either have ContentBasedDeduplication enabled or MessageDeduplicationId provided explicitly\r\n```\r\n\r\nVersion info:\r\n```\r\nboto3==1.26.119\r\nbotocore==1.29.119\r\nmoto==4.1.8\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6254/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6254/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6234", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6234/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6234/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6234/events", "html_url": "https://github.com/getmoto/moto/issues/6234", "id": 1675195983, "node_id": "I_kwDOAH5NfM5j2XZP", "number": 6234, "title": "Checksum generation not implemented when copying files in S3", "user": {"login": "bafonso", "id": 777910, "node_id": "MDQ6VXNlcjc3NzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/777910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bafonso", "html_url": "https://github.com/bafonso", "followers_url": "https://api.github.com/users/bafonso/followers", "following_url": "https://api.github.com/users/bafonso/following{/other_user}", "gists_url": "https://api.github.com/users/bafonso/gists{/gist_id}", "starred_url": "https://api.github.com/users/bafonso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bafonso/subscriptions", "organizations_url": "https://api.github.com/users/bafonso/orgs", "repos_url": "https://api.github.com/users/bafonso/repos", "events_url": "https://api.github.com/users/bafonso/events{/privacy}", "received_events_url": "https://api.github.com/users/bafonso/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "rafcio19", "id": 6391682, "node_id": "MDQ6VXNlcjYzOTE2ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/6391682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafcio19", "html_url": "https://github.com/rafcio19", "followers_url": "https://api.github.com/users/rafcio19/followers", "following_url": "https://api.github.com/users/rafcio19/following{/other_user}", "gists_url": "https://api.github.com/users/rafcio19/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafcio19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafcio19/subscriptions", "organizations_url": "https://api.github.com/users/rafcio19/orgs", "repos_url": "https://api.github.com/users/rafcio19/repos", "events_url": "https://api.github.com/users/rafcio19/events{/privacy}", "received_events_url": "https://api.github.com/users/rafcio19/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rafcio19", "id": 6391682, "node_id": "MDQ6VXNlcjYzOTE2ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/6391682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafcio19", "html_url": "https://github.com/rafcio19", "followers_url": "https://api.github.com/users/rafcio19/followers", "following_url": "https://api.github.com/users/rafcio19/following{/other_user}", "gists_url": "https://api.github.com/users/rafcio19/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafcio19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafcio19/subscriptions", "organizations_url": "https://api.github.com/users/rafcio19/orgs", "repos_url": "https://api.github.com/users/rafcio19/repos", "events_url": "https://api.github.com/users/rafcio19/events{/privacy}", "received_events_url": "https://api.github.com/users/rafcio19/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2023-04-19T15:57:33Z", "updated_at": "2023-04-22T20:45:02Z", "closed_at": "2023-04-22T20:45:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "When copying keys Checksum is not generated. For example, after copying using this method, the final file does not have a Checksum entry.\r\n\r\n```\r\nresponse_copy = s3.Object(bucket_name, dst_key).copy(\r\n            CopySource=copy_source, ExtraArgs={\"ChecksumAlgorithm\": \"SHA256\"}\r\n        )\r\n\r\nresponse_attr = s3.meta.client.get_object_attributes(\r\n                Bucket=bucket_name, Key=dst_key, ObjectAttributes=[\"Checksum\"]\r\n            )\r\n```\r\n\r\nresponse_attr  in pytest is:\r\n\r\n```dict\r\n {'ResponseMetadata': {'RequestId': 'Y0OZll63fMwqzDUj5qhjmQdBGeFsqIoiRAo216plM35LBcmxNT53', 'HTTPStatusCode': 200, 'HTTPHeaders': {'last-modified': '2023-04-19T15:46:14.000Z', 'x-amzn-requestid': 'Y0OZll63fMwqzDUj5qhjmQdBGeFsqIoiRAo216plM35LBcmxNT53'}, 'RetryAttempts': 0}, 'LastModified': datetime.datetime(2023, 4, 19, 15, 46, 14, tzinfo=tzlocal())}\r\n```\r\n\r\nRunning on aws we get the dictionary entry for Checksum info:\r\n\r\n```dict\r\n{'ResponseMetadata': {'RequestId': '7ZSMMVANANPC9PDH', 'HostId': 'yXby/xpto', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amz-id-2': 'yXby/Xzi62IcjPEu3Jvq10lbCLSyDPsKqiCBv2A81abVjzGg0kMt/xpto', 'x-amz-request-id': 'xxx', 'date': 'Wed, 19 Apr 2023 15:54:30 GMT', 'x-amz-version-id': 'xxx', 'last-modified': 'Wed, 19 Apr 2023 15:54:30 GMT', 'server': 'AmazonS3', 'content-length': '244'}, 'RetryAttempts': 0}, 'LastModified': datetime.datetime(2023, 4, 19, 15, 54, 30, tzinfo=tzutc()), 'VersionId': 'eZrvRTSSngL0C2Sv7VrAoqpL56FoKqni', 'Checksum': {'ChecksumSHA256': 'mNhap9zTqAZr1bMgh5IyVQFQRhTJxx='}}\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6234/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6234/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6233", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6233/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6233/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6233/events", "html_url": "https://github.com/getmoto/moto/issues/6233", "id": 1675126479, "node_id": "I_kwDOAH5NfM5j2GbP", "number": 6233, "title": "SSM `describe_parameters` `ParameterFilters` fails when `Values` is not provided", "user": {"login": "nerdyman", "id": 4908432, "node_id": "MDQ6VXNlcjQ5MDg0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4908432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nerdyman", "html_url": "https://github.com/nerdyman", "followers_url": "https://api.github.com/users/nerdyman/followers", "following_url": "https://api.github.com/users/nerdyman/following{/other_user}", "gists_url": "https://api.github.com/users/nerdyman/gists{/gist_id}", "starred_url": "https://api.github.com/users/nerdyman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nerdyman/subscriptions", "organizations_url": "https://api.github.com/users/nerdyman/orgs", "repos_url": "https://api.github.com/users/nerdyman/repos", "events_url": "https://api.github.com/users/nerdyman/events{/privacy}", "received_events_url": "https://api.github.com/users/nerdyman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-04-19T15:13:53Z", "updated_at": "2023-04-21T19:26:22Z", "closed_at": "2023-04-20T21:12:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI'm using Moto to mock the SSM client and am running into an error. One of my filters does not have a value which causes Moto to throw an error, but the real code works fine.\r\n\r\nWith this code:\r\n\r\n```py\r\npaginator = ssm.get_paginator(\"describe_parameters\")\r\n    paginated_parameters = paginator.paginate(\r\n        ParameterFilters=[\r\n            {\"Key\": \"tag:test\", \"Option\": \"Equals\", \"Values\": [\"example-tag\"]},\r\n            {\"Key\": \"tag:exists\"},\r\n        ],\r\n    )\r\n```\r\n\r\nI get the following error:\r\n\r\n```\r\nAn error occurred (InvalidFilterValue) when calling the DescribeParameters operation: The following filter values are missing : null for filter key Name.')\r\n```\r\n\r\nThe docs for [`DescribeParameters`](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_DescribeParameters.html#API_DescribeParameters_RequestParameters) say `ParameterFilters` uses an array of [`ParameterStringFilter`](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_ParameterStringFilter.html#systemsmanager-Type-ParameterStringFilter-Values) objects in which `Values` is optional.\r\n\r\nThe error looks to come from here https://github.com/getmoto/moto/blob/f1286506beb524e6bb0bd6449c0e2ff4a9cfe2d0/moto/ssm/models.py#L1439 \r\n\r\nThere might be some extra logic needed to only fail if `Filters` is used and the `Values` parameter is not required as `Filters` uses [`ParametersFilter`](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_ParametersFilter.html#systemsmanager-Type-ParametersFilter-Values) which *does* require `Values`?\r\n\r\nHopefully this is valid issue, I'm fairly new to the AWS API so might have missed something \ud83d\ude4f ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6233/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6232", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6232/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6232/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6232/events", "html_url": "https://github.com/getmoto/moto/issues/6232", "id": 1675024884, "node_id": "I_kwDOAH5NfM5j1tn0", "number": 6232, "title": "mock_s3 get_object should not return VersionId when bucket doesn't have versioning", "user": {"login": "MacHu-GWU", "id": 6800411, "node_id": "MDQ6VXNlcjY4MDA0MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/6800411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MacHu-GWU", "html_url": "https://github.com/MacHu-GWU", "followers_url": "https://api.github.com/users/MacHu-GWU/followers", "following_url": "https://api.github.com/users/MacHu-GWU/following{/other_user}", "gists_url": "https://api.github.com/users/MacHu-GWU/gists{/gist_id}", "starred_url": "https://api.github.com/users/MacHu-GWU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MacHu-GWU/subscriptions", "organizations_url": "https://api.github.com/users/MacHu-GWU/orgs", "repos_url": "https://api.github.com/users/MacHu-GWU/repos", "events_url": "https://api.github.com/users/MacHu-GWU/events{/privacy}", "received_events_url": "https://api.github.com/users/MacHu-GWU/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-04-19T14:29:11Z", "updated_at": "2023-04-21T10:57:40Z", "closed_at": "2023-04-21T10:57:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Even though the S3 document says that \"Objects that are stored in your bucket before you set the versioning state have a version ID of null.\" However, when you do [get_object](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3/client/get_object.html), if the bucket doesn't have versioning, the response doesn't have the key ``\"VersionId\"``. However, moto will return ``\"VersionId\": \"null\"`` (a string).\r\n\r\nI believe you should change this line of code https://github.com/getmoto/moto/blob/master/moto/s3/models.py#L1812", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6232/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6232/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6225", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6225/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6225/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6225/events", "html_url": "https://github.com/getmoto/moto/issues/6225", "id": 1672496272, "node_id": "I_kwDOAH5NfM5jsESQ", "number": 6225, "title": "A Different Reaction of ECS tag_resource", "user": {"login": "taeho911", "id": 56749228, "node_id": "MDQ6VXNlcjU2NzQ5MjI4", "avatar_url": "https://avatars.githubusercontent.com/u/56749228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taeho911", "html_url": "https://github.com/taeho911", "followers_url": "https://api.github.com/users/taeho911/followers", "following_url": "https://api.github.com/users/taeho911/following{/other_user}", "gists_url": "https://api.github.com/users/taeho911/gists{/gist_id}", "starred_url": "https://api.github.com/users/taeho911/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taeho911/subscriptions", "organizations_url": "https://api.github.com/users/taeho911/orgs", "repos_url": "https://api.github.com/users/taeho911/repos", "events_url": "https://api.github.com/users/taeho911/events{/privacy}", "received_events_url": "https://api.github.com/users/taeho911/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-04-18T07:12:17Z", "updated_at": "2023-04-18T13:54:10Z", "closed_at": "2023-04-18T13:54:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\nLet me report a bug found at `moto/ecs/models.py`.\r\n\r\n# Symptom\r\nWhen try to add new tags to a *_ECS cluster having no tag_*, `moto` fails to merge new tags into existing tags because of TypeError.\r\n\r\n# Expected Result\r\nThe new tags should be added to the ECS cluster as `boto3` does.\r\n\r\n# Code for Re-producing\r\n```python\r\nimport boto3\r\nfrom moto import mock_ecs\r\n\r\n@mock_ecs\r\ndef test():\r\n    client = boto3.client('ecs', region_name='us-east-1')\r\n    res = client.create_cluster(clusterName='foo')\r\n    arn = res['cluster']['clusterArn']\r\n    client.tag_resource(resourceArn=arn, tags=[\r\n        {'key': 'foo', 'value': 'foo'}\r\n    ])\r\n\r\ntest()\r\n```\r\n\r\n# Traceback\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 13, in <module>\r\n    test()\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/moto/core/models.py\", line 124, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"test.py\", line 9, in test\r\n    client.tag_resource(resourceArn=arn, tags=[\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/client.py\", line 530, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/client.py\", line 943, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/client.py\", line 966, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/endpoint.py\", line 119, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/endpoint.py\", line 202, in _send_request\r\n    while self._needs_retry(\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/endpoint.py\", line 354, in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/hooks.py\", line 412, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/hooks.py\", line 256, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/hooks.py\", line 239, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/retryhandler.py\", line 207, in __call__\r\n    if self._checker(**checker_kwargs):\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/retryhandler.py\", line 284, in __call__\r\n    should_retry = self._should_retry(\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/retryhandler.py\", line 307, in _should_retry\r\n    return self._checker(\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/retryhandler.py\", line 363, in __call__\r\n    checker_response = checker(\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/retryhandler.py\", line 247, in __call__\r\n    return self._check_caught_exception(\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/retryhandler.py\", line 416, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/endpoint.py\", line 278, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/hooks.py\", line 412, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/hooks.py\", line 256, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/botocore/hooks.py\", line 239, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/moto/core/botocore_stubber.py\", line 61, in __call__\r\n    status, headers, body = response_callback(\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/moto/core/responses.py\", line 231, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/moto/core/responses.py\", line 372, in _dispatch\r\n    return self.call_action()\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/moto/core/responses.py\", line 461, in call_action\r\n    response = method()\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/moto/ecs/responses.py\", line 438, in tag_resource\r\n    self.ecs_backend.tag_resource(resource_arn, tags)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/moto/ecs/models.py\", line 2014, in tag_resource\r\n    resource.tags = self._merge_tags(resource.tags, tags)\r\n  File \"/mnt/c/Users/kimdogg911/pjt/slack-bot/venv-test/lib/python3.8/site-packages/moto/ecs/models.py\", line 2021, in _merge_tags\r\n    for existing_tag in existing_tags:\r\nTypeError: 'NoneType' object is not iterable\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6225/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6211", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6211/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6211/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6211/events", "html_url": "https://github.com/getmoto/moto/issues/6211", "id": 1668369215, "node_id": "I_kwDOAH5NfM5jcUs_", "number": 6211, "title": "mock_athena fails to get \"primary\" work group", "user": {"login": "dani-g1", "id": 83058610, "node_id": "MDQ6VXNlcjgzMDU4NjEw", "avatar_url": "https://avatars.githubusercontent.com/u/83058610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dani-g1", "html_url": "https://github.com/dani-g1", "followers_url": "https://api.github.com/users/dani-g1/followers", "following_url": "https://api.github.com/users/dani-g1/following{/other_user}", "gists_url": "https://api.github.com/users/dani-g1/gists{/gist_id}", "starred_url": "https://api.github.com/users/dani-g1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dani-g1/subscriptions", "organizations_url": "https://api.github.com/users/dani-g1/orgs", "repos_url": "https://api.github.com/users/dani-g1/repos", "events_url": "https://api.github.com/users/dani-g1/events{/privacy}", "received_events_url": "https://api.github.com/users/dani-g1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-04-14T14:33:38Z", "updated_at": "2023-04-15T10:02:48Z", "closed_at": "2023-04-15T10:02:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! After upgrading from moto version 4.1.4 to 4.1.7, we now experience errors when performing the `athena_client.get_work_group(WorkGroup=\"primary\")` call. Querying any other work group than \"primary\" (existent or non-existent work groups) works fine.\r\n\r\nThe only code adaption we performed when upgrading the moto version, was removing our creation of the \"primary\" work group due to the breaking change mentioned in the changelog (\"Athena: Now automatically creates the default WorkGroup called `primary`\").\r\n\r\n### How to reproduce the issue\r\n\r\n#### Successful calls for other work groups:\r\n```\r\nimport boto3\r\nimport moto\r\n\r\ndef test_non_existing_work_group():\r\n    with moto.mock_athena():\r\n        athena_client = boto3.client(\"athena\", region_name=\"us-east-1\")\r\n        athena_client.get_work_group(WorkGroup=\"nonexisting\")\r\n\r\n\r\ndef test_existing_work_group():\r\n    with moto.mock_athena():\r\n        athena_client = boto3.client(\"athena\", region_name=\"us-east-1\")\r\n        athena_client.create_work_group(Name=\"existing\")\r\n        athena_client.get_work_group(WorkGroup=\"existing\")\r\n```\r\n\r\n#### Failing call:\r\n```\r\nimport boto3\r\nimport moto\r\n\r\n\r\ndef test_get_primary_work_group():\r\n    with moto.mock_athena():\r\n        athena_client = boto3.client(\"athena\", region_name=\"us-east-1\")\r\n        athena_client.get_work_group(WorkGroup=\"primary\")\r\n```\r\nTraceback:\r\n```\r\n    def test_get_primary_work_group():\r\n        with moto.mock_athena():\r\n            athena_client = boto3.client(\"athena\", region_name=\"us-east-1\")\r\n>           athena_client.get_work_group(WorkGroup=\"primary\")\r\n\r\nplayground/some_test.py:21: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/client.py:530: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/client.py:943: in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/client.py:966: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/endpoint.py:119: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/endpoint.py:199: in _send_request\r\n    success_response, exception = self._get_response(\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/endpoint.py:241: in _get_response\r\n    success_response, exception = self._do_get_response(\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/endpoint.py:308: in _do_get_response\r\n    parsed_response = parser.parse(\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/parsers.py:252: in parse\r\n    parsed = self._do_parse(response, shape)\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/parsers.py:849: in _do_parse\r\n    parsed = self._handle_json_body(response['body'], shape)\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/parsers.py:873: in _handle_json_body\r\n    return self._parse_shape(shape, parsed_json)\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/parsers.py:332: in _parse_shape\r\n    return handler(shape, node)\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/parsers.py:663: in _handle_structure\r\n    final_parsed[member_name] = self._parse_shape(\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/parsers.py:332: in _parse_shape\r\n    return handler(shape, node)\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/parsers.py:663: in _handle_structure\r\n    final_parsed[member_name] = self._parse_shape(\r\n../../../.pyenv/versions/core_api/lib/python3.9/site-packages/botocore/parsers.py:332: in _parse_shape\r\n    return handler(shape, node)\r\n\r\n\r\nself = <botocore.parsers.JSONParser object at 0x7f878070f6a0>, shape = <StructureShape(WorkGroupConfiguration)>, value = ''\r\n    def _handle_structure(self, shape, value):\r\n        final_parsed = {}\r\n        if shape.is_document_type:\r\n            final_parsed = value\r\n        else:\r\n            member_shapes = shape.members\r\n            if value is None:\r\n                # If the comes across the wire as \"null\" (None in python),\r\n                # we should be returning this unchanged, instead of as an\r\n                # empty dict.\r\n                return None\r\n            final_parsed = {}\r\n            if self._has_unknown_tagged_union_member(shape, value):\r\n                tag = self._get_first_key(value)\r\n                return self._handle_unknown_tagged_union_member(tag)\r\n            for member_name in member_shapes:\r\n                member_shape = member_shapes[member_name]\r\n                json_name = member_shape.serialization.get('name', member_name)\r\n>               raw_value = value.get(json_name)\r\nE               AttributeError: 'str' object has no attribute 'get'\r\n\r\n```\r\n\r\nWe're using boto3 version 1.26.113 and botocore version 1.29.113.\r\n\r\nSide note: The `list_work_group` call still works fine (and the response contains the \"primary\" work group).", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6211/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6211/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6206", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6206/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6206/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6206/events", "html_url": "https://github.com/getmoto/moto/issues/6206", "id": 1665005549, "node_id": "I_kwDOAH5NfM5jPfft", "number": 6206, "title": "AssertionError with SES Templates containing {", "user": {"login": "jritchie-nullable", "id": 88438483, "node_id": "MDQ6VXNlcjg4NDM4NDgz", "avatar_url": "https://avatars.githubusercontent.com/u/88438483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jritchie-nullable", "html_url": "https://github.com/jritchie-nullable", "followers_url": "https://api.github.com/users/jritchie-nullable/followers", "following_url": "https://api.github.com/users/jritchie-nullable/following{/other_user}", "gists_url": "https://api.github.com/users/jritchie-nullable/gists{/gist_id}", "starred_url": "https://api.github.com/users/jritchie-nullable/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jritchie-nullable/subscriptions", "organizations_url": "https://api.github.com/users/jritchie-nullable/orgs", "repos_url": "https://api.github.com/users/jritchie-nullable/repos", "events_url": "https://api.github.com/users/jritchie-nullable/events{/privacy}", "received_events_url": "https://api.github.com/users/jritchie-nullable/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-04-12T18:00:34Z", "updated_at": "2023-04-13T14:43:11Z", "closed_at": "2023-04-13T14:43:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Reproduction of Issue \r\n\r\nrun moto_server\r\n\r\nTest Template (testTemplate.json): \r\n`{\r\n  \"Template\": {\r\n    \"TemplateName\": \"Test\",\r\n    \"SubjectPart\": \"Test\",\r\n    \"HtmlPart\": \"This is a { Test } {{test}}\",\r\n    \"TextPart\": \"This is a { Test } {{test}}\"\r\n  }\r\n}`\r\n\r\naws ... ses create-template --cli-input-json file://./testTemplate.json\r\naws ... ses test-render-template --template-name Test --template-data '{\"test\":\"test\"}'\r\n\r\nInternal Server Error is thrown.\r\n\r\nStackTrace:\r\n`127.0.0.1 - - [12/Apr/2023 13:53:29] \"POST / HTTP/1.1\" 500 -\r\nError on request:\r\nTraceback (most recent call last):\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/werkzeug/serving.py\", line 333, in run_wsgi\r\n    execute(self.server.app)\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/werkzeug/serving.py\", line 320, in execute\r\n    application_iter = app(environ, start_response)\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/moto/moto_server/werkzeug_app.py\", line 248, in __call__\r\n    return backend_app(environ, start_response)\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/flask/app.py\", line 2551, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/flask/app.py\", line 2531, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/flask_cors/extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/flask/app.py\", line 2528, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/flask/app.py\", line 1825, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/flask_cors/extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/flask/app.py\", line 1823, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/flask/app.py\", line 1799, in dispatch_request\r\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/moto/core/utils.py\", line 106, in __call__\r\n    result = self.callback(request, request.url, dict(request.headers))\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/moto/core/responses.py\", line 231, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/moto/core/responses.py\", line 372, in _dispatch\r\n    return self.call_action()\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/moto/core/responses.py\", line 461, in call_action\r\n    response = method()\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/moto/ses/responses.py\", line 270, in test_render_template\r\n    rendered_template = self.backend.render_template(render_info)\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/moto/ses/models.py\", line 465, in render_template\r\n    text_part = parse_template(str(text_part), template_data)\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/moto/ses/template.py\", line 14, in parse_template\r\n    tokenizer.skip_characters(\"{\")\r\n  File \"/Users/jeff.ritchie/Library/Python/3.9/lib/python/site-packages/moto/utilities/tokenizer.py\", line 51, in skip_characters\r\n    assert self.expression[self.token_pos] in [ch.lower(), ch.upper()]\r\nAssertionError`\r\n\r\nThis issue can be seen \r\nhere: \r\nhttps://github.com/getmoto/moto/blob/c44f0b7395310d9ab63727633531281047292a5a/moto/ses/template.py#L13\r\nand here:\r\nhttps://github.com/getmoto/moto/blob/c44f0b7395310d9ab63727633531281047292a5a/moto/utilities/tokenizer.py#L51\r\n\r\nI believe that the assumption was that if we encountered a { we were starting a template variable.  ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6206/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6206/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6182", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6182/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6182/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6182/events", "html_url": "https://github.com/getmoto/moto/issues/6182", "id": 1657559786, "node_id": "I_kwDOAH5NfM5izFrq", "number": 6182, "title": "DynamoDB put_item SerializationException when any key inside the Item is 'S'", "user": {"login": "hidi-adouv", "id": 83216587, "node_id": "MDQ6VXNlcjgzMjE2NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/83216587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hidi-adouv", "html_url": "https://github.com/hidi-adouv", "followers_url": "https://api.github.com/users/hidi-adouv/followers", "following_url": "https://api.github.com/users/hidi-adouv/following{/other_user}", "gists_url": "https://api.github.com/users/hidi-adouv/gists{/gist_id}", "starred_url": "https://api.github.com/users/hidi-adouv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hidi-adouv/subscriptions", "organizations_url": "https://api.github.com/users/hidi-adouv/orgs", "repos_url": "https://api.github.com/users/hidi-adouv/repos", "events_url": "https://api.github.com/users/hidi-adouv/events{/privacy}", "received_events_url": "https://api.github.com/users/hidi-adouv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-04-06T14:43:28Z", "updated_at": "2023-04-07T21:02:02Z", "closed_at": "2023-04-07T21:02:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey everyone, thanks for the all the great work on this library. It makes unit testing a breeze! \r\n\r\nI ran into a bit of a strange issue with the Table.put_item() method in a mock DynamoDB table. It looks like if any key inside the item (including nested ones) is the character 'S', we get a SerializationException. \r\n\r\n`botocore.exceptions.ClientError: An error occurred (SerializationException) when calling the PutItem operation: Start of structure or map found where not expected`\r\n\r\nWhile there is an obvious and simple workaround, (not to use 'S' as a key), it would be great to understand why this only occurs with the upper case 'S'. I have tried all letters of the alphabet, upper and lower, and the exception is triggered exclusively with 'S'. It does not matter where in the payload it might be. It could be deeply nested, and still raise the exception. If I replace it with, say an 'A', then it works fine again. My guess is that it might be related to the encoding (the tests I ran used the string.ascii_letters elements), but I cannot really be sure.\r\n\r\nHere is a small example to replicate this behavior:\r\n```\r\nimport string\r\n\r\nimport boto3\r\nimport moto\r\n\r\nKEY_SCHEMA = [{'AttributeName': 'index', 'KeyType': 'HASH'}, ]\r\nATTRIBUTE_DEFINITIONS = [{'AttributeName': 'index', \"AttributeType\": \"N\"}, ]\r\nPROVISIONING = {\"ReadCapacityUnits\": 1, \"WriteCapacityUnits\": 1}\r\n\r\n\r\n@moto.mock_dynamodb\r\ndef test():\r\n    dynamodb = boto3.resource('dynamodb')\r\n    dynamodb.create_table(TableName=\"test\",\r\n                          KeySchema=KEY_SCHEMA,\r\n                          AttributeDefinitions=ATTRIBUTE_DEFINITIONS,\r\n                          ProvisionedThroughput=PROVISIONING\r\n                          )\r\n    # payload = {'index': 0, 's': None} # works fine!!!\r\n    # payload = {'index: 0, 'A': None} # also works fine\r\n    payload = {'index': 0, 'S': None}  # Doesn't work\r\n    # payload = {'index': 0, 'A': {'S': None}} # Neither does this, but clearly not because of the 'A'\r\n    table = dynamodb.Table(name='test')\r\n    table.put_item(Item=payload)\r\n\r\ntest()\r\n\r\n```\r\n\r\nSome more info on the environment:\r\n\r\nOS: Ubuntu 22.04.02 LTS\r\nPython: 3.10.8\r\nboto3: 1.24.28\r\nbotocore 1.27.59\r\nmoto 4.1.4\r\n\r\nI raised this issue mostly out of curiosity, but it might be interesting to find out why this happens with such a specific example, and not others :D \r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6182/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6182/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6179", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6179/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6179/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6179/events", "html_url": "https://github.com/getmoto/moto/issues/6179", "id": 1655858893, "node_id": "I_kwDOAH5NfM5ismbN", "number": 6179, "title": "S3 CreateBucket raising 411 when no Content-Length header is set", "user": {"login": "bentsku", "id": 42031100, "node_id": "MDQ6VXNlcjQyMDMxMTAw", "avatar_url": "https://avatars.githubusercontent.com/u/42031100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bentsku", "html_url": "https://github.com/bentsku", "followers_url": "https://api.github.com/users/bentsku/followers", "following_url": "https://api.github.com/users/bentsku/following{/other_user}", "gists_url": "https://api.github.com/users/bentsku/gists{/gist_id}", "starred_url": "https://api.github.com/users/bentsku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bentsku/subscriptions", "organizations_url": "https://api.github.com/users/bentsku/orgs", "repos_url": "https://api.github.com/users/bentsku/repos", "events_url": "https://api.github.com/users/bentsku/events{/privacy}", "received_events_url": "https://api.github.com/users/bentsku/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-04-05T15:37:14Z", "updated_at": "2023-04-09T10:05:45Z", "closed_at": "2023-04-09T10:05:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nIt seems moto will raise a 411 Exception when calling the `CreateBucket` operation with no `content-length` header, even when there is no body while targeting `us-east-1` (so no `CreateBucketConfiguration` with `LocationConstraint`). It seems it should accept the request, as AWS does.\r\nI am however not sure which other `Bucket` operations would accept to not have a `content-length` for a PUT request with no body, I am only aware of `CreateBucket` for now, as it is pretty difficult to test with Python, most libraries add the header automatically. \r\n\r\nhttps://github.com/getmoto/moto/blob/f424c6ac05673830925ec0e77a7972e54d4b275a/moto/s3/responses.py#L742-L744\r\n\r\nYou can reproduce by trying to create a bucket with the following:\r\n`curl -XPUT http://localhost:4566/testbucket` \r\n\r\nThis was a request logged in LocalStack by a user:\r\n```\r\nPUT localstack:4566/fusion-clients-tests\r\nheaders={\r\n  'amz-sdk-invocation-id': '955a2a7d-77e0-2976-6325-045ac71bfd0f',\r\n  'amz-sdk-request': 'attempt=1; max=4',\r\n  'Authorization': 'AWS4-HMAC-SHA256 Credential=test/20230405/us-east-1/s3/aws4_request, SignedHeaders=amz-sdk-invocation-id;amz-sdk-request;host;x-amz-content-sha256;x-amz-date, Signature=b5d07fc83668cb981a7cdd281ddab085b7c48a7db33719ad9d0a7a84129d75b9',\r\n  'User-Agent': 'aws-sdk-java/2.19.32 Linux/5.13.0-1022-aws OpenJDK_64-Bit_Server_VM/17.0.6+10 Java/17.0.6 vendor/Eclipse_Adoptium io/sync http/UrlConnection cfg/retry-mode/legacy',\r\n  'x-amz-content-sha256': 'UNSIGNED-PAYLOAD',\r\n  'X-Amz-Date': '20230405T123838Z',\r\n  'Accept': '*/*',\r\n  'Host': 'localstack:4566',\r\n  'Connection': 'keep-alive',\r\n  'x-localstack-tgt-api': 's3',\r\n  'x-moto-account-id': '000000000000'\r\n}); \r\n```\r\nThis request would work against AWS, even without the `content-length` header set. \r\n\r\nIt seems this behaviour was added a while ago, in 2017. #908 / #924", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6179/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6179/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6150", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6150/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6150/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6150/events", "html_url": "https://github.com/getmoto/moto/issues/6150", "id": 1646103094, "node_id": "I_kwDOAH5NfM5iHYo2", "number": 6150, "title": "DynamoDB query with brackets in KeyConditionExpression causes: Invalid function name; function:", "user": {"login": "davidpottage", "id": 106970655, "node_id": "U_kgDOBmA-Hw", "avatar_url": "https://avatars.githubusercontent.com/u/106970655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidpottage", "html_url": "https://github.com/davidpottage", "followers_url": "https://api.github.com/users/davidpottage/followers", "following_url": "https://api.github.com/users/davidpottage/following{/other_user}", "gists_url": "https://api.github.com/users/davidpottage/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidpottage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidpottage/subscriptions", "organizations_url": "https://api.github.com/users/davidpottage/orgs", "repos_url": "https://api.github.com/users/davidpottage/repos", "events_url": "https://api.github.com/users/davidpottage/events{/privacy}", "received_events_url": "https://api.github.com/users/davidpottage/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-03-29T15:58:20Z", "updated_at": "2023-04-05T14:30:21Z", "closed_at": "2023-04-05T14:30:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "See the attached testcase\r\n\r\nI have found that when mocking DynamoDB and running a query, if I put brackets in my KeyConditionExpression then it raises an error\r\n\r\nMy KeyConditionExpression is `(#audit_object_id = :object_id) AND (#audit_timestamp < :before_timestamp)`\r\n\r\nExample traceback (there is no more detail)\r\n\r\n    Traceback (most recent call last):\r\n      File \"C:\\Users\\david.pottage\\git\\labs.platform-hub.audit-trail-api\\src\\tests\\test_demo_moto_query_bug.py\", line 140, in test_query_with_brackets\r\n        query_results = self.table.query(**self.query_args)\r\n    botocore.exceptions.ClientError: An error occurred (ValidationException) when calling the Query operation: Invalid KeyConditionExpression: Invalid function name; function:\r\n\r\nIf I omit brackets from my query then it works fine.\r\n\r\nSeen on moto version 4.1.6 with boto3 1.26.99\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6150/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6148", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6148/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6148/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6148/events", "html_url": "https://github.com/getmoto/moto/issues/6148", "id": 1645269483, "node_id": "I_kwDOAH5NfM5iENHr", "number": 6148, "title": "API Gateway does not support \":\" character in the resource path.", "user": {"login": "alanfung", "id": 1243382, "node_id": "MDQ6VXNlcjEyNDMzODI=", "avatar_url": "https://avatars.githubusercontent.com/u/1243382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanfung", "html_url": "https://github.com/alanfung", "followers_url": "https://api.github.com/users/alanfung/followers", "following_url": "https://api.github.com/users/alanfung/following{/other_user}", "gists_url": "https://api.github.com/users/alanfung/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanfung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanfung/subscriptions", "organizations_url": "https://api.github.com/users/alanfung/orgs", "repos_url": "https://api.github.com/users/alanfung/repos", "events_url": "https://api.github.com/users/alanfung/events{/privacy}", "received_events_url": "https://api.github.com/users/alanfung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-03-29T08:19:44Z", "updated_at": "2023-04-02T21:34:50Z", "closed_at": "2023-04-01T22:37:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\n### Expectation:\r\nLike the real API gateway, I want to create resource path with the character \":\". This is important for our use case because we follow https://google.aip.dev/136 where \":\" is commonly used.\r\n\r\n### Actual:\r\nWhen trying to create resource with path `myResource:foo`, receives an error `Resource's path part only allow a-zA-Z0-9._- and curly braces at the beginning and the end and an optional plus sign before the closing brace.`\r\n\r\n### Version:\r\nI use it via the latest of localstack, from looking at the source, this should also be an issue on the latest version of moto.\r\n\r\n------\r\n\r\nPlease add support for \":\" in the regular expression here: https://github.com/getmoto/moto/blame/a4fe80d274eb711213e7c3251315b27889a973bb/moto/apigateway/models.py#L1737\r\n\r\nThank you!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6148/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6148/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6119", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6119/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6119/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6119/events", "html_url": "https://github.com/getmoto/moto/issues/6119", "id": 1638239735, "node_id": "I_kwDOAH5NfM5hpY33", "number": 6119, "title": "Duplicate AMI listed in amis.json", "user": {"login": "ashemedai", "id": 610865, "node_id": "MDQ6VXNlcjYxMDg2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/610865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashemedai", "html_url": "https://github.com/ashemedai", "followers_url": "https://api.github.com/users/ashemedai/followers", "following_url": "https://api.github.com/users/ashemedai/following{/other_user}", "gists_url": "https://api.github.com/users/ashemedai/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashemedai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashemedai/subscriptions", "organizations_url": "https://api.github.com/users/ashemedai/orgs", "repos_url": "https://api.github.com/users/ashemedai/repos", "events_url": "https://api.github.com/users/ashemedai/events{/privacy}", "received_events_url": "https://api.github.com/users/ashemedai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-23T20:16:34Z", "updated_at": "2023-03-24T10:45:08Z", "closed_at": "2023-03-24T10:45:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "While working on some code using moto I looked at [moto/tree/master/moto/ec2/resources/amis.json](https://github.com/getmoto/moto/blob/3adbb8136a3ae81f7d5cb403f4d0a3aa100ee16f/moto/ec2/resources/amis.json#L716-L750) and noticed that the last AMI there is a duplicate entry. Both have AMI ID `ami-0b301ce3ce347599c`.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6119/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6119/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6109", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6109/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6109/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6109/events", "html_url": "https://github.com/getmoto/moto/issues/6109", "id": 1636568347, "node_id": "I_kwDOAH5NfM5hjA0b", "number": 6109, "title": "RDS describe_db_clusters is returning cluster not found when passing ClusterArn Filter for DBClusterIdentifier", "user": {"login": "asubramani82", "id": 10423034, "node_id": "MDQ6VXNlcjEwNDIzMDM0", "avatar_url": "https://avatars.githubusercontent.com/u/10423034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asubramani82", "html_url": "https://github.com/asubramani82", "followers_url": "https://api.github.com/users/asubramani82/followers", "following_url": "https://api.github.com/users/asubramani82/following{/other_user}", "gists_url": "https://api.github.com/users/asubramani82/gists{/gist_id}", "starred_url": "https://api.github.com/users/asubramani82/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asubramani82/subscriptions", "organizations_url": "https://api.github.com/users/asubramani82/orgs", "repos_url": "https://api.github.com/users/asubramani82/repos", "events_url": "https://api.github.com/users/asubramani82/events{/privacy}", "received_events_url": "https://api.github.com/users/asubramani82/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-22T22:15:48Z", "updated_at": "2023-03-23T17:57:19Z", "closed_at": "2023-03-23T17:57:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "RDS describe_db_clusters is returning cluster not found when passing ClusterArn Filter for DBClusterIdentifier. Boto3 allow passing either ClusterArn or DBClusterIdentifier passed as filter to look up db cluster\r\n\r\n`@mock_rds\r\ndef create_db_clusters():\r\n    rds_client = client(\"rds\", region_name=\"us-east-1\")\r\n    rds_client.create_db_cluster(\r\n        DBClusterIdentifier=f\"test-cluster-1\",\r\n        Engine=\"aurora-mysql\",\r\n        MasterUsername=\"root\",\r\n        MasterUserPassword=\"test123456789\"\r\n    )\r\n    all_cluster = rds_client.describe_db_clusters()\r\n    cluster_lookup_id = rds_client.describe_db_clusters(DBClusterIdentifier=\"test-cluster-1\")\r\n    cluster_lookup_arn = rds_client.describe_db_clusters(DBClusterIdentifier = \"arn:aws:rds:us-east-1:123456789012:cluster:test-cluster-1\")\r\n`\r\n\r\nReturning response\r\n`cluster_lookup_id = rds_client.describe_db_clusters(DBClusterIdentifier=\"test-cluster-1\")`\r\n\r\nFailing with cluster not found Error\r\n`response = rds_client.describe_db_clusters(DBClusterIdentifier = \"arn:aws:rds:us-east-1:123456789012:cluster:test-cluster-0\")`\r\n\r\nExpectation:\r\ndescribe_db_clusters using clusterArn as filter should return data if it exists as in Boto\r\n\r\nActual:\r\ndescribe_db_clusters using clusterArn Failing with cluster not found Error even when the record exists\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6109/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6109/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6096", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6096/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6096/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6096/events", "html_url": "https://github.com/getmoto/moto/issues/6096", "id": 1632692967, "node_id": "I_kwDOAH5NfM5hUOrn", "number": 6096, "title": "Incorrect behavior when a routing table contains a route for destination cidr 0.0.0.0/0", "user": {"login": "cgoIT", "id": 8972203, "node_id": "MDQ6VXNlcjg5NzIyMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/8972203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgoIT", "html_url": "https://github.com/cgoIT", "followers_url": "https://api.github.com/users/cgoIT/followers", "following_url": "https://api.github.com/users/cgoIT/following{/other_user}", "gists_url": "https://api.github.com/users/cgoIT/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgoIT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgoIT/subscriptions", "organizations_url": "https://api.github.com/users/cgoIT/orgs", "repos_url": "https://api.github.com/users/cgoIT/repos", "events_url": "https://api.github.com/users/cgoIT/events{/privacy}", "received_events_url": "https://api.github.com/users/cgoIT/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-03-20T18:58:25Z", "updated_at": "2023-03-22T17:21:58Z", "closed_at": "2023-03-22T14:08:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI maybe found an issue. I'm using localstack and I first thought it is an error on the localstack side (see https://github.com/localstack/localstack/issues/7915). But after a little debugging I suspect the problem is in moto.\r\n\r\nI have a routing table with the following content:\r\n```\r\n{\r\n  \"RouteTables\": [\r\n    {\r\n      \"Associations\": [\r\n        {\r\n          \"Main\": false,\r\n          \"RouteTableAssociationId\": \"rtbassoc-7be6934d\",\r\n          \"RouteTableId\": \"rtb-8f86de50\",\r\n          \"SubnetId\": \"subnet-3ba9d3c0\",\r\n          \"AssociationState\": {\r\n            \"State\": \"associated\"\r\n          }\r\n        }\r\n      ],\r\n      \"RouteTableId\": \"rtb-8f86de50\",\r\n      \"Routes\": [\r\n        {\r\n          \"DestinationCidrBlock\": \"10.1.0.0/16\",\r\n          \"GatewayId\": \"local\",\r\n          \"Origin\": \"CreateRouteTable\",\r\n          \"State\": \"active\"\r\n        },\r\n        {\r\n          \"DestinationCidrBlock\": \"0.0.0.0/0\",\r\n          \"GatewayId\": \"igw-e1f33d15\",\r\n          \"Origin\": \"CreateRoute\",\r\n          \"State\": \"active\"\r\n        }\r\n      ],\r\n      \"Tags\": [],\r\n      \"VpcId\": \"vpc-f8d94257\",\r\n      \"OwnerId\": \"000000000000\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nI try to add a route with the destination cidr 10.2.0.0/16 to this routing table. When I try to add the route I get an error \"creating Route in Route Table (rtb-050b9d8a) with destination (10.2.0.0/16): RouteAlreadyExists: The route identified by 10.2.0.0/16 already exists\".\r\n\r\nDuring debugging I saw, the source of this error themes to be the if clause in https://github.com/getmoto/moto/blob/8ec9118c78d4470804e29ec2054fddaebad7bffd/moto/ec2/models/route_tables.py#L517 which was introduced with commit https://github.com/getmoto/moto/commit/c3f06064ff4940598ee504fd1f4f8a7d78256d3c (see issue https://github.com/getmoto/moto/issues/5187). The method call for the ip_v4_network = 10.2.0.0/16 with the route.destination_cidr_block = 0.0.0.0/0 returns True.\r\n\r\nMaybe (I'm not a python expert) it would be correct to add another statement to the if clause:\r\n\r\nCurrent clause:\r\n```\r\nif not route.local and ip_v4_network.overlaps(\r\n                ipaddress.IPv4Network(str(route.destination_cidr_block))\r\n            )\r\n```\r\n\r\nNew clause:\r\n```\r\nif not route.local and and not route.destination_cidr_block == \"0.0.0.0/0\" and ip_v4_network.overlaps(\r\n                ipaddress.IPv4Network(str(route.destination_cidr_block))\r\n            )\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6096/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6074", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6074/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6074/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6074/events", "html_url": "https://github.com/getmoto/moto/issues/6074", "id": 1624434019, "node_id": "I_kwDOAH5NfM5g0uVj", "number": 6074, "title": "DynamoDB UpdateExpression Syntax with Special Characters Rejected with ValidationException", "user": {"login": "arohm-ff", "id": 43347983, "node_id": "MDQ6VXNlcjQzMzQ3OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/43347983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arohm-ff", "html_url": "https://github.com/arohm-ff", "followers_url": "https://api.github.com/users/arohm-ff/followers", "following_url": "https://api.github.com/users/arohm-ff/following{/other_user}", "gists_url": "https://api.github.com/users/arohm-ff/gists{/gist_id}", "starred_url": "https://api.github.com/users/arohm-ff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arohm-ff/subscriptions", "organizations_url": "https://api.github.com/users/arohm-ff/orgs", "repos_url": "https://api.github.com/users/arohm-ff/repos", "events_url": "https://api.github.com/users/arohm-ff/events{/privacy}", "received_events_url": "https://api.github.com/users/arohm-ff/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-14T23:04:56Z", "updated_at": "2023-03-17T15:22:07Z", "closed_at": "2023-03-17T15:22:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looks like this might relate to #4580\r\n\r\n### Problem Statement\r\nI am working with some internal tables where we use attributes prefixed by the underscore character to indicate metadata fields on DynamoDB records. For example, the `_lastModified` attribute in the record below.\r\n```\r\n{\r\n    \"name\": \"Zelda\",\r\n    \"released\": \"1985\",\r\n    \"_lastModified\": \"2020-01-01T19:17:07.000000\"\r\n}\r\n```\r\nWhen testing out the `update_item` operation on a mocked DynamoDB table, I received a ValidationError (traceback below) indicating that the UpdateExpression formed to modify the `_lastModified` field was invalid syntax. \r\n\r\n### Expected Behavior\r\nI expect the same syntax validation that runs in boto3 to apply to the statements that I run against mocked resources. In this case, if the syntax is valid, I would expect that moto processes the `update_item` call and updates the mocked table accordingly.\r\n\r\n### Observed Behavior\r\nWhen testing with moto, I get a ValidationError indicating that the UpdateExpression syntax is invalid. However, when testing against real DynamoDB resources, processing `update_item` requests containing the same syntax was allowed and processed successfully. \r\n\r\n### Tested versions:\r\nI performed a clean install of boto3 and moto with the versions below using python 3.7, 3.8, 3.10 and saw the same failure on each\r\nboto3 1.26.91 / botocore: 1.29.91\r\nmoto: 4.1.4\r\n\r\nThe version info below is from my regular working environment. I didn't do any sort of clean install, just observed the issue.\r\nboto3 1.20.112 / botocore 1.17.112\r\nmoto: 2.2.15\r\n\r\n\r\n### Traceback\r\n```\r\nTraceback (most recent call last):\r\n  File \"./test_dynamo_ops.py\", line 23, in <module>\r\n    ExpressionAttributeValues={\":_lastModified\": \"YESTERDAY\"}\r\n  File \"/Users/andrewrohm/Projects/moto/testenv/lib/python3.7/site-packages/boto3/resources/factory.py\", line 580, in do_action\r\n    response = action(self, *args, **kwargs)\r\n  File \"/Users/andrewrohm/Projects/moto/testenv/lib/python3.7/site-packages/boto3/resources/action.py\", line 88, in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\n  File \"/Users/andrewrohm/Projects/moto/testenv/lib/python3.7/site-packages/botocore/client.py\", line 530, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/andrewrohm/Projects/moto/testenv/lib/python3.7/site-packages/botocore/client.py\", line 960, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (ValidationException) when calling the UpdateItem operation: ExpressionAttributeNames contains invalid key: Syntax error; key: \"#_lastModified\"\r\n```\r\n\r\n### Steps to reproduce\r\nThe script included below will trigger the exception. When I rewrite it to target real AWS DynamoDB resources, no exception is generated and the update operation succeeds as expected.\r\n```\r\nimport boto3\r\nfrom moto import mock_dynamodb2\r\nTABLE_NAME = \"Games\"\r\nwith mock_dynamodb2():\r\n    mocked_dynamo_resource = boto3.resource(\"dynamodb\", region_name=\"af-south-1\")\r\n    mocked_dynamo_resource.create_table(\r\n        TableName=TABLE_NAME,\r\n        KeySchema=[\r\n            {\"AttributeName\": \"id\", \"KeyType\": \"HASH\"},\r\n        ],\r\n        AttributeDefinitions=[\r\n            {\"AttributeName\": \"id\", \"AttributeType\": \"S\"},\r\n        ],\r\n        BillingMode=\"PAY_PER_REQUEST\",\r\n    )\r\n    game_table = mocked_dynamo_resource.Table(TABLE_NAME)\r\n    \r\n    game_id = \"ZELDA\"\r\n    game_response = game_table.update_item(\r\n        Key={\"id\": game_id},\r\n        UpdateExpression=\"set #_lastModified=:_lastModified\",\r\n        ExpressionAttributeNames={\"#_lastModified\": \"_lastModified\",},\r\n        ExpressionAttributeValues={\":_lastModified\": \"YESTERDAY\"}\r\n    )\r\n\r\n    print(game_response)\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6074/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6074/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6050", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6050/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6050/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6050/events", "html_url": "https://github.com/getmoto/moto/issues/6050", "id": 1618981911, "node_id": "I_kwDOAH5NfM5gf7QX", "number": 6050, "title": "Type Error when using revoke_security_group_egress", "user": {"login": "nathanberry97", "id": 54477304, "node_id": "MDQ6VXNlcjU0NDc3MzA0", "avatar_url": "https://avatars.githubusercontent.com/u/54477304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanberry97", "html_url": "https://github.com/nathanberry97", "followers_url": "https://api.github.com/users/nathanberry97/followers", "following_url": "https://api.github.com/users/nathanberry97/following{/other_user}", "gists_url": "https://api.github.com/users/nathanberry97/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanberry97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanberry97/subscriptions", "organizations_url": "https://api.github.com/users/nathanberry97/orgs", "repos_url": "https://api.github.com/users/nathanberry97/repos", "events_url": "https://api.github.com/users/nathanberry97/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanberry97/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-10T13:28:23Z", "updated_at": "2023-03-12T16:52:17Z", "closed_at": "2023-03-12T16:52:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello I am currently getting a type error for the following boto3 method:\r\n\r\n- revoke_security_group_egress\r\n\r\nThis is due to the following lines of code:\r\nhttps://github.com/getmoto/moto/blob/2c9c7a7a63e7ca0526e433f76902c40801ab02cc/moto/ec2/models/security_groups.py#L47-L51\r\n\r\nPlease see below for the type error:\r\n\r\n![image](https://user-images.githubusercontent.com/54477304/224317977-589ebffb-11ee-4411-819c-ac2e86883d94.png)\r\n\r\nThe issues is the [revoke_security_group_egress](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2/client/revoke_security_group_egress.html) doesn't support the following:\r\n- IpProtocol \r\n\r\nHere is the function:\r\n\r\n```python\r\n\r\ndef update_default_security_group(client, group_id, security_rules):\r\n    ''' Method to remove ingress and egress from default sg '''\r\n\r\n    for rule in security_rules['SecurityGroupRules']:\r\n        security_id = rule['SecurityGroupRuleId']\r\n        security_egress_check = rule['IsEgress']\r\n\r\n        if security_egress_check:\r\n            try:\r\n                response_egress_block = client.revoke_security_group_egress(\r\n                    GroupId=group_id,\r\n                    SecurityGroupRuleIds=[security_id]\r\n                )\r\n                print(response_egress_block)\r\n\r\n            except ClientError as error:\r\n                print(error)\r\n                sys.exit(1)\r\n        else:\r\n            try:\r\n                response_ingress_block = client.revoke_security_group_ingress(\r\n                    GroupId=group_id,\r\n                    SecurityGroupRuleIds=[security_id]\r\n                )\r\n                print(response_ingress_block)\r\n\r\n            except ClientError as error:\r\n                print(error)\r\n                sys.exit(1)\r\n\r\n    print(f\"\\nAll security rules have been removed for {group_id}\\n\")\r\n    return({'StatusCode': '200'})\r\n```\r\n\r\nHere is a some moto code to get the same error:\r\n> **note** I use pytest to test\r\n\r\n```python\r\n\r\nimport re\r\nimport boto3\r\nimport updateDefaultSecurityGroupAndAcl\r\nfrom moto import mock_ec2\r\n\r\n\r\n@mock_ec2\r\ndef create_mock_vpc(client):\r\n    client.create_vpc(\r\n        CidrBlock='10.5.0.0/24',\r\n        TagSpecifications=[\r\n            {'ResourceType': 'vpc', 'Tags': [{'Key': 'Name', 'Value': 'ftpServerVpc'}]},\r\n        ]\r\n    )\r\n\r\n\r\n@mock_ec2\r\ndef test_update_default_security_group():\r\n\r\n    mock_client = boto3.client('ec2', region_name='eu-west-2')\r\n\r\n    # Create mock infra\r\n    create_mock_vpc(mock_client)\r\n\r\n    # Get mock resources\r\n    mock_vpc_id = mock_client.describe_vpcs(\r\n        Filters=[{'Name': 'tag:Name', 'Values': ['ftpServerVpc']}]\r\n    )['Vpcs'][0]['VpcId']\r\n\r\n    mock_security_group = mock_client.describe_security_groups(\r\n        Filters=[\r\n            {'Name': 'group-name', 'Values': ['default']},\r\n            {'Name': 'vpc-id', 'Values': [mock_vpc_id]}\r\n        ]\r\n    )['SecurityGroups'][0]['GroupId']\r\n\r\n    mock_security_rules = mock_client.describe_security_group_rules(\r\n        Filters=[{'Name': 'group-id', 'Values': [mock_security_group]}]\r\n    )\r\n\r\n    # Test update_default_security_group\r\n    response = updateDefaultSecurityGroupAndAcl.update_default_security_group(\r\n        mock_client,\r\n        mock_security_group,\r\n        mock_security_rules\r\n    )\r\n\r\n    assert response == {'StatusCode': '200'}\r\n```\r\n\r\nWith the method `revoke_security_group_egress` you don't have to supply the IpProtocol and when ran against a AWS account and it works as expected. \r\n\r\nAlso you can make the the test pass with the following function but this is invalid due to  IpProtocol not being supported by [revoke_security_group_egress](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2/client/revoke_security_group_egress.html):\r\n\r\n```python\r\ndef update_default_security_group(client, group_id, security_rules):\r\n    ''' Method to remove ingress and egress from default sg '''\r\n\r\n    for rule in security_rules['SecurityGroupRules']:\r\n        security_id = rule['SecurityGroupRuleId']\r\n        security_egress_check = rule['IsEgress']\r\n        security_ip_protocol = rule['IpProtocol']\r\n\r\n        if security_egress_check:\r\n            try:\r\n                response_egress_block = client.revoke_security_group_egress(\r\n                    GroupId=group_id,\r\n                    SecurityGroupRuleIds=[security_id],\r\n                    IpProtocol=security_ip_protocol\r\n                )\r\n                print(response_egress_block)\r\n\r\n            except ClientError as error:\r\n                print(error)\r\n                sys.exit(1)\r\n        else:\r\n            try:\r\n                response_ingress_block = client.revoke_security_group_ingress(\r\n                    GroupId=group_id,\r\n                    SecurityGroupRuleIds=[security_id]\r\n                )\r\n                print(response_ingress_block)\r\n\r\n            except ClientError as error:\r\n                print(error)\r\n                sys.exit(1)\r\n\r\n    print(f\"\\nAll security rules have been removed for {group_id}\\n\")\r\n    return({'StatusCode': '200'})\r\n```\r\n\r\nI was hoping someone would be able to resolve this bug", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6050/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6050/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6046", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6046/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6046/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6046/events", "html_url": "https://github.com/getmoto/moto/issues/6046", "id": 1617659201, "node_id": "I_kwDOAH5NfM5ga4VB", "number": 6046, "title": "Cognito ID Token keys not the same as AWS documentation", "user": {"login": "Athius", "id": 1254091, "node_id": "MDQ6VXNlcjEyNTQwOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1254091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Athius", "html_url": "https://github.com/Athius", "followers_url": "https://api.github.com/users/Athius/followers", "following_url": "https://api.github.com/users/Athius/following{/other_user}", "gists_url": "https://api.github.com/users/Athius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Athius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Athius/subscriptions", "organizations_url": "https://api.github.com/users/Athius/orgs", "repos_url": "https://api.github.com/users/Athius/repos", "events_url": "https://api.github.com/users/Athius/events{/privacy}", "received_events_url": "https://api.github.com/users/Athius/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-09T17:15:04Z", "updated_at": "2023-03-12T10:19:35Z", "closed_at": "2023-03-12T10:19:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nThe ID_TOKEN payload contains the key ```username``` instead of ```cognito:username``` from the [AWS documentation](https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-the-id-token.html)\r\n\r\nAttached token:\r\n\r\n```\r\neyJhbGciOiJSUzI1NiIsImtpZCI6ImR1bW15IiwidHlwIjoiSldUIn0.eyJpc3MiOiJodHRwczovL2NvZ25pdG8taWRwLnJhbmRvbS1yZWdpb24uYW1hem9uYXdzLmNvbS9yYW5kb20tcmVnaW9uX2JkZDY0MGZiMDY2NzRhZDE5YzgwMzE3ZmEzYjE3OTlkIiwic3ViIjoiZDhmNTY0MTMtNWJlNi00MjhlLTk4YzItNjc5NzYxNDJlYTdkIiwiYXVkIjoiaGZlODZ5NXIyMTVkZXcxemN5cWVzaDBhcmwiLCJ0b2tlbl91c2UiOiJpZCIsImF1dGhfdGltZSI6MTY3ODM3OTY2MiwiZXhwIjoxNjc4MzgzMjYyLCJ1c2VybmFtZSI6InJvbWFpbi5sZWd1YXlAbnVyZWEtc29mdC5jb20iLCJjb2duaXRvOmdyb3VwcyI6WyJhZG1pbiJdfQ.Sz6lo8SOVwAJYYvTq-wLXbGhMYA62DTF69A_mJggWQN2nnk-qPIDeoAZI2p3e8q3UEQyKK39ZVEyuXP5TO7JNDgMNN_5CodN0iUHueKP8NcfhHx4aun_cEHQZL2TB22A810LL8qhaVV9n8gm4GBgRZk6-UUByiGQ-zzS1B0QWS8OTx7uelRIzkItJldqWkZtvq-qNbbMtsDCX7YJ4791Xs9YW35Unno82pHbTEj1uGDtMJzL7wkbonx0Y_VaQjqzoePaqoeZM8L5oYlrIrbuV3anmy0ZE9XAlEs7OpvTY9CfSWqZDVhzFg8XTA5kgl09E5qfiA7KBAcQPoqvEhpNcA\r\n```\r\n\r\nIt's not a big issue but it's still an improvment I think.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6046/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6046/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6040", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6040/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6040/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6040/events", "html_url": "https://github.com/getmoto/moto/issues/6040", "id": 1616004238, "node_id": "I_kwDOAH5NfM5gUkSO", "number": 6040, "title": "ec2.describe_security_group_rules does not use filter", "user": {"login": "CiolFr", "id": 34713595, "node_id": "MDQ6VXNlcjM0NzEzNTk1", "avatar_url": "https://avatars.githubusercontent.com/u/34713595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CiolFr", "html_url": "https://github.com/CiolFr", "followers_url": "https://api.github.com/users/CiolFr/followers", "following_url": "https://api.github.com/users/CiolFr/following{/other_user}", "gists_url": "https://api.github.com/users/CiolFr/gists{/gist_id}", "starred_url": "https://api.github.com/users/CiolFr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CiolFr/subscriptions", "organizations_url": "https://api.github.com/users/CiolFr/orgs", "repos_url": "https://api.github.com/users/CiolFr/repos", "events_url": "https://api.github.com/users/CiolFr/events{/privacy}", "received_events_url": "https://api.github.com/users/CiolFr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-08T21:57:19Z", "updated_at": "2023-03-11T23:28:18Z", "closed_at": "2023-03-11T23:28:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## how to reproduce the issue\r\n```\r\nimport boto3\r\nfrom botocore.config import Config\r\nfrom moto import mock_ec2\r\n\r\nwith mock_ec2():\r\n    config = Config(\r\n            region_name=\"eu-west-1\"\r\n            )\r\n    client = boto3.client(\"ec2\", config=config)\r\n\r\n    # Create dummy sg\r\n    response_sg = client.create_security_group(\r\n            Description=\"description\",\r\n            GroupName=\"dummy-sg\"\r\n            )\r\n    print(\"SG creation\")\r\n    print(response_sg)\r\n\r\n\r\n    response_rules = client.describe_security_group_rules(\r\n            Filters=[\r\n                {\r\n                    \"Name\":\"group-id\",\r\n                    \"Values\": [\r\n                        response_sg[\"GroupId\"],\r\n                    ],\r\n                }\r\n            ]\r\n        )\r\n\r\n    print()\r\n    print(\"Response\")\r\n    print(response_rules)\r\n\r\n    print()\r\n    print(\"Rules:\")\r\n    for rule in response_rules[\"SecurityGroupRules\"]:\r\n        print(rule)\r\n\r\n```\r\n## what you expected to happen\r\nOnly the default egress rules should appear for this SG\r\n\r\n## what actually happens\r\nRules for all SG appears (the default sg plus my dummy sg in this case)\r\n\r\n## what version of Moto you're using\r\n```\r\npip freeze | grep oto\r\nboto3==1.26.86\r\nbotocore==1.29.86\r\nmoto==4.1.4\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6040/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6040/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6039", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6039/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6039/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6039/events", "html_url": "https://github.com/getmoto/moto/issues/6039", "id": 1615864815, "node_id": "I_kwDOAH5NfM5gUCPv", "number": 6039, "title": "The CloudFormation delete_stack_instances implementation is wrong", "user": {"login": "MacHu-GWU", "id": 6800411, "node_id": "MDQ6VXNlcjY4MDA0MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/6800411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MacHu-GWU", "html_url": "https://github.com/MacHu-GWU", "followers_url": "https://api.github.com/users/MacHu-GWU/followers", "following_url": "https://api.github.com/users/MacHu-GWU/following{/other_user}", "gists_url": "https://api.github.com/users/MacHu-GWU/gists{/gist_id}", "starred_url": "https://api.github.com/users/MacHu-GWU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MacHu-GWU/subscriptions", "organizations_url": "https://api.github.com/users/MacHu-GWU/orgs", "repos_url": "https://api.github.com/users/MacHu-GWU/repos", "events_url": "https://api.github.com/users/MacHu-GWU/events{/privacy}", "received_events_url": "https://api.github.com/users/MacHu-GWU/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-03-08T20:13:25Z", "updated_at": "2023-03-29T20:53:32Z", "closed_at": "2023-03-29T20:53:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\nThe ``cloudformation.delete_stack_instances`` implementation is wrong, which leads to inaccurate result.\r\n\r\nmoto use an list attributes ``stack_instances`` ([check this link](https://github.com/getmoto/moto/blob/master/moto/cloudformation/models.py#L292)) to store active stack instance. In the ``delete_stack_instances`` implementation ([check this link](https://github.com/getmoto/moto/blob/master/moto/cloudformation/models.py#L351)), it uses the ``list.pop(index)`` method dynamically inside of a for loop. Since the size of the list are changing and the index is based on the original list, definitely the implementation is wrong. The right way should be cache all the ``to_delete` item index, and then delete them at the end.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6039/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6039/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6034", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6034/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6034/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6034/events", "html_url": "https://github.com/getmoto/moto/issues/6034", "id": 1615295539, "node_id": "I_kwDOAH5NfM5gR3Qz", "number": 6034, "title": "Error creating secret with moto_server", "user": {"login": "kevinvalleau", "id": 62773562, "node_id": "MDQ6VXNlcjYyNzczNTYy", "avatar_url": "https://avatars.githubusercontent.com/u/62773562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinvalleau", "html_url": "https://github.com/kevinvalleau", "followers_url": "https://api.github.com/users/kevinvalleau/followers", "following_url": "https://api.github.com/users/kevinvalleau/following{/other_user}", "gists_url": "https://api.github.com/users/kevinvalleau/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinvalleau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinvalleau/subscriptions", "organizations_url": "https://api.github.com/users/kevinvalleau/orgs", "repos_url": "https://api.github.com/users/kevinvalleau/repos", "events_url": "https://api.github.com/users/kevinvalleau/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinvalleau/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-08T13:44:38Z", "updated_at": "2023-03-10T23:45:22Z", "closed_at": "2023-03-10T23:45:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello, \r\n\r\nI'm using moto_server with command : `moto_server -p4566`.\r\n\r\nWhen I try to create a simple aws secrets with Terraform, I get the following error, with no trace in moto :\r\n\r\n```\r\n\u2502 Error: reading Secrets Manager Secret (arn:aws:secretsmanager:<region>:123456789012:secret:test-tls-20230308133703611100000001-RDLGSh) policy: parsing policy: unexpected result: (<nil>) \"<nil>\"\r\n\u2502\r\n\u2502   with aws_secretsmanager_secret.tls,\r\n\u2502   on secret.tf line 32, in resource \"aws_secretsmanager_secret\" \"tls\":\r\n\u2502   32: resource \"aws_secretsmanager_secret\" \"tls\" {\r\n```\r\n\r\nHere is the Terraform resource :\r\n\r\n```hcl\r\nresource \"aws_secretsmanager_secret\" \"tls\" {\r\n  name_prefix = \"test-tls-\"\r\n}\r\n\r\nresource \"aws_secretsmanager_secret_version\" \"tls\" {\r\n  secret_id     = aws_secretsmanager_secret.tls.id\r\n  secret_string = local.secret\r\n}\r\n``` \r\n\r\nI try to add `policy=\"\"` or `policy=\"{}\"`, the result is the same.\r\nAnd if I try to add a valid policy, I get an error because the `put_resource_policy` action is not supported.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6034/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6034/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6033", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6033/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6033/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6033/events", "html_url": "https://github.com/getmoto/moto/issues/6033", "id": 1615274688, "node_id": "I_kwDOAH5NfM5gRyLA", "number": 6033, "title": "Error with autoscaling group", "user": {"login": "kevinvalleau", "id": 62773562, "node_id": "MDQ6VXNlcjYyNzczNTYy", "avatar_url": "https://avatars.githubusercontent.com/u/62773562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinvalleau", "html_url": "https://github.com/kevinvalleau", "followers_url": "https://api.github.com/users/kevinvalleau/followers", "following_url": "https://api.github.com/users/kevinvalleau/following{/other_user}", "gists_url": "https://api.github.com/users/kevinvalleau/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinvalleau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinvalleau/subscriptions", "organizations_url": "https://api.github.com/users/kevinvalleau/orgs", "repos_url": "https://api.github.com/users/kevinvalleau/repos", "events_url": "https://api.github.com/users/kevinvalleau/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinvalleau/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-03-08T13:29:10Z", "updated_at": "2023-03-10T12:47:21Z", "closed_at": "2023-03-10T12:47:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello, \r\n\r\nI use moto_server with command `moto_server -p4566`\r\n\r\nWhen trying to create an autoscaling group with Terraform, I get the following trace error :\r\n```\r\n127.0.0.1 - - [08/Mar/2023 08:24:52] \"POST / HTTP/1.1\" 500 -\r\nError on request:\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\werkzeug\\serving.py\", line 333, in run_wsgi\r\n    execute(self.server.app)\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\werkzeug\\serving.py\", line 320, in execute\r\n    application_iter = app(environ, start_response)\r\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\moto\\moto_server\\werkzeug_app.py\", line 239, in __call__\r\n    return backend_app(environ, start_response)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\flask\\app.py\", line 2551, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\flask\\app.py\", line 2531, in wsgi_app\r\n    response = self.handle_exception(e)\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\flask_cors\\extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n                                                ^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\flask\\app.py\", line 2528, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\flask\\app.py\", line 1825, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\flask_cors\\extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n                                                ^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\flask\\app.py\", line 1823, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n         ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\flask\\app.py\", line 1799, in dispatch_request\r\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\moto\\core\\utils.py\", line 106, in __call__\r\n    result = self.callback(request, request.url, dict(request.headers))\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\moto\\core\\responses.py\", line 229, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\moto\\core\\responses.py\", line 370, in _dispatch\r\n    return self.call_action()\r\n           ^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\moto\\core\\responses.py\", line 459, in call_action\r\n    response = method()\r\n               ^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\moto\\autoscaling\\responses.py\", line 79, in create_auto_scaling_group\r\n    params = self._get_params()\r\n             ^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\moto\\core\\responses.py\", line 691, in _get_params\r\n    self._parse_param(k, v[0], params)\r\n  File \"C:\\Users\\Kevin Valleau\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\moto\\core\\responses.py\", line 722, in _parse_param\r\n    obj = obj[index]\r\n          ^^^^^^^^^^\r\nIndexError: list index out of range\r\n```\r\n\r\nHere the Terraform resource :\r\n\r\n```hcl\r\nresource \"aws_autoscaling_group\" \"test\" {\r\n  name_prefix         = \"asg-instances-\"\r\n  min_size            = var.min\r\n  max_size            = var.max\r\n  desired_capacity    = var.desired\r\n  vpc_zone_identifier = var.subnets\r\n  target_group_arns   = [aws_lb_target_group.test.arn]\r\n\r\n  health_check_grace_period = var.health_check_grace_period\r\n  health_check_type         = var.health_check_type\r\n\r\n  enabled_metrics = [\r\n    \"GroupDesiredCapacity\",\r\n    \"GroupInServiceCapacity\",\r\n    \"GroupPendingCapacity\",\r\n    \"GroupMinSize\", \"GroupMaxSize\",\r\n    \"GroupInServiceInstances\",\r\n    \"GroupPendingInstances\",\r\n    \"GroupStandbyInstances\",\r\n    \"GroupStandbyCapacity\",\r\n    \"GroupTerminatingCapacity\",\r\n    \"GroupTerminatingInstances\",\r\n    \"GroupTotalCapacity\",\r\n    \"GroupTotalInstances\"\r\n  ]\r\n  metrics_granularity = \"1Minute\"\r\n\r\n  launch_template {\r\n    id      = aws_launch_template.test.id\r\n    version = \"$Latest\" #TODO: Variable\r\n  }\r\n\r\n  instance_refresh {\r\n    strategy = \"Rolling\"\r\n    preferences {\r\n      min_healthy_percentage = 60\r\n    }\r\n  }\r\n\r\n\r\n  tag {\r\n    key                 = \"Name\"\r\n    value               = var.autoscaling_tag\r\n    propagate_at_launch = true\r\n  }\r\n\r\n  dynamic \"tag\" {\r\n    for_each = var.tags\r\n\r\n    content {\r\n      key                 = tag.key\r\n      value               = tag.value\r\n      propagate_at_launch = true\r\n    }\r\n  }\r\n}\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6033/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6032", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6032/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6032/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6032/events", "html_url": "https://github.com/getmoto/moto/issues/6032", "id": 1615184675, "node_id": "I_kwDOAH5NfM5gRcMj", "number": 6032, "title": "Bad response from ec2.describe_security_group_rules for ingress rules", "user": {"login": "CiolFr", "id": 34713595, "node_id": "MDQ6VXNlcjM0NzEzNTk1", "avatar_url": "https://avatars.githubusercontent.com/u/34713595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CiolFr", "html_url": "https://github.com/CiolFr", "followers_url": "https://api.github.com/users/CiolFr/followers", "following_url": "https://api.github.com/users/CiolFr/following{/other_user}", "gists_url": "https://api.github.com/users/CiolFr/gists{/gist_id}", "starred_url": "https://api.github.com/users/CiolFr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CiolFr/subscriptions", "organizations_url": "https://api.github.com/users/CiolFr/orgs", "repos_url": "https://api.github.com/users/CiolFr/repos", "events_url": "https://api.github.com/users/CiolFr/events{/privacy}", "received_events_url": "https://api.github.com/users/CiolFr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-08T12:25:16Z", "updated_at": "2023-03-12T16:52:16Z", "closed_at": "2023-03-12T16:52:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## How to reproduce the issue\r\n```\r\nimport boto3\r\nfrom botocore.config import Config\r\nfrom moto import mock_ec2\r\n\r\nwith mock_ec2():\r\n    config = Config(\r\n            region_name=\"eu-west-1\"\r\n            )\r\n    client = boto3.client(\"ec2\", config=config)\r\n\r\n    # Create dummy sg\r\n    response_sg = client.create_security_group(\r\n            Description=\"description\",\r\n            GroupName=\"dummy-sg\"\r\n            )\r\n    print(\"SG creation\")\r\n    print(response_sg)\r\n\r\n    # Add ingress rule\r\n    response_ingress = client.authorize_security_group_ingress(\r\n            GroupId=response_sg[\"GroupId\"],\r\n            CidrIp=\"0.0.0.0/0\",\r\n            FromPort=22,\r\n            ToPort=22,\r\n            IpProtocol=\"tcp\",\r\n            )\r\n\r\n    print()\r\n    print(\"Ingress creation\")\r\n    print(response_ingress)\r\n\r\n    # Get rules\r\n    response_rules = client.describe_security_group_rules(\r\n            Filters=[\r\n                {\r\n                    \"Name\":\"tag:Name\",\r\n                    \"Values\": [\r\n                        response_sg[\"GroupId\"],\r\n                    ],\r\n                }\r\n            ]\r\n        )\r\n\r\n    print()\r\n    print(\"Rules:\")\r\n    for rule in response_rules[\"SecurityGroupRules\"]:\r\n        print(rule)\r\n```\r\n\r\n## What you expected to happen\r\n**IsEgress** should return False for **Ingress** rules\r\n\r\n## What actually happens\r\n**IsEgress** return True for **Ingress** rules\r\n\r\n## What version of Moto you're using\r\n```\r\npip freeze | grep oto\r\nboto3==1.26.86\r\nbotocore==1.29.86\r\nmoto==4.1.4\r\n```\r\n\r\nIf my understanding of the code base is correct, \r\nhttps://github.com/getmoto/moto/blob/master/moto/ec2/responses/security_groups.py#L488 should be set to False.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6032/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6032/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6018", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6018/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6018/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6018/events", "html_url": "https://github.com/getmoto/moto/issues/6018", "id": 1610968445, "node_id": "I_kwDOAH5NfM5gBW19", "number": 6018, "title": "Cloudformation template (awslambda) throws unhashable type: 'dict'", "user": {"login": "hans-d", "id": 46201, "node_id": "MDQ6VXNlcjQ2MjAx", "avatar_url": "https://avatars.githubusercontent.com/u/46201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hans-d", "html_url": "https://github.com/hans-d", "followers_url": "https://api.github.com/users/hans-d/followers", "following_url": "https://api.github.com/users/hans-d/following{/other_user}", "gists_url": "https://api.github.com/users/hans-d/gists{/gist_id}", "starred_url": "https://api.github.com/users/hans-d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hans-d/subscriptions", "organizations_url": "https://api.github.com/users/hans-d/orgs", "repos_url": "https://api.github.com/users/hans-d/repos", "events_url": "https://api.github.com/users/hans-d/events{/privacy}", "received_events_url": "https://api.github.com/users/hans-d/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-03-06T09:09:23Z", "updated_at": "2023-03-06T16:00:22Z", "closed_at": "2023-03-06T16:00:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following\r\n```\r\n  template = {\r\n    \"Resources\": {\r\n      \"olivedrabpeachpuffMoto396419EF\": {\r\n        \"Type\": \"Custom::Whatever\",\r\n        \"Properties\": {\r\n          \"ServiceToken\": {\r\n            \"Fn::GetAtt\": [\r\n              \"MyNestedStackMotoProviderNestedStackResourceE0751832\",\r\n              \"Outputs.stack0MotoProviderframeworkonEventCD7E7A58Arn\"\r\n            ]\r\n          },\r\n        },\r\n      },\r\n    },\r\n  }\r\n\r\n  boto_cloudformation_client.create_stack(StackName='test',\r\n                                          TemplateBody=str(template))\r\n```\r\nresults in\r\n\r\n(pytest summary)\r\n```\r\nself = <moto.awslambda.models.LambdaStorage object at 0x1336d3ad0>\r\nname = {'Fn::GetAtt': ['MyNestedStackMotoProviderNestedStackResourceE0751832', 'Outputs.stack0MotoProviderframeworkonEventCD7E7A58Arn']}\r\nqualifier = None\r\n\r\n    def get_function_by_name(\r\n        self, name: str, qualifier: Optional[str] = None\r\n    ) -> Optional[LambdaFunction]:\r\n>       if name not in self._functions:\r\nE       TypeError: unhashable type: 'dict'\r\n```\r\nFull traceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/test.py\", line 52, in test_template\r\n    boto_cloudformation_client.create_stack(StackName='test',\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/client.py\", line 530, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/client.py\", line 943, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/client.py\", line 966, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/endpoint.py\", line 119, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/endpoint.py\", line 202, in _send_request\r\n    while self._needs_retry(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/endpoint.py\", line 354, in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/hooks.py\", line 412, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/hooks.py\", line 256, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/hooks.py\", line 239, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/retryhandler.py\", line 207, in __call__\r\n    if self._checker(**checker_kwargs):\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/retryhandler.py\", line 284, in __call__\r\n    should_retry = self._should_retry(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/retryhandler.py\", line 307, in _should_retry\r\n    return self._checker(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/retryhandler.py\", line 363, in __call__\r\n    checker_response = checker(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/retryhandler.py\", line 247, in __call__\r\n    return self._check_caught_exception(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/retryhandler.py\", line 416, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/endpoint.py\", line 278, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/hooks.py\", line 412, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/hooks.py\", line 256, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/botocore/hooks.py\", line 239, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/core/botocore_stubber.py\", line 61, in __call__\r\n    status, headers, body = response_callback(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/core/responses.py\", line 229, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/core/responses.py\", line 370, in _dispatch\r\n    return self.call_action()\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/core/responses.py\", line 459, in call_action\r\n    response = method()\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/cloudformation/responses.py\", line 148, in create_stack\r\n    stack = self.cloudformation_backend.create_stack(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/cloudformation/models.py\", line 910, in create_stack\r\n    new_stack.create_resources()\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/cloudformation/models.py\", line 491, in create_resources\r\n    all_resources_ready = self.resource_map.create(self.template_dict)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/cloudformation/parsing.py\", line 693, in create\r\n    instance = self[resource]\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/cloudformation/parsing.py\", line 514, in __getitem__\r\n    new_resource = parse_and_create_resource(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/cloudformation/parsing.py\", line 361, in parse_and_create_resource\r\n    resource = resource_class.create_from_cloudformation_json(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/cloudformation/custom_model.py\", line 53, in create_from_cloudformation_json\r\n    fn = backend.get_function(service_token)\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/awslambda/models.py\", line 1702, in get_function\r\n    return self._lambdas.get_function_by_name_or_arn(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/awslambda/models.py\", line 1294, in get_function_by_name_or_arn\r\n    fn = self.get_function_by_name(name_or_arn, qualifier) or self.get_arn(\r\n  File \"/home/runner/moto-issue-cloudformation-unhashable-dict/venv/lib/python3.10/site-packages/moto/awslambda/models.py\", line 1264, in get_function_by_name\r\n    if name not in self._functions:\r\nTypeError: unhashable type: 'dict'\r\n```\r\n\r\nVersions etc:\r\n```\r\n[tool.poetry.dependencies]\r\npython = \">=3.10.0,<3.11\"\r\nreplit = \"^3.2.4\"\r\npytest = \"^7.2.2\"\r\nboto3 = \"^1.26.84\"\r\nmoto = {extras = [\"cloudformation\"], version = \"^4.1.4\"}\r\n```\r\n\r\nFull runnable code can be found at (Full example code at: https://replit.com/@HansDonner/moto-issue-cloudformation-unhashable-dict#test.py", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6018/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6010", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6010/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6010/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6010/events", "html_url": "https://github.com/getmoto/moto/issues/6010", "id": 1609570861, "node_id": "I_kwDOAH5NfM5f8Bot", "number": 6010, "title": "get_list_from_ddb_typed_value crashes on missing value", "user": {"login": "ikonst", "id": 1186084, "node_id": "MDQ6VXNlcjExODYwODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1186084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ikonst", "html_url": "https://github.com/ikonst", "followers_url": "https://api.github.com/users/ikonst/followers", "following_url": "https://api.github.com/users/ikonst/following{/other_user}", "gists_url": "https://api.github.com/users/ikonst/gists{/gist_id}", "starred_url": "https://api.github.com/users/ikonst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ikonst/subscriptions", "organizations_url": "https://api.github.com/users/ikonst/orgs", "repos_url": "https://api.github.com/users/ikonst/repos", "events_url": "https://api.github.com/users/ikonst/events{/privacy}", "received_events_url": "https://api.github.com/users/ikonst/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-04T03:33:03Z", "updated_at": "2023-03-04T13:25:49Z", "closed_at": "2023-03-04T13:25:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given update expression `SET #0 = list_append (#0, :0)`, if `#0` refers to a non-existent list, then `get_list_from_ddb_typed_value` crashes on\r\n```python\r\nassert isinstance(node, DDBTypedValue)\r\n```\r\n(since `node` is a `NoneExistingPath` at that point)", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6010/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/6003", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/6003/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/6003/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/6003/events", "html_url": "https://github.com/getmoto/moto/issues/6003", "id": 1604166547, "node_id": "I_kwDOAH5NfM5fnaOT", "number": 6003, "title": "Multiple AllowedOrigins domains for S3 resources result in invalid Access-Control-Allow-Origin from moto", "user": {"login": "kleinsch", "id": 234464, "node_id": "MDQ6VXNlcjIzNDQ2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/234464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kleinsch", "html_url": "https://github.com/kleinsch", "followers_url": "https://api.github.com/users/kleinsch/followers", "following_url": "https://api.github.com/users/kleinsch/following{/other_user}", "gists_url": "https://api.github.com/users/kleinsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/kleinsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kleinsch/subscriptions", "organizations_url": "https://api.github.com/users/kleinsch/orgs", "repos_url": "https://api.github.com/users/kleinsch/repos", "events_url": "https://api.github.com/users/kleinsch/events{/privacy}", "received_events_url": "https://api.github.com/users/kleinsch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-03-01T03:26:58Z", "updated_at": "2023-03-03T22:40:57Z", "closed_at": "2023-03-03T22:40:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "1. Start moto\r\n2. Create a bucket\r\n3. Add CORS config to that bucket with multiple AllowedOrigins `[\"http://localhost:5000\", \"http://localhost:6000\"]`\r\n4. Hit the bucket through a CORS request from `http://localhost:5000`\r\n\r\nExpected: moto returns `Access-Control-Allow-Origin: http://localhost:5000`, everything works\r\n\r\nActual: moto returns `Access-Control-Allow-Origin: http://localhost:5000, http://localhost:6000`, browser rejects it bc that header can only have one value. Can't access the bucket.\r\n\r\nIf there are multiple values, the server is expected to match the one sent from the client and only return that one.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/6003/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/6003/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5993", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5993/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5993/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5993/events", "html_url": "https://github.com/getmoto/moto/issues/5993", "id": 1601480054, "node_id": "I_kwDOAH5NfM5fdKV2", "number": 5993, "title": "[DynamoDb] All Errors are deserialized as DynamoDbException in JAVA SDK", "user": {"login": "munendrasn", "id": 9696252, "node_id": "MDQ6VXNlcjk2OTYyNTI=", "avatar_url": "https://avatars.githubusercontent.com/u/9696252?v=4", "gravatar_id": "", "url": "https://api.github.com/users/munendrasn", "html_url": "https://github.com/munendrasn", "followers_url": "https://api.github.com/users/munendrasn/followers", "following_url": "https://api.github.com/users/munendrasn/following{/other_user}", "gists_url": "https://api.github.com/users/munendrasn/gists{/gist_id}", "starred_url": "https://api.github.com/users/munendrasn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/munendrasn/subscriptions", "organizations_url": "https://api.github.com/users/munendrasn/orgs", "repos_url": "https://api.github.com/users/munendrasn/repos", "events_url": "https://api.github.com/users/munendrasn/events{/privacy}", "received_events_url": "https://api.github.com/users/munendrasn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2023-02-27T16:06:39Z", "updated_at": "2023-03-03T19:46:35Z", "closed_at": "2023-03-03T19:43:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using MotoServer to test Java based services. This Service creates the DynamoDb table if it doesn't exist, ie, on ResourceNotFoundException, table is created.\r\nWhen using the MotoServer, We get response\r\n\r\n```json\r\n{\"__type\": \"com.amazonaws.dynamodb.v20111205#ResourceNotFoundException\", \"message\": \"Requested resource not found\"}\r\n```\r\nWhen this is deserialized in java sdk, as there is no error-code for  `com.amazonaws.dynamodb.v20111205#ResourceNotFoundException` hence, All the error is wrapped, and returned as `DynamoDbException`\r\n\r\nWith other services, similar issue is not occurring. The issue exists for version>=3.1.5, and seems to be introduced by this https://github.com/getmoto/moto/pull/5012\r\nTried using <=3.1.4 to overcome this problem, but ended up encountering another bug related to Glue, which is fixed in the recent version. So, unable to use the older versions as a workaround\r\n\r\nCould you please share reason behind the error message? would it be possible to have error message compatible with Java SDKs too?\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5993/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5993/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5966", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5966/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5966/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5966/events", "html_url": "https://github.com/getmoto/moto/issues/5966", "id": 1596951590, "node_id": "I_kwDOAH5NfM5fL4wm", "number": 5966, "title": "describe_instances fails to find instances when filtering by tag value contains square brackets (json encoded)", "user": {"login": "sanderegg", "id": 35365065, "node_id": "MDQ6VXNlcjM1MzY1MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/35365065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanderegg", "html_url": "https://github.com/sanderegg", "followers_url": "https://api.github.com/users/sanderegg/followers", "following_url": "https://api.github.com/users/sanderegg/following{/other_user}", "gists_url": "https://api.github.com/users/sanderegg/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanderegg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanderegg/subscriptions", "organizations_url": "https://api.github.com/users/sanderegg/orgs", "repos_url": "https://api.github.com/users/sanderegg/repos", "events_url": "https://api.github.com/users/sanderegg/events{/privacy}", "received_events_url": "https://api.github.com/users/sanderegg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-02-23T14:17:54Z", "updated_at": "2023-02-26T19:09:27Z", "closed_at": "2023-02-25T11:19:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Problem\r\nUsing boto3 ```describe_instances``` with filtering by tag key/value where the value cotnains a json encoded string (containing square brackets), the returned instances list is empty. This works with the official AWS EC2\r\n\r\nHere is a code snippet that reproduces the issue:\r\n```python\r\nimport boto3\r\nimport moto\r\nimport json\r\n\r\nmock_aws_account = moto.mock_ec2()\r\nmock_aws_account.start()\r\n\r\nclient = boto3.client(\"ec2\", region_name=\"eu-west-1\")\r\nclient.run_instances(\r\n    ImageId=\"ami-test-1234\",\r\n    MinCount=1,\r\n    MaxCount=1,\r\n    KeyName=\"test_key\",\r\n    TagSpecifications=[\r\n        {\r\n            \"ResourceType\": \"instance\",\r\n            \"Tags\": [{\"Key\": \"test\", \"Value\": json.dumps([\"entry1\", \"entry2\"])}],\r\n        }\r\n    ],\r\n)\r\n\r\ninstances = client.describe_instances(\r\n    Filters=[\r\n        {\r\n            \"Name\": \"tag:test\",\r\n            \"Values\": [\r\n                json.dumps([\"entry1\", \"entry2\"]),\r\n            ],\r\n        },\r\n    ],\r\n)\r\n\r\nprint(instances)\r\n\r\n```\r\nReturned values are\r\n```bash\r\n{'Reservations': [], 'ResponseMetadata': {'RequestId': 'fdcdcab1-ae5c-489e-9c33-4637c5dda355', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n```\r\n\r\n\r\n## version used\r\nMoto 4.0.2\r\nboto3 1.24.59 (through aioboto3)\r\n\r\nboth installed through ```pip install```\r\n\r\n\r\nThanks a lot for the amazing library!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5966/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5963", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5963/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5963/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5963/events", "html_url": "https://github.com/getmoto/moto/issues/5963", "id": 1595333128, "node_id": "I_kwDOAH5NfM5fFtoI", "number": 5963, "title": "KMS key alias not supported in `re_encrypt` operation", "user": {"login": "rolandcrosby-dbt", "id": 120405640, "node_id": "U_kgDOBy0-iA", "avatar_url": "https://avatars.githubusercontent.com/u/120405640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rolandcrosby-dbt", "html_url": "https://github.com/rolandcrosby-dbt", "followers_url": "https://api.github.com/users/rolandcrosby-dbt/followers", "following_url": "https://api.github.com/users/rolandcrosby-dbt/following{/other_user}", "gists_url": "https://api.github.com/users/rolandcrosby-dbt/gists{/gist_id}", "starred_url": "https://api.github.com/users/rolandcrosby-dbt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rolandcrosby-dbt/subscriptions", "organizations_url": "https://api.github.com/users/rolandcrosby-dbt/orgs", "repos_url": "https://api.github.com/users/rolandcrosby-dbt/repos", "events_url": "https://api.github.com/users/rolandcrosby-dbt/events{/privacy}", "received_events_url": "https://api.github.com/users/rolandcrosby-dbt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-02-22T15:39:18Z", "updated_at": "2023-02-24T17:53:53Z", "closed_at": "2023-02-24T14:54:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for the quick fix on #5957. I believe the same issue is happening with the `DestinationKeyId` argument for [`re_encrypt()`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/kms.html#KMS.Client.re_encrypt):\r\n\r\n```\r\n>>> kms.re_encrypt(CiphertextBlob=ciphertext, DestinationKeyId=\"alias/foo\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/rolandcrosby/src/scratch/venv/lib/python3.8/site-packages/botocore/client.py\", line 530, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/rolandcrosby/src/scratch/venv/lib/python3.8/site-packages/botocore/client.py\", line 960, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.errorfactory.NotFoundException: An error occurred (NotFoundException) when calling the ReEncrypt operation: Invalid keyId alias/foo\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5963/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5963/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5957", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5957/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5957/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5957/events", "html_url": "https://github.com/getmoto/moto/issues/5957", "id": 1593983710, "node_id": "I_kwDOAH5NfM5fAkLe", "number": 5957, "title": "KMS `encrypt` operation doesn't resolve aliases as expected", "user": {"login": "rolandcrosby-dbt", "id": 120405640, "node_id": "U_kgDOBy0-iA", "avatar_url": "https://avatars.githubusercontent.com/u/120405640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rolandcrosby-dbt", "html_url": "https://github.com/rolandcrosby-dbt", "followers_url": "https://api.github.com/users/rolandcrosby-dbt/followers", "following_url": "https://api.github.com/users/rolandcrosby-dbt/following{/other_user}", "gists_url": "https://api.github.com/users/rolandcrosby-dbt/gists{/gist_id}", "starred_url": "https://api.github.com/users/rolandcrosby-dbt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rolandcrosby-dbt/subscriptions", "organizations_url": "https://api.github.com/users/rolandcrosby-dbt/orgs", "repos_url": "https://api.github.com/users/rolandcrosby-dbt/repos", "events_url": "https://api.github.com/users/rolandcrosby-dbt/events{/privacy}", "received_events_url": "https://api.github.com/users/rolandcrosby-dbt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-02-21T19:19:48Z", "updated_at": "2023-02-22T11:22:38Z", "closed_at": "2023-02-22T11:22:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm trying to use Moto's KMS implementation to test some code that uses boto3's KMS client to encrypt and decrypt data. When using key aliases, I'm running into some unexpected behavior that doesn't seem to match the behavior of AWS proper: I'm unable to successfully encrypt data when passing a key alias as the `KeyId`.\r\n\r\nI reproduced this in a fresh Python 3.8.10 virtual environment after running `pip install moto[kms]==4.1.3`. The `boto3` version is 1.26.75 and the `botocore` version is 1.29.75.\r\n\r\nSteps to reproduce:\r\n1. Import moto's `mock_kms` and start the mocker\r\n2. Instantiate a boto3 KMS client\r\n3. Create a key using the boto3 KMS `create_key()` method\r\n4. Create an alias that points to the key using `create_alias()`\r\n5. Encrypt some data using `encrypt()`, with `KeyId` set to the created alias\r\n\r\nExpected behavior is for this to encrypt the provided data against the key that the alias refers to, but instead I get back a `botocore.errorfactory.NotFoundException` with the full ARN of the resolved key. When I pass that full ARN to `describe_key()` or to `encrypt()` directly, those operations succeed.\r\n\r\nWhen running this against actual KMS, the boto3 `encrypt()` operation works successfully with a key ID.\r\n\r\n<details>\r\n\r\n<summary>Reproduction</summary>\r\n\r\n```\r\n(venv) ~/src/scratch % python\r\nPython 3.8.10 (default, Dec 20 2022, 16:02:04)\r\n[Clang 14.0.0 (clang-1400.0.29.202)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import boto3\r\n>>> from moto import mock_kms\r\n>>> mocker = mock_kms()\r\n>>> mocker.start()\r\n>>> kms = boto3.client(\"kms\", region_name=\"us-east-1\")\r\n>>> key_details = kms.create_key()\r\n>>> key_alias = \"alias/example-key\"\r\n>>> kms.create_alias(AliasName=key_alias, TargetKeyId=key_details[\"KeyMetadata\"][\"Arn\"])\r\n{'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n>>> kms.describe_key(KeyId=key_alias)\r\n{'KeyMetadata': {'AWSAccountId': '123456789012', 'KeyId': '57bc088d-0452-4626-8376-4570f683f9f0', 'Arn': 'arn:aws:kms:us-east-1:123456789012:key/57bc088d-0452-4626-8376-4570f683f9f0', 'CreationDate': datetime.datetime(2023, 2, 21, 13, 45, 32, 972874, tzinfo=tzlocal()), 'Enabled': True, 'Description': '', 'KeyState': 'Enabled', 'Origin': 'AWS_KMS', 'KeyManager': 'CUSTOMER', 'CustomerMasterKeySpec': 'SYMMETRIC_DEFAULT', 'KeySpec': 'SYMMETRIC_DEFAULT', 'EncryptionAlgorithms': ['SYMMETRIC_DEFAULT'], 'SigningAlgorithms': ['RSASSA_PKCS1_V1_5_SHA_256', 'RSASSA_PKCS1_V1_5_SHA_384', 'RSASSA_PKCS1_V1_5_SHA_512', 'RSASSA_PSS_SHA_256', 'RSASSA_PSS_SHA_384', 'RSASSA_PSS_SHA_512']}, 'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n>>> kms.encrypt(KeyId=key_alias, Plaintext=\"hello world\", EncryptionContext={})\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/rolandcrosby/src/scratch/venv/lib/python3.8/site-packages/botocore/client.py\", line 530, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/rolandcrosby/src/scratch/venv/lib/python3.8/site-packages/botocore/client.py\", line 960, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.errorfactory.NotFoundException: An error occurred (NotFoundException) when calling the Encrypt operation: keyId arn:aws:kms:us-east-1:123456789012:key/57bc088d-0452-4626-8376-4570f683f9f0 is not found.\r\n```\r\n\r\nThe key does exist and works fine when `encrypt()` is called with the ARN directly:\r\n\r\n```\r\n>>> kms.describe_key(KeyId=\"arn:aws:kms:us-east-1:123456789012:key/57bc088d-0452-4626-8376-4570f683f9f0\")\r\n{'KeyMetadata': {'AWSAccountId': '123456789012', 'KeyId': '57bc088d-0452-4626-8376-4570f683f9f0', 'Arn': 'arn:aws:kms:us-east-1:123456789012:key/57bc088d-0452-4626-8376-4570f683f9f0', 'CreationDate': datetime.datetime(2023, 2, 21, 13, 45, 32, 972874, tzinfo=tzlocal()), 'Enabled': True, 'Description': '', 'KeyState': 'Enabled', 'Origin': 'AWS_KMS', 'KeyManager': 'CUSTOMER', 'CustomerMasterKeySpec': 'SYMMETRIC_DEFAULT', 'KeySpec': 'SYMMETRIC_DEFAULT', 'EncryptionAlgorithms': ['SYMMETRIC_DEFAULT'], 'SigningAlgorithms': ['RSASSA_PKCS1_V1_5_SHA_256', 'RSASSA_PKCS1_V1_5_SHA_384', 'RSASSA_PKCS1_V1_5_SHA_512', 'RSASSA_PSS_SHA_256', 'RSASSA_PSS_SHA_384', 'RSASSA_PSS_SHA_512']}, 'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n>>> kms.encrypt(KeyId=\"arn:aws:kms:us-east-1:123456789012:key/57bc088d-0452-4626-8376-4570f683f9f0\", Plaintext=\"hello world\", EncryptionContext={})\r\n{'CiphertextBlob': b'57bc088d-0452-4626-8376-4570f683f9f0x\\xfe\\xff\\xaaBp\\xbe\\xf3{\\xf7B\\xc1#\\x8c\\xb4\\xe7\\xa0^\\xa4\\x9e\\x1d\\x04@\\x95\\xfc#\\xc0 \\x0c@\\xed\\xb3\\xa2]F\\xae\\n|\\x90', 'KeyId': 'arn:aws:kms:us-east-1:123456789012:key/57bc088d-0452-4626-8376-4570f683f9f0', 'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n```\r\n<hr>\r\n\r\n</details>\r\n\r\nThe [boto3 KMS docs for the `encrypt()` operation](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/kms.html#KMS.Client.encrypt) say the following about the `KeyId` argument:\r\n> To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\r\n\r\nWith this in mind, I considered that boto3 might be under the impression that the moto KMS key is in a different AWS account (since Moto uses the account ID `123456789012` on the generated key). If that's the case, is there a workaround to make boto think that all operations are indeed happening within account `123456789012`? I tried using `mock_sts()` to make sure that boto3's STS `get_caller_identity()` returns an identity in the `123456789012` account, but that didn't seem to help either:\r\n\r\n<details>\r\n<summary>Reproduction with `mock_sts`</summary>\r\n\r\n```\r\n>>> from moto import mock_kms, mock_sts\r\n>>> sts_mocker = mock_sts()\r\n>>> sts_mocker.start()\r\n>>> kms_mocker = mock_kms()\r\n>>> kms_mocker.start()\r\n>>> import boto3\r\n>>> kms = boto3.client(\"kms\", region_name=\"us-east-1\")\r\n>>> key = kms.create_key()\r\n>>> kms.create_alias(AliasName=\"alias/test-key\", TargetKeyId=key[\"KeyMetadata\"][\"Arn\"])\r\n{'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n>>> kms.encrypt(KeyId=\"alias/test-key\", Plaintext=\"foo\", EncryptionContext={})\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/rolandcrosby/src/scratch/venv/lib/python3.8/site-packages/botocore/client.py\", line 530, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/rolandcrosby/src/scratch/venv/lib/python3.8/site-packages/botocore/client.py\", line 960, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.errorfactory.NotFoundException: An error occurred (NotFoundException) when calling the Encrypt operation: keyId arn:aws:kms:us-east-1:123456789012:key/26c0638f-3a75-475d-8522-1d054601acf5 is not found.\r\n>>> sts = boto3.client(\"sts\")\r\n>>> sts.get_caller_identity()\r\n{'UserId': 'AKIAIOSFODNN7EXAMPLE', 'Account': '123456789012', 'Arn': 'arn:aws:sts::123456789012:user/moto', 'ResponseMetadata': {'RequestId': 'c6104cbe-af31-11e0-8154-cbc7ccf896c7', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n```\r\n\r\n</details>", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5957/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5956", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5956/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5956/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5956/events", "html_url": "https://github.com/getmoto/moto/issues/5956", "id": 1593956944, "node_id": "I_kwDOAH5NfM5fAdpQ", "number": 5956, "title": "Updating object in versioned bucket leaks key", "user": {"login": "hannes-ucsc", "id": 5143256, "node_id": "MDQ6VXNlcjUxNDMyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/5143256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hannes-ucsc", "html_url": "https://github.com/hannes-ucsc", "followers_url": "https://api.github.com/users/hannes-ucsc/followers", "following_url": "https://api.github.com/users/hannes-ucsc/following{/other_user}", "gists_url": "https://api.github.com/users/hannes-ucsc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hannes-ucsc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hannes-ucsc/subscriptions", "organizations_url": "https://api.github.com/users/hannes-ucsc/orgs", "repos_url": "https://api.github.com/users/hannes-ucsc/repos", "events_url": "https://api.github.com/users/hannes-ucsc/events{/privacy}", "received_events_url": "https://api.github.com/users/hannes-ucsc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-02-21T18:52:37Z", "updated_at": "2023-02-22T23:33:47Z", "closed_at": "2023-02-22T11:21:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Continued from #5937\r\n\r\n```python\r\npython <<END\r\nimport warnings\r\n\r\nfrom boto3 import client\r\nfrom moto import (\r\n    __version__,\r\n    mock_s3,\r\n)\r\n\r\nwarnings.simplefilter('error')\r\n\r\nprint(__version__)\r\n\r\nfor i in (1, 2):\r\n    with mock_s3():\r\n        s3 = client('s3')\r\n        s3.create_bucket(Bucket='foo')\r\n        s3.put_bucket_versioning(Bucket='foo',\r\n                                 VersioningConfiguration={\r\n                                     'Status': 'Enabled',\r\n                                     'MFADelete': 'Disabled'\r\n                                 })\r\n        s3.put_object(Bucket='foo', Key='bar', Body='stuff')\r\n        s3.put_object(Bucket='foo', Key='bar', Body='stuff2')\r\nEND\r\n```\r\n\r\nproduces\r\n\r\n```\r\n4.1.3.dev33\r\nException ignored in: <function FakeKey.__del__ at 0x1040cd1f0>\r\nTraceback (most recent call last):\r\n  File \"/Users/\u2026/.venv/lib/python3.9/site-packages/moto/s3/models.py\", line 359, in __del__\r\n    self.dispose(garbage=True)\r\n  File \"/Users/\u2026/.venv/lib/python3.9/site-packages/moto/s3/models.py\", line 349, in dispose\r\n    warnings.warn(\"S3 key was not disposed of in time\", ResourceWarning)\r\nResourceWarning: S3 key was not disposed of in time\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5956/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5956/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5950", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5950/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5950/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5950/events", "html_url": "https://github.com/getmoto/moto/issues/5950", "id": 1590897520, "node_id": "I_kwDOAH5NfM5e0ytw", "number": 5950, "title": "Scan of DynamoDB table with GSI ignores projection type and returns all attributes", "user": {"login": "DrGFreeman", "id": 22901938, "node_id": "MDQ6VXNlcjIyOTAxOTM4", "avatar_url": "https://avatars.githubusercontent.com/u/22901938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrGFreeman", "html_url": "https://github.com/DrGFreeman", "followers_url": "https://api.github.com/users/DrGFreeman/followers", "following_url": "https://api.github.com/users/DrGFreeman/following{/other_user}", "gists_url": "https://api.github.com/users/DrGFreeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrGFreeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrGFreeman/subscriptions", "organizations_url": "https://api.github.com/users/DrGFreeman/orgs", "repos_url": "https://api.github.com/users/DrGFreeman/repos", "events_url": "https://api.github.com/users/DrGFreeman/events{/privacy}", "received_events_url": "https://api.github.com/users/DrGFreeman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-02-19T23:08:41Z", "updated_at": "2023-02-22T11:16:56Z", "closed_at": "2023-02-22T11:16:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Description\r\n\r\nScanning the global secondary index (GSI) of a dynamodb table with the GSI projection type set to `INCLUDE` or `KEYS_ONLY` returns all the table attributes (i.e. ignores which attributes are projected to the index).\r\n\r\n## Steps to reproduce\r\n\r\nRun the following tests (using pytest):\r\n\r\n```python\r\nimport boto3\r\nfrom moto import mock_dynamodb\r\n\r\n\r\n@mock_dynamodb\r\ndef test_scan_gsi_projection_include_returns_only_included_attributes():\r\n    dynamodb = boto3.resource(\"dynamodb\", region_name=\"us-east-1\")\r\n\r\n    TABLE_NAME = \"table-with-gsi-project-include\"\r\n\r\n    dynamodb.create_table(\r\n        AttributeDefinitions=[\r\n            {\"AttributeName\": \"id\", \"AttributeType\": \"S\"},\r\n        ],\r\n        TableName=TABLE_NAME,\r\n        KeySchema=[\r\n            {\"AttributeName\": \"id\", \"KeyType\": \"HASH\"},\r\n        ],\r\n        GlobalSecondaryIndexes=[\r\n            {\r\n                \"IndexName\": \"proj-include\",\r\n                \"KeySchema\": [\r\n                    {\"AttributeName\": \"id\", \"KeyType\": \"HASH\"},\r\n                ],\r\n                \"Projection\": {\r\n                    \"ProjectionType\": \"INCLUDE\",\r\n                    \"NonKeyAttributes\": [\"attr2\"],\r\n                },\r\n                \"ProvisionedThroughput\": {\r\n                    \"ReadCapacityUnits\": 10,\r\n                    \"WriteCapacityUnits\": 10,\r\n                },\r\n            },\r\n        ],\r\n        BillingMode=\"PROVISIONED\",\r\n        ProvisionedThroughput={\"ReadCapacityUnits\": 10, \"WriteCapacityUnits\": 10},\r\n    )\r\n\r\n    table = dynamodb.Table(TABLE_NAME)\r\n\r\n    for id in \"A\", \"B\", \"C\":\r\n        table.put_item(Item=dict(id=id, attr1=f\"attr1_{id}\", attr2=f\"attr2_{id}\"))\r\n\r\n    items = table.scan(IndexName=\"proj-include\")[\"Items\"]\r\n\r\n    # Only id (key) and attr2 (projected) attributes are expected.\r\n    # Currently, all attribtues are returned.\r\n    assert sorted(items[0].keys()) == sorted([\"id\", \"attr2\"])\r\n\r\n\r\n@mock_dynamodb\r\ndef test_scan_gsi_projection_keys_only_returns_only_key_attributes():\r\n    dynamodb = boto3.resource(\"dynamodb\", region_name=\"us-east-1\")\r\n\r\n    TABLE_NAME = \"table-with-gsi-project-keys-only\"\r\n\r\n    dynamodb.create_table(\r\n        AttributeDefinitions=[\r\n            {\"AttributeName\": \"id\", \"AttributeType\": \"S\"},\r\n            {\"AttributeName\": \"seq\", \"AttributeType\": \"N\"},\r\n        ],\r\n        TableName=TABLE_NAME,\r\n        KeySchema=[\r\n            {\"AttributeName\": \"id\", \"KeyType\": \"HASH\"},\r\n            {\"AttributeName\": \"seq\", \"KeyType\": \"RANGE\"},\r\n        ],\r\n        GlobalSecondaryIndexes=[\r\n            {\r\n                \"IndexName\": \"proj-keys-only\",\r\n                \"KeySchema\": [\r\n                    {\"AttributeName\": \"id\", \"KeyType\": \"HASH\"},\r\n                    {\"AttributeName\": \"seq\", \"KeyType\": \"RANGE\"},\r\n                ],\r\n                \"Projection\": {\r\n                    \"ProjectionType\": \"KEYS_ONLY\",\r\n                },\r\n                \"ProvisionedThroughput\": {\r\n                    \"ReadCapacityUnits\": 10,\r\n                    \"WriteCapacityUnits\": 10,\r\n                },\r\n            },\r\n        ],\r\n        BillingMode=\"PROVISIONED\",\r\n        ProvisionedThroughput={\"ReadCapacityUnits\": 10, \"WriteCapacityUnits\": 10},\r\n    )\r\n\r\n    table = dynamodb.Table(TABLE_NAME)\r\n\r\n    for id in \"A\", \"B\", \"C\":\r\n        table.put_item(Item=dict(id=id, seq=0, attr1=f\"attr1_{id}0\"))\r\n        table.put_item(Item=dict(id=id, seq=1, attr1=f\"attr1_{id}1\"))\r\n\r\n    items = table.scan(IndexName=\"proj-keys-only\")[\"Items\"]\r\n\r\n    # Only id and seq (key) attributes are expected.\r\n    # Currently, all attribtues are returned.\r\n    assert sorted(items[0].keys()) == sorted([\"id\", \"seq\"])\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe two tests are expected to pass, i.e. only the attributes projected to the GSI are returned in the scanned items.\r\n\r\n## Actual behavior\r\n\r\nIn both tests, all the table attributes are returned in the scanned items.\r\n\r\nOutput of first test:\r\n```\r\n>       assert sorted(items[0].keys()) == sorted([\"id\", \"attr2\"])\r\nE       AssertionError: assert ['attr1', 'attr2', 'id'] == ['attr2', 'id']\r\nE         At index 0 diff: 'attr1' != 'attr2'\r\nE         Left contains one more item: 'id'\r\nE         Full diff:\r\nE         - ['attr2', 'id']\r\nE         + ['attr1', 'attr2', 'id']\r\nE         ?  +++++++++\r\n```\r\n\r\nOutput of second test:\r\n```\r\n>       assert sorted(items[0].keys()) == sorted([\"id\", \"seq\"])\r\nE       AssertionError: assert ['attr1', 'id', 'seq'] == ['id', 'seq']\r\nE         At index 0 diff: 'attr1' != 'id'\r\nE         Left contains one more item: 'seq'\r\nE         Full diff:\r\nE         - ['id', 'seq']\r\nE         + ['attr1', 'id', 'seq']\r\n```\r\n\r\n## Notes\r\n\r\nmoto installed via pip, Python 3.10 on Ubuntu 20.04:\r\n\r\n```\r\nboto3              1.26.74\r\nbotocore           1.29.74\r\nmoto               4.1.3\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5950/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5950/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5948", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5948/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5948/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5948/events", "html_url": "https://github.com/getmoto/moto/issues/5948", "id": 1590856286, "node_id": "I_kwDOAH5NfM5e0ope", "number": 5948, "title": "S3 - IAM: SignatureDoesNotMatch on bucket-related methods", "user": {"login": "Maxi-Mega", "id": 52792549, "node_id": "MDQ6VXNlcjUyNzkyNTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/52792549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maxi-Mega", "html_url": "https://github.com/Maxi-Mega", "followers_url": "https://api.github.com/users/Maxi-Mega/followers", "following_url": "https://api.github.com/users/Maxi-Mega/following{/other_user}", "gists_url": "https://api.github.com/users/Maxi-Mega/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maxi-Mega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maxi-Mega/subscriptions", "organizations_url": "https://api.github.com/users/Maxi-Mega/orgs", "repos_url": "https://api.github.com/users/Maxi-Mega/repos", "events_url": "https://api.github.com/users/Maxi-Mega/events{/privacy}", "received_events_url": "https://api.github.com/users/Maxi-Mega/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-02-19T21:10:24Z", "updated_at": "2023-02-20T20:49:00Z", "closed_at": "2023-02-20T20:49:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to call some methods on the s3 client while using moto, I get some unexpected `SignatureDoesNotMatch` exceptions.\r\n\r\nThe client can call `head_bucket` (maybe thanks to #4335 and #4346), but fails to call `get_bucket_location` or `list_objects_v2`:\r\n`An error occurred (SignatureDoesNotMatch) when calling the GetBucketLocation operation: The request signature we calculated does not match the signature you provided. Check your key and signing method.`\r\n\r\nAccording to [AWS docs](https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html), the only required permission to call `list_objects_v2` is `s3:ListBucket`, and it should be given with `s3:*`.\r\n\r\nThe code below works as expected if we pass `8` or more to the `@set_initial_no_auth_action_count`.\r\n\r\nHere is the code I stole from [your tests](https://github.com/getmoto/moto/blob/master/tests/test_s3/test_s3_auth.py) and slightly modified to illustrate this problem:\r\n```python\r\nimport json\r\nimport unittest\r\n\r\nimport boto3\r\nfrom moto import mock_iam, mock_s3\r\nfrom moto.core import set_initial_no_auth_action_count\r\n\r\n\r\nclass MotoS3AuthTests(unittest.TestCase):\r\n    bucket_name = \"mock_bucket\"\r\n\r\n    def call_bucket_methods(self, aws_access_key_id, aws_secret_access_key):\r\n        s3_client = boto3.client(\r\n            \"s3\",\r\n            aws_access_key_id=aws_access_key_id,\r\n            aws_secret_access_key=aws_secret_access_key,\r\n        )\r\n\r\n        # Works\r\n        s3_client.head_bucket(Bucket=self.bucket_name)\r\n\r\n        # Doesn't work\r\n        print(\"\\nBucket location: %s\" % s3_client.get_bucket_location(Bucket=self.bucket_name)[\"LocationConstraint\"])\r\n        # Doesn't work either\r\n        print(\"Objects: %d\" % s3_client.list_objects_v2(Bucket=self.bucket_name)[\"KeyCount\"])\r\n\r\n    @mock_iam\r\n    def create_user_with_access_key_and_policy(self, user_name=\"test-user\"):\r\n        \"\"\"\r\n        Should create a user with attached policy allowing read/write operations on S3.\r\n        \"\"\"\r\n        policy_document = {\r\n            \"Version\": \"2012-10-17\",\r\n            \"Statement\": [{\"Effect\": \"Allow\", \"Action\": \"s3:*\", \"Resource\": \"*\"}],\r\n        }\r\n\r\n        # Create client and user\r\n        client = boto3.client(\"iam\", region_name=\"us-east-1\")\r\n        client.create_user(UserName=user_name)\r\n\r\n        # Create and attach the policy\r\n        policy_arn = client.create_policy(\r\n            PolicyName=\"policy1\", PolicyDocument=json.dumps(policy_document)\r\n        )[\"Policy\"][\"Arn\"]\r\n        client.attach_user_policy(UserName=user_name, PolicyArn=policy_arn)\r\n\r\n        # Return the access keys\r\n        return client.create_access_key(UserName=user_name)[\"AccessKey\"]\r\n\r\n    @set_initial_no_auth_action_count(4)\r\n    @mock_s3\r\n    def test_head_bucket_with_correct_credentials(self):\r\n        # These calls are all unauthenticated\r\n        iam_keys = self.create_user_with_access_key_and_policy()\r\n\r\n        # This S3-client has correct credentials\r\n        s3 = boto3.client(\r\n            \"s3\",\r\n            aws_access_key_id=iam_keys[\"AccessKeyId\"],\r\n            aws_secret_access_key=iam_keys[\"SecretAccessKey\"],\r\n        )\r\n        s3.create_bucket(Bucket=self.bucket_name, CreateBucketConfiguration={'LocationConstraint': \"eu-west-3\"})\r\n\r\n        # Calling head_bucket with the correct credentials works ... mayby ?\r\n        self.call_bucket_methods(\r\n            aws_access_key_id=iam_keys[\"AccessKeyId\"],\r\n            aws_secret_access_key=iam_keys[\"SecretAccessKey\"],\r\n        )\r\n```\r\n\r\nHere is the error stack trace:\r\n```\r\n============================= test session starts ==============================\r\ncollecting ... collected 1 item\r\n\r\nmoto_iam_s3.py::MotoS3AuthTests::test_head_bucket_with_correct_credentials FAILED [100%]\r\nmoto_iam_s3.py:49 (MotoS3AuthTests.test_head_bucket_with_correct_credentials)\r\nself = <moto_iam_s3.MotoS3AuthTests testMethod=test_head_bucket_with_correct_credentials>\r\n\r\n    @set_initial_no_auth_action_count(4)\r\n    @mock_s3\r\n    def test_head_bucket_with_correct_credentials(self):\r\n        # These calls are all unauthenticated\r\n        iam_keys = self.create_user_with_access_key_and_policy()\r\n    \r\n        # This S3-client has correct credentials\r\n        s3 = boto3.client(\r\n            \"s3\",\r\n            aws_access_key_id=iam_keys[\"AccessKeyId\"],\r\n            aws_secret_access_key=iam_keys[\"SecretAccessKey\"],\r\n        )\r\n        s3.create_bucket(Bucket=self.bucket_name, CreateBucketConfiguration={'LocationConstraint': \"eu-west-3\"})\r\n    \r\n        # Calling head_bucket with the correct credentials works ... mayby ?\r\n>       self.call_bucket_methods(\r\n            aws_access_key_id=iam_keys[\"AccessKeyId\"],\r\n            aws_secret_access_key=iam_keys[\"SecretAccessKey\"],\r\n        )\r\n\r\nmoto_iam_s3.py:65: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nmoto_iam_s3.py:23: in call_bucket_methods\r\n    print(\"\\nBucket location: %s\" % s3_client.get_bucket_location(Bucket=self.bucket_name)[\"LocationConstraint\"])\r\nsomedir/lib/python3.10/site-packages/botocore/client.py:530: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.S3 object at 0x7fe766f0d300>\r\noperation_name = 'GetBucketLocation', api_params = {'Bucket': 'mock_bucket'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record(\r\n            'API_CALL',\r\n            {\r\n                'service': service_name,\r\n                'operation': operation_name,\r\n                'params': api_params,\r\n            },\r\n        )\r\n        if operation_model.deprecated:\r\n            logger.debug(\r\n                'Warning: %s.%s() is deprecated', service_name, operation_name\r\n            )\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        endpoint_url, additional_headers = self._resolve_endpoint_ruleset(\r\n            operation_model, api_params, request_context\r\n        )\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params=api_params,\r\n            operation_model=operation_model,\r\n            endpoint_url=endpoint_url,\r\n            context=request_context,\r\n            headers=additional_headers,\r\n        )\r\n        resolve_checksum_context(request_dict, operation_model, api_params)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id, operation_name=operation_name\r\n            ),\r\n            model=operation_model,\r\n            params=request_dict,\r\n            request_signer=self._request_signer,\r\n            context=request_context,\r\n        )\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            apply_request_checksum(request_dict)\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context\r\n            )\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id, operation_name=operation_name\r\n            ),\r\n            http_response=http,\r\n            parsed=parsed_response,\r\n            model=operation_model,\r\n            context=request_context,\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.exceptions.ClientError: An error occurred (SignatureDoesNotMatch) when calling the GetBucketLocation operation: The request signature we calculated does not match the signature you provided. Check your key and signing method.\r\n\r\nsomedir/lib/python3.10/site-packages/botocore/client.py:960: ClientError\r\n\r\n============================== 1 failed in 0.50s ===============================\r\n```\r\n\r\nHere are the dependencies versions:\r\n```\r\nboto3==1.26.74\r\nbotocore==1.29.74\r\nmoto==4.1.2\r\n```\r\n\r\nHope I gave enough details, please tell me what I did wrong or how to get the `s3_client.get_bucket_location` to work\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5948/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5937", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5937/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5937/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5937/events", "html_url": "https://github.com/getmoto/moto/issues/5937", "id": 1588212155, "node_id": "I_kwDOAH5NfM5eqjG7", "number": 5937, "title": "Deleting S3 object version leaks key", "user": {"login": "hannes-ucsc", "id": 5143256, "node_id": "MDQ6VXNlcjUxNDMyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/5143256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hannes-ucsc", "html_url": "https://github.com/hannes-ucsc", "followers_url": "https://api.github.com/users/hannes-ucsc/followers", "following_url": "https://api.github.com/users/hannes-ucsc/following{/other_user}", "gists_url": "https://api.github.com/users/hannes-ucsc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hannes-ucsc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hannes-ucsc/subscriptions", "organizations_url": "https://api.github.com/users/hannes-ucsc/orgs", "repos_url": "https://api.github.com/users/hannes-ucsc/repos", "events_url": "https://api.github.com/users/hannes-ucsc/events{/privacy}", "received_events_url": "https://api.github.com/users/hannes-ucsc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-02-16T18:59:23Z", "updated_at": "2023-02-18T00:02:28Z", "closed_at": "2023-02-18T00:02:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Continued from https://github.com/getmoto/moto/issues/5930\r\n\r\n```python\r\npython <<END\r\nimport warnings\r\n\r\nfrom boto3 import client\r\nfrom moto import __version__, mock_s3\r\n\r\nwarnings.simplefilter('error')\r\n\r\nprint(__version__)\r\n\r\nwith mock_s3():\r\n    s3 = client('s3')\r\n    s3.create_bucket(Bucket='foo')\r\n    s3.put_bucket_versioning(Bucket='foo',\r\n                             VersioningConfiguration={\r\n                                 'Status': 'Enabled',\r\n                                 'MFADelete': 'Disabled'\r\n                             })\r\n    version = s3.put_object(Bucket='foo', Key='bar', Body='stuff')['VersionId']\r\n    s3.delete_object(Bucket='foo', Key='bar', VersionId=version)\r\nEND\r\n```\r\n\r\nproduces\r\n\r\n```\r\n4.1.3.dev29\r\nException ignored in: <function FakeKey.__del__ at 0x104297040>\r\nTraceback (most recent call last):\r\n  File \"/Users/hannes/workspace/hca/azul/.venv/lib/python3.9/site-packages/moto/s3/models.py\", line 359, in __del__\r\n    self.dispose(garbage=True)\r\n  File \"/Users/hannes/workspace/hca/azul/.venv/lib/python3.9/site-packages/moto/s3/models.py\", line 349, in dispose\r\n    warnings.warn(\"S3 key was not disposed of in time\", ResourceWarning)\r\nResourceWarning: S3 key was not disposed of in time\r\n```\r\n\r\nRemoving `, VersionId=version` from the `delete_object` call makes it pass.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5937/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5933", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5933/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5933/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5933/events", "html_url": "https://github.com/getmoto/moto/issues/5933", "id": 1586480587, "node_id": "I_kwDOAH5NfM5ej8XL", "number": 5933, "title": "Incorect response when calling glue.get_table_versions", "user": {"login": "nicor88", "id": 6278547, "node_id": "MDQ6VXNlcjYyNzg1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6278547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicor88", "html_url": "https://github.com/nicor88", "followers_url": "https://api.github.com/users/nicor88/followers", "following_url": "https://api.github.com/users/nicor88/following{/other_user}", "gists_url": "https://api.github.com/users/nicor88/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicor88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicor88/subscriptions", "organizations_url": "https://api.github.com/users/nicor88/orgs", "repos_url": "https://api.github.com/users/nicor88/repos", "events_url": "https://api.github.com/users/nicor88/events{/privacy}", "received_events_url": "https://api.github.com/users/nicor88/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2023-02-15T20:06:15Z", "updated_at": "2023-02-20T07:57:52Z", "closed_at": "2023-02-17T11:35:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\nThe current implementation of glue.get_table_versions, see [here](https://github.com/getmoto/moto/blob/78840fd71c365bb40214f59a9d7c5f5f3d00b850/moto/glue/responses.py#L73-L85)\r\n\r\nit's different from the actual response from boto3. Specifically `VersionId` it's a key of Table, and not a separate Key.\r\nAlso UpdateTime seems missing...\r\nA possibility is to do something like that:\r\n\r\n\r\n```python\r\nreturn json.dumps(\r\n      {\r\n          \"TableVersions\": [\r\n            {\"Table\": {**table.as_dict(version=n), **{\"VersionId\": str(n + 1), \"UpdateTime\": ....random time}}\r\n             for n in range(len(table.versions))\r\n                ]\r\n            }\r\n        )\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5933/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5933/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5930", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5930/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5930/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5930/events", "html_url": "https://github.com/getmoto/moto/issues/5930", "id": 1585167833, "node_id": "I_kwDOAH5NfM5ee73Z", "number": 5930, "title": "Invoking `mock_s3` twice leaks key", "user": {"login": "hannes-ucsc", "id": 5143256, "node_id": "MDQ6VXNlcjUxNDMyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/5143256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hannes-ucsc", "html_url": "https://github.com/hannes-ucsc", "followers_url": "https://api.github.com/users/hannes-ucsc/followers", "following_url": "https://api.github.com/users/hannes-ucsc/following{/other_user}", "gists_url": "https://api.github.com/users/hannes-ucsc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hannes-ucsc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hannes-ucsc/subscriptions", "organizations_url": "https://api.github.com/users/hannes-ucsc/orgs", "repos_url": "https://api.github.com/users/hannes-ucsc/repos", "events_url": "https://api.github.com/users/hannes-ucsc/events{/privacy}", "received_events_url": "https://api.github.com/users/hannes-ucsc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-02-15T03:54:10Z", "updated_at": "2023-02-16T19:01:33Z", "closed_at": "2023-02-16T10:52:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Continued from #5913\r\n\r\n```python\r\n$ python -Wall <<END\r\nfrom boto3 import client\r\nfrom moto import mock_s3, __version__\r\n\r\nprint(__version__)\r\n\r\nwith mock_s3():\r\n    s3 = client('s3')\r\n    s3.create_bucket(Bucket='foo')\r\n    s3.put_object(Bucket='foo', Key='bar', Body='stuff')\r\n\r\nwith mock_s3():\r\n    pass\r\nEND\r\n```\r\n\r\nproduces\r\n\r\n```\r\n4.1.3.dev22\r\n/Users/hannes/workspace/hca/azul/.venv/lib/python3.9/site-packages/moto/s3/models.py:349: ResourceWarning: S3 key was not disposed of in time\r\n  warnings.warn(\"S3 key was not disposed of in time\", ResourceWarning)\r\n```\r\n  \r\n Didn't look into the cause this time. It must be a regression introduced by PR #5920 because I can't reproduce on 4.1.2.\r\n  ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5930/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5930/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5927", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5927/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5927/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5927/events", "html_url": "https://github.com/getmoto/moto/issues/5927", "id": 1583893390, "node_id": "I_kwDOAH5NfM5eaEuO", "number": 5927, "title": "Mocking password_last_used date", "user": {"login": "WesleyHindle", "id": 76964214, "node_id": "MDQ6VXNlcjc2OTY0MjE0", "avatar_url": "https://avatars.githubusercontent.com/u/76964214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WesleyHindle", "html_url": "https://github.com/WesleyHindle", "followers_url": "https://api.github.com/users/WesleyHindle/followers", "following_url": "https://api.github.com/users/WesleyHindle/following{/other_user}", "gists_url": "https://api.github.com/users/WesleyHindle/gists{/gist_id}", "starred_url": "https://api.github.com/users/WesleyHindle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WesleyHindle/subscriptions", "organizations_url": "https://api.github.com/users/WesleyHindle/orgs", "repos_url": "https://api.github.com/users/WesleyHindle/repos", "events_url": "https://api.github.com/users/WesleyHindle/events{/privacy}", "received_events_url": "https://api.github.com/users/WesleyHindle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 28886780, "node_id": "MDU6TGFiZWwyODg4Njc4MA==", "url": "https://api.github.com/repos/getmoto/moto/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2023-02-14T10:24:03Z", "updated_at": "2023-02-23T09:30:36Z", "closed_at": "2023-02-23T09:30:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to mock a specific date that an IAM user last used their password?\r\n\r\nI think the answer is no, because you actually have to log into the console to have used the password, but just wondered if I had missed anything.\r\n\r\nThanks.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5927/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5916", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5916/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5916/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5916/events", "html_url": "https://github.com/getmoto/moto/issues/5916", "id": 1578399642, "node_id": "I_kwDOAH5NfM5eFHea", "number": 5916, "title": "errors around update_item() when using SET and increment", "user": {"login": "jlewis92", "id": 18499994, "node_id": "MDQ6VXNlcjE4NDk5OTk0", "avatar_url": "https://avatars.githubusercontent.com/u/18499994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlewis92", "html_url": "https://github.com/jlewis92", "followers_url": "https://api.github.com/users/jlewis92/followers", "following_url": "https://api.github.com/users/jlewis92/following{/other_user}", "gists_url": "https://api.github.com/users/jlewis92/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlewis92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlewis92/subscriptions", "organizations_url": "https://api.github.com/users/jlewis92/orgs", "repos_url": "https://api.github.com/users/jlewis92/repos", "events_url": "https://api.github.com/users/jlewis92/events{/privacy}", "received_events_url": "https://api.github.com/users/jlewis92/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-02-09T18:31:42Z", "updated_at": "2023-02-11T15:10:42Z", "closed_at": "2023-02-11T11:51:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI've been working with moto on the dynamodb client and I'm noticing an issue where I'm getting errors around the update_item() function while using SET with an increment where I'm getting the following error:\r\n\r\n> botocore.exceptions.ClientError: An error occurred (ValidationException) when calling the UpdateItem operation: Validation Exception\r\n\r\nWhereas when I use both dynamodb local and on AWS I don't get any errors back and the value is successfully updated\r\n\r\ncode to replicate:\r\n\r\n```\r\nimport unittest\r\nimport os\r\nfrom unittest import mock\r\nimport boto3\r\nfrom moto import mock_dynamodb\r\n\r\nclass TestStuff(unittest.TestCase):\r\n\r\n    def test_execute_local(self):\r\n        client = boto3.client('dynamodb', endpoint_url=\"http://localhost:8000\")\r\n        item = {\r\n            \"TableName\": \"some-table\",\r\n            \"Item\": {\r\n                \"PK\": {\"S\":\"somePK\"}, \r\n                \"SomeColumn\": {\"N\":\"2\"}\r\n            }\r\n        }\r\n\r\n        itemTwo = {\r\n            \"TableName\": \"some-table\",\r\n            \"Key\": {\r\n                \"PK\": {\"S\":\"somePK\"}\r\n            },\r\n            \"UpdateExpression\": \"SET #someColumn = #someColumn + :increment\",\r\n            \"ExpressionAttributeNames\": {\"#someColumn\":\"SomeColumn\"},\r\n            \"ExpressionAttributeValues\": {\":increment\": {\"N\":\"1\"}},\r\n            \"ReturnValues\":\"UPDATED_NEW\"\r\n        }\r\n\r\n        # checking I can put values in the table\r\n        res = client.put_item(**item)\r\n        self.assertEqual(200, res['ResponseMetadata']['HTTPStatusCode'])\r\n        # no error\r\n        resTwo = client.update_item(**itemTwo)\r\n        self.assertEqual(200, resTwo['ResponseMetadata']['HTTPStatusCode'])\r\n\r\n\r\n    @mock.patch.dict(os.environ, {\"AWS_DEFAULT_REGION\": \"us-east-1\"})\r\n    @mock_dynamodb\r\n    def test_execute_mock(self):\r\n        client = boto3.client('dynamodb')\r\n        client.create_table(TableName='some-table',\r\n        KeySchema=[{'AttributeName': 'PK','KeyType': 'HASH'},{'AttributeName': 'SomeColumn','KeyType': 'N'}],\r\n        BillingMode=\"PAY_PER_REQUEST\",\r\n        AttributeDefinitions=[{'AttributeName': 'PK','AttributeType': 'S'},{'AttributeName': 'SomeColumn','AttributeType': 'N'}])\r\n\r\n        item = {\r\n            \"TableName\": \"some-table\",\r\n            \"Item\": {\r\n                \"PK\": {\"S\":\"somePK\"}, \r\n                \"SomeColumn\": {\"N\":\"2\"}\r\n            }\r\n        }\r\n\r\n        itemTwo = {\r\n            \"TableName\": \"some-table\",\r\n            \"Key\": {\r\n                \"PK\": {\"S\":\"somePK\"}\r\n            },\r\n            \"UpdateExpression\": \"SET #someColumn = #someColumn + :increment\",\r\n            \"ExpressionAttributeNames\": {\"#someColumn\":\"SomeColumn\"},\r\n            \"ExpressionAttributeValues\": {\":increment\": {\"N\":\"1\"}},\r\n            \"ReturnValues\":\"UPDATED_NEW\"\r\n        }\r\n\r\n        # checking I can put values in the table\r\n        res = client.put_item(**item)\r\n        self.assertEqual(200, res['ResponseMetadata']['HTTPStatusCode'])\r\n        # gets an error\r\n        resTwo = client.update_item(**itemTwo)\r\n        self.assertEqual(200, resTwo['ResponseMetadata']['HTTPStatusCode'])\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n```\r\n\r\ncurrent versions:\r\n```\r\npython=3.10\r\nboto3=1.26.64\r\nmoto=4.1.2\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5916/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5916/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5914", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5914/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5914/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5914/events", "html_url": "https://github.com/getmoto/moto/issues/5914", "id": 1577702596, "node_id": "I_kwDOAH5NfM5eCdTE", "number": 5914, "title": "create_function() return wrong \"LastModified\" date format", "user": {"login": "shanishiri", "id": 19146744, "node_id": "MDQ6VXNlcjE5MTQ2NzQ0", "avatar_url": "https://avatars.githubusercontent.com/u/19146744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shanishiri", "html_url": "https://github.com/shanishiri", "followers_url": "https://api.github.com/users/shanishiri/followers", "following_url": "https://api.github.com/users/shanishiri/following{/other_user}", "gists_url": "https://api.github.com/users/shanishiri/gists{/gist_id}", "starred_url": "https://api.github.com/users/shanishiri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shanishiri/subscriptions", "organizations_url": "https://api.github.com/users/shanishiri/orgs", "repos_url": "https://api.github.com/users/shanishiri/repos", "events_url": "https://api.github.com/users/shanishiri/events{/privacy}", "received_events_url": "https://api.github.com/users/shanishiri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-02-09T11:17:43Z", "updated_at": "2023-02-12T22:27:46Z", "closed_at": "2023-02-12T22:27:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "create_function method is creating instance of \"LambdaFunction\" class, which initialize last_modified with different datetime string format then the [official boto3 docs define  ](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lambda.html#Lambda.Client.create_function)\r\n\r\nmoto:\r\nself.last_modified = datetime.datetime.utcnow().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n\r\nwhere the datetime format should be \"%Y-%m-%dT%H:%M:%S.%f+0000\"\r\n\r\n```\r\n@mock_lambda\r\ndef test_create_function():\r\n  func = client.create_function(\r\n          FunctionName=\"1\",\r\n          Runtime=\"nodejs12.x\",\r\n          Role=role_arn,\r\n          Code={\"ZipFile\": b\"\"},\r\n          Handler=\"original_handler\",\r\n          Environment={\"Variables\": {\"aa\": \"bb\"}},\r\n          Layers=[layer]\r\n      )\r\n```\r\n\r\nfor func['LastModified'] expected value is: `\"2023-02-09T11:02:38.281+0000\"`\r\n\r\nactual value: `\"2023-02-09 11:02:38\"`\r\n\r\nusing moto==4.1.2", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5914/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5914/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5913", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5913/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5913/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5913/events", "html_url": "https://github.com/getmoto/moto/issues/5913", "id": 1577121420, "node_id": "I_kwDOAH5NfM5eAPaM", "number": 5913, "title": "S3 backend leaks keys if used together with other backends", "user": {"login": "hannes-ucsc", "id": 5143256, "node_id": "MDQ6VXNlcjUxNDMyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/5143256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hannes-ucsc", "html_url": "https://github.com/hannes-ucsc", "followers_url": "https://api.github.com/users/hannes-ucsc/followers", "following_url": "https://api.github.com/users/hannes-ucsc/following{/other_user}", "gists_url": "https://api.github.com/users/hannes-ucsc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hannes-ucsc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hannes-ucsc/subscriptions", "organizations_url": "https://api.github.com/users/hannes-ucsc/orgs", "repos_url": "https://api.github.com/users/hannes-ucsc/repos", "events_url": "https://api.github.com/users/hannes-ucsc/events{/privacy}", "received_events_url": "https://api.github.com/users/hannes-ucsc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-02-09T02:25:21Z", "updated_at": "2023-02-12T17:58:32Z", "closed_at": "2023-02-12T17:58:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Continued from #5584. I'm encountering this in a test case that needs both S3 and DynamoDB mocked. Here's the smallest repro I can think of:\r\n\r\n```python\r\n$ python -Wall\r\nPython 3.9.12 (main, Oct  8 2022, 00:52:50) \r\n[Clang 14.0.0 (clang-1400.0.29.102)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import gc\r\n>>> from moto.s3.models import S3Backend\r\n>>> from moto.dynamodb.models import DynamoDBBackend\r\n>>> from moto import __version__\r\n>>> __version__\r\n'4.1.2'\r\n>>> s3 = S3Backend('us-west-1', '1234')\r\n>>> db = DynamoDBBackend('us-west-1', '1234')\r\n>>> s3.create_bucket('my-bucket','us-west-1')\r\n<moto.s3.models.FakeBucket object at 0x104d57be0>\r\n>>> s3.put_object('my-bucket','my-key', 'y')\r\n<moto.s3.models.FakeKey object at 0x104d57c40>\r\n>>> db.reset()\r\n>>> s3.reset()\r\n>>> gc.collect()\r\n/Users/hannes/.venv/lib/python3.9/site-packages/moto/s3/models.py:349: ResourceWarning: S3 key was not disposed of in time\r\n  warnings.warn(\"S3 key was not disposed of in time\", ResourceWarning)\r\n29269\r\n>>> \r\n```\r\n\r\nThe issue seems to be that `BaseBackend.reset()` \u2014 via `._reset_model_refs()` \u2014 resets each model's `.instances` class attribute to an empty list so that when `S3Backend.reset()` attempts to properly dispose the `FakeKey` instances, that list in `FakeKey.instances` is already empty, and the key leaks. \r\n\r\nMaybe `_reset_model_refs()` should call `dispose()` on every model instance before resetting `.instances` to `[]`. That would mean that the `dispose()` protocol becomes part of every model.  Then again, it seems odd that one backend resets the models of another one. Maybe it should only reset its own models.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5913/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5913/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5897", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5897/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5897/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5897/events", "html_url": "https://github.com/getmoto/moto/issues/5897", "id": 1568403454, "node_id": "I_kwDOAH5NfM5de-_-", "number": 5897, "title": "[IAM] Adding user the same IAM group twice causes the group to become \"sticky\"", "user": {"login": "demosito", "id": 16720217, "node_id": "MDQ6VXNlcjE2NzIwMjE3", "avatar_url": "https://avatars.githubusercontent.com/u/16720217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/demosito", "html_url": "https://github.com/demosito", "followers_url": "https://api.github.com/users/demosito/followers", "following_url": "https://api.github.com/users/demosito/following{/other_user}", "gists_url": "https://api.github.com/users/demosito/gists{/gist_id}", "starred_url": "https://api.github.com/users/demosito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/demosito/subscriptions", "organizations_url": "https://api.github.com/users/demosito/orgs", "repos_url": "https://api.github.com/users/demosito/repos", "events_url": "https://api.github.com/users/demosito/events{/privacy}", "received_events_url": "https://api.github.com/users/demosito/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2023-02-02T16:55:47Z", "updated_at": "2023-02-03T12:07:04Z", "closed_at": "2023-02-03T12:07:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi team.\r\nDiscovered an interesting behavior of mock_s3: if I add an IAM user to an IAM group and then remove the user from the group, everything works as expected, i.e. as a result the user is not a member of any group. However, if I add the user to the same group **twice** and then remove the user them from the group, the group membership is still retained. So it looks like adding a user to a group is not idempotent operation.\r\n\r\n```python\r\nfrom moto import mock_iam\r\nimport boto3\r\n\r\n\r\n@mock_iam\r\ndef test_moto():\r\n    iam = boto3.client(\"iam\")\r\n\r\n    def get_iam_user_groups(user_name: str) -> \"list[str]\":\r\n        \"\"\"List names of groups the given IAM user is member of\"\"\"\r\n        paginator = iam.get_paginator(\"list_groups_for_user\")\r\n        return [\r\n            group[\"GroupName\"]\r\n            for page in paginator.paginate(UserName=user_name)\r\n            for group in page[\"Groups\"]\r\n        ]\r\n\r\n    iam.create_group(Path=\"test\", GroupName=\"test1\")\r\n    iam.create_user(UserName=\"test\")\r\n\r\n    iam.add_user_to_group(GroupName=\"test1\", UserName=\"test\")\r\n    # the test works without this line and breaks with it whilst it should not affect\r\n    iam.add_user_to_group(GroupName=\"test1\", UserName=\"test\")\r\n\r\n    iam.remove_user_from_group(GroupName=\"test1\", UserName=\"test\")\r\n    assert get_iam_user_groups(\"test\") == []\r\n```\r\n\r\nRunning this test case with pytest causes it to fail on the last line with the following error:\r\n```\r\n>       assert get_iam_user_groups(\"test\") == []\r\nE       AssertionError: assert ['test1'] == []\r\nE         Left contains one more item: 'test1'\r\nE         Use -v to get the full diff\r\n\r\nmtest.py:26: AssertionError\r\n```\r\n\r\nIf I uncomment the third line from the bottom (`iam.add_user_to_group(GroupName=\"test1\", UserName=\"test\")`) which is duplicate of the one above it, the test passes.\r\n\r\n```\r\n$ pip list | grep [bm]oto\r\naiobotocore                  2.3.4\r\nboto3                        1.20.34\r\nbotocore                     1.23.34\r\nmoto                         4.1.1\r\n$ python --version\r\nPython 3.8.14\r\n```\r\n\r\nRan pytest as `pytest -s  mtest.py`. Installed moto with `pip install moto[iam]`.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5897/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5897/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5889", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5889/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5889/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5889/events", "html_url": "https://github.com/getmoto/moto/issues/5889", "id": 1565095931, "node_id": "I_kwDOAH5NfM5dSXf7", "number": 5889, "title": "Kinesis get_shard_iterator support does not handle StreamARN parameter", "user": {"login": "smcoll", "id": 321438, "node_id": "MDQ6VXNlcjMyMTQzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/321438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smcoll", "html_url": "https://github.com/smcoll", "followers_url": "https://api.github.com/users/smcoll/followers", "following_url": "https://api.github.com/users/smcoll/following{/other_user}", "gists_url": "https://api.github.com/users/smcoll/gists{/gist_id}", "starred_url": "https://api.github.com/users/smcoll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smcoll/subscriptions", "organizations_url": "https://api.github.com/users/smcoll/orgs", "repos_url": "https://api.github.com/users/smcoll/repos", "events_url": "https://api.github.com/users/smcoll/events{/privacy}", "received_events_url": "https://api.github.com/users/smcoll/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-01-31T22:33:16Z", "updated_at": "2023-02-01T16:16:27Z", "closed_at": "2023-02-01T16:16:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using the `StreamARN` parameter in the `get_shard_iterator` Kinesis client method (rather than `StreamName`), an UnrecognizedClientException is raised. \r\n\r\n[boto3 docs are saying](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/kinesis.html#Kinesis.Client.get_shard_iterator), for a number of methods, that `StreamARN` is preferred:\r\n\r\n> When invoking this API, it is recommended you use the StreamARN input parameter rather than the StreamName input parameter.\r\n\r\n## How to reproduce\r\n\r\nAdd this test (derivative of `test_basic_shard_iterator_boto3`) to `moto/tests/test_kinesis/test_kinesis.py`:\r\n\r\n```python\r\n@mock_kinesis\r\ndef test_basic_shard_iterator_by_stream_arn_boto3():\r\n    client = boto3.client(\"kinesis\", region_name=\"us-west-1\")\r\n\r\n    stream_name = \"mystream\"\r\n    client.create_stream(StreamName=stream_name, ShardCount=1)\r\n    stream = client.describe_stream(StreamName=stream_name)[\"StreamDescription\"]\r\n    shard_id = stream[\"Shards\"][0][\"ShardId\"]\r\n\r\n    resp = client.get_shard_iterator(\r\n        StreamARN=stream[\"StreamARN\"], ShardId=shard_id, ShardIteratorType=\"TRIM_HORIZON\"\r\n    )\r\n    shard_iterator = resp[\"ShardIterator\"]\r\n\r\n    resp = client.get_records(ShardIterator=shard_iterator)\r\n    resp.should.have.key(\"Records\").length_of(0)\r\n    resp.should.have.key(\"MillisBehindLatest\").equal(0)\r\n```\r\nRun `pytest -v ./tests/test_kinesis` and get this result:\r\n\r\n```\r\n================================================== FAILURES ==================================================\r\n_______________________________ test_basic_shard_iterator_by_stream_arn_boto3 ________________________________\r\n\r\n    @mock_kinesis\r\n    def test_basic_shard_iterator_by_stream_arn_boto3():\r\n        client = boto3.client(\"kinesis\", region_name=\"us-west-1\")\r\n    \r\n        stream_name = \"mystream\"\r\n        client.create_stream(StreamName=stream_name, ShardCount=1)\r\n        stream = client.describe_stream(StreamName=stream_name)[\"StreamDescription\"]\r\n        shard_id = stream[\"Shards\"][0][\"ShardId\"]\r\n    \r\n>       resp = client.get_shard_iterator(\r\n            StreamARN=stream[\"StreamARN\"], ShardId=shard_id, ShardIteratorType=\"TRIM_HORIZON\"\r\n        )\r\n\r\ntests/test_kinesis/test_kinesis.py:160: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/home/me/.pyenv/versions/3.9.13/envs/moto/lib/python3.9/site-packages/botocore/client.py:530: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.Kinesis object at 0x7f8e57522760>, operation_name = 'GetShardIterator'\r\napi_params = {'ShardId': 'shardId-000000000000', 'ShardIteratorType': 'TRIM_HORIZON', 'StreamARN': 'arn:aws:kinesis:us-west-1:123456789012:stream/mystream'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record(\r\n            'API_CALL',\r\n            {\r\n                'service': service_name,\r\n                'operation': operation_name,\r\n                'params': api_params,\r\n            },\r\n        )\r\n        if operation_model.deprecated:\r\n            logger.debug(\r\n                'Warning: %s.%s() is deprecated', service_name, operation_name\r\n            )\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        endpoint_url, additional_headers = self._resolve_endpoint_ruleset(\r\n            operation_model, api_params, request_context\r\n        )\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params=api_params,\r\n            operation_model=operation_model,\r\n            endpoint_url=endpoint_url,\r\n            context=request_context,\r\n            headers=additional_headers,\r\n        )\r\n        resolve_checksum_context(request_dict, operation_model, api_params)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id, operation_name=operation_name\r\n            ),\r\n            model=operation_model,\r\n            params=request_dict,\r\n            request_signer=self._request_signer,\r\n            context=request_context,\r\n        )\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            apply_request_checksum(request_dict)\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context\r\n            )\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id, operation_name=operation_name\r\n            ),\r\n            http_response=http,\r\n            parsed=parsed_response,\r\n            model=operation_model,\r\n            context=request_context,\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.exceptions.ClientError: An error occurred (UnrecognizedClientException) when calling the GetShardIterator operation: The security token included in the request is invalid.\r\n\r\n/home/me/.pyenv/versions/3.9.13/envs/moto/lib/python3.9/site-packages/botocore/client.py:960: ClientError\r\n========================================== short test summary info ===========================================\r\nFAILED tests/test_kinesis/test_kinesis.py::test_basic_shard_iterator_by_stream_arn_boto3 - botocore.exceptions.ClientError: An error occurred (UnrecognizedClientException) when calling the GetShar...\r\n======================================= 1 failed, 70 passed in 16.92s ========================================\r\n```\r\n\r\nUsing commit b42fd2e7.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5889/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5889/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5871", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5871/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5871/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5871/events", "html_url": "https://github.com/getmoto/moto/issues/5871", "id": 1553476224, "node_id": "I_kwDOAH5NfM5cmCqA", "number": 5871, "title": "CognitoIDP admin_initiate_auth() doesn't work with REFRESH_TOKEN_AUTH flow", "user": {"login": "opavlyuk", "id": 40970635, "node_id": "MDQ6VXNlcjQwOTcwNjM1", "avatar_url": "https://avatars.githubusercontent.com/u/40970635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/opavlyuk", "html_url": "https://github.com/opavlyuk", "followers_url": "https://api.github.com/users/opavlyuk/followers", "following_url": "https://api.github.com/users/opavlyuk/following{/other_user}", "gists_url": "https://api.github.com/users/opavlyuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/opavlyuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/opavlyuk/subscriptions", "organizations_url": "https://api.github.com/users/opavlyuk/orgs", "repos_url": "https://api.github.com/users/opavlyuk/repos", "events_url": "https://api.github.com/users/opavlyuk/events{/privacy}", "received_events_url": "https://api.github.com/users/opavlyuk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-01-23T17:22:19Z", "updated_at": "2023-01-24T15:28:05Z", "closed_at": "2023-01-24T15:27:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[admin_itiniate_auth](https://github.com/getmoto/moto/blob/master/moto/cognitoidp/models.py#L1387-L1450) throws the following error when called with `REFRESH_TOKEN_AUTH` auth flow, while `REFRESH_TOKEN` auth flow works fine.\r\n\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/username/projects/moto_test/repro.py\", line 43, in <module>\r\n    auth_result = boto_client.admin_initiate_auth(\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/username/.local/share/virtualenvs/moto_test-DFgWBiEa/lib/python3.11/site-packages/botocore/client.py\", line 530, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/username/.local/share/virtualenvs/moto_test-DFgWBiEa/lib/python3.11/site-packages/botocore/client.py\", line 943, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n                            ^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/username/.local/share/virtualenvs/moto_test-DFgWBiEa/lib/python3.11/site-packages/botocore/client.py\", line 966, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/username/.local/share/virtualenvs/moto_test-DFgWBiEa/lib/python3.11/site-packages/botocore/endpoint.py\", line 119, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/username/.local/share/virtualenvs/moto_test-DFgWBiEa/lib/python3.11/site-packages/botocore/endpoint.py\", line 223, in _send_request\r\n    and 'ResponseMetadata' in success_response[1]\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nTypeError: argument of type 'NoneType' is not iterable\r\n```\r\n\r\nIf I get it right, according to the [documentation](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html?highlight=refresh_token_auth#CognitoIdentityProvider.Client.admin_initiate_auth), the behavior should be the same:\r\n> REFRESH_TOKEN_AUTH / REFRESH_TOKEN : Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.\r\n\r\nScript to reproduce:\r\n```python\r\nimport moto\r\nimport boto3\r\n\r\nwith moto.mock_cognitoidp():\r\n    boto_client = boto3.client(\"cognito-idp\", region_name=\"us-east-1\")\r\n\r\n    user_pool = boto_client.create_user_pool(PoolName=\"us-east-1_id\")\r\n    user_pool_id = user_pool[\"UserPool\"][\"Id\"]\r\n    user_pool_client = boto_client.create_user_pool_client(\r\n        UserPoolId=user_pool_id, ClientName=\"test_client\", GenerateSecret=True\r\n    )\r\n    user_pool_client_id = user_pool_client[\"UserPoolClient\"][\"ClientId\"]\r\n\r\n    user_email = \"test@email.com\"\r\n    user_password = \"TestPassword@123\"\r\n    user_attributes = [\r\n        dict(Name=\"email\", Value=user_email),\r\n        dict(Name=\"email_verified\", Value=\"True\"),\r\n    ]\r\n    boto_client.admin_create_user(\r\n        UserPoolId=user_pool_id,\r\n        Username=user_email,\r\n        DesiredDeliveryMediums=[\"EMAIL\"],\r\n        UserAttributes=user_attributes,\r\n        TemporaryPassword=user_password,\r\n    )\r\n    boto_client.admin_set_user_password(\r\n        **{\r\n            \"UserPoolId\": user_pool_id,\r\n            \"Username\": user_email,\r\n            \"Password\": user_password,\r\n            \"Permanent\": True,\r\n        }\r\n    )\r\n    auth_result = boto_client.admin_initiate_auth(\r\n        UserPoolId=user_pool_id,\r\n        ClientId=user_pool_client_id,\r\n        AuthFlow=\"ADMIN_USER_PASSWORD_AUTH\",\r\n        AuthParameters={\"USERNAME\": user_email, \"PASSWORD\": user_password},\r\n    )\r\n    refresh_token = auth_result[\"AuthenticationResult\"][\"RefreshToken\"]\r\n\r\n    auth_result = boto_client.admin_initiate_auth(\r\n        UserPoolId=user_pool_id,\r\n        ClientId=user_pool_client_id,\r\n        AuthFlow=\"REFRESH_TOKEN_AUTH\",\r\n        AuthParameters={\"REFRESH_TOKEN\": refresh_token},\r\n    )\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5871/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5871/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5842", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5842/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5842/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5842/events", "html_url": "https://github.com/getmoto/moto/issues/5842", "id": 1532384903, "node_id": "I_kwDOAH5NfM5bVlaH", "number": 5842, "title": "SES region setting is not supported", "user": {"login": "FelixRoche", "id": 84865577, "node_id": "MDQ6VXNlcjg0ODY1NTc3", "avatar_url": "https://avatars.githubusercontent.com/u/84865577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixRoche", "html_url": "https://github.com/FelixRoche", "followers_url": "https://api.github.com/users/FelixRoche/followers", "following_url": "https://api.github.com/users/FelixRoche/following{/other_user}", "gists_url": "https://api.github.com/users/FelixRoche/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixRoche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixRoche/subscriptions", "organizations_url": "https://api.github.com/users/FelixRoche/orgs", "repos_url": "https://api.github.com/users/FelixRoche/repos", "events_url": "https://api.github.com/users/FelixRoche/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixRoche/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2023-01-13T14:27:33Z", "updated_at": "2023-01-21T18:10:57Z", "closed_at": "2023-01-21T18:10:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nwhen trying to set the region of the SES client, it seems like it is not setting the region correctly and just defaults to the global region. \r\nIt seems like this is a bug caused in this file:\r\nhttps://github.com/getmoto/moto/blob/master/moto/ses/responses.py in line 14 where the region gets set to global instead of self.region as seen here:\r\nhttps://github.com/getmoto/moto/blob/master/moto/sns/responses.py on line 23.\r\nI am currently using version 1.21.46.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5842/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5824", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5824/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5824/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5824/events", "html_url": "https://github.com/getmoto/moto/issues/5824", "id": 1523266484, "node_id": "I_kwDOAH5NfM5ayzO0", "number": 5824, "title": "Batch Simple jobs do not report log streams", "user": {"login": "r-granada", "id": 15088653, "node_id": "MDQ6VXNlcjE1MDg4NjUz", "avatar_url": "https://avatars.githubusercontent.com/u/15088653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r-granada", "html_url": "https://github.com/r-granada", "followers_url": "https://api.github.com/users/r-granada/followers", "following_url": "https://api.github.com/users/r-granada/following{/other_user}", "gists_url": "https://api.github.com/users/r-granada/gists{/gist_id}", "starred_url": "https://api.github.com/users/r-granada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r-granada/subscriptions", "organizations_url": "https://api.github.com/users/r-granada/orgs", "repos_url": "https://api.github.com/users/r-granada/repos", "events_url": "https://api.github.com/users/r-granada/events{/privacy}", "received_events_url": "https://api.github.com/users/r-granada/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-01-06T22:36:59Z", "updated_at": "2023-01-11T20:45:11Z", "closed_at": "2023-01-11T20:45:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am using batch_simple to mock the integration of my application with AWS Batch. In my use-case, I extract the 'logStreamName' from the job desciption for later usage. However, I am having issues because the batch_simple mock doesn't return the stream name property.\r\n\r\nThe _not_ simplified version of batch mock does indeed return the property, but moving to it is not an option for me right now.\r\n\r\nExample describing my use case with moto == 4.1.0.dev (the following test **fails**):\r\n\r\n```\r\nimport boto3\r\nfrom moto import mock_batch_simple, mock_iam, mock_ec2\r\nimport pytest\r\n\r\n\r\n@mock_batch_simple\r\n@mock_iam\r\n@mock_ec2\r\ndef test_batch_simple_doesnt_return_logstreamname():\r\n    iam_client = boto3.client(\"iam\")\r\n    iam_client.create_role(RoleName=\"AWSBatchServiceRole\", AssumeRolePolicyDocument=\"[]\")\r\n    iam_client.create_instance_profile(InstanceProfileName=\"ecsInstanceRole\")\r\n\r\n    ecs_instance_profile = iam_client.get_instance_profile(InstanceProfileName=\"ecsInstanceRole\")[\"InstanceProfile\"][\"Arn\"]\r\n    role = iam_client.get_role(RoleName=\"AWSBatchServiceRole\")[\"Role\"][\"Arn\"]\r\n\r\n    ec2_client = boto3.client(\"ec2\", region_name=\"us-east-1\")\r\n    sg_id = ec2_client.describe_security_groups()[\"SecurityGroups\"][0][\"GroupId\"]\r\n    subnet_id = ec2_client.describe_subnets()[\"Subnets\"][0][\"SubnetId\"]\r\n\r\n    batch_client = boto3.client(\"batch\", region_name=\"us-east-1\")\r\n    batch_client.register_job_definition(\r\n        jobDefinitionName=\"batch-etl-general\",\r\n        type=\"container\",\r\n        containerProperties={\r\n            \"image\": \"test/test:latest\",\r\n            \"memory\": 256,\r\n            \"vcpus\": 16,\r\n            \"jobRoleArn\": \"None\",\r\n            \"executionRoleArn\": \"None\",\r\n            \"environment\": [{\"name\": \"AWS_DEFAULT_REGION\", \"value\": \"us-east-1\"}]\r\n        },\r\n    )\r\n    batch_client.create_compute_environment(\r\n        computeEnvironmentName=\"batch-etl-compute-environment\",\r\n        type='MANAGED',\r\n        state='ENABLED',\r\n        serviceRole=role,\r\n        computeResources={\r\n            'type': 'SPOT',\r\n            'allocationStrategy': 'SPOT_CAPACITY_OPTIMIZED',\r\n            'instanceRole': ecs_instance_profile,\r\n            'instanceTypes': ['optimal'],\r\n            'minvCpus': 0,\r\n            'desiredvCpus': 0,\r\n            'maxvCpus': 128,\r\n            'securityGroupIds': [sg_id],\r\n            'subnets': [subnet_id],\r\n        },\r\n    )\r\n    compute_environment_arn = batch_client.describe_compute_environments(\r\n        computeEnvironments=[\"batch-etl-compute-environment\"]\r\n    )[\"computeEnvironments\"][0][\"computeEnvironmentArn\"]\r\n    batch_client.create_job_queue(\r\n        jobQueueName=\"batch-etl-low-priority\",\r\n        state=\"ENABLED\",\r\n        priority=1,\r\n        computeEnvironmentOrder=[{\"order\": 1, \"computeEnvironment\": compute_environment_arn}]\r\n    )\r\n    job_id = batch_client.submit_job(\r\n        jobName=\"test_job\",\r\n        jobQueue=\"batch-etl-low-priority\",\r\n        jobDefinition=\"batch-etl-general\",\r\n        containerOverrides={},\r\n        timeout={\"attemptDurationSeconds\": 120},\r\n    )[\"jobId\"]\r\n    response = batch_client.describe_jobs(jobs=[job_id])\r\n    assert \"logStreamName\" in response[\"jobs\"][-1][\"container\"]\r\n\r\n```\r\n\r\n\r\nSince the log stream name doesn't depend on the job execution at all, I would like to receive it in the 'describe_jobs' output from batch_simple.\r\n\r\nIssue similar to #1606\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5824/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5824/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5811", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5811/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5811/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5811/events", "html_url": "https://github.com/getmoto/moto/issues/5811", "id": 1516843574, "node_id": "I_kwDOAH5NfM5aaTI2", "number": 5811, "title": "Multiple iot-data publish calls lead to None topic", "user": {"login": "lorenzo-eng", "id": 46282495, "node_id": "MDQ6VXNlcjQ2MjgyNDk1", "avatar_url": "https://avatars.githubusercontent.com/u/46282495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorenzo-eng", "html_url": "https://github.com/lorenzo-eng", "followers_url": "https://api.github.com/users/lorenzo-eng/followers", "following_url": "https://api.github.com/users/lorenzo-eng/following{/other_user}", "gists_url": "https://api.github.com/users/lorenzo-eng/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorenzo-eng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorenzo-eng/subscriptions", "organizations_url": "https://api.github.com/users/lorenzo-eng/orgs", "repos_url": "https://api.github.com/users/lorenzo-eng/repos", "events_url": "https://api.github.com/users/lorenzo-eng/events{/privacy}", "received_events_url": "https://api.github.com/users/lorenzo-eng/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-01-03T01:41:13Z", "updated_at": "2023-01-03T21:21:53Z", "closed_at": "2023-01-03T21:21:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Calling\r\n`boto3.client('iot-data', region_name='eu-central-1').publish(\r\n        topic = my_topic,\r\n        payload = my_payload,\r\n        qos = 1\r\n)`\r\n\r\nMore than once, causes the topic for all calls after the first one to be `None` inside `moto.iotdata.models.iotdata_backends[moto.core.DEFAULT_ACCOUNT_ID][MY_REGION].published_payloads`\r\n\r\n### Example:\r\n\r\n```python\r\nimport boto3\r\nfrom moto import (\r\n    mock_iotdata\r\n)\r\nimport moto.core\r\n\r\nwith mock_iotdata():\r\n    iot = boto3.client('iot-data', region_name='eu-central-1')\r\n    iot.publish(\r\n        topic = f\"hello/world\",\r\n        payload = \"something\",\r\n        qos = 1\r\n    )\r\n    iot.publish(\r\n        topic = f\"new/world\",\r\n        payload = \"nothing\",\r\n        qos = 1\r\n    )\r\n    iot.publish(\r\n        topic = f\"old/world\",\r\n        payload = \"anything\",\r\n        qos = 1\r\n    )\r\n\r\n    mock_backend = moto.iotdata.models.iotdata_backends[moto.core.DEFAULT_ACCOUNT_ID]['eu-central-1']\r\n    print(mock_backend.published_payloads)\r\n```\r\n### Output:\r\n```\r\n[('hello/world', 'something'), (None, 'nothing'), (None, 'anything')]\r\n```\r\n\r\n### Debug attempt\r\nI tried to understand what was going on and I found out that inside `botocore_subber.py` there is a `matchers.pop(found_index)` call that removes a regex to select the appropriate callback to dispatch the publish function so that only the first time the right dispatcher gets called.\r\nI don't completely understand the goal of that call so it might be correct, but if I comment it out, the topic gets filled correctly.\r\n\r\n### versions\r\n```\r\nPython 3.8.10\r\nmoto==4.0.12\r\n```\r\n\r\nThanks", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5811/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5811/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5791", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5791/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5791/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5791/events", "html_url": "https://github.com/getmoto/moto/issues/5791", "id": 1504160494, "node_id": "I_kwDOAH5NfM5Zp6ru", "number": 5791, "title": "Calls to list_attached_policies fail with ARN targets", "user": {"login": "ygerg", "id": 23103772, "node_id": "MDQ6VXNlcjIzMTAzNzcy", "avatar_url": "https://avatars.githubusercontent.com/u/23103772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ygerg", "html_url": "https://github.com/ygerg", "followers_url": "https://api.github.com/users/ygerg/followers", "following_url": "https://api.github.com/users/ygerg/following{/other_user}", "gists_url": "https://api.github.com/users/ygerg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ygerg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ygerg/subscriptions", "organizations_url": "https://api.github.com/users/ygerg/orgs", "repos_url": "https://api.github.com/users/ygerg/repos", "events_url": "https://api.github.com/users/ygerg/events{/privacy}", "received_events_url": "https://api.github.com/users/ygerg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-12-20T08:20:20Z", "updated_at": "2023-01-12T12:11:29Z", "closed_at": "2023-01-12T12:11:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nthere's a slight issue with ARN targets when calling `list_attached_policies`.\r\n\r\nVersions:\r\n```\r\nboto3==1.26.33\r\nbotocore==1.29.33\r\nmoto==4.0.12\r\n```\r\nPython 3.11\r\n\r\n\r\nFixtures I'm using:\r\n\r\n```python\r\n@pytest.fixture(scope=\"session\")\r\ndef aws_credentials():\r\n    os.environ[\"AWS_ACCESS_KEY_ID\"] = \"testing\"\r\n    os.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"testing\"\r\n    os.environ[\"AWS_SECURITY_TOKEN\"] = \"testing\"\r\n    os.environ[\"AWS_SESSION_TOKEN\"] = \"testing\"\r\n    os.environ[\"AWS_REGION\"] = \"eu-west-1\"\r\n    os.environ[\"AWS_DEFAULT_REGION\"] = \"eu-west-1\"\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef mock_iot(aws_credentials):\r\n    with moto.mock_iot():\r\n        client = boto3.client(\"iot\", region_name=os.environ[\"AWS_REGION\"])\r\n        yield client\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef create_thing(mock_iot: Any):\r\n    mock_iot.create_thing(thingName=\"test-thing\")\r\n    certificate_response = mock_iot.create_keys_and_certificate(setAsActive=True)\r\n    certificate_arn = certificate_response[\"certificateArn\"]\r\n    mock_iot.attach_thing_principal(thingName=\"test-thing\", principal=certificate_arn)\r\n    mock_iot.create_policy(\r\n        policyName='test-policy',\r\n        policyDocument=json.dumps(\r\n            {\r\n                \"Version\": \"2012-10-17\",\r\n                \"Statement\": [\r\n                    {\r\n                        \"Effect\": \"Allow\",\r\n                        \"Action\": \"iot:*\",\r\n                        \"Resource\": \"*\",\r\n                    }\r\n                ],\r\n            }\r\n        ),\r\n    )\r\n\r\n    mock_iot.attach_policy(\r\n        policyName='test-policy',\r\n        target=certificate_arn,\r\n    )\r\n\r\n```\r\n\r\nNow, in my module under test, I'm issuing a call to `list_attached_policies`\r\n\r\n```python\r\nclient = boto3.client(\"iot\")\r\n\r\ndef get_certificate_policy():\r\n    response = client.list_thing_principals(thingName=\"test-thing\")\r\n    certificate_arn = response[\"principals\"][0]\r\n    print(f\"Certificate ARN: {certificate_arn}\")\r\n    response = client.list_attached_policies(target=certificate_arn)\r\n    print(response['policies']) # []\r\n```\r\n\r\nFollowing this down with debugger reveals, that the ARN will become URL encoded, as it's a path variable:\r\n\r\nFrom `.venv/lib/python3.11/site-packages/botocore/client.py:929`\r\n```\r\n'https://iot.eu-west-1.amazonaws.com/attached-policies/arn%3Aaws%3Aiot%3Aeu-west-1%3A123456789012%3Acert%2F302448c20a00e00ab6677ee8beb217530846395b689c5a64e9200a262a639f08'\r\n```\r\n\r\nThis could be fixed by calling\r\n\r\n```python\r\n        target = urllib.parse.unquote(target)\r\n```\r\n\r\nin `.venv/lib/python3.11/site-packages/moto/iot/models.py:1024`\r\n\r\nNow, as I haven't read through all the details, would you think if there was any harm in doing so? Can open a PR with tests if not.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5791/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5791/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5790", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5790/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5790/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5790/events", "html_url": "https://github.com/getmoto/moto/issues/5790", "id": 1503780019, "node_id": "I_kwDOAH5NfM5Zodyz", "number": 5790, "title": "Bug: global_sign_out does not actually sign out", "user": {"login": "deanq", "id": 1141368, "node_id": "MDQ6VXNlcjExNDEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1141368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deanq", "html_url": "https://github.com/deanq", "followers_url": "https://api.github.com/users/deanq/followers", "following_url": "https://api.github.com/users/deanq/following{/other_user}", "gists_url": "https://api.github.com/users/deanq/gists{/gist_id}", "starred_url": "https://api.github.com/users/deanq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deanq/subscriptions", "organizations_url": "https://api.github.com/users/deanq/orgs", "repos_url": "https://api.github.com/users/deanq/repos", "events_url": "https://api.github.com/users/deanq/events{/privacy}", "received_events_url": "https://api.github.com/users/deanq/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-12-19T23:41:03Z", "updated_at": "2022-12-20T22:09:03Z", "closed_at": "2022-12-20T22:09:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "The current test code for `global_sign_out` only checks against a refresh token action. If you do a sign out and try to access a protected endpoint, like say `get_user(AccessToken)`, it should result to `NotAuthorizedException`. This is not the case as of the current version of moto. I have noticed that all tests against sign out actions are limited to just checking if a refresh token is possible. That should be diversified beyond just a token refresh action.\r\n\r\nI have tested my code against actual AWS Cognito without moto, and they do raise the `NotAuthorizedException` when you try to use an access token that has been signed out.\r\n\r\n```\r\n# add this to the file: /tests/test_cognitoidp/test_cognitoidp.py\r\n\r\n@mock_cognitoidp\r\ndef test_global_sign_out():\r\n    conn = boto3.client(\"cognito-idp\", \"us-west-2\")\r\n    result = user_authentication_flow(conn)\r\n\r\n    conn.global_sign_out(AccessToken=result[\"access_token\"])\r\n\r\n    with pytest.raises(ClientError) as ex:\r\n        conn.get_user(AccessToken=result[\"access_token\"])\r\n\r\n    err = ex.value.response[\"Error\"]\r\n    err[\"Code\"].should.equal(\"NotAuthorizedException\")\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5790/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5759", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5759/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5759/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5759/events", "html_url": "https://github.com/getmoto/moto/issues/5759", "id": 1491341708, "node_id": "I_kwDOAH5NfM5Y5BGM", "number": 5759, "title": "RDS create_option_group supports only mysql engine", "user": {"login": "mayk0gan", "id": 96263702, "node_id": "U_kgDOBbzeFg", "avatar_url": "https://avatars.githubusercontent.com/u/96263702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mayk0gan", "html_url": "https://github.com/mayk0gan", "followers_url": "https://api.github.com/users/mayk0gan/followers", "following_url": "https://api.github.com/users/mayk0gan/following{/other_user}", "gists_url": "https://api.github.com/users/mayk0gan/gists{/gist_id}", "starred_url": "https://api.github.com/users/mayk0gan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mayk0gan/subscriptions", "organizations_url": "https://api.github.com/users/mayk0gan/orgs", "repos_url": "https://api.github.com/users/mayk0gan/repos", "events_url": "https://api.github.com/users/mayk0gan/events{/privacy}", "received_events_url": "https://api.github.com/users/mayk0gan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-12-12T08:55:00Z", "updated_at": "2022-12-14T17:47:44Z", "closed_at": "2022-12-14T17:47:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "`rds_client.create_option_group(\r\n        OptionGroupName=\"default:postgres-13\",\r\n        EngineName=\"postgres\",\r\n        MajorEngineVersion=\"13\",\r\n        OptionGroupDescription=\"Default option group for postgres 13\",\r\n )`\r\n\r\nRaises: `botocore.exceptions.ClientError: An error occurred (InvalidParameterValue) when calling the CreateOptionGroup operation: Invalid DB engine: non-existent\r\n\r\n/Users/may/Library/Caches/pypoetry/virtualenvs/venv-F1avdFZI-py3.9/lib/python3.9/site-packages/botocore/client.py:915: ClientError`\r\n\r\nAccording to the tests, indeed only mysql engine is being checked, but RDS supports multiple engines (sqlserver, oracle, postgres, aurora-postgres, etc..). Link: https://github.com/spulec/moto/blob/4eb3944b1d9d8f513f1cb96425f60ae41039a831/tests/test_rds/test_rds.py\r\n   - Tell us **what you expected to happen**. When we run your example code,\r\n     what are we expecting to happen? What does \"success\" look like for your\r\n     code?\r\n\r\nI want to be able to test different database engines.\r\n\r\n   - Tell us **what actually happens**. It's not helpful for you to say \"it\r\n     doesn't work\" or \"it fails\". Tell us *how* it fails: do you get an\r\n     exception? A hang? How was the actual result different from your expected\r\n     result?\r\n\r\nIt throws a `ClientError` exception\r\n\r\n   - Tell us **what version of Moto you're using**, and\r\n     **how you installed it**. Tell us whether you're using standalone server\r\n     mode or the Python mocks. If you are using the Python mocks, include the\r\n     version of boto/boto3/botocore.\r\n\r\nmoto                                3.1.18\r\naioboto3                            10.2.0\r\nboto3                               1.24.59\r\nboto3-stubs                         1.26.27\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5759/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5750", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5750/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5750/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5750/events", "html_url": "https://github.com/getmoto/moto/issues/5750", "id": 1487068961, "node_id": "I_kwDOAH5NfM5Yot8h", "number": 5750, "title": "sts:SetSourceIdentity is not recognized as a valid action for update_assume_role_policy", "user": {"login": "mciul", "id": 2034316, "node_id": "MDQ6VXNlcjIwMzQzMTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2034316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mciul", "html_url": "https://github.com/mciul", "followers_url": "https://api.github.com/users/mciul/followers", "following_url": "https://api.github.com/users/mciul/following{/other_user}", "gists_url": "https://api.github.com/users/mciul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mciul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mciul/subscriptions", "organizations_url": "https://api.github.com/users/mciul/orgs", "repos_url": "https://api.github.com/users/mciul/repos", "events_url": "https://api.github.com/users/mciul/events{/privacy}", "received_events_url": "https://api.github.com/users/mciul/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-12-09T16:49:45Z", "updated_at": "2022-12-10T20:23:35Z", "closed_at": "2022-12-10T20:23:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport json\r\nimport boto3\r\nfrom moto import mock_iam\r\n\r\npolicy_doc = {\r\n    \"Version\": \"2012-10-17\",\r\n    \"Statement\": [\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Principal\": {\"Service\": \"sagemaker.amazonaws.com\"},\r\n            \"Action\": [\"sts:AssumeRole\", \"sts:SetSourceIdentity\"]\r\n        },\r\n    ]\r\n}\r\nwith mock_iam():\r\n    client = boto3.client(\"iam\")\r\n    client.create_role(RoleName=\"SageMakerUser\", AssumeRolePolicyDocument=json.dumps(policy_doc))\r\n    client.update_assume_role_policy(RoleName=\"SageMakerUser\", PolicyDocument=json.dumps(policy_doc))\r\n```\r\nThis corresponds to code we have running in AWS, which gives permission for the SetSourceIdentity action and allows us to enable logging of SageMaker Studio user profile name to events logged in CloudTrail. But when I run it within a test using moto, I see this error:\r\n\r\n```\r\nMalformedPolicyDocumentException: An error occurred (MalformedPolicyDocument) when calling the UpdateAssumeRolePolicy operation: Trust Policy statement actions can only be sts:AssumeRole, sts:AssumeRoleWithSAML, and sts:AssumeRoleWithWebIdentity\r\n---------------------------------------------------------------------------\r\nMalformedPolicyDocumentException          Traceback (most recent call last)\r\nCell In [14], line 21\r\n     19 client = boto3.client(\"iam\")\r\n     20 client.create_role(RoleName=\"SageMakerUser\", AssumeRolePolicyDocument=json.dumps(policy_doc))\r\n---> 21 client.update_assume_role_policy(\r\n     22     RoleName=\"SageMakerUser\",\r\n     23     PolicyDocument=json.dumps(policy_doc)\r\n     24 )\r\nFile C:\\Program Files\\Python3810\\lib\\site-packages\\botocore\\client.py:514, in ClientCreator._create_api_method.<locals>._api_call(self, *args, **kwargs)\r\n    510     raise TypeError(\r\n    511         f\"{py_operation_name}() only accepts keyword arguments.\"\r\n    512     )\r\n    513 # The \"self\" in this scope is referring to the BaseClient.\r\n--> 514 return self._make_api_call(operation_name, kwargs)\r\nFile C:\\Program Files\\Python3810\\lib\\site-packages\\botocore\\client.py:938, in BaseClient._make_api_call(self, operation_name, api_params)\r\n    936     error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n    937     error_class = self.exceptions.from_code(error_code)\r\n--> 938     raise error_class(parsed_response, operation_name)\r\n    939 else:\r\n    940     return parsed_response\r\nMalformedPolicyDocumentException: An error occurred (MalformedPolicyDocument) when calling the UpdateAssumeRolePolicy operation: Trust Policy statement actions can only be sts:AssumeRole, sts:AssumeRoleWithSAML,  and sts:AssumeRoleWithWebIdentity\r\n```\r\nversions:\r\nPython 3.8.10\r\nmoto 4.0.9 installed using pip\r\nboto3 1.24.77 \r\nbotocore 1.27.82\r\n\r\nI also tried boto3 1.26.26 with botocore 1.29.26 with the same result.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5750/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5750/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5748", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5748/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5748/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5748/events", "html_url": "https://github.com/getmoto/moto/issues/5748", "id": 1486828740, "node_id": "I_kwDOAH5NfM5YnzTE", "number": 5748, "title": "[dynamodb] Incorrect handling of array indices when removing multiple items from a list attribute", "user": {"login": "JonathanRohland-TNG", "id": 102981814, "node_id": "U_kgDOBiNgtg", "avatar_url": "https://avatars.githubusercontent.com/u/102981814?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonathanRohland-TNG", "html_url": "https://github.com/JonathanRohland-TNG", "followers_url": "https://api.github.com/users/JonathanRohland-TNG/followers", "following_url": "https://api.github.com/users/JonathanRohland-TNG/following{/other_user}", "gists_url": "https://api.github.com/users/JonathanRohland-TNG/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonathanRohland-TNG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonathanRohland-TNG/subscriptions", "organizations_url": "https://api.github.com/users/JonathanRohland-TNG/orgs", "repos_url": "https://api.github.com/users/JonathanRohland-TNG/repos", "events_url": "https://api.github.com/users/JonathanRohland-TNG/events{/privacy}", "received_events_url": "https://api.github.com/users/JonathanRohland-TNG/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-12-09T14:11:28Z", "updated_at": "2022-12-14T11:07:35Z", "closed_at": "2022-12-14T11:07:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "## [dynamodb] Incorrect handling of array indices when removing multiple items from a list attribute\r\n\r\nWe have noticed an issue with the dynamodb mock implementation related to update-queries with a remove-expression, in particular when multiple entries are removed from the same array:\r\nFor a remove expression like `REMOVE RelatedItems[1], RelatedItems[2]`, the entries at indexes 1 and 2 should be removed from the array (see [AWS Docs](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.UpdateExpressions.html#Expressions.UpdateExpressions.SET), I have also verified the expected behavior against the DynamoDB API).\r\n\r\nInstead of removing the entries at index 1 and 2, moto will first remove the entry with index 1, then shift the remaining array entries and then remove the entry at index 2 (which previously was at index 3).\r\n\r\nI have been able to reproduce this with moto 4.0.11 an boto3 1.26.23 using the following script:\r\n```python\r\nimport boto3\r\nfrom moto import mock_dynamodb\r\n\r\n@mock_dynamodb\r\ndef test_multiple_remove_operations():\r\n    session = boto3.Session()\r\n    dynamodb = session.resource(\"dynamodb\")\r\n    table_name = \"remove-test\"\r\n\r\n    dynamodb.create_table(\r\n        TableName=table_name,\r\n        KeySchema=[\r\n            {\"AttributeName\": \"key\", \"KeyType\": \"HASH\"},\r\n        ],\r\n        AttributeDefinitions=[\r\n            {\"AttributeName\": \"key\", \"AttributeType\": \"S\"},\r\n        ],\r\n        BillingMode=\"PAY_PER_REQUEST\",\r\n    )\r\n\r\n    table = dynamodb.Table(table_name)\r\n    table.put_item(\r\n        Item={\r\n            \"key\": \"woop\",\r\n            \"bla\": [\"1\", \"2\", \"3\", \"4\", \"5\"],\r\n        },\r\n    )\r\n\r\n    table.update_item(Key={\"key\": \"woop\"}, UpdateExpression=\"REMOVE bla[0], bla[1], bla[2]\")\r\n\r\n    result = table.get_item(Key={\"key\": \"woop\"})\r\n    item = result[\"Item\"]\r\n    assert item[\"bla\"] == [\"4\", \"5\"]\r\n```\r\n\r\nThis results in the following AssertionError:\r\n```\r\nE       AssertionError: assert ['2', '4'] == ['4', '5']\r\nE         At index 0 diff: '2' != '4'\r\nE         Full diff:\r\nE         - ['4', '5']\r\nE         + ['2', '4']\r\n```\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5748/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5741", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5741/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5741/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5741/events", "html_url": "https://github.com/getmoto/moto/issues/5741", "id": 1483771209, "node_id": "I_kwDOAH5NfM5YcI1J", "number": 5741, "title": "describe_parameters depends on filter order, but shouldn't", "user": {"login": "mdavis-xyz", "id": 7035647, "node_id": "MDQ6VXNlcjcwMzU2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7035647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdavis-xyz", "html_url": "https://github.com/mdavis-xyz", "followers_url": "https://api.github.com/users/mdavis-xyz/followers", "following_url": "https://api.github.com/users/mdavis-xyz/following{/other_user}", "gists_url": "https://api.github.com/users/mdavis-xyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdavis-xyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdavis-xyz/subscriptions", "organizations_url": "https://api.github.com/users/mdavis-xyz/orgs", "repos_url": "https://api.github.com/users/mdavis-xyz/repos", "events_url": "https://api.github.com/users/mdavis-xyz/events{/privacy}", "received_events_url": "https://api.github.com/users/mdavis-xyz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-12-08T06:02:41Z", "updated_at": "2022-12-10T22:36:11Z", "closed_at": "2022-12-10T22:36:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Summary\r\n\r\nWhen calling `ssm` `describe_parameters`, you can pass in a list of filters.\r\nI have seen different behavior based on the order of my filters.\r\nWith certain orders, the values returned do not match the filters.\r\n\r\n# MWE\r\n\r\nLet's create two parameters, then filter them.\r\nRun this script. Then comment out `with mock_ssm():` and unindent all lines below that, and run again, to test against real AWS.\r\n\r\n```\r\nimport boto3\r\nfrom moto import mock_ssm\r\n\r\nwith mock_ssm():\r\n    client=boto3.client('ssm')\r\n    param_names = []\r\n    for x in 'ab':\r\n        param_name = f\"test_my_param_01_{x}\"\r\n        param_names.append(param_name)\r\n        assert isinstance(x, str)\r\n        client.put_parameter(\r\n            Name=param_name,\r\n            Value=f\"Contents of param {x}\", \r\n            Type='String',\r\n            Tags=[\r\n                {\r\n                    'Key': 'hello',\r\n                    'Value': 'world'\r\n                },\r\n                {\r\n                    'Key': 'x',\r\n                    'Value': x\r\n                }\r\n            ]\r\n        )\r\n    \r\n    response = client.describe_parameters(\r\n        ParameterFilters=[\r\n            {\r\n                \"Key\": \"tag:x\",\r\n                \"Option\": \"Equals\",\r\n                \"Values\": ['b']\r\n            },\r\n            {\r\n                \"Key\": \"tag:hello\",\r\n                \"Option\": \"Equals\",\r\n                \"Values\": ['world']\r\n            },\r\n        ]\r\n    )\r\n    assert len(response['Parameters']) == 1, \"not 1 result when hello is second\"\r\n    \r\n    response = client.describe_parameters(\r\n        ParameterFilters=[\r\n            {\r\n                \"Key\": \"tag:hello\",\r\n                \"Option\": \"Equals\",\r\n                \"Values\": ['world']\r\n            },\r\n            {\r\n                \"Key\": \"tag:x\",\r\n                \"Option\": \"Equals\",\r\n                \"Values\": ['b']\r\n            },\r\n        ]\r\n    )\r\n    assert len(response['Parameters']) == 1, \"not 1 result when hello is first\"\r\n    \r\n    client.delete_parameters(Names=param_names)\r\n```\r\n\r\n## Expected behavior\r\n\r\nWhen running against real AWS (no moto), the script runs without throwing any AssertionError. In both cases `describe_parameters` returns exactly 1 parameter, not 2.\r\n\r\n## Actual behavior\r\n\r\nWhen running with moto, the first assertion passes. Moto successfully evaluated the filter and deduced that only one parameter matches that filter.\r\n\r\nThen we swap the order of the filter, and do the same thing again.\r\nMoto now gives a different behavior. It returns both parameters. Even though one of them has a tag that mismatches the filter.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5741/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5738", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5738/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5738/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5738/events", "html_url": "https://github.com/getmoto/moto/issues/5738", "id": 1478901281, "node_id": "I_kwDOAH5NfM5YJj4h", "number": 5738, "title": "When using a NONEXISTENT_REGION, `get_id` of `mock_cognitoidentity` fails", "user": {"login": "dariocurr", "id": 48800335, "node_id": "MDQ6VXNlcjQ4ODAwMzM1", "avatar_url": "https://avatars.githubusercontent.com/u/48800335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariocurr", "html_url": "https://github.com/dariocurr", "followers_url": "https://api.github.com/users/dariocurr/followers", "following_url": "https://api.github.com/users/dariocurr/following{/other_user}", "gists_url": "https://api.github.com/users/dariocurr/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariocurr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariocurr/subscriptions", "organizations_url": "https://api.github.com/users/dariocurr/orgs", "repos_url": "https://api.github.com/users/dariocurr/repos", "events_url": "https://api.github.com/users/dariocurr/events{/privacy}", "received_events_url": "https://api.github.com/users/dariocurr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-12-06T11:43:46Z", "updated_at": "2022-12-09T13:22:55Z", "closed_at": "2022-12-09T12:47:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using a NONEXISTENT_REGION, `get_id` of `mock_cognitoidentity` fails because the request made by `botocore` does not contain the `Authorization header`\r\n\r\nI have tried this with `python>=3.8` \r\n\r\nHere it follows an example `get_id` request:\r\n```py\r\n{\r\n'X-Amz-Target': 'AWSCognitoIdentityService.GetId',\r\n 'Content-Type': 'application/x-amz-json-1.1',\r\n 'User-Agent': '... Botocore/1.29.23', \r\n 'amz-sdk-invocation-id': '...f',\r\n 'amz-sdk-request': 'attempt=1', \r\n 'Content-Length': '86'\r\n}\r\n```\r\n\r\nAnd here where you parse the region (lines 327-328):\r\n\r\nhttps://github.com/spulec/moto/blob/4ec748542f91c727147390685adf641a29a4e9e4/moto/core/responses.py#L317-L334\r\n\r\nI would like to help you with a PR, but I don't get why the region depends on `Authorization` header\r\n\r\n### Traceback\r\n```sh\r\npython3.8/site-packages/botocore/client.py:530: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\npython3.8/site-packages/botocore/client.py:943: in _make_api_call\r\n    http, parsed_response = self._make_request(\r\npython3.8/site-packages/botocore/client.py:966: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\npython3.8/site-packages/botocore/endpoint.py:119: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\npython3.8/site-packages/botocore/endpoint.py:202: in _send_request\r\n    while self._needs_retry(\r\npython3.8/site-packages/botocore/endpoint.py:354: in _needs_retry\r\n    responses = self._event_emitter.emit(\r\npython3.8/site-packages/botocore/hooks.py:405: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\npython3.8/site-packages/botocore/hooks.py:253: in emit\r\n    return self._emit(event_name, kwargs)\r\npython3.8/site-packages/botocore/hooks.py:236: in _emit\r\n    response = handler(**kwargs)\r\npython3.8/site-packages/botocore/retryhandler.py:207: in __call__\r\n    if self._checker(**checker_kwargs):\r\npython3.8/site-packages/botocore/retryhandler.py:284: in __call__\r\n    should_retry = self._should_retry(\r\npython3.8/site-packages/botocore/retryhandler.py:307: in _should_retry\r\n    return self._checker(\r\npython3.8/site-packages/botocore/retryhandler.py:363: in __call__\r\n    checker_response = checker(\r\npython3.8/site-packages/botocore/retryhandler.py:247: in __call__\r\n    return self._check_caught_exception(\r\npython3.8/site-packages/botocore/retryhandler.py:416: in _check_caught_exception\r\n    raise caught_exception\r\npython3.8/site-packages/botocore/endpoint.py:278: in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\npython3.8/site-packages/botocore/hooks.py:405: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\npython3.8/site-packages/botocore/hooks.py:253: in emit\r\n    return self._emit(event_name, kwargs)\r\npython3.8/site-packages/botocore/hooks.py:236: in _emit\r\n    response = handler(**kwargs)\r\npython3.8/site-packages/moto/core/botocore_stubber.py:59: in __call__\r\n    status, headers, body = response_callback(\r\npython3.8/site-packages/moto/core/responses.py:222: in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\npython3.8/site-packages/moto/core/responses.py:364: in _dispatch\r\n    return self.call_action()\r\npython3.8/site-packages/moto/core/responses.py:451: in call_action\r\n    response = method()\r\npython3.8/site-packages/moto/cognitoidentity/responses.py:61: in get_id\r\n    return self.backend.get_id(identity_pool_id=self._get_param(\"IdentityPoolId\"))\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5738/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5738/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5717", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5717/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5717/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5717/events", "html_url": "https://github.com/getmoto/moto/issues/5717", "id": 1467196558, "node_id": "I_kwDOAH5NfM5Xc6SO", "number": 5717, "title": "Route53 `change_resource_record_sets` delete calls succeed when it should fail", "user": {"login": "k6l3", "id": 111803974, "node_id": "U_kgDOBqn-Rg", "avatar_url": "https://avatars.githubusercontent.com/u/111803974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k6l3", "html_url": "https://github.com/k6l3", "followers_url": "https://api.github.com/users/k6l3/followers", "following_url": "https://api.github.com/users/k6l3/following{/other_user}", "gists_url": "https://api.github.com/users/k6l3/gists{/gist_id}", "starred_url": "https://api.github.com/users/k6l3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k6l3/subscriptions", "organizations_url": "https://api.github.com/users/k6l3/orgs", "repos_url": "https://api.github.com/users/k6l3/repos", "events_url": "https://api.github.com/users/k6l3/events{/privacy}", "received_events_url": "https://api.github.com/users/k6l3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-11-28T22:48:06Z", "updated_at": "2022-12-10T11:07:31Z", "closed_at": "2022-12-10T11:07:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Description\r\nDeleting a resource record set should require that we specify all the same values that we specified when we created it according to these [docs](https://docs.aws.amazon.com/Route53/latest/APIReference/API_ChangeResourceRecordSets.html#API_ChangeResourceRecordSets_RequestSyntax).\r\n\r\nIf a record was created with `Name`, `Type`, `TTL`, and `ResourceRecords`, deleting should fail unless all of the values are specified. This is true in `boto3`, and missing `TTL` and `ResourceRecords` results in this error:\r\n\r\n```\r\nbotocore.errorfactory.InvalidInput: An error occurred (InvalidInput) when calling the ChangeResourceRecordSets operation: Invalid request: Expected exactly one of [AliasTarget, all of [TTL, and ResourceRecords], or TrafficPolicyInstanceId], but found none in Change with [Action=DELETE, Name=example.com, Type=A, SetIdentifier=null]\r\nexit status 1\r\n```\r\n\r\nIn `moto`, this succeeds. The code snippet below provides an example that should error at `delete_call`, but does not.\r\n\r\n## Steps to reproduce\r\n```\r\nimport boto3\r\nimport moto\r\n\r\n\r\n@moto.mock_route53\r\ndef test():\r\n    client = boto3.client(\"route53\")\r\n    name = \"example.com\"\r\n    hosted_zone_id = client.create_hosted_zone(Name=name, CallerReference=name)[\"HostedZone\"][\"Id\"]\r\n\r\n    create_call = client.change_resource_record_sets(\r\n        HostedZoneId=hosted_zone_id,\r\n        ChangeBatch={\r\n            \"Changes\": [\r\n                {\r\n                    \"Action\": \"DELETE\",\r\n                    \"ResourceRecordSet\": {\r\n                        \"Name\": name,\r\n                        \"Type\": \"A\",\r\n                        \"TTL\": 300,\r\n                        \"ResourceRecords\": [{\"Value\": \"192.168.0.1\"}],\r\n                    },\r\n                }\r\n            ]\r\n        },\r\n    )\r\n    waiter = client.get_waiter(\"resource_record_sets_changed\")\r\n    waiter.wait(Id=create_call[\"ChangeInfo\"][\"Id\"])\r\n    \r\n    # This call should fail\r\n    delete_call = client.change_resource_record_sets(\r\n        HostedZoneId=hosted_zone_id,\r\n        ChangeBatch={\r\n            \"Changes\": [\r\n                {\r\n                    \"Action\": \"DELETE\",\r\n                    \"ResourceRecordSet\": {\r\n                        \"Name\": name,\r\n                        \"Type\": \"A\",\r\n                        # Missing TTL and ResourceRecords\r\n                    },\r\n                }\r\n            ]\r\n        },\r\n    )\r\n\r\n\r\ntest()\r\n\r\n```\r\n`delete_call` should raise `InvalidInput` when insufficient arguments are provided.\r\n\r\n### Versions:\r\nmoto: 4.0.10\r\nboto3: 1.17.59\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5717/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5717/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5710", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5710/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5710/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5710/events", "html_url": "https://github.com/getmoto/moto/issues/5710", "id": 1464748646, "node_id": "I_kwDOAH5NfM5XTkpm", "number": 5710, "title": "SQS receive_messages fails to get newly visible messages", "user": {"login": "philipnbbc", "id": 12293192, "node_id": "MDQ6VXNlcjEyMjkzMTky", "avatar_url": "https://avatars.githubusercontent.com/u/12293192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipnbbc", "html_url": "https://github.com/philipnbbc", "followers_url": "https://api.github.com/users/philipnbbc/followers", "following_url": "https://api.github.com/users/philipnbbc/following{/other_user}", "gists_url": "https://api.github.com/users/philipnbbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipnbbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipnbbc/subscriptions", "organizations_url": "https://api.github.com/users/philipnbbc/orgs", "repos_url": "https://api.github.com/users/philipnbbc/repos", "events_url": "https://api.github.com/users/philipnbbc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipnbbc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "bpandola", "id": 11675295, "node_id": "MDQ6VXNlcjExNjc1Mjk1", "avatar_url": "https://avatars.githubusercontent.com/u/11675295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpandola", "html_url": "https://github.com/bpandola", "followers_url": "https://api.github.com/users/bpandola/followers", "following_url": "https://api.github.com/users/bpandola/following{/other_user}", "gists_url": "https://api.github.com/users/bpandola/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpandola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpandola/subscriptions", "organizations_url": "https://api.github.com/users/bpandola/orgs", "repos_url": "https://api.github.com/users/bpandola/repos", "events_url": "https://api.github.com/users/bpandola/events{/privacy}", "received_events_url": "https://api.github.com/users/bpandola/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bpandola", "id": 11675295, "node_id": "MDQ6VXNlcjExNjc1Mjk1", "avatar_url": "https://avatars.githubusercontent.com/u/11675295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpandola", "html_url": "https://github.com/bpandola", "followers_url": "https://api.github.com/users/bpandola/followers", "following_url": "https://api.github.com/users/bpandola/following{/other_user}", "gists_url": "https://api.github.com/users/bpandola/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpandola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpandola/subscriptions", "organizations_url": "https://api.github.com/users/bpandola/orgs", "repos_url": "https://api.github.com/users/bpandola/repos", "events_url": "https://api.github.com/users/bpandola/events{/privacy}", "received_events_url": "https://api.github.com/users/bpandola/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2022-11-25T16:35:12Z", "updated_at": "2022-12-05T02:00:57Z", "closed_at": "2022-12-05T02:00:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Calls to the SQS queue `receive_messages` method, with a non-zero WaitTimeSeconds, fails when there is a message that becomes visible after the call was made. The following test code fails for moto >= 4.0.10.dev9:\r\n\r\n```python\r\nimport moto\r\nimport boto3\r\n\r\n@moto.mock_sqs\r\ndef test_visibility():\r\n    sqs = boto3.resource(\"sqs\")\r\n    queue = sqs.create_queue(QueueName=\"test-queue\")\r\n    queue.send_message(MessageBody=\"test-message\")\r\n    message_1 = queue.receive_messages()\r\n    message_1[0].change_visibility(VisibilityTimeout=1)\r\n    message_2 = queue.receive_messages(WaitTimeSeconds=2)\r\n    assert len(message_2) > 0\r\n \r\ntest_visibility()\r\n```\r\n\r\nI think the issue was introduced in this [commit](https://github.com/spulec/moto/commit/d560ff002d6a188ceba295a012ef47415896c753). The code used to loop every ~0.01 seconds, and in each loop it checked whether messages had become visible. I don't think the change to use a conditional works because there is no call to `notify_all()` when a message becomes visible (in a separate thread). The `notify_all()` is only called when messages are added in `add_message()`.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5710/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5710/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5698", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5698/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5698/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5698/events", "html_url": "https://github.com/getmoto/moto/issues/5698", "id": 1459992521, "node_id": "I_kwDOAH5NfM5XBbfJ", "number": 5698, "title": "CloudFront: list_invalidations includes empty element if no invalidations", "user": {"login": "neil-greenwood", "id": 6793088, "node_id": "MDQ6VXNlcjY3OTMwODg=", "avatar_url": "https://avatars.githubusercontent.com/u/6793088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neil-greenwood", "html_url": "https://github.com/neil-greenwood", "followers_url": "https://api.github.com/users/neil-greenwood/followers", "following_url": "https://api.github.com/users/neil-greenwood/following{/other_user}", "gists_url": "https://api.github.com/users/neil-greenwood/gists{/gist_id}", "starred_url": "https://api.github.com/users/neil-greenwood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neil-greenwood/subscriptions", "organizations_url": "https://api.github.com/users/neil-greenwood/orgs", "repos_url": "https://api.github.com/users/neil-greenwood/repos", "events_url": "https://api.github.com/users/neil-greenwood/events{/privacy}", "received_events_url": "https://api.github.com/users/neil-greenwood/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-11-22T14:34:30Z", "updated_at": "2022-11-22T17:23:22Z", "closed_at": "2022-11-22T17:23:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## How to reproduce the issue\r\n\r\n```python\r\n@mock_cloudfront\r\ndef test_list_invalidations__no_entries():\r\n    client = boto3.client(\"cloudfront\", region_name=\"us-west-1\")\r\n\r\n    resp = client.list_invalidations(\r\n        DistributionId=\"SPAM\",\r\n    )\r\n\r\n    resp.should.have.key(\"InvalidationList\")\r\n    resp[\"InvalidationList\"].shouldnt.have.key(\"NextMarker\")\r\n    resp[\"InvalidationList\"].should.have.key(\"MaxItems\").equal(100)\r\n    resp[\"InvalidationList\"].should.have.key(\"IsTruncated\").equal(False)\r\n    resp[\"InvalidationList\"].should.have.key(\"Quantity\").equal(0)\r\n    resp[\"InvalidationList\"].shouldnt.have.key(\"Items\")\r\n```\r\n\r\n### what you expected to happen\r\n\r\nTest passes\r\n\r\n### what actually happens\r\n\r\nThe final assertion fails.\r\n\r\n## what version of Moto you're using\r\n\r\nmoto 4.0.7\r\nboto3 1.24.90\r\nbotocore 1.27.90", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5698/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5698/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5680", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5680/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5680/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5680/events", "html_url": "https://github.com/getmoto/moto/issues/5680", "id": 1453907409, "node_id": "I_kwDOAH5NfM5WqN3R", "number": 5680, "title": "S3 access via spark shows \"Path does not exist\" after update", "user": {"login": "jbvsmo", "id": 1024423, "node_id": "MDQ6VXNlcjEwMjQ0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1024423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbvsmo", "html_url": "https://github.com/jbvsmo", "followers_url": "https://api.github.com/users/jbvsmo/followers", "following_url": "https://api.github.com/users/jbvsmo/following{/other_user}", "gists_url": "https://api.github.com/users/jbvsmo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbvsmo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbvsmo/subscriptions", "organizations_url": "https://api.github.com/users/jbvsmo/orgs", "repos_url": "https://api.github.com/users/jbvsmo/repos", "events_url": "https://api.github.com/users/jbvsmo/events{/privacy}", "received_events_url": "https://api.github.com/users/jbvsmo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2022-11-17T19:59:18Z", "updated_at": "2022-11-30T23:06:21Z", "closed_at": "2022-11-22T23:41:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been using Spark to read data from S3 for a while and it always worked with the following (pyspark) configuration:\r\n\r\n```\r\nspark.read. \\\r\n  .option('pathGlobFilter', f'*.json') \\\r\n  .option('mode', 'FAILFAST') \\\r\n  .format('json')\r\n  .read('s3://moto-bucket-79be3fc05b/raw-data/prefix/foo=bar/partition=baz/service=subscriptions')\r\n```\r\n\r\nThe `moto-bucket-79be3fc05b` bucket contents: \r\n`raw-data/prefix/foo=bar/partition=baz/service=subscriptions/subscriptions.json`\r\n\r\nBefore I upgraded to latest moto, Spark was able to find all files inside the \"directory\", but now it fails with:\r\n\r\n```pyspark.sql.utils.AnalysisException: Path does not exist: s3://moto-bucket-79be3fc05b/raw-data/prefix/foo=bar/partition=baz/service=subscriptions```\r\n\r\nI never updated Spark and it is static to version `pyspark==3.1.1` as required by AWS Glue.\r\n\r\nI updated moto to v4.0.9 from v2.2.9 (I was forced to upgrade because some other requirement needed flask>2.2).\r\n\r\nUnfortunately, I don't know exactly what is the AWS http request that spark sends to S3 to list a path, but on python code I do verify the path exists before sending to spark, so I know for sure the files are there in the correct location. I tried adding a `/` at the end of the read string, but nothing changes.\r\n\r\nIf I pass the full file path (with `subscriptions.json` at the end), spark does indeed read it. So that narrows down a bit because I'm certain spark is using the correct bucket and really accessing moto.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5680/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5680/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5677", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5677/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5677/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5677/events", "html_url": "https://github.com/getmoto/moto/issues/5677", "id": 1452208339, "node_id": "I_kwDOAH5NfM5WjvDT", "number": 5677, "title": "EC2 client describe_images returning default AMIs even with MOTO_AMIS_PATH set", "user": {"login": "dblanchette", "id": 5759247, "node_id": "MDQ6VXNlcjU3NTkyNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5759247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dblanchette", "html_url": "https://github.com/dblanchette", "followers_url": "https://api.github.com/users/dblanchette/followers", "following_url": "https://api.github.com/users/dblanchette/following{/other_user}", "gists_url": "https://api.github.com/users/dblanchette/gists{/gist_id}", "starred_url": "https://api.github.com/users/dblanchette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dblanchette/subscriptions", "organizations_url": "https://api.github.com/users/dblanchette/orgs", "repos_url": "https://api.github.com/users/dblanchette/repos", "events_url": "https://api.github.com/users/dblanchette/events{/privacy}", "received_events_url": "https://api.github.com/users/dblanchette/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "rafcio19", "id": 6391682, "node_id": "MDQ6VXNlcjYzOTE2ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/6391682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafcio19", "html_url": "https://github.com/rafcio19", "followers_url": "https://api.github.com/users/rafcio19/followers", "following_url": "https://api.github.com/users/rafcio19/following{/other_user}", "gists_url": "https://api.github.com/users/rafcio19/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafcio19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafcio19/subscriptions", "organizations_url": "https://api.github.com/users/rafcio19/orgs", "repos_url": "https://api.github.com/users/rafcio19/repos", "events_url": "https://api.github.com/users/rafcio19/events{/privacy}", "received_events_url": "https://api.github.com/users/rafcio19/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rafcio19", "id": 6391682, "node_id": "MDQ6VXNlcjYzOTE2ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/6391682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafcio19", "html_url": "https://github.com/rafcio19", "followers_url": "https://api.github.com/users/rafcio19/followers", "following_url": "https://api.github.com/users/rafcio19/following{/other_user}", "gists_url": "https://api.github.com/users/rafcio19/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafcio19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafcio19/subscriptions", "organizations_url": "https://api.github.com/users/rafcio19/orgs", "repos_url": "https://api.github.com/users/rafcio19/repos", "events_url": "https://api.github.com/users/rafcio19/events{/privacy}", "received_events_url": "https://api.github.com/users/rafcio19/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2022-11-16T20:10:00Z", "updated_at": "2023-01-05T16:55:29Z", "closed_at": "2022-11-30T17:41:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Context\r\n\r\nWe are setting `MOTO_AMIS_PATH` in a pytest plugin. Our test uses `describe_images` on an EC2 client.\r\n\r\n## Expected\r\n\r\nWe expect the images set in the file at the path set in the environment variables `MOTO_AMIS_PATH` to be the only ones returned.\r\n\r\n## Actual behavior\r\n\r\nThe images from `MOTO_AMIS_PATH` are there, but there are also other images that are hard-coded in the library.\r\n\r\n## Affected versions\r\n\r\nPresent in 4.0.9, was not present in 3.1.18. moto installed with poetry (reproduced with moto installed manually in a virtual environment)\r\n\r\nSeems to have been introduced by #5427 \r\n\r\nCode here: https://github.com/spulec/moto/blob/6ab2497a12d8f0a5fe9be91387bc6b589d78e295/moto/ec2/models/amis.py#L157\r\n\r\n## Reproduction steps\r\n\r\nRun the following script\r\n```python\r\nimport json\r\nimport os\r\nfrom pathlib import Path\r\n\r\ntest_ami = [\r\n    {\r\n        \"ami_id\": \"ami-760aaa0f760aaa0fe\",\r\n        \"name\": \"infra-eks-20211110080547-bionic\",\r\n        \"description\": \"An AMI\",\r\n        \"owner_id\": \"123456789012\",\r\n        \"public\": False,\r\n        \"virtualization_type\": \"hvm\",\r\n        \"architecture\": \"x86_64\",\r\n        \"state\": \"available\",\r\n        \"platform\": None,\r\n        \"image_type\": \"machine\",\r\n        \"hypervisor\": \"xen\",\r\n        \"root_device_name\": \"/dev/sda1\",\r\n        \"root_device_type\": \"ebs\",\r\n        \"sriov\": \"simple\",\r\n        \"creation_date\": \"2021-11-10T08:13:01.000Z\"\r\n    }\r\n]\r\n\r\ntest_ami_path = Path(__file__).parent / \"test_ami.json\"\r\n\r\nwith test_ami_path.open(\"w\") as fp:\r\n    json.dump(test_ami, fp)\r\n\r\nos.environ[\"MOTO_AMIS_PATH\"] = str(test_ami_path)\r\n\r\nimport moto\r\nimport boto3\r\n\r\nwith moto.mock_ec2():\r\n    ec2_client = boto3.client(\"ec2\")\r\n    images = ec2_client.describe_images()[\"Images\"]\r\n    print(f\"Found {len(images)} images!\")\r\n    assert len(images) == 1\r\n```\r\nWith moto 3.1.18:\r\n```\r\n$ python ./reproduce_step.py \r\nFound 1 images!\r\n```\r\nWith moto 4.0.9:\r\n```\r\n$ python ./reproduce_step.py \r\nFound 18 images!\r\nTraceback (most recent call last):\r\n  File \"./reproduce_step.py\", line 39, in <module>\r\n    assert len(images) == 1\r\nAssertionError\r\n```\r\n\r\n## Conclusion\r\n\r\nA workaround is to use the old version for now. Thanks for your help resolving this issue!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5677/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5677/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5642", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5642/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5642/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5642/events", "html_url": "https://github.com/getmoto/moto/issues/5642", "id": 1437286673, "node_id": "I_kwDOAH5NfM5Vq0ER", "number": 5642, "title": "Intermittent CI Failures", "user": {"login": "bpandola", "id": 11675295, "node_id": "MDQ6VXNlcjExNjc1Mjk1", "avatar_url": "https://avatars.githubusercontent.com/u/11675295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpandola", "html_url": "https://github.com/bpandola", "followers_url": "https://api.github.com/users/bpandola/followers", "following_url": "https://api.github.com/users/bpandola/following{/other_user}", "gists_url": "https://api.github.com/users/bpandola/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpandola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpandola/subscriptions", "organizations_url": "https://api.github.com/users/bpandola/orgs", "repos_url": "https://api.github.com/users/bpandola/repos", "events_url": "https://api.github.com/users/bpandola/events{/privacy}", "received_events_url": "https://api.github.com/users/bpandola/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "bpandola", "id": 11675295, "node_id": "MDQ6VXNlcjExNjc1Mjk1", "avatar_url": "https://avatars.githubusercontent.com/u/11675295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpandola", "html_url": "https://github.com/bpandola", "followers_url": "https://api.github.com/users/bpandola/followers", "following_url": "https://api.github.com/users/bpandola/following{/other_user}", "gists_url": "https://api.github.com/users/bpandola/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpandola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpandola/subscriptions", "organizations_url": "https://api.github.com/users/bpandola/orgs", "repos_url": "https://api.github.com/users/bpandola/repos", "events_url": "https://api.github.com/users/bpandola/events{/privacy}", "received_events_url": "https://api.github.com/users/bpandola/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bpandola", "id": 11675295, "node_id": "MDQ6VXNlcjExNjc1Mjk1", "avatar_url": "https://avatars.githubusercontent.com/u/11675295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpandola", "html_url": "https://github.com/bpandola", "followers_url": "https://api.github.com/users/bpandola/followers", "following_url": "https://api.github.com/users/bpandola/following{/other_user}", "gists_url": "https://api.github.com/users/bpandola/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpandola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpandola/subscriptions", "organizations_url": "https://api.github.com/users/bpandola/orgs", "repos_url": "https://api.github.com/users/bpandola/repos", "events_url": "https://api.github.com/users/bpandola/events{/privacy}", "received_events_url": "https://api.github.com/users/bpandola/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2022-11-06T04:59:57Z", "updated_at": "2022-11-07T20:03:08Z", "closed_at": "2022-11-07T20:03:08Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "> FAILED tests/test_awslambda/test_lambda_eventsourcemapping.py::test_invoke_function_from_sqs_exception - botocore.errorfactory.EntityAlreadyExistsException: An error occurred (EntityAlreadyExists) when calling the CreateRole operation: Role with name my-role already exists.\r\n\r\nLooks like this started happening after the Server Mode tests for `awslambda` began running in parallel (#4368).\r\n\r\n<details><summary>Detailed Log Output</summary>\r\n\r\n=================================== FAILURES ===================================\r\n___________________ test_invoke_function_from_sqs_exception ____________________\r\n[gw1] linux -- Python 3.8.14 /opt/hostedtoolcache/Python/3.8.14/x64/bin/python\r\n\r\n    def get_role_name():\r\n        with mock_iam():\r\n            iam = boto3.client(\"iam\", region_name=_lambda_region)\r\n            try:\r\n>               return iam.get_role(RoleName=\"my-role\")[\"Role\"][\"Arn\"]\r\n\r\ntests/test_awslambda/utilities.py:170: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.IAM object at 0x7f279c4a5eb0>, args = ()\r\nkwargs = {'RoleName': 'my-role'}\r\n\r\n    def _api_call(self, *args, **kwargs):\r\n        # We're accepting *args so that we can give a more helpful\r\n        # error message than TypeError: _api_call takes exactly\r\n        # 1 argument.\r\n        if args:\r\n            raise TypeError(\r\n                f\"{py_operation_name}() only accepts keyword arguments.\"\r\n            )\r\n        # The \"self\" in this scope is referring to the BaseClient.\r\n>       return self._make_api_call(operation_name, kwargs)\r\n\r\n/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/botocore/client.py:495: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.IAM object at 0x7f279c4a5eb0>\r\noperation_name = 'GetRole', api_params = {'RoleName': 'my-role'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record(\r\n            'API_CALL',\r\n            {\r\n                'service': service_name,\r\n                'operation': operation_name,\r\n                'params': api_params,\r\n            },\r\n        )\r\n        if operation_model.deprecated:\r\n            logger.debug(\r\n                'Warning: %s.%s() is deprecated', service_name, operation_name\r\n            )\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        endpoint_url, additional_headers = self._resolve_endpoint_ruleset(\r\n            operation_model, api_params, request_context\r\n        )\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params=api_params,\r\n            operation_model=operation_model,\r\n            endpoint_url=endpoint_url,\r\n            context=request_context,\r\n            headers=additional_headers,\r\n        )\r\n        resolve_checksum_context(request_dict, operation_model, api_params)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id, operation_name=operation_name\r\n            ),\r\n            model=operation_model,\r\n            params=request_dict,\r\n            request_signer=self._request_signer,\r\n            context=request_context,\r\n        )\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            apply_request_checksum(request_dict)\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context\r\n            )\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id, operation_name=operation_name\r\n            ),\r\n            http_response=http,\r\n            parsed=parsed_response,\r\n            model=operation_model,\r\n            context=request_context,\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.errorfactory.NoSuchEntityException: An error occurred (NoSuchEntity) when calling the GetRole operation: Role my-role not found\r\n\r\n/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/botocore/client.py:914: NoSuchEntityException\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n    @pytest.mark.network\r\n    @mock_logs\r\n    @mock_lambda\r\n    @mock_sqs\r\n    def test_invoke_function_from_sqs_exception():\r\n        function_name = str(uuid4())[0:6]\r\n        logs_conn = boto3.client(\"logs\", region_name=\"us-east-1\")\r\n        sqs = boto3.resource(\"sqs\", region_name=\"us-east-1\")\r\n        queue = sqs.create_queue(QueueName=f\"{function_name}_queue\")\r\n    \r\n        conn = boto3.client(\"lambda\", region_name=\"us-east-1\")\r\n        func = conn.create_function(\r\n            FunctionName=function_name,\r\n            Runtime=\"python2.7\",\r\n>           Role=get_role_name(),\r\n            Handler=\"lambda_function.lambda_handler\",\r\n            Code={\"ZipFile\": get_test_zip_file_error()},\r\n            Description=\"test lambda function\",\r\n            Timeout=3,\r\n            MemorySize=128,\r\n            Publish=True,\r\n        )\r\n\r\ntests/test_awslambda/test_lambda_eventsourcemapping.py:223: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntests/test_awslambda/utilities.py:172: in get_role_name\r\n    return iam.create_role(\r\n/opt/hostedtoolcache/Python/3.8.14/x64/lib/python3.8/site-packages/botocore/client.py:495: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.IAM object at 0x7f279c4a5eb0>\r\noperation_name = 'CreateRole'\r\napi_params = {'AssumeRolePolicyDocument': 'some policy', 'Path': '/my-path/', 'RoleName': 'my-role'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record(\r\n            'API_CALL',\r\n            {\r\n                'service': service_name,\r\n                'operation': operation_name,\r\n                'params': api_params,\r\n            },\r\n        )\r\n        if operation_model.deprecated:\r\n            logger.debug(\r\n                'Warning: %s.%s() is deprecated', service_name, operation_name\r\n            )\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        endpoint_url, additional_headers = self._resolve_endpoint_ruleset(\r\n            operation_model, api_params, request_context\r\n        )\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params=api_params,\r\n            operation_model=operation_model,\r\n            endpoint_url=endpoint_url,\r\n            context=request_context,\r\n            headers=additional_headers,\r\n        )\r\n        resolve_checksum_context(request_dict, operation_model, api_params)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id, operation_name=operation_name\r\n            ),\r\n            model=operation_model,\r\n            params=request_dict,\r\n            request_signer=self._request_signer,\r\n            context=request_context,\r\n        )\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            apply_request_checksum(request_dict)\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context\r\n            )\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id, operation_name=operation_name\r\n            ),\r\n            http_response=http,\r\n            parsed=parsed_response,\r\n            model=operation_model,\r\n            context=request_context,\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.errorfactory.EntityAlreadyExistsException: An error occurred (EntityAlreadyExists) when calling the CreateRole operation: Role with name my-role already exists.\r\n\r\n</details>", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5642/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5638", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5638/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5638/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5638/events", "html_url": "https://github.com/getmoto/moto/issues/5638", "id": 1435058077, "node_id": "I_kwDOAH5NfM5ViT-d", "number": 5638, "title": "DynamoDB backend erroneously accepts JSON numbers for strings", "user": {"login": "ikonst", "id": 1186084, "node_id": "MDQ6VXNlcjExODYwODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1186084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ikonst", "html_url": "https://github.com/ikonst", "followers_url": "https://api.github.com/users/ikonst/followers", "following_url": "https://api.github.com/users/ikonst/following{/other_user}", "gists_url": "https://api.github.com/users/ikonst/gists{/gist_id}", "starred_url": "https://api.github.com/users/ikonst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ikonst/subscriptions", "organizations_url": "https://api.github.com/users/ikonst/orgs", "repos_url": "https://api.github.com/users/ikonst/repos", "events_url": "https://api.github.com/users/ikonst/events{/privacy}", "received_events_url": "https://api.github.com/users/ikonst/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-11-03T17:54:39Z", "updated_at": "2022-11-10T22:52:04Z", "closed_at": "2022-11-10T22:52:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Similar to #5022:\r\n\r\nThis sample code\r\n```python\r\nimport botocore.session\r\nimport botocore.client\r\nimport moto\r\n\r\nwith moto.mock_dynamodb():\r\n    session = botocore.session.Session()\r\n    config = botocore.client.Config(parameter_validation=False)\r\n    client = session.create_client('dynamodb', region_name='us-east-1', config=config)\r\n    client.create_table(\r\n        TableName='my_table',\r\n        KeySchema=[\r\n            {\r\n                'AttributeName': 'my_key',\r\n                'KeyType': 'HASH',\r\n            },\r\n        ],\r\n        AttributeDefinitions=[\r\n            {\r\n                'AttributeName': 'my_key',\r\n                'AttributeType': 'S',\r\n            }\r\n        ],\r\n        ProvisionedThroughput={\r\n            'ReadCapacityUnits': 10,\r\n            'WriteCapacityUnits': 10,\r\n        },\r\n    )\r\n    client.put_item(\r\n        TableName='my_table',\r\n        Item={\r\n            'my_key': {'S': 123},  # note: 123 is not quoted\r\n        },\r\n    )\r\n```\r\nresults in crash\r\n```\r\n  File \"moto/dynamodb/responses.py\", line 412, in put_item\r\n    result = self.dynamodb_backend.put_item(\r\n  File \"moto/dynamodb/models/__init__.py\", line 1364, in put_item\r\n    return table.put_item(\r\n  File \"moto/dynamodb/models/__init__.py\", line 702, in put_item\r\n    self._validate_key_sizes(item_attrs)\r\n  File \"moto/dynamodb/models/__init__.py\", line 647, in _validate_key_sizes\r\n    if DynamoType(hash_value).size() > HASH_KEY_MAX_LENGTH:\r\n  File \"moto/dynamodb/models/dynamo_type.py\", line 207, in size\r\n    value_size = bytesize(self.value)\r\n  File \"moto/dynamodb/models/utilities.py\", line 3, in bytesize\r\n    return len(val.encode(\"utf-8\"))\r\nAttributeError: 'int' object has no attribute 'encode'\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5638/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5631", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5631/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5631/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5631/events", "html_url": "https://github.com/getmoto/moto/issues/5631", "id": 1432880883, "node_id": "I_kwDOAH5NfM5VaAbz", "number": 5631, "title": "event.delete_rule (EventBridge api) should raise ResourceNotFoundException instead of AttributeError", "user": {"login": "vivainio", "id": 557579, "node_id": "MDQ6VXNlcjU1NzU3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/557579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vivainio", "html_url": "https://github.com/vivainio", "followers_url": "https://api.github.com/users/vivainio/followers", "following_url": "https://api.github.com/users/vivainio/following{/other_user}", "gists_url": "https://api.github.com/users/vivainio/gists{/gist_id}", "starred_url": "https://api.github.com/users/vivainio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vivainio/subscriptions", "organizations_url": "https://api.github.com/users/vivainio/orgs", "repos_url": "https://api.github.com/users/vivainio/repos", "events_url": "https://api.github.com/users/vivainio/events{/privacy}", "received_events_url": "https://api.github.com/users/vivainio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-11-02T10:20:33Z", "updated_at": "2022-11-17T17:36:12Z", "closed_at": "2022-11-17T17:36:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, if you try to run client.delete_rule(Name=\"foo\") and the rule doesn't exist, it raises AttributeError instead of ResourceNotFoundException (because it's trying read \"arn\" from None):\r\n\r\n```\r\n    def delete_rule(self, name):\r\n        arn = self.rules.get(name).arn\r\n        if self.tagger.has_tags(arn):\r\n            self.tagger.delete_all_tags_for_resource(arn)\r\n        return self.rules.pop(name) is not None\r\n```\r\n\r\nLooks like the same problem applies to bunch of other methods in moto\\events\\models.py\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5631/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5631/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5625", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5625/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5625/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5625/events", "html_url": "https://github.com/getmoto/moto/issues/5625", "id": 1429899568, "node_id": "I_kwDOAH5NfM5VOokw", "number": 5625, "title": "End time for Cloudwatch `get_metric_data` should be exclusive", "user": {"login": "christiankjaer", "id": 438298, "node_id": "MDQ6VXNlcjQzODI5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/438298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christiankjaer", "html_url": "https://github.com/christiankjaer", "followers_url": "https://api.github.com/users/christiankjaer/followers", "following_url": "https://api.github.com/users/christiankjaer/following{/other_user}", "gists_url": "https://api.github.com/users/christiankjaer/gists{/gist_id}", "starred_url": "https://api.github.com/users/christiankjaer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christiankjaer/subscriptions", "organizations_url": "https://api.github.com/users/christiankjaer/orgs", "repos_url": "https://api.github.com/users/christiankjaer/repos", "events_url": "https://api.github.com/users/christiankjaer/events{/privacy}", "received_events_url": "https://api.github.com/users/christiankjaer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-31T14:00:45Z", "updated_at": "2022-11-01T16:51:06Z", "closed_at": "2022-11-01T16:50:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Looking at the code for `get_metric_data` is looks like the metrics to be included are including the end point\r\n\r\nhttps://github.com/spulec/moto/blob/master/moto/cloudwatch/models.py#L503\r\n\r\nBut looking at the docs\r\n\r\nhttps://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html\r\n\r\n> EndTime\r\n>   The time stamp indicating the latest data to be returned.\r\n>   The value specified is exclusive; results include data points up to the specified time stamp.\r\n\r\nIt seems like the `end_time` should be excluded", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5625/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5625/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5611", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5611/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5611/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5611/events", "html_url": "https://github.com/getmoto/moto/issues/5611", "id": 1425650127, "node_id": "I_kwDOAH5NfM5U-bHP", "number": 5611, "title": "Cloudwatch tag_resource only works if tags already exist", "user": {"login": "bellmatt", "id": 38588937, "node_id": "MDQ6VXNlcjM4NTg4OTM3", "avatar_url": "https://avatars.githubusercontent.com/u/38588937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bellmatt", "html_url": "https://github.com/bellmatt", "followers_url": "https://api.github.com/users/bellmatt/followers", "following_url": "https://api.github.com/users/bellmatt/following{/other_user}", "gists_url": "https://api.github.com/users/bellmatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/bellmatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bellmatt/subscriptions", "organizations_url": "https://api.github.com/users/bellmatt/orgs", "repos_url": "https://api.github.com/users/bellmatt/repos", "events_url": "https://api.github.com/users/bellmatt/events{/privacy}", "received_events_url": "https://api.github.com/users/bellmatt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-27T13:35:13Z", "updated_at": "2022-10-29T15:41:30Z", "closed_at": "2022-10-29T15:41:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "The moto cloudwatch `tag_resource` function only works if tags were added to the alarm when it was created. If they do not exist, then a `ResourceNotFoundException` is raised ([here](https://github.com/spulec/moto/blob/03f551870325fdce1c789bc43c286486cdddb13d/moto/cloudwatch/models.py#L668-L669)). \r\n\r\nExample code below to demonstrate: \r\n```\r\nimport boto3\r\nfrom moto import mock_cloudwatch\r\n\r\n@mock_cloudwatch\r\ndef test_cw_working():\r\n    \"\"\"If tags are added to the alarm on creation, then `tag_resource` is successful and the assert passes\"\"\"\r\n    cw = boto3.client(\"cloudwatch\") \r\n    cw.put_metric_alarm(AlarmName=\"testalarm\",\r\n        EvaluationPeriods=1,\r\n        ComparisonOperator=\"GreaterThanThreshold\",\r\n        Period=60,\r\n        MetricName=\"test\",\r\n        Namespace=\"test\",\r\n        Tags=[{\"Key\":\"testtag1\",\"Value\":\"testvalue1\"}]\r\n    )\r\n    alarms = cw.describe_alarms()\r\n    alarm_arn = alarms[\"MetricAlarms\"][0][\"AlarmArn\"]\r\n    cw.tag_resource(ResourceARN=alarm_arn, Tags=[{\"Key\":\"testtag2\",\"Value\":\"testvalue2\"}])\r\n    assert len(cw.list_tags_for_resource(ResourceARN=alarm_arn)[\"Tags\"]) == 2\r\n\r\n@mock_cloudwatch\r\ndef test_cw_not_working():\r\n    \"\"\"If no tags are added on creation, then tag_resource fails with an error\"\"\"\r\n    cw = boto3.client(\"cloudwatch\") \r\n    cw.put_metric_alarm(AlarmName=\"testalarm\",\r\n        EvaluationPeriods=1,\r\n        ComparisonOperator=\"GreaterThanThreshold\",\r\n        Period=60,\r\n        MetricName=\"test\",\r\n        Namespace=\"test\",\r\n    )\r\n    alarms = cw.describe_alarms()\r\n    alarm_arn = alarms[\"MetricAlarms\"][0][\"AlarmArn\"]\r\n    cw.tag_resource(ResourceARN=alarm_arn, Tags=[{\"Key\":\"testtag2\",\"Value\":\"testvalue2\"}])\r\n    assert len(cw.list_tags_for_resource(ResourceARN=alarm_arn)[\"Tags\"]) == 1\r\n```\r\n`test_cw_not_working` fails with this exception:\r\n```\r\nFAILED tests/test_resource_tagger.py::test_cw_not_working - botocore.errorfactory.ResourceNotFoundException: An error occurred (ResourceNotFoundException) when calling the TagResource operation: Unknown\r\n```\r\n\r\nmoto==4.0.8", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5611/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5611/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5610", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5610/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5610/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5610/events", "html_url": "https://github.com/getmoto/moto/issues/5610", "id": 1425375821, "node_id": "I_kwDOAH5NfM5U9YJN", "number": 5610, "title": "Handling DeleteObjectsRequest broken after JS SDK update", "user": {"login": "j-beyer", "id": 11978152, "node_id": "MDQ6VXNlcjExOTc4MTUy", "avatar_url": "https://avatars.githubusercontent.com/u/11978152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j-beyer", "html_url": "https://github.com/j-beyer", "followers_url": "https://api.github.com/users/j-beyer/followers", "following_url": "https://api.github.com/users/j-beyer/following{/other_user}", "gists_url": "https://api.github.com/users/j-beyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/j-beyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j-beyer/subscriptions", "organizations_url": "https://api.github.com/users/j-beyer/orgs", "repos_url": "https://api.github.com/users/j-beyer/repos", "events_url": "https://api.github.com/users/j-beyer/events{/privacy}", "received_events_url": "https://api.github.com/users/j-beyer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-10-27T10:05:28Z", "updated_at": "2022-10-31T11:01:39Z", "closed_at": "2022-10-29T15:02:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running some integration tests against a localstack S3 container using AWS SDK v3 for JavaScript.\r\nWith the recently published version v3.197.0 of the SDK, i'm getting errors when running a DeleteObjects request.\r\n\r\nI compared the requests that are sent by the SDK, and can see the following difference (from the localstack logs):\r\nBefore:\r\n```\r\nPOST localhost/3ee3499c-208f-43f3-aadd-b667f3b2ea6f?delete=&x-id=DeleteObjects\r\n```\r\nAfterwards:\r\n```\r\nPOST localhost/89e28fce-e5f2-427a-ab59-5229b83a15ee/?delete=&x-id=DeleteObjects\r\n```\r\n\r\nStacktrace of the error:\r\n```\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: 2022-10-27T09:35:28.605  INFO --- [   asgi_gw_0] localstack.request.aws     : AWS s3.DeleteObjects => 500 (InternalError); DeleteObjectsRequest({'Bucket': '89e28fce-e5f2-427a-ab59-5229b83a15ee', 'Delete': {'Objects': [{'Key': 'sameDirectory/316b663c-663f-4881-bdd8-73ec94d62260'}, {'Key': 'sameDirectory/77680bae-2e2c-4230-af2c-165680c8057d'}]}, 'MFA': None, 'RequestPayer': None, 'BypassGovernanceRetention': None, 'ExpectedBucketOwner': None, 'ChecksumAlgorithm': None}, headers={'content-type': 'application/xml', 'content-length': '259', 'Expect': '100-continue', 'content-md5': 'SeDvWL0dJ6G0h+yQ476qfg==', 'host': 'localhost', 'x-amz-user-agent': 'aws-sdk-js/3.197.0', 'user-agent': 'aws-sdk-js/3.197.0 os/darwin/22.1.0 lang/js md/nodejs/16.18.0 api/s3/3.197.0', 'amz-sdk-invocation-id': 'bbd8ffc8-d792-4298-b7bd-68deca0c3d07', 'amz-sdk-request': 'attempt=1; max=3', 'x-amz-date': '20221027T093528Z', 'x-amz-content-sha256': 'f52fc7ca91861bfc5dac677a383afa8e05c00d54b61593ddd96502aff8711057', 'authorization': 'AWS4-HMAC-SHA256 Credential=accessKeyId/20221027/eu-central-1/s3/aws4_request, SignedHeaders=amz-sdk-invocation-id;amz-sdk-request;content-length;content-md5;content-type;host;x-amz-content-sha256;x-amz-date;x-amz-user-agent, Signature=62c6fb145a2d09eca53b1083ec3b0b75490ffd7cd2a22d572087784bd0599536', 'Connection': 'keep-alive', 'x-localstack-tgt-api': 's3', 'x-moto-account-id': '000000000000', 'x-localstack-edge': 'http://localhost', 'X-Forwarded-For': '127.0.0.1, localhost'}); InternalError(exception while calling s3.DeleteObjects: Traceback (most recent call last): +4ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/localstack/aws/chain.py\", line 90, in handle +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: handler(self, self.context, response) +1ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/localstack/aws/handlers/service.py\", line 122, in __call__ +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: handler(chain, context, response) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/localstack/aws/handlers/legacy.py\", line 81, in __call__ +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: result = self.forward_request( +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/localstack/aws/handlers/legacy.py\", line 141, in forward_request +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: return do_forward_request( +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/localstack/services/edge.py\", line 225, in do_forward_request +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: result = do_forward_request_inmem(api, method, path, data, headers, port=port) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/localstack/services/edge.py\", line 249, in do_forward_request_inmem +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: response = modify_and_forward( +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/localstack/services/generic_proxy.py\", line 601, in wrapper +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: value = func(*args, **kwargs) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/localstack/services/generic_proxy.py\", line 774, in modify_and_forward +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: updated_response = listener.return_response( +1ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/localstack/services/s3/s3_listener.py\", line 1644, in return_response +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: object_path = parts[1] if parts[1][0] == \"/\" else \"/+0ms\" % parts[1]\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: IndexError: string index out of range +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: , headers={'Content-Type': 'application/xml', 'Content-Length': '1525', 'x-amz-request-id': 'FF7XCYIT7RZKAU1DEAH2YKXFG4F37LYNDJ07Z942D2LEXHLG1AOJ', 'x-amz-id-2': 'MzRISOwyjmnupFF7XCYIT7RZKAU1DEAH2YKXFG4F37LYNDJ07Z942D2LEXHLG1AOJ7/JypPGXLh0OVFGcJaaO3KW/hRAqKOpIEEp'}) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: 2022-10-27T09:35:28.619 ERROR --- [uest_thread)] werkzeug                   : Error on request: +14ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: Traceback (most recent call last): +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/werkzeug/serving.py\", line 335, in run_wsgi +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: execute(self.server.app) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/werkzeug/serving.py\", line 322, in execute +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: application_iter = app(environ, start_response) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/moto_server/werkzeug_app.py\", line 249, in __call__ +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: return backend_app(environ, start_response) +2ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/flask/app.py\", line 2091, in __call__ +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: return self.wsgi_app(environ, start_response) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/flask/app.py\", line 2076, in wsgi_app +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: response = self.handle_exception(e) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/flask_cors/extension.py\", line 165, in wrapped_function +1ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: return cors_after_request(app.make_response(f(*args, **kwargs))) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/flask/app.py\", line 2073, in wsgi_app +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: response = self.full_dispatch_request() +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/flask/app.py\", line 1519, in full_dispatch_request +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: rv = self.handle_user_exception(e) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/flask_cors/extension.py\", line 165, in wrapped_function +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: return cors_after_request(app.make_response(f(*args, **kwargs))) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/flask/app.py\", line 1517, in full_dispatch_request +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: rv = self.dispatch_request() +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/flask/app.py\", line 1503, in dispatch_request +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/localstack/utils/patch.py\", line 38, in proxy +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: return new(target, *args, **kwargs) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/localstack/utils/aws/request_context.py\", line 174, in convert_to_flask_response_call +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: return fn(*args, **kwargs) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/core/utils.py\", line 110, in __call__ +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: result = self.callback(request, request.url, dict(request.headers)) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/s3/responses.py\", line 254, in ambiguous_response +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: return self.bucket_response(request, full_url, headers) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/utilities/aws_headers.py\", line 60, in _wrapper +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: response = f(*args, **kwargs) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/s3/responses.py\", line 260, in bucket_response +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: response = self._bucket_response(request, full_url) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/s3/responses.py\", line 305, in _bucket_response +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: return self._bucket_response_post(request, bucket_name) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/s3/responses.py\", line 983, in _bucket_response_post +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: key = form[\"key\"] +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/werkzeug/datastructures.py\", line 375, in __getitem__ +1ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: raise exceptions.BadRequestKeyError(key) +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: werkzeug.exceptions.BadRequestKeyError: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand. +0ms\r\n  testcontainers:containers TRACE a06d147a600e3a0d915f0ed0923d716f17491e2406353bc3a7829fd26c34b1a2: KeyError: 'key' +0ms\r\n```\r\n\r\nWhat I understand is that the POST request for deletion is not determined as a delete request by the `self.is_delete_keys` method [here](https://github.com/spulec/moto/blob/03f551870325fdce1c789bc43c286486cdddb13d/moto/s3/responses.py#L967), and thus interpreted as a PutObject request afterwards.\r\n\r\nFrom what I can see, the [method for determining the delete request](https://github.com/spulec/moto/blob/03f551870325fdce1c789bc43c286486cdddb13d/moto/s3bucket_path/utils.py#L17) currently does not account for this changed URL, where we now have `/?delete=` instead of `?delete=`.\r\n\r\nCould it already be the fix to include `/?delete=` in the check? ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5610/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5610/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5604", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5604/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5604/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5604/events", "html_url": "https://github.com/getmoto/moto/issues/5604", "id": 1423825774, "node_id": "I_kwDOAH5NfM5U3dtu", "number": 5604, "title": "Cloudtrail describe_trails returning wrong info", "user": {"login": "n4ch04", "id": 59198746, "node_id": "MDQ6VXNlcjU5MTk4NzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/59198746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n4ch04", "html_url": "https://github.com/n4ch04", "followers_url": "https://api.github.com/users/n4ch04/followers", "following_url": "https://api.github.com/users/n4ch04/following{/other_user}", "gists_url": "https://api.github.com/users/n4ch04/gists{/gist_id}", "starred_url": "https://api.github.com/users/n4ch04/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n4ch04/subscriptions", "organizations_url": "https://api.github.com/users/n4ch04/orgs", "repos_url": "https://api.github.com/users/n4ch04/repos", "events_url": "https://api.github.com/users/n4ch04/events{/privacy}", "received_events_url": "https://api.github.com/users/n4ch04/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-10-26T10:53:48Z", "updated_at": "2022-10-29T18:34:14Z", "closed_at": "2022-10-29T18:34:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'am trying to mock trail creation and describing those trails, and I realise that something is wrong when describing the trails.\r\nWhen you create a single region trail for example with:\r\n\r\n`aws cloudtrail create-trail --name \"single-region-trail-test\" --s3-bucket-name \"test\" --no-is-multi-region-trail --region eu-west-1`\r\n\r\nand then if you try to describe trails with:\r\n\r\n`aws cloudtrail describe-trail --region us-west-2`\r\n\r\nYou should not get any results, since the created trail is not multiregion or organization trail.\r\n\r\nIf you replicate this steps with moto, using `mock_s3 ` and `mock_cloudtrail` decorators you'll get data from the `describe_trail` api call from regions that should be empty.\r\n\r\nYou can see this behaviour with the following code\r\n\r\n```\r\nfrom boto3 import client, session\r\nfrom moto import mock_cloudtrail, mock_s3\r\n\r\n@mock_cloudtrail\r\n@mock_s3\r\ndef test():\r\n    aws_session = session.Session(profile_name=None)\r\n    cloudtrail_client_us_east_1 = aws_session.client(\"cloudtrail\", region_name=\"us-east-1\")\r\n    s3_client_us_east_1 = client(\"s3\", region_name=\"us-east-1\")\r\n    cloudtrail_client_eu_west_1 = aws_session.client(\"cloudtrail\", region_name=\"eu-west-1\")\r\n    s3_client_eu_west_1 = aws_session.client(\"s3\", region_name=\"eu-west-1\")\r\n    trail_name_us = \"trail_test_us\"\r\n    bucket_name_us = \"bucket_test_us\"\r\n    trail_name_eu = \"trail_test_eu\"\r\n    bucket_name_eu = \"bucket_test_eu\"\r\n    s3_client_us_east_1.create_bucket(Bucket=bucket_name_us)\r\n    s3_client_eu_west_1.create_bucket(Bucket=bucket_name_eu, CreateBucketConfiguration={\r\n        'LocationConstraint': 'eu-west-1'\r\n            })\r\n    cloudtrail_client_us_east_1.create_trail(\r\n            Name=trail_name_us, S3BucketName=bucket_name_us, IsMultiRegionTrail=False\r\n            )\r\n    cloudtrail_client_eu_west_1.create_trail(\r\n                Name=trail_name_eu, S3BucketName=bucket_name_eu, IsMultiRegionTrail=False\r\n            )\r\n\r\n    regions = [\"af-south-1\",\r\n    \"ap-east-1\",\r\n    \"ap-northeast-1\",\r\n    \"ap-northeast-2\",\r\n    \"eu-west-3\",\r\n    \"me-central-1\",\r\n    \"sa-east-1\",\r\n    \"us-west-2\",\r\n    \"ap-northeast-3\",\r\n    \"ap-southeast-2\",\r\n    \"ap-southeast-3\",\r\n    \"ca-central-1\",\r\n    \"eu-north-1\",\r\n    \"eu-south-1\",\r\n    \"eu-west-1\",\r\n    \"us-east-2\",\r\n    \"ap-south-1\",\r\n    \"ap-southeast-1\",\r\n    \"eu-central-1\",\r\n    \"eu-west-2\",\r\n    \"me-south-1\",\r\n    \"us-east-1\",\r\n    \"us-west-1\"]\r\n\r\n    for region in regions:\r\n        cloudtrail_describe_client = aws_session.client(\"cloudtrail\", region_name=region)\r\n        list_of_trails=cloudtrail_describe_client.describe_trails()[\"trailList\"]\r\n        print(\"REGION:\" + region)\r\n        print(\"LIST OF TRAILS:\")\r\n        print(list_of_trails)\r\n        # if the region is the one with the trail created \r\n        if region == \"us-east-1\" or region == \"eu-west-1\":\r\n            assert len(list_of_trails) == 1\r\n        else:\r\n            assert len(list_of_trails) == 0\r\n\r\ntest()\r\n```\r\n\r\nThe output is\r\n\r\n```\r\nREGION:af-south-1\r\nLIST OF TRAILS:\r\n[{'Name': 'trail_test_us', 'S3BucketName': 'bucket_test_us', 'IncludeGlobalServiceEvents': True, 'IsMultiRegionTrail': False, 'HomeRegion': 'us-east-1', 'TrailARN': 'arn:aws:cloudtrail:us-east-1:123456789012:trail/trail_test_us', 'LogFileValidationEnabled': False, 'HasCustomEventSelectors': False, 'HasInsightSelectors': False, 'IsOrganizationTrail': False}, \r\n{'Name': 'trail_test_eu', 'S3BucketName': 'bucket_test_eu', 'IncludeGlobalServiceEvents': True, 'IsMultiRegionTrail': False, 'HomeRegion': 'eu-west-1', 'TrailARN': 'arn:aws:cloudtrail:eu-west-1:123456789012:trail/trail_test_eu', 'LogFileValidationEnabled': False, 'HasCustomEventSelectors': False, 'HasInsightSelectors': False, 'IsOrganizationTrail': False}]\r\nTraceback (most recent call last):\r\n  File \"\", line 64, in <module>\r\n    test()\r\n  File \"\", line 111, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"\", line 111, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"\", line 62, in test\r\n    assert len(list_of_trails) == 0\r\nAssertionError\r\n```\r\n\r\nAs it can be seen it is retrieving both single region trails querying from region `af-south-1` which is wrong", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5604/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5604/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5595", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5595/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5595/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5595/events", "html_url": "https://github.com/getmoto/moto/issues/5595", "id": 1420742670, "node_id": "I_kwDOAH5NfM5UrtAO", "number": 5595, "title": "Regression when using mock_batch_simple since 4.0.7", "user": {"login": "bmaisonn", "id": 7989822, "node_id": "MDQ6VXNlcjc5ODk4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/7989822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmaisonn", "html_url": "https://github.com/bmaisonn", "followers_url": "https://api.github.com/users/bmaisonn/followers", "following_url": "https://api.github.com/users/bmaisonn/following{/other_user}", "gists_url": "https://api.github.com/users/bmaisonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmaisonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmaisonn/subscriptions", "organizations_url": "https://api.github.com/users/bmaisonn/orgs", "repos_url": "https://api.github.com/users/bmaisonn/repos", "events_url": "https://api.github.com/users/bmaisonn/events{/privacy}", "received_events_url": "https://api.github.com/users/bmaisonn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-24T12:21:40Z", "updated_at": "2022-11-07T20:24:25Z", "closed_at": "2022-11-07T20:24:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since moto 4.0.7 we noticed some regressions in our unit tests using `mock_batch_simple`. All the jobs container details are empty while they weren't in version 4.0.6.\r\n\r\nFor instance this code is now failing because there's no 'command' key in the dictionary.\r\n\r\n```python\r\n    result = batch.describe_jobs(jobs=job_ids)['jobs']\r\n    commands = [job['container']['command'] for job in result]\r\n```\r\n\r\nWe think this [change](https://github.com/spulec/moto/pull/5539) is the source of the issue but I'm not sure that changing the behavior of `mock_batch_simple` was intended here.\r\n\r\nCan you confirm this, we can try to fix if needed ?", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5595/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5595/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5588", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5588/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5588/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5588/events", "html_url": "https://github.com/getmoto/moto/issues/5588", "id": 1418854550, "node_id": "I_kwDOAH5NfM5UkgCW", "number": 5588, "title": "S3 backend throwing 500 on versioned bucket", "user": {"login": "thehesiod", "id": 4001789, "node_id": "MDQ6VXNlcjQwMDE3ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/4001789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thehesiod", "html_url": "https://github.com/thehesiod", "followers_url": "https://api.github.com/users/thehesiod/followers", "following_url": "https://api.github.com/users/thehesiod/following{/other_user}", "gists_url": "https://api.github.com/users/thehesiod/gists{/gist_id}", "starred_url": "https://api.github.com/users/thehesiod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thehesiod/subscriptions", "organizations_url": "https://api.github.com/users/thehesiod/orgs", "repos_url": "https://api.github.com/users/thehesiod/repos", "events_url": "https://api.github.com/users/thehesiod/events{/privacy}", "received_events_url": "https://api.github.com/users/thehesiod/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2022-10-21T20:59:31Z", "updated_at": "2022-10-24T16:29:37Z", "closed_at": "2022-10-23T11:23:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is an injection that happened between 4.0.5 + 4.0.8.  The issue is due to line https://github.com/spulec/moto/blob/master/moto/s3/models.py#L1616 which is doing a deep copy of something it should not be deep copying as the structure is complicated with locks and what not.  In certain scenarios the file will be closed causing it to throw an exception.  See https://github.com/spulec/moto/issues/5341#issuecomment-1287429197", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5588/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5588/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5584", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5584/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5584/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5584/events", "html_url": "https://github.com/getmoto/moto/issues/5584", "id": 1415892378, "node_id": "I_kwDOAH5NfM5UZM2a", "number": 5584, "title": "Versioned S3 buckets leak keys", "user": {"login": "hannes-ucsc", "id": 5143256, "node_id": "MDQ6VXNlcjUxNDMyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/5143256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hannes-ucsc", "html_url": "https://github.com/hannes-ucsc", "followers_url": "https://api.github.com/users/hannes-ucsc/followers", "following_url": "https://api.github.com/users/hannes-ucsc/following{/other_user}", "gists_url": "https://api.github.com/users/hannes-ucsc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hannes-ucsc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hannes-ucsc/subscriptions", "organizations_url": "https://api.github.com/users/hannes-ucsc/orgs", "repos_url": "https://api.github.com/users/hannes-ucsc/repos", "events_url": "https://api.github.com/users/hannes-ucsc/events{/privacy}", "received_events_url": "https://api.github.com/users/hannes-ucsc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-20T03:47:25Z", "updated_at": "2022-10-21T22:14:59Z", "closed_at": "2022-10-21T22:14:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "A left-over from #5551\r\n\r\n```python\r\n$ python -Wall\r\nPython 3.9.12 (main, Oct  8 2022, 00:52:50) \r\n[Clang 14.0.0 (clang-1400.0.29.102)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import gc\r\n>>> from moto.s3.models import S3Backend\r\n>>> s3 = S3Backend('us-west-1', '1234')\r\n>>> s3.create_bucket('my-bucket','us-west-1')\r\n<moto.s3.models.FakeBucket object at 0x104bb6520>\r\n>>> s3.put_bucket_versioning('my-bucket', 'Enabled')\r\n>>> s3.put_object('my-bucket','my-key', 'x')\r\n<moto.s3.models.FakeKey object at 0x10340a1f0>\r\n>>> s3.put_object('my-bucket','my-key', 'y')\r\n<moto.s3.models.FakeKey object at 0x105c36970>\r\n>>> s3.reset()\r\n/Users/hannes/workspace/hca/azul/.venv/lib/python3.9/site-packages/moto/s3/models.py:347: ResourceWarning: S3 key was not disposed of in time\r\n  warnings.warn(\"S3 key was not disposed of in time\", ResourceWarning)\r\n>>> gc.collect()\r\n14311\r\n>>> \r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5584/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5584/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5580", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5580/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5580/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5580/events", "html_url": "https://github.com/getmoto/moto/issues/5580", "id": 1414676728, "node_id": "I_kwDOAH5NfM5UUkD4", "number": 5580, "title": "{AttributeError}type object 'FakeTrainingJob' has no attribute 'arn_formatter'", "user": {"login": "vittoema96", "id": 38353821, "node_id": "MDQ6VXNlcjM4MzUzODIx", "avatar_url": "https://avatars.githubusercontent.com/u/38353821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vittoema96", "html_url": "https://github.com/vittoema96", "followers_url": "https://api.github.com/users/vittoema96/followers", "following_url": "https://api.github.com/users/vittoema96/following{/other_user}", "gists_url": "https://api.github.com/users/vittoema96/gists{/gist_id}", "starred_url": "https://api.github.com/users/vittoema96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vittoema96/subscriptions", "organizations_url": "https://api.github.com/users/vittoema96/orgs", "repos_url": "https://api.github.com/users/vittoema96/repos", "events_url": "https://api.github.com/users/vittoema96/events{/privacy}", "received_events_url": "https://api.github.com/users/vittoema96/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-19T10:02:43Z", "updated_at": "2022-10-19T21:53:03Z", "closed_at": "2022-10-19T21:53:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've encountered what I think is a bug.\r\n\r\nWhenever I try to call describe_training_job on a sagemaker client, and I give a training job name that doesn't exist, like so:\r\n\r\n```\r\n@mock_sagemaker \r\ndef test_fail_describe(self): \r\n       boto3.client('sagemaker').describe_training_job(TrainingJobName='non_existent_training_job')\r\n```\r\n\r\nWhat I get is an `{AttributeError}type object 'FakeTrainingJob' has no attribute 'arn_formatter'`, \r\nbut i was expecting a ValidationError.\r\n\r\nThe problem seems to be in moto/sagemaker/models.py at line 1868", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5580/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5573", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5573/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5573/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5573/events", "html_url": "https://github.com/getmoto/moto/issues/5573", "id": 1411467361, "node_id": "I_kwDOAH5NfM5UIUhh", "number": 5573, "title": "Bug when deleting individual lambda function versions", "user": {"login": "tudor-sutu", "id": 18528911, "node_id": "MDQ6VXNlcjE4NTI4OTEx", "avatar_url": "https://avatars.githubusercontent.com/u/18528911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tudor-sutu", "html_url": "https://github.com/tudor-sutu", "followers_url": "https://api.github.com/users/tudor-sutu/followers", "following_url": "https://api.github.com/users/tudor-sutu/following{/other_user}", "gists_url": "https://api.github.com/users/tudor-sutu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tudor-sutu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tudor-sutu/subscriptions", "organizations_url": "https://api.github.com/users/tudor-sutu/orgs", "repos_url": "https://api.github.com/users/tudor-sutu/repos", "events_url": "https://api.github.com/users/tudor-sutu/events{/privacy}", "received_events_url": "https://api.github.com/users/tudor-sutu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-10-17T12:13:14Z", "updated_at": "2022-10-18T09:35:19Z", "closed_at": "2022-10-18T09:35:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nDeleting lambda function versions, while using Qualifier parameter, is not deleting the right function, but instead, the qualifier value is used as the array index of the version list.\r\n\r\n## How to reproduce\r\nGiven a test lambda function, with 10 versions, from 1 to 10, delete all function versions, one after another\r\n\r\n\r\n```\r\nsession = boto3.Session(\r\n    profile_name=\"saml\", region_name=getenv(\"AWS_REGION\", \"eu-west-1\")\r\n)\r\nclient = session.client(\"lambda\")\r\nfor version in range(10):\r\n\tclient.delete_function(FunctionName=\"Test_function\", Qualifier=version)\r\n```\r\n\r\nwill eventually run into a ResourceNotFoundException:\r\n\r\n> /test_lambda_cleaner.py::TestLambdaCleaner::test_lambda_cleaner Failed with Error: An error occurred (ResourceNotFoundException) when calling the DeleteFunction operation: Function not found: arn:aws:lambda:eu-west-1:123456789012:function:Test_function:7\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/unittest/case.py\", line 59, in testPartExecutor\r\n    yield\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/unittest/case.py\", line 591, in run\r\n    self._callTestMethod(testMethod)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\r\n    method()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/unittest/mock.py\", line 1817, in _inner\r\n    return f(*args, **kw)\r\n  File \"venv/lib/python3.10/site-packages/moto/core/models.py\", line 111, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"venv/lib/python3.10/site-packages/freezegun/api.py\", line 809, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"lambda/tests/test_lambda_cleaner.py\", line 79, in test_lambda_cleaner\r\n    clean_functions()\r\n  File \"/lambda_cleaner.py\", line 81, in clean_functions\r\n    rsp = client.delete_function(\r\n  File \"/venv/lib/python3.10/site-packages/botocore/client.py\", line 514, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"venv/lib/python3.10/site-packages/botocore/client.py\", line 938, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.errorfactory.ResourceNotFoundException: An error occurred (ResourceNotFoundException) when calling the DeleteFunction operation: Function not found: arn:aws:lambda:eu-west-1:123456789012:function:Test_function:7\r\n\r\n\r\nGoing step by step, these are the objects in memory:\r\n| Qualifier| Versions Array | What happened |\r\n| ------------- | ------------- |------------- |\r\n| Start | [$Latest,1,2,3,4,5,6,7,8,9,10] | |\r\n| 1 | [$Latest,X,2,3,4,5,6,7,8,9,10] | Deleted version 1 - ok |\r\n| 2 | [$Latest,2,X,4,5,6,7,8,9,10] | Deleted version 3 (array index 2) instead of version 2 |\r\n| 3 | [$Latest,2,X,5,6,7,8,9,10] | |\r\n| 4 | [$Latest,2,5,6,X,8,9,10] | |\r\n| 5 | [$Latest,2,5,6,8,X,10] | |\r\n| 6 | [$Latest,2,5,6,8,X] | |\r\n| 7 | ResourceNotFoundException | Array has too few elements |\r\n\r\nMy conclusion is the mock deletion function is not matching function_name:qualifier, in the version array, but just deleting the version at the array index\r\n\r\n\r\n\r\n## pip libraries\r\nboto3              1.24.89\r\nbotocore           1.27.89\r\ncertifi            2022.9.24\r\ncffi               1.15.1\r\ncharset-normalizer 2.1.1\r\ncryptography       38.0.1\r\ndocker             6.0.0\r\nfreezegun          1.2.2\r\nidna               3.4\r\nJinja2             3.1.2\r\njmespath           1.0.1\r\nMarkupSafe         2.1.1\r\nmoto               4.0.7\r\npackaging          21.3\r\npip                22.2.2\r\npycparser          2.21\r\npyparsing          3.0.9\r\npython-dateutil    2.8.2\r\npytz               2022.4\r\nrequests           2.28.1\r\nresponses          0.22.0\r\ns3transfer         0.6.0\r\nsetuptools         63.2.0\r\nsix                1.16.0\r\ntoml               0.10.2\r\ntypes-toml         0.10.8\r\nurllib3            1.26.12\r\nwebsocket-client   1.4.1\r\nWerkzeug           2.1.2\r\nxmltodict          0.13.0\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5573/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5573/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5561", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5561/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5561/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5561/events", "html_url": "https://github.com/getmoto/moto/issues/5561", "id": 1407967378, "node_id": "I_kwDOAH5NfM5T6-CS", "number": 5561, "title": "Problem with list_object_versions", "user": {"login": "JecaTatu", "id": 38165233, "node_id": "MDQ6VXNlcjM4MTY1MjMz", "avatar_url": "https://avatars.githubusercontent.com/u/38165233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JecaTatu", "html_url": "https://github.com/JecaTatu", "followers_url": "https://api.github.com/users/JecaTatu/followers", "following_url": "https://api.github.com/users/JecaTatu/following{/other_user}", "gists_url": "https://api.github.com/users/JecaTatu/gists{/gist_id}", "starred_url": "https://api.github.com/users/JecaTatu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JecaTatu/subscriptions", "organizations_url": "https://api.github.com/users/JecaTatu/orgs", "repos_url": "https://api.github.com/users/JecaTatu/repos", "events_url": "https://api.github.com/users/JecaTatu/events{/privacy}", "received_events_url": "https://api.github.com/users/JecaTatu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-13T15:03:56Z", "updated_at": "2022-10-14T13:49:34Z", "closed_at": "2022-10-14T13:49:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having some trouble using the function `list_object_versions` using the mock of S3. I create a versioned bucket, put an object and its created with the version id, what is expected, but when I try to list the versions, the dict returned by the `list_object_versions` does not come with the field `Versions` in it. Here is the code for reproduce:\r\n\r\n```\r\n@mock_s3()\r\ndef test_check_key_true():\r\n    obj_key = \"some/prefix/test_file.txt\"\r\n    bucket_name = \"some_bucket\"\r\n\r\n    s3_client = boto3.client(\"s3\")\r\n    s3_client.create_bucket(Bucket=bucket_name)\r\n\r\n    s3 = boto3.resource('s3')\r\n    bucket_versioning = s3.BucketVersioning(bucket_name)\r\n    bucket_versioning.enable()\r\n\r\n    obj = s3_client.put_object(Bucket=bucket_name, Key=obj_key)\r\n    assert ('VersionId' in obj) == True\r\n\r\n    list = s3_client.list_object_versions(Bucket=bucket_name, Delimiter='/', Prefix=obj_key,)\r\n    assert ('Versions' in list) == True\r\n```\r\n\r\nThe first assert passes, but not the second.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5561/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5561/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5552", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5552/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5552/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5552/events", "html_url": "https://github.com/getmoto/moto/issues/5552", "id": 1404140174, "node_id": "I_kwDOAH5NfM5TsXqO", "number": 5552, "title": "DynamoDB raising \"Invalid UpdateExpression\" for a valid expression", "user": {"login": "ivoire", "id": 2114999, "node_id": "MDQ6VXNlcjIxMTQ5OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2114999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivoire", "html_url": "https://github.com/ivoire", "followers_url": "https://api.github.com/users/ivoire/followers", "following_url": "https://api.github.com/users/ivoire/following{/other_user}", "gists_url": "https://api.github.com/users/ivoire/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivoire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivoire/subscriptions", "organizations_url": "https://api.github.com/users/ivoire/orgs", "repos_url": "https://api.github.com/users/ivoire/repos", "events_url": "https://api.github.com/users/ivoire/events{/privacy}", "received_events_url": "https://api.github.com/users/ivoire/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-11T07:29:33Z", "updated_at": "2022-10-13T10:09:20Z", "closed_at": "2022-10-13T10:09:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "PR #5504 is too strict and will raise an exception for valid DynamoDB update expressions.\r\n\r\nFor instance, according to the [documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.UpdateExpressions.html#Expressions.UpdateExpressions.SET.AddingNestedMapAttributes), updating two different elements of a map in a single requests is allowed by aws but rejected by moto:\r\n\r\n`SET #pr.#5star[1] = :r5, #pr.#3star = :r3` is valid but rejected by moto since 4.0.6.dev13\r\n\r\nFor instance, this code will work in aws but will be rejected by moto > v4.0.6:\r\n\r\n```python\r\nimport boto3\r\nfrom moto import mock_dynamodb\r\n\r\ndef run():\r\n    mock = mock_dynamodb()\r\n    mock.start()\r\n    dynamodb = boto3.resource(\"dynamodb\")\r\n    dynamodb.create_table(\r\n        TableName=\"example_table\",\r\n        KeySchema=[{\"AttributeName\": \"id\", \"KeyType\": \"HASH\"}],\r\n        AttributeDefinitions=[\r\n            {\"AttributeName\": \"id\", \"AttributeType\": \"S\"},\r\n        ],\r\n        BillingMode=\"PAY_PER_REQUEST\",\r\n    )\r\n    record = {\r\n        \"id\": \"example_id\",\r\n        \"d\": {\"hello\": \"h\", \"world\": \"w\"},\r\n    }\r\n    table = dynamodb.Table(\"example_table\")\r\n    table.put_item(Item=record)\r\n    updated = table.update_item(\r\n        Key={\"id\": \"example_id\"},\r\n        UpdateExpression=\"set d.hello = :h, d.world = :w\",\r\n        ExpressionAttributeValues={\":h\": \"H\", \":w\": \"W\"},\r\n        ReturnValues=\"ALL_NEW\",\r\n    )\r\n    print(updated)\r\n    mock.stop()\r\n\r\nrun()\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5552/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5552/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5551", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5551/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5551/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5551/events", "html_url": "https://github.com/getmoto/moto/issues/5551", "id": 1403845068, "node_id": "I_kwDOAH5NfM5TrPnM", "number": 5551, "title": "Large upload to S3 leaks file handle when deleting key, aborting MP upload", "user": {"login": "hannes-ucsc", "id": 5143256, "node_id": "MDQ6VXNlcjUxNDMyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/5143256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hannes-ucsc", "html_url": "https://github.com/hannes-ucsc", "followers_url": "https://api.github.com/users/hannes-ucsc/followers", "following_url": "https://api.github.com/users/hannes-ucsc/following{/other_user}", "gists_url": "https://api.github.com/users/hannes-ucsc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hannes-ucsc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hannes-ucsc/subscriptions", "organizations_url": "https://api.github.com/users/hannes-ucsc/orgs", "repos_url": "https://api.github.com/users/hannes-ucsc/repos", "events_url": "https://api.github.com/users/hannes-ucsc/events{/privacy}", "received_events_url": "https://api.github.com/users/hannes-ucsc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-10-11T00:31:51Z", "updated_at": "2022-10-12T21:08:02Z", "closed_at": "2022-10-12T21:08:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Unfortunately, my proposed fix for https://github.com/spulec/moto/issues/5544 is incomplete. There are still situations in which the backend leaks the `SpooledTemporaryFile` instance that's created for large keys and MP upload parts. The situations I can think of are:\r\n\r\n- deleting a key\r\n- overwriting a key (not sure)\r\n- overwriting an MP upload part\r\n- aborting an MP upload\r\n- completing an MP upload (not sure)\r\n\r\nHere's a reproduction for the first one:\r\n\r\n```python\r\n$ python -Wall\r\nPython 3.9.12 (main, Oct  8 2022, 00:52:50) \r\n[Clang 14.0.0 (clang-1400.0.29.102)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import gc\r\n>>> from moto.s3.models import S3Backend\r\n>>> s3 = S3Backend('us-west-1', '1234')\r\n>>> s3.create_bucket('my-bucket','us-west-1')\r\n<moto.s3.models.FakeBucket object at 0x102706820>\r\n>>> s3.put_object('my-bucket','my-key', 'x' * 10_000_000)\r\n<moto.s3.models.FakeKey object at 0x1026eeb50>\r\n>>> s3.delete_object('my-bucket','my-key', 'x' * 10_000_000)\r\n(True, {})\r\n>>> s3.reset()\r\n/Users/hannes/workspace/hca/azul/.venv/lib/python3.9/site-packages/moto/core/base_backend.py:33: ResourceWarning: unclosed file <_io.BufferedRandom name=3>\r\n  model.instances = []\r\nResourceWarning: Enable tracemalloc to get the object allocation traceback\r\n>>> gc.collect()\r\n14426\r\n>>> \r\n```\r\n\r\nThis is with Moto version 4.0.7.\r\n\r\nI think a solution might be to add `FakeKey.dispose()`, put the closing of the value buffer there and then call that method in the appropriate places, like `S3Backend.delete_object()`, `.abort_multipart_upload()`, `.reset()`,`FakeMultipart.set_part()` et al.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5551/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5548", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5548/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5548/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5548/events", "html_url": "https://github.com/getmoto/moto/issues/5548", "id": 1403324775, "node_id": "I_kwDOAH5NfM5TpQln", "number": 5548, "title": "ECR implementation doesn't handle new images with the same tag correctly", "user": {"login": "nicolaei", "id": 5253141, "node_id": "MDQ6VXNlcjUyNTMxNDE=", "avatar_url": "https://avatars.githubusercontent.com/u/5253141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaei", "html_url": "https://github.com/nicolaei", "followers_url": "https://api.github.com/users/nicolaei/followers", "following_url": "https://api.github.com/users/nicolaei/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaei/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaei/subscriptions", "organizations_url": "https://api.github.com/users/nicolaei/orgs", "repos_url": "https://api.github.com/users/nicolaei/repos", "events_url": "https://api.github.com/users/nicolaei/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaei/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-10-10T15:04:50Z", "updated_at": "2022-10-19T09:54:50Z", "closed_at": "2022-10-15T09:50:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "When uploading a new image with the same tag as an existing one, the old one doesn't get removed, resulting in two images with the same tag existing in the mock.\r\n\r\nAs far as I know, docker repositories doesn't support two images with the same tag.\r\n\r\n```python\r\n@mock_ecr\r\ndef test_upload_two_images():\r\n    repo_name = \"my-repo\"\r\n    image_tag = \"my-tag\"\r\n\r\n    client = boto3.client(\"ecr\")\r\n    client.create_repository(\r\n        repositoryName=repo_name,\r\n    )\r\n\r\n    client.put_image(\r\n        repositoryName=repo_name,\r\n        imageTag=image_tag,\r\n        imageManifest=json.dumps(_create_image_manifest(1)),\r\n    )\r\n    image_1 = client.describe_images(\r\n        repositoryName=repo_name,\r\n        imageIds=[\r\n            {\"imageTag\": image_tag},\r\n        ]\r\n    )\r\n\r\n    client.put_image(\r\n        repositoryName=repo_name,\r\n        imageTag=image_tag,\r\n        imageManifest=json.dumps(_create_image_manifest(2)),\r\n    )\r\n    image_2 = client.describe_images(\r\n        repositoryName=repo_name,\r\n        imageIds=[\r\n            {\"imageTag\": image_tag},\r\n        ]\r\n    )\r\n\r\n    client.delete_repository(\r\n        repositoryName=repo_name,\r\n        force=True,\r\n    )\r\n\r\n    assert image_1[\"imageDetails\"][0][\"imageDigest\"] \\\r\n           != image_2[\"imageDetails\"][0][\"imageDigest\"]\r\n```\r\n\r\nThe expected result is that only one image should exist with the given tag at any given time.\r\n\r\n## Relevant Code\r\n\r\nThe relevant code [can be found in `ECRBackend.put_image`, from `ecr/models.py`](https://github.com/sthuber90/moto/blob/master/moto/ecr/models.py#L309-L329).\r\n\r\n## Suggestion for solution\r\n\r\nWithout knowing the architecture of the existing codebase. Maybe it could work to modify `put_image` like this?\r\n\r\n```python\r\ndef put_image(self, repository_name, image_manifest, image_tag):\r\n    if repository_name in self.repositories:\r\n        repository = self.repositories[repository_name]\r\n    else:\r\n        raise Exception(\"{0} is not a repository\".format(repository_name))\r\n    \r\n    existing_tags = list(\r\n        filter(\r\n            lambda x: x.response_object[\"imageTag\"] == image_tag,\r\n            repository.images,\r\n        )\r\n    )\r\n\r\n    if existing_tags:\r\n        existing_tags[0].remove_tag(image_tag)\r\n\r\n    existing_images = list(\r\n        filter(\r\n            lambda x: x.response_object[\"imageManifest\"] == image_manifest,\r\n            repository.images,\r\n        )\r\n    )\r\n\r\n    if not existing_images:\r\n        # this image is not in ECR yet\r\n        image = Image(self.account_id, image_tag, image_manifest, repository_name)\r\n        repository.images.append(image)\r\n        return image\r\n    else:\r\n        # update existing image\r\n        existing_images[0].update_tag(image_tag)\r\n        return existing_images[0]\r\n```\r\n\r\n## Temporary workaround\r\n\r\nFor anyone having the same issue as me, and just want a simple fix, this is my temporary solution.\r\nThis solution doesn't care about the actual manifest, as I only want to check if there is an updated image for a test case.\r\n\r\n```python\r\nclass ImageUploader:\r\n    \"\"\"Uploads images to ECR\r\n\r\n    This has a workaround for moto not correctly updating tags on existing images.\r\n    ECR doesn't have any normal API to untag images manually either.\r\n\r\n    Thus, we need to manually delete the previous image when uploading a new one.\r\n    If not, we always get the first image back.\r\n    \"\"\"\r\n    client: Any\r\n\r\n    _previous_image: dict = None\r\n    _version: int = 1\r\n\r\n    def upload(self, application: domain.Application):\r\n        if self._previous_image:\r\n            self.client.batch_delete_image(\r\n                registryId=self._previous_image[\"registryId\"],\r\n                repositoryName=self._previous_image[\"repositoryName\"],\r\n                imageIds=[self._previous_image[\"imageId\"]]\r\n            )\r\n\r\n        response = self.client.put_image(\r\n            repositoryName=application.name,\r\n            imageTag=application.branch,\r\n            imageManifest=json.dumps({\"test\": self._version}),\r\n        )\r\n\r\n        self._version += 1\r\n        self._previous_image = response[\"image\"]\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5548/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5548/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5544", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5544/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5544/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5544/events", "html_url": "https://github.com/getmoto/moto/issues/5544", "id": 1402189687, "node_id": "I_kwDOAH5NfM5Tk7d3", "number": 5544, "title": "Large upload to S3 leaks file handle", "user": {"login": "hannes-ucsc", "id": 5143256, "node_id": "MDQ6VXNlcjUxNDMyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/5143256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hannes-ucsc", "html_url": "https://github.com/hannes-ucsc", "followers_url": "https://api.github.com/users/hannes-ucsc/followers", "following_url": "https://api.github.com/users/hannes-ucsc/following{/other_user}", "gists_url": "https://api.github.com/users/hannes-ucsc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hannes-ucsc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hannes-ucsc/subscriptions", "organizations_url": "https://api.github.com/users/hannes-ucsc/orgs", "repos_url": "https://api.github.com/users/hannes-ucsc/repos", "events_url": "https://api.github.com/users/hannes-ucsc/events{/privacy}", "received_events_url": "https://api.github.com/users/hannes-ucsc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-10-09T07:57:04Z", "updated_at": "2022-10-09T19:58:24Z", "closed_at": "2022-10-09T12:22:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n```python\r\n$ python -Wall\r\nPython 3.9.12 (main, Oct  8 2022, 00:52:50) \r\n[Clang 14.0.0 (clang-1400.0.29.102)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import gc\r\n>>> from moto.s3.models import S3Backend\r\n>>> s3 = S3Backend('us-west-1', '1234')\r\n>>> s3.create_bucket('my-bucket','us-west-1')\r\n<moto.s3.models.FakeBucket object at 0x106009670>\r\n>>> s3.put_object('my-bucket','my-key', 'x' * 10_000_000)\r\n<moto.s3.models.FakeKey object at 0x105fed370>\r\n>>> s3.reset()\r\n>>> gc.collect()\r\n<stdin>:1: ResourceWarning: unclosed file <_io.BufferedRandom name=3>\r\nResourceWarning: Enable tracemalloc to get the object allocation traceback\r\n14271\r\n>>> \r\n```\r\n\r\nThe `gc.collect()` call reproduces this reliably. The call to `s3.reset()` is really where the open file handle becomes garbage. When it is collected, the warning is produced. The collection could happen anytime, not just during explicit calls to `gc.collect()`.\r\n\r\nAdding this to `S3Backend` fixes the warning:\r\n\r\n```python\r\ndef reset(self):\r\n    for bucket in self.buckets.values():\r\n        for key in bucket.keys.values():\r\n            key._value_buffer.close()\r\n            if key.multipart is not None:\r\n                for part in key.multipart.parts.values():\r\n                    part._value_buffer.close()\r\n    super().reset()\r\n```\r\n\r\nOh, and this is using version 4.0.6 of moto.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5544/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5544/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5523", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5523/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5523/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5523/events", "html_url": "https://github.com/getmoto/moto/issues/5523", "id": 1395271588, "node_id": "I_kwDOAH5NfM5TKiek", "number": 5523, "title": "Private IP address specified for EC2 instance via NetworkInterfaces not always used", "user": {"login": "bobbyi", "id": 775553, "node_id": "MDQ6VXNlcjc3NTU1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/775553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobbyi", "html_url": "https://github.com/bobbyi", "followers_url": "https://api.github.com/users/bobbyi/followers", "following_url": "https://api.github.com/users/bobbyi/following{/other_user}", "gists_url": "https://api.github.com/users/bobbyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobbyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobbyi/subscriptions", "organizations_url": "https://api.github.com/users/bobbyi/orgs", "repos_url": "https://api.github.com/users/bobbyi/repos", "events_url": "https://api.github.com/users/bobbyi/events{/privacy}", "received_events_url": "https://api.github.com/users/bobbyi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-10-03T20:17:31Z", "updated_at": "2022-10-04T09:57:15Z", "closed_at": "2022-10-04T09:21:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I initially encountered this with moto 4.0.5 and botocore 1.27.84 using Python mocks.\r\n\r\nI create an EC2 instance and specify a private IP address for its primary network interface by providing NetworkInterfaces. But moto's `Instance.prep_nics` method overrides my provided IP address with what it gets from `subnet.get_available_subnet_ip`.\r\n\r\nI have verified that when creating a real EC2 instance via boto (without moto involved), the provided IP address from NetworkInterfaces is used.\r\n\r\nHere is a failing test demonstrating the problem. The assertion on the last line should pass if moto is behaving like real EC2/ boto, but currently doesn't.\r\n\r\n```\r\nimport boto3\r\nfrom moto import mock_ec2\r\n\r\nEXAMPLE_AMI_ID = \"ami-12c6146b\"\r\n\r\n@mock_ec2\r\ndef test_run_instance_in_subnet_with_nic_private_ip():\r\n    vpc_cidr_block = \"10.26.0.0/16\"\r\n    subnet_cidr_block = \"10.26.1.0/24\"\r\n    private_ip = \"10.26.1.3\"\r\n    ec2 = boto3.resource(\"ec2\", region_name=\"eu-west-1\")\r\n    vpc = ec2.create_vpc(CidrBlock=vpc_cidr_block)\r\n    subnet = ec2.create_subnet(\r\n        VpcId=vpc.id,\r\n        CidrBlock=subnet_cidr_block,\r\n    )\r\n    my_interface = {\r\n        \"SubnetId\": subnet.id,\r\n        \"DeviceIndex\": 0,\r\n        \"PrivateIpAddress\": private_ip,\r\n    }\r\n    [instance] = ec2.create_instances(\r\n        ImageId=EXAMPLE_AMI_ID, NetworkInterfaces=[my_interface], MinCount=1, MaxCount=1\r\n    )\r\n    instance.private_ip_address.should.equal(private_ip)\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5523/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5523/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5508", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5508/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5508/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5508/events", "html_url": "https://github.com/getmoto/moto/issues/5508", "id": 1392830531, "node_id": "I_kwDOAH5NfM5TBOhD", "number": 5508, "title": "moto's ec2:ReplaceRouteTableAssociation breaks for the main association", "user": {"login": "yoctozepto", "id": 3455956, "node_id": "MDQ6VXNlcjM0NTU5NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3455956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoctozepto", "html_url": "https://github.com/yoctozepto", "followers_url": "https://api.github.com/users/yoctozepto/followers", "following_url": "https://api.github.com/users/yoctozepto/following{/other_user}", "gists_url": "https://api.github.com/users/yoctozepto/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoctozepto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoctozepto/subscriptions", "organizations_url": "https://api.github.com/users/yoctozepto/orgs", "repos_url": "https://api.github.com/users/yoctozepto/repos", "events_url": "https://api.github.com/users/yoctozepto/events{/privacy}", "received_events_url": "https://api.github.com/users/yoctozepto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-09-30T18:47:28Z", "updated_at": "2022-09-30T22:37:17Z", "closed_at": "2022-09-30T22:36:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Calling ec2:ReplaceRouteTableAssociation with the main association results in InvalidAssociationIdError being raised (regardless of the placement of the main association id, i.e. the idempotency path is also failing).\r\n\r\nThis is fixed by an upcoming patch. This bug report is for issue tracking purposes only.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5508/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5508/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5507", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5507/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5507/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5507/events", "html_url": "https://github.com/getmoto/moto/issues/5507", "id": 1392824401, "node_id": "I_kwDOAH5NfM5TBNBR", "number": 5507, "title": "moto's ec2 DescribeRouteTablesResponse claims all route tables have their main association", "user": {"login": "yoctozepto", "id": 3455956, "node_id": "MDQ6VXNlcjM0NTU5NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3455956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoctozepto", "html_url": "https://github.com/yoctozepto", "followers_url": "https://api.github.com/users/yoctozepto/followers", "following_url": "https://api.github.com/users/yoctozepto/following{/other_user}", "gists_url": "https://api.github.com/users/yoctozepto/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoctozepto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoctozepto/subscriptions", "organizations_url": "https://api.github.com/users/yoctozepto/orgs", "repos_url": "https://api.github.com/users/yoctozepto/repos", "events_url": "https://api.github.com/users/yoctozepto/events{/privacy}", "received_events_url": "https://api.github.com/users/yoctozepto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-09-30T18:42:30Z", "updated_at": "2022-09-30T22:37:34Z", "closed_at": "2022-09-30T22:36:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Calling ec2:DescribeRouteTables returns a main association for any route table even if it does not have a main association. This confuses external tools.\r\n\r\nThe issue has been partially introduced by patch #4726 for #1647 but it was wrong before as well (not all associations are main).\r\n\r\nThis is fixed by an upcoming patch. This bug report is for issue tracking purposes only.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5507/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5507/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5506", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5506/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5506/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5506/events", "html_url": "https://github.com/getmoto/moto/issues/5506", "id": 1392818831, "node_id": "I_kwDOAH5NfM5TBLqP", "number": 5506, "title": "moto's ec2 ReplaceRouteTableAssociationResponse lacks associationState element", "user": {"login": "yoctozepto", "id": 3455956, "node_id": "MDQ6VXNlcjM0NTU5NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3455956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoctozepto", "html_url": "https://github.com/yoctozepto", "followers_url": "https://api.github.com/users/yoctozepto/followers", "following_url": "https://api.github.com/users/yoctozepto/following{/other_user}", "gists_url": "https://api.github.com/users/yoctozepto/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoctozepto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoctozepto/subscriptions", "organizations_url": "https://api.github.com/users/yoctozepto/orgs", "repos_url": "https://api.github.com/users/yoctozepto/repos", "events_url": "https://api.github.com/users/yoctozepto/events{/privacy}", "received_events_url": "https://api.github.com/users/yoctozepto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-09-30T18:37:57Z", "updated_at": "2022-09-30T22:37:46Z", "closed_at": "2022-09-30T22:36:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Calling ec2:ReplaceRouteTableAssociation returns an incomplete response, lacking associationState element, which may confuse some external tools.\r\n\r\nThis is fixed by an upcoming patch. This bug report is for issue tracking purposes only.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5506/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5494", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5494/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5494/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5494/events", "html_url": "https://github.com/getmoto/moto/issues/5494", "id": 1386115349, "node_id": "I_kwDOAH5NfM5SnnEV", "number": 5494, "title": "Inconsistent `us-west-1` availability zones", "user": {"login": "SeanBickle", "id": 36672520, "node_id": "MDQ6VXNlcjM2NjcyNTIw", "avatar_url": "https://avatars.githubusercontent.com/u/36672520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SeanBickle", "html_url": "https://github.com/SeanBickle", "followers_url": "https://api.github.com/users/SeanBickle/followers", "following_url": "https://api.github.com/users/SeanBickle/following{/other_user}", "gists_url": "https://api.github.com/users/SeanBickle/gists{/gist_id}", "starred_url": "https://api.github.com/users/SeanBickle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SeanBickle/subscriptions", "organizations_url": "https://api.github.com/users/SeanBickle/orgs", "repos_url": "https://api.github.com/users/SeanBickle/repos", "events_url": "https://api.github.com/users/SeanBickle/events{/privacy}", "received_events_url": "https://api.github.com/users/SeanBickle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-09-26T13:46:44Z", "updated_at": "2022-10-02T14:14:07Z", "closed_at": "2022-10-01T22:33:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "`us-west-1` only has [2 availability zones accessible to customers](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/). The [mapping of availability zone name to availability zone ID](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html) is per-account:\r\n\r\n> AWS maps the physical Availability Zones randomly to the Availability Zone names for each AWS account\r\n\r\nFor `us-west-1`, the two valid availability zone IDs are `usw1-az1` and `usw1-az3`. As far as I can tell, it doesn't really matter which availability zone name is mapped to which availability zone ID.\r\n\r\n[`moto/ec2/models/availability_zones_and_regions.py`](https://github.com/spulec/moto/blob/master/moto/ec2/models/availability_zones_and_regions.py) defines the mock availability zones for each region. Note that `us-west-1a` and `us-west-1b` are defined, and these are correctly mapped to the above availability zone IDs.\r\n\r\nHowever, [`moto/ec2/resources/instance_type_offerings/availability-zone/us-west-1.json`](https://github.com/spulec/moto/blob/master/moto/ec2/resources/instance_type_offerings/availability-zone/us-west-1.json) references availability zones `us-west-1b` and `us-west-1c`.\r\n\r\nThese need to be consistent. Otherwise, it is possible to create a subnet in `us-west-1a` but subsequently fail to find a corresponding instance type offering for the subnet. I.e.:\r\n\r\n```python\r\n>>> subnet_az = client.describe_subnets()['Subnets'][0]['AvailabilityZone']\r\n>>> subnet_az\r\n'us-west-1a'\r\n>>> client.describe_instance_type_offerings(LocationType='availability-zone', Filters=[{'Name': 'location', 'Values': [subnet_az]}]\r\n{'InstanceTypeOfferings': [], 'ResponseMetadata': {'RequestId': 'f8b86168-d034-4e65-b48d-3b84c78e64af', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5494/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5494/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5490", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5490/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5490/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5490/events", "html_url": "https://github.com/getmoto/moto/issues/5490", "id": 1383959842, "node_id": "I_kwDOAH5NfM5SfY0i", "number": 5490, "title": "Bucket.download_file downloads file with metadata", "user": {"login": "andrescevp", "id": 10025841, "node_id": "MDQ6VXNlcjEwMDI1ODQx", "avatar_url": "https://avatars.githubusercontent.com/u/10025841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrescevp", "html_url": "https://github.com/andrescevp", "followers_url": "https://api.github.com/users/andrescevp/followers", "following_url": "https://api.github.com/users/andrescevp/following{/other_user}", "gists_url": "https://api.github.com/users/andrescevp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrescevp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrescevp/subscriptions", "organizations_url": "https://api.github.com/users/andrescevp/orgs", "repos_url": "https://api.github.com/users/andrescevp/repos", "events_url": "https://api.github.com/users/andrescevp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrescevp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-09-23T15:16:14Z", "updated_at": "2022-09-28T09:33:28Z", "closed_at": "2022-09-28T09:33:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am uploading a file and then downloading the same file.\r\n\r\nThe upload works fine, I am checking the content and is there where it fails\r\n\r\nThe file:\r\n```\r\nID|COUNTRY\r\n1|Foo\r\n...\r\n```\r\n\r\nThe upload code\r\n\r\n```\r\ns3_client.upload_file(file_name, bucket, object_name, ExtraArgs={\"Metadata\": {\"foo\": \"boo\"}, \"ChecksumAlgorithm\": \"SHA256\"})\r\n```\r\n\r\nThe test failing\r\n\r\n```\r\nbody = conn.Object(S3_BUCKET, \"my_key.csv\").get()['Body'].read().decode(\"utf-8\")\r\nassert body.startswith('ID|COUNTRY'), body\r\n>>>\r\nassert False\r\nE        +  where False = <built-in method startswith of str object at 0x55a06e2966e0>('ID|COUNTRY')\r\nE        +    where <built-in method startswith of str object at 0x55a06e2966e0> = '2f3\\r\\nID|COUNTRY...'\r\n```\r\n\r\nI would expect to have exactly the same body as I am saving via `pandas.to_csv`\r\n\r\nThe `2f3` is a random value as far I could see...\r\n\r\nThe downloaded files look like\r\n```\r\nE       AssertionError: 2f3 # this is new content\r\nE         ID|COUNTRY\r\nE         1|US\r\nE         ...\r\nE         # this is new content\r\nE         0 # this is new content\r\nE         x-amz-checksum-sha256:0QMsyrLjuMEaWcVrl26PZwuf0axTOR2XdUcU1uD0ayQ= # this is new content - from the meta? and where is my extra meta?\r\n```\r\n\r\n\r\nI am working around with...\r\n\r\n```\r\n# only in test suite\r\nwith open(_tmp_file, 'rb') as tf:\r\n    content = tf.readlines()[1:(len(tf.readlines())-3)]\r\nwith open(_tmp_file, 'wb') as tfw:\r\n    tfw.write(b'')\r\n    tfw.writelines(content)\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5490/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5490/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5484", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5484/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5484/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5484/events", "html_url": "https://github.com/getmoto/moto/issues/5484", "id": 1377542408, "node_id": "I_kwDOAH5NfM5SG6EI", "number": 5484, "title": "Create EC2 instance with nonexistent security group raises exception instead of giving an appropriate error", "user": {"login": "cheshirex", "id": 9530143, "node_id": "MDQ6VXNlcjk1MzAxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/9530143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cheshirex", "html_url": "https://github.com/cheshirex", "followers_url": "https://api.github.com/users/cheshirex/followers", "following_url": "https://api.github.com/users/cheshirex/following{/other_user}", "gists_url": "https://api.github.com/users/cheshirex/gists{/gist_id}", "starred_url": "https://api.github.com/users/cheshirex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cheshirex/subscriptions", "organizations_url": "https://api.github.com/users/cheshirex/orgs", "repos_url": "https://api.github.com/users/cheshirex/repos", "events_url": "https://api.github.com/users/cheshirex/events{/privacy}", "received_events_url": "https://api.github.com/users/cheshirex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-09-19T07:44:04Z", "updated_at": "2022-09-19T21:34:07Z", "closed_at": "2022-09-19T21:34:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "My team encountered this when moving from an old version of localstack to a newer one. Apparently in an older version, we could just pass in a non-existent security group as part of the configuration for an EC2 instance request, but in the newer version moto actually looks up the security group.\r\n\r\nThis line:\r\nhttps://github.com/spulec/moto/blob/9fc64ad93b40ad179a828be19e6da940e7256e02/moto/ec2/models/security_groups.py#L572\r\nwill return the security group found _or None_ if nothing was found. But this line:\r\nhttps://github.com/spulec/moto/blob/9fc64ad93b40ad179a828be19e6da940e7256e02/moto/ec2/models/instances.py#L482\r\nwill try to access the security group ID from the security group object, without realizing the possibility that the security group may not exist, and instead we have a None object in the list.\r\n\r\nThe call stack we got (from localstack 0.14.5 (which seems to be using moto 3.1.12 if I'm reading that right), but I checked and the relevant lines in moto's master branch don't seem to have changed) is:\r\n```\r\n2022-09-19T06:47:22.130:WARNING:localstack.utils.server.http2_server: Error in proxy handler for request POST http://diamond-localstack:4566/: 'NoneType' object has no attribute 'id' Traceback (most recent call last):\r\n  File \"/opt/code/localstack/localstack/utils/server/http2_server.py\", line 185, in index\r\n    result = await run_sync(handler, request, data)\r\n  File \"/opt/code/localstack/localstack/utils/asyncio.py\", line 85, in run_sync\r\n    return await loop.run_in_executor(thread_pool, copy_context().run, func_wrapped)\r\n  File \"/opt/code/localstack/localstack/utils/threads.py\", line 39, in run\r\n    result = self.func(self.params, **kwargs)\r\n  File \"/opt/code/localstack/localstack/utils/asyncio.py\", line 30, in _run\r\n    return fn(*args, **kwargs)\r\n  File \"/opt/code/localstack/localstack/services/generic_proxy.py\", line 993, in handler\r\n    return modify_and_forward(\r\n  File \"/opt/code/localstack/localstack/services/generic_proxy.py\", line 534, in wrapper\r\n    value = func(*args, **kwargs)\r\n  File \"/opt/code/localstack/localstack/services/generic_proxy.py\", line 614, in modify_and_forward\r\n    listener_result = listener.forward_request(\r\n  File \"/opt/code/localstack/localstack/services/edge.py\", line 170, in forward_request\r\n    result = do_forward_request(api, method, path, data, headers, port=port)\r\n  File \"/opt/code/localstack/localstack/services/edge.py\", line 225, in do_forward_request\r\n    result = do_forward_request_inmem(api, method, path, data, headers, port=port)\r\n  File \"/opt/code/localstack/localstack/services/edge.py\", line 249, in do_forward_request_inmem\r\n    response = modify_and_forward(\r\n  File \"/opt/code/localstack/localstack/services/generic_proxy.py\", line 534, in wrapper\r\n    value = func(*args, **kwargs)\r\n  File \"/opt/code/localstack/localstack/services/generic_proxy.py\", line 614, in modify_and_forward\r\n    listener_result = listener.forward_request(\r\n  File \"/opt/code/localstack/localstack/http/adapters.py\", line 51, in forward_request\r\n    response = self.request(request)\r\n  File \"/opt/code/localstack/localstack/aws/proxy.py\", line 43, in request\r\n    return self.skeleton.invoke(context)\r\n  File \"/opt/code/localstack/localstack/aws/skeleton.py\", line 153, in invoke\r\n    return self.dispatch_request(context, instance)\r\n  File \"/opt/code/localstack/localstack/aws/skeleton.py\", line 165, in dispatch_request\r\n    result = handler(context, instance) or {}\r\n  File \"/opt/code/localstack/localstack/aws/forwarder.py\", line 61, in _call\r\n    return fallthrough_handler(context, req)\r\n  File \"/opt/code/localstack/localstack/services/moto.py\", line 109, in proxy_moto\r\n    status, headers, content = dispatch_to_moto(context)\r\n  File \"/opt/code/localstack/localstack/services/moto.py\", line 139, in dispatch_to_moto\r\n    return dispatch(request, request.url, request.headers)\r\n  File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/core/responses.py\", line 205, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/core/responses.py\", line 315, in _dispatch\r\n    return self.call_action()\r\n  File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/core/responses.py\", line 405, in call_action\r\n    response = method()\r\n  File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/ec2/responses/instances.py\", line 83, in run_instances\r\n    new_reservation = self.ec2_backend.add_instances(\r\n  File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/ec2/models/instances.py\", line 607, in add_instances\r\n    new_instance = Instance(\r\n  File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/ec2/models/instances.py\", line 160, in __init__\r\n    self.prep_nics(\r\n  File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/ec2/models/instances.py\", line 468, in prep_nics\r\n    group_ids.extend([group.id for group in security_groups])\r\n  File \"/opt/code/localstack/.venv/lib/python3.10/site-packages/moto/ec2/models/instances.py\", line 468, in <listcomp>\r\n    group_ids.extend([group.id for group in security_groups])\r\nAttributeError: 'NoneType' object has no attribute 'id'\r\n```\r\n\r\nI'm going to apologize here because normally I would try to dig into more information, compare the actual behaviour of AWS in this specific instance and such, but I'm under some time pressure at the moment and can't get into that right now -- but I didn't want to leave this without at least opening the issue here for your awareness. We have a workaround (basically, deferring upgrading the localstack version for now) so I can't stay on this at the moment.\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5484/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5484/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5479", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5479/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5479/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5479/events", "html_url": "https://github.com/getmoto/moto/issues/5479", "id": 1375865787, "node_id": "I_kwDOAH5NfM5SAgu7", "number": 5479, "title": "When trying to create the subnet group get error: Error listing tags for RDS DB Subnet Group", "user": {"login": "szopen321", "id": 32538420, "node_id": "MDQ6VXNlcjMyNTM4NDIw", "avatar_url": "https://avatars.githubusercontent.com/u/32538420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/szopen321", "html_url": "https://github.com/szopen321", "followers_url": "https://api.github.com/users/szopen321/followers", "following_url": "https://api.github.com/users/szopen321/following{/other_user}", "gists_url": "https://api.github.com/users/szopen321/gists{/gist_id}", "starred_url": "https://api.github.com/users/szopen321/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/szopen321/subscriptions", "organizations_url": "https://api.github.com/users/szopen321/orgs", "repos_url": "https://api.github.com/users/szopen321/repos", "events_url": "https://api.github.com/users/szopen321/events{/privacy}", "received_events_url": "https://api.github.com/users/szopen321/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-09-16T12:14:50Z", "updated_at": "2022-09-20T11:42:55Z", "closed_at": "2022-09-20T11:42:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Repro steps:**\r\n\r\n1. Start moto server.\r\n2. Prepare terraform file that will create rds db subnet group.\r\n3. Run terraform init; terraform apply\r\n\r\n**Description:**\r\nWhen attempting to create a subnet group terraform errors out with error: \"Error listing tags for RDS DB Subnet Group: InvalidParameterValue: Invalid resource name:\"\r\n\r\n**Observed results:**\r\nAn error on attempted creation of rds db subnet group\r\n\r\n**expected results:**\r\nIt is possible to create an rds db subnet group without issues", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5479/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5479/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5468", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5468/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5468/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5468/events", "html_url": "https://github.com/getmoto/moto/issues/5468", "id": 1371340061, "node_id": "I_kwDOAH5NfM5RvP0d", "number": 5468, "title": "issue with ThreadedMotoServer", "user": {"login": "Arnold1", "id": 3844226, "node_id": "MDQ6VXNlcjM4NDQyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3844226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arnold1", "html_url": "https://github.com/Arnold1", "followers_url": "https://api.github.com/users/Arnold1/followers", "following_url": "https://api.github.com/users/Arnold1/following{/other_user}", "gists_url": "https://api.github.com/users/Arnold1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arnold1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arnold1/subscriptions", "organizations_url": "https://api.github.com/users/Arnold1/orgs", "repos_url": "https://api.github.com/users/Arnold1/repos", "events_url": "https://api.github.com/users/Arnold1/events{/privacy}", "received_events_url": "https://api.github.com/users/Arnold1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2174001772, "node_id": "MDU6TGFiZWwyMTc0MDAxNzcy", "url": "https://api.github.com/repos/getmoto/moto/labels/dependency-management", "name": "dependency-management", "color": "b8c9fc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2022-09-13T12:02:19Z", "updated_at": "2022-09-27T22:49:33Z", "closed_at": "2022-09-15T09:31:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi,\r\n\r\nI try to do the following:\r\nmy python app uses pyspark and regular python.\r\n- pyspark calls spark.read.csv and spark.read.load to read data from s3 - so I have to mock s3 access\r\n- regular python downloads some files from s3 and uses regular python to process the data - so I have to mock s3 access\r\n- for mock_pyspark I need to start ThreadedMotoServer which runs on port 5000 according to: https://github.com/spulec/moto/issues/1543\r\n\r\nI run into the following error:\r\n```\r\nImportError while importing test module '/Users/mike/foo-app/tests/test_predict.py'.\r\nHint: make sure your test modules/packages have valid Python names.\r\nTraceback:\r\n/Users/gstanje/.pyenv/versions/3.8.9/lib/python3.8/importlib/__init__.py:127: in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\ntests/test_predict.py:14: in <module>\r\n    from moto.server import ThreadedMotoServer\r\n.venv/lib/python3.8/site-packages/moto/server.py:7: in <module>\r\n    from moto.moto_server.werkzeug_app import (\r\n.venv/lib/python3.8/site-packages/moto/moto_server/werkzeug_app.py:7: in <module>\r\n    from flask_cors import CORS\r\nE   ModuleNotFoundError: No module named 'flask_cors'\r\n```\r\n\r\nhere is how I installed Moto:\r\n```\r\npoetry add moto@latest\r\nUsing version ^4.0.3 for moto\r\n\r\nUpdating dependencies\r\nResolving dependencies... (12.1s)\r\n\r\nWriting lock file\r\n\r\nPackage operations: 0 installs, 1 update, 0 removals\r\n\r\n  \u2022 Updating grpcio (1.48.0 -> 1.48.1)\r\n```\r\n\r\ncheck installation:\r\n```\r\npoetry show moto       \r\n name         : moto                                                                        \r\n version      : 4.0.3                                                                       \r\n description  : A library that allows your python tests to easily mock out the boto library \r\n\r\ndependencies\r\n - boto3 >=1.9.201\r\n - botocore >=1.12.201\r\n - cryptography >=3.3.1\r\n - Jinja2 >=2.10.1\r\n - MarkupSafe !=2.0.0a1\r\n - python-dateutil >=2.1,<3.0.0\r\n - pytz *\r\n - requests >=2.5\r\n - responses >=0.13.0\r\n - werkzeug >=0.5,<2.2.0\r\n - xmltodict *\r\n```\r\n\r\nI also installed it in the following way - same issue:\r\n```\r\npoetry add \"moto[ec,s3,all]\"@latest\r\nUsing version ^4.0.3 for moto\r\n\r\nUpdating dependencies\r\nResolving dependencies... (311.5s)\r\n\r\nWriting lock file\r\n\r\nPackage operations: 18 installs, 1 update, 1 removal\r\n\r\n  \u2022 Removing pkgutil-resolve-name (1.3.10)\r\n  \u2022 Updating jsonschema (4.9.1 -> 3.2.0)\r\n  \u2022 Installing jsonpickle (2.2.0)\r\n  \u2022 Installing jsonpointer (2.3)\r\n  \u2022 Installing pbr (5.10.0)\r\n  \u2022 Installing aws-sam-translator (1.50.0)\r\n  \u2022 Installing ecdsa (0.18.0)\r\n  \u2022 Installing jschema-to-python (1.2.3)\r\n  \u2022 Installing jsonpatch (1.32)\r\n  \u2022 Installing junit-xml (1.9)\r\n  \u2022 Installing networkx (2.8.6)\r\n  \u2022 Installing openapi-schema-validator (0.2.3)\r\n  \u2022 Installing sarif-om (1.0.4)\r\n  \u2022 Installing aws-xray-sdk (2.10.0)\r\n  \u2022 Installing cfn-lint (0.64.1)\r\n  \u2022 Installing graphql-core (3.2.1)\r\n  \u2022 Installing jsondiff (2.0.0)\r\n  \u2022 Installing openapi-spec-validator (0.4.0)\r\n  \u2022 Installing python-jose (3.3.0)\r\n  \u2022 Installing sshpubkeys (3.3.1)\r\n```\r\n\r\nhere the code I try to run:\r\n```\r\nfrom unittest import TestCase\r\nfrom moto import mock_s3\r\nfrom mypy_boto3_s3.client import S3Client\r\nfrom pathlib import Path\r\nimport os\r\nimport glob\r\nimport logging\r\nfrom chardet import detect\r\nfrom io import BytesIO\r\nfrom pyspark.sql import SparkSession\r\nimport boto3\r\nimport os\r\nimport pandas as pd\r\nfrom moto.server import ThreadedMotoServer\r\n\r\nAWS_PROFILE = \"testing\"\r\n\r\nclass TestPredict(TestCase):\r\n    s3_bucket = \"foo-bucket\"\r\n    mock_s3 = mock_s3()\r\n    s3 = S3()\r\n\r\n    def setUp(self):\r\n        # set aws credentials: https://stackoverflow.com/questions/59535311/moto-does-not-appear-to-be-mocking-aws-interactions-in-a-pytest\r\n        moto_credentials_file_path = Path(__file__).parent.absolute() / 'fixtures' / 'dummy_aws_credentials'\r\n        os.environ['AWS_SHARED_CREDENTIALS_FILE'] = str(moto_credentials_file_path)\r\n\r\n        s3 = S3()\r\n        s3.set_credentials(AWS_PROFILE)\r\n        s3_session = s3.get_session()\r\n        self.setUpS3()\r\n\r\n        self.server = ThreadedMotoServer()\r\n        self.server.start()\r\n\r\n    def tearDown(self):\r\n        self.mock_s3.stop()\r\n        self.server.stop()\r\n\r\n    def setUpS3(self):\r\n        self.mock_s3.start()\r\n        self.s3.create_bucket(self.s3_bucket)\r\n\r\n    # https://github.com/spulec/moto/issues/1543\r\n    def mock_pyspark(self):\r\n        os.environ[\"PYSPARK_SUBMIT_ARGS\"] = (\r\n            '--packages \"org.apache.hadoop:hadoop-aws:3.3.1\" pyspark-shell'\r\n        )\r\n        spark = SparkSession.builder.getOrCreate()\r\n\r\n        # Setup spark to use s3, and point it to the moto server.\r\n        hadoop_conf = spark.sparkContext._jsc.hadoopConfiguration()\r\n        hadoop_conf.set(\"fs.s3.impl\", \"org.apache.hadoop.fs.s3a.S3AFileSystem\")\r\n        hadoop_conf.set(\"fs.s3a.access.key\", \"mock\")\r\n        hadoop_conf.set(\"fs.s3a.secret.key\", \"mock\")\r\n        hadoop_conf.set(\"fs.s3a.endpoint\", \"http://127.0.0.1:5000\")\r\n\r\n        conn = boto3.resource(\"s3\", endpoint_url=\"http://127.0.0.1:5000\")\r\n        conn.create_bucket(Bucket=\"bucket\")\r\n\r\n        data = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\r\n        with BytesIO(data.to_csv(index=False).encode()) as buffer:\r\n            conn.Bucket(\"bucket\").put_object(Key=\"test/test.csv\", Body=buffer)\r\n\r\n        df = spark.read.csv(\"s3://bucket/test/test.csv\", header=True)\r\n        logging.info(\"%v\", df)\r\n\r\n    # to implement\r\n    def upload_tfdf_model(self):\r\n        return\r\n\r\n    def upload_s3_data(self):\r\n        self.upload_tfdf_model()\r\n        return\r\n\r\n    def test_predict(self):\r\n        self.upload_s3_data()\r\n        self.mock_pyspark()\r\n\r\n        return\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5468/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5468/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5462", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5462/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5462/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5462/events", "html_url": "https://github.com/getmoto/moto/issues/5462", "id": 1368932930, "node_id": "I_kwDOAH5NfM5RmEJC", "number": 5462, "title": "@mock_cloudformation doesn't work", "user": {"login": "jhw", "id": 8852, "node_id": "MDQ6VXNlcjg4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhw", "html_url": "https://github.com/jhw", "followers_url": "https://api.github.com/users/jhw/followers", "following_url": "https://api.github.com/users/jhw/following{/other_user}", "gists_url": "https://api.github.com/users/jhw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhw/subscriptions", "organizations_url": "https://api.github.com/users/jhw/orgs", "repos_url": "https://api.github.com/users/jhw/repos", "events_url": "https://api.github.com/users/jhw/events{/privacy}", "received_events_url": "https://api.github.com/users/jhw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2174001772, "node_id": "MDU6TGFiZWwyMTc0MDAxNzcy", "url": "https://api.github.com/repos/getmoto/moto/labels/dependency-management", "name": "dependency-management", "color": "b8c9fc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-09-11T12:34:09Z", "updated_at": "2022-09-12T21:56:26Z", "closed_at": "2022-09-12T21:56:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "### requirements.txt\r\n\r\n```\r\nmoto\r\npyyaml\r\nopenapi-spec-validator\r\n```\r\n\r\n### hello.py\r\n\r\n```\r\nfrom moto import mock_cloudformation\r\n\r\nimport unittest\r\n\r\n@mock_cloudformation\r\nclass HelloTest(unittest.TestCase):\r\n\r\n    def test_hello(self):\r\n        self.assertEqual(2, 2)\r\n    \r\nif __name__==\"__main__\":\r\n    unittest.main()\r\n```\r\n\r\n### run\r\n\r\n```\r\n(env) me@mine % python hello.py                             \r\nTraceback (most recent call last):\r\n  File \"hello.py\", line 6, in <module>\r\n    class HelloTest(unittest.TestCase):\r\n  File \"/Users/me/work/gists/aws/moto_cloudformation/env/lib/python3.8/site-packages/moto/__init__.py\", line 8, in f\r\n    module = importlib.import_module(module_name, \"moto\")\r\n  File \"/Users/me/.pyenv/versions/3.8.11/lib/python3.8/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 843, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/Users/me/work/gists/aws/moto_cloudformation/env/lib/python3.8/site-packages/moto/cloudformation/__init__.py\", line 1, in <module>\r\n    from .models import cloudformation_backends\r\n  File \"/Users/me/work/gists/aws/moto_cloudformation/env/lib/python3.8/site-packages/moto/cloudformation/models.py\", line 18, in <module>\r\n    from .parsing import ResourceMap, OutputMap\r\n  File \"/Users/me/work/gists/aws/moto_cloudformation/env/lib/python3.8/site-packages/moto/cloudformation/parsing.py\", line 17, in <module>\r\n    from moto.apigateway import models  # noqa  # pylint: disable=all\r\n  File \"/Users/me/work/gists/aws/moto_cloudformation/env/lib/python3.8/site-packages/moto/apigateway/__init__.py\", line 1, in <module>\r\n    from .models import apigateway_backends\r\n  File \"/Users/me/work/gists/aws/moto_cloudformation/env/lib/python3.8/site-packages/moto/apigateway/models.py\", line 15, in <module>\r\n    from openapi_spec_validator.exceptions import OpenAPIValidationError\r\nImportError: cannot import name 'OpenAPIValidationError' from 'openapi_spec_validator.exceptions' (/Users/me/work/gists/aws/moto_cloudformation/env/lib/python3.8/site-packages/openapi_spec_validator/exceptions.py)\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5462/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5462/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5451", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5451/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5451/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5451/events", "html_url": "https://github.com/getmoto/moto/issues/5451", "id": 1364640438, "node_id": "I_kwDOAH5NfM5RVsK2", "number": 5451, "title": "REFRESH_TOKEN_AUTH is not working", "user": {"login": "daka83", "id": 4953195, "node_id": "MDQ6VXNlcjQ5NTMxOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4953195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daka83", "html_url": "https://github.com/daka83", "followers_url": "https://api.github.com/users/daka83/followers", "following_url": "https://api.github.com/users/daka83/following{/other_user}", "gists_url": "https://api.github.com/users/daka83/gists{/gist_id}", "starred_url": "https://api.github.com/users/daka83/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daka83/subscriptions", "organizations_url": "https://api.github.com/users/daka83/orgs", "repos_url": "https://api.github.com/users/daka83/repos", "events_url": "https://api.github.com/users/daka83/events{/privacy}", "received_events_url": "https://api.github.com/users/daka83/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-09-07T13:08:56Z", "updated_at": "2022-09-07T18:40:03Z", "closed_at": "2022-09-07T18:39:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When calling `initiate_auth` with `REFRESH_TOKEN_AUTH` I am getting next exception\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/werkzeug/serving.py\", line 335, in run_wsgi\r\n    execute(self.server.app)\r\n  File \"/usr/local/lib/python3.8/site-packages/werkzeug/serving.py\", line 322, in execute\r\n    application_iter = app(environ, start_response)\r\n  File \"/usr/local/lib/python3.8/site-packages/moto/moto_server/werkzeug_app.py\", line 241, in __call__\r\n    return backend_app(environ, start_response)\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/app.py\", line 2091, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/app.py\", line 2076, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/usr/local/lib/python3.8/site-packages/flask_cors/extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/app.py\", line 2073, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/app.py\", line 1519, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/usr/local/lib/python3.8/site-packages/flask_cors/extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/app.py\", line 1517, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/app.py\", line 1503, in dispatch_request\r\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\r\n  File \"/usr/local/lib/python3.8/site-packages/moto/core/utils.py\", line 129, in __call__\r\n    result = self.callback(request, request.url, dict(request.headers))\r\n  File \"/usr/local/lib/python3.8/site-packages/moto/core/responses.py\", line 217, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/moto/core/responses.py\", line 356, in _dispatch\r\n    return self.call_action()\r\n  File \"/usr/local/lib/python3.8/site-packages/moto/core/responses.py\", line 443, in call_action\r\n    response = method()\r\n  File \"/usr/local/lib/python3.8/site-packages/moto/cognitoidp/responses.py\", line 558, in initiate_auth\r\n    auth_result = region_agnostic_backend.initiate_auth(\r\n  File \"/usr/local/lib/python3.8/site-packages/moto/cognitoidp/models.py\", line 1861, in initiate_auth\r\n    return backend.initiate_auth(client_id, auth_flow, auth_parameters)\r\n  File \"/usr/local/lib/python3.8/site-packages/moto/cognitoidp/models.py\", line 1702, in initiate_auth\r\n    if client.generate_secret:\r\nAttributeError: 'NoneType' object has no attribute 'generate_secret'\r\n```\r\n\r\nmoto==4.0.2", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5451/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5451/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5448", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5448/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5448/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5448/events", "html_url": "https://github.com/getmoto/moto/issues/5448", "id": 1364152567, "node_id": "I_kwDOAH5NfM5RT1D3", "number": 5448, "title": "sns_backends example doesn't work", "user": {"login": "dkjadhav-deserve", "id": 109506874, "node_id": "U_kgDOBobxOg", "avatar_url": "https://avatars.githubusercontent.com/u/109506874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkjadhav-deserve", "html_url": "https://github.com/dkjadhav-deserve", "followers_url": "https://api.github.com/users/dkjadhav-deserve/followers", "following_url": "https://api.github.com/users/dkjadhav-deserve/following{/other_user}", "gists_url": "https://api.github.com/users/dkjadhav-deserve/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkjadhav-deserve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkjadhav-deserve/subscriptions", "organizations_url": "https://api.github.com/users/dkjadhav-deserve/orgs", "repos_url": "https://api.github.com/users/dkjadhav-deserve/repos", "events_url": "https://api.github.com/users/dkjadhav-deserve/events{/privacy}", "received_events_url": "https://api.github.com/users/dkjadhav-deserve/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2658233195, "node_id": "MDU6TGFiZWwyNjU4MjMzMTk1", "url": "https://api.github.com/repos/getmoto/moto/labels/documentation", "name": "documentation", "color": "1C22A9", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-09-07T06:21:57Z", "updated_at": "2022-09-07T11:00:20Z", "closed_at": "2022-09-07T11:00:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\n**Problem -** \r\nSNSBackend example mentioned in documentation doesn't work. \r\nPlease find link for doc - https://docs.getmoto.org/en/stable/docs/services/sns.html\r\n```\r\nfrom moto.sns import sns_backends\r\nsns_backend = sns_backends[\"us-east-1\"]  # Use the appropriate region\r\nall_send_notifications = sns_backend.topics[topic_arn].sent_notifications\r\n```\r\n\r\nWe are getting following error while using SNSBackend with moto version 4.0.2\r\n\r\n**Snapshot-**\r\n```\r\n sns_backend: SNSBackend = sns_backends[os.environ[region]]\r\n>       sns_events: list[Tuple] = sns_backend.topics[topic_arn].sent_notifications\r\nE       AttributeError: 'AccountSpecificBackend' object has no attribute 'topics'\r\n```\r\n\r\n**Possible solution-**\r\n```\r\nsns_backend = sns_backends['123456789012']['us-east-1']\r\nall_send_notifications = sns_backend.topics[topic_arn].sent_notifications\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5448/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5443", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5443/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5443/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5443/events", "html_url": "https://github.com/getmoto/moto/issues/5443", "id": 1359390393, "node_id": "I_kwDOAH5NfM5RBqa5", "number": 5443, "title": "create_endpoint_config doesn't support Serverless deployment", "user": {"login": "arnaudstiegler", "id": 26485052, "node_id": "MDQ6VXNlcjI2NDg1MDUy", "avatar_url": "https://avatars.githubusercontent.com/u/26485052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arnaudstiegler", "html_url": "https://github.com/arnaudstiegler", "followers_url": "https://api.github.com/users/arnaudstiegler/followers", "following_url": "https://api.github.com/users/arnaudstiegler/following{/other_user}", "gists_url": "https://api.github.com/users/arnaudstiegler/gists{/gist_id}", "starred_url": "https://api.github.com/users/arnaudstiegler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arnaudstiegler/subscriptions", "organizations_url": "https://api.github.com/users/arnaudstiegler/orgs", "repos_url": "https://api.github.com/users/arnaudstiegler/repos", "events_url": "https://api.github.com/users/arnaudstiegler/events{/privacy}", "received_events_url": "https://api.github.com/users/arnaudstiegler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-09-01T20:48:37Z", "updated_at": "2022-09-02T18:42:52Z", "closed_at": "2022-09-02T18:42:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It is currently not possible to use moto to mock `create_endpoint_config` if the endpoint config involves using serverless deployment.\r\n\r\nTo reproduce:\r\n```\r\nfrom moto import mock_sagemaker\r\nimport boto3\r\n\r\nwith mock_sagemaker():\r\n    client = boto3.client(\"sagemaker\")\r\n    endpoint_conf_name = 'test'\r\n    \r\n    client.create_endpoint_config(\r\n        EndpointConfigName=endpoint_conf_name,\r\n        ProductionVariants=[\r\n            {'VariantName': 'dummy',\r\n                'ModelName': 'dummy',\r\n                'ServerlessConfig': {\r\n                'MemorySizeInMB': 1024,\r\n                'MaxConcurrency': 20\r\n            }}\r\n        ],\r\n    )\r\n```\r\n\r\nStacktrace:\r\n```\r\nself = <moto.sagemaker.models.FakeEndpointConfig object at 0x7f90f8934850>, production_variants = [{'ModelName': 'test', 'ServerlessConfig': {'MaxConcurrency': 20, 'MemorySizeInMB': 6144}, 'VariantName': 'default-variant-test'}]\r\n\r\n    def validate_production_variants(self, production_variants):\r\n        for production_variant in production_variants:\r\n>           self.validate_instance_type(production_variant[\"InstanceType\"])\r\nE           KeyError: 'InstanceType'\r\n\r\nml_framework/venv/lib/python3.7/site-packages/moto/sagemaker/models.py:401: KeyError\r\n```\r\n\r\nThe error is triggered when moto creates a new `FakeEndpointConfig`: https://github.com/spulec/moto/blob/930c58bd1366b073e8630a82fa7f34624babd867/moto/sagemaker/models.py#L399-L401\r\n\r\nWhen deploying using `ServerlessConfig`, there is no `InstanceType` present in the ProductionVariant (see documentation: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sagemaker.html#SageMaker.Client.create_endpoint_config)\r\n\r\nIdeally, we should condition based on whether we have `InstanceType` or `ServerlessConfig` in the ProductionVariant, and add some checks on the Serverless Config parameters.\r\n\r\nHappy to get a PR out to fix this :) ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5443/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5443/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5423", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5423/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5423/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5423/events", "html_url": "https://github.com/getmoto/moto/issues/5423", "id": 1352220282, "node_id": "I_kwDOAH5NfM5QmT56", "number": 5423, "title": "RDS ReadReplicaDBInstanceIdentifiers and SourceDBInstanceIdentifier show db-name for cross-region replication", "user": {"login": "Tmilly", "id": 32075722, "node_id": "MDQ6VXNlcjMyMDc1NzIy", "avatar_url": "https://avatars.githubusercontent.com/u/32075722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tmilly", "html_url": "https://github.com/Tmilly", "followers_url": "https://api.github.com/users/Tmilly/followers", "following_url": "https://api.github.com/users/Tmilly/following{/other_user}", "gists_url": "https://api.github.com/users/Tmilly/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tmilly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tmilly/subscriptions", "organizations_url": "https://api.github.com/users/Tmilly/orgs", "repos_url": "https://api.github.com/users/Tmilly/repos", "events_url": "https://api.github.com/users/Tmilly/events{/privacy}", "received_events_url": "https://api.github.com/users/Tmilly/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-08-26T12:45:48Z", "updated_at": "2022-09-28T22:07:30Z", "closed_at": "2022-09-28T22:07:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently in all cases, moto will use a database's name for the `ReadReplicaDBInstanceIdentifiers` and  `SourceDBInstanceIdentifier` fields in the RDSBackend. \r\n\r\nThis aligns with AWS's states for same-region replication. However for cross-region replication, AWS provides full arns for `ReadReplicaDBInstanceIdentifiers` and `SourceDBInstanceIdentifier`. Moto does not reflect this behavior for cross-region replication. \r\n\r\nCan we update this for cross-region support to ensure moto stores/uses the full arn for its `DBInstanceIdentifiers`?\r\n\r\nReproducible steps:\r\n1. Create a same-region replication (primary and replica in the same region) in AWS, and run a describe call on both the primary and replica. Notice both `SourceDBInstanceIdentifier` and `ReadReplicaDBInstanceIdentifiers` align with just the database name\r\n2. Create a cross-region replication (primary in one region, replica in a second region) in AWS, and run a describe call on both the primary and replica. Notice both `SourceDBInstanceIdentifier` and `ReadReplicaDBInstanceIdentifiers` align with just the resource's full arn.\r\n3. Create a cross-region replication using moto, and run a describe call on both the primary and replica. Notice both `SourceDBInstanceIdentifier` and `ReadReplicaDBInstanceIdentifiers` come back as the database name. (This does not align with AWS's behavior)", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5423/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5423/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5418", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5418/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5418/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5418/events", "html_url": "https://github.com/getmoto/moto/issues/5418", "id": 1349683994, "node_id": "I_kwDOAH5NfM5Qcosa", "number": 5418, "title": "Regex in put_integration doesn't match with sagemaker runtime integration", "user": {"login": "arnaudstiegler", "id": 26485052, "node_id": "MDQ6VXNlcjI2NDg1MDUy", "avatar_url": "https://avatars.githubusercontent.com/u/26485052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arnaudstiegler", "html_url": "https://github.com/arnaudstiegler", "followers_url": "https://api.github.com/users/arnaudstiegler/followers", "following_url": "https://api.github.com/users/arnaudstiegler/following{/other_user}", "gists_url": "https://api.github.com/users/arnaudstiegler/gists{/gist_id}", "starred_url": "https://api.github.com/users/arnaudstiegler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arnaudstiegler/subscriptions", "organizations_url": "https://api.github.com/users/arnaudstiegler/orgs", "repos_url": "https://api.github.com/users/arnaudstiegler/repos", "events_url": "https://api.github.com/users/arnaudstiegler/events{/privacy}", "received_events_url": "https://api.github.com/users/arnaudstiegler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-08-24T16:01:11Z", "updated_at": "2022-08-30T21:13:56Z", "closed_at": "2022-08-30T21:13:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\nMoto version: 4.0.0\r\n\r\nWhen using sagemaker runtime as integration for an API Gateway, the endpoint URI will be:\r\n`arn:aws:apigateway:{region}:runtime.sagemaker:path/endpoints/{endpoint_name}/invocations`\r\n\r\nHowever, in `APIGatewayBackend.put_integration`, the URI gets matched [here](https://github.com/spulec/moto/blob/master/moto/apigateway/models.py#L1610) with the following regex:\r\n\r\n`re.match(\"^arn:aws:apigateway:[a-zA-Z0-9-]+:[a-zA-Z0-9-]+:(path|action)/\", uri)`\r\n\r\nBecause `[a-zA-Z0-9-]+` can't match `sagemaker.runtime`, the function throws an invalid ARN request even though the ARN should be valid\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5418/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5418/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5408", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5408/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5408/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5408/events", "html_url": "https://github.com/getmoto/moto/issues/5408", "id": 1344295209, "node_id": "I_kwDOAH5NfM5QIFEp", "number": 5408, "title": "Default ACL not set for multipart upload", "user": {"login": "ColdrickSotK", "id": 6370077, "node_id": "MDQ6VXNlcjYzNzAwNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/6370077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ColdrickSotK", "html_url": "https://github.com/ColdrickSotK", "followers_url": "https://api.github.com/users/ColdrickSotK/followers", "following_url": "https://api.github.com/users/ColdrickSotK/following{/other_user}", "gists_url": "https://api.github.com/users/ColdrickSotK/gists{/gist_id}", "starred_url": "https://api.github.com/users/ColdrickSotK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ColdrickSotK/subscriptions", "organizations_url": "https://api.github.com/users/ColdrickSotK/orgs", "repos_url": "https://api.github.com/users/ColdrickSotK/repos", "events_url": "https://api.github.com/users/ColdrickSotK/events{/privacy}", "received_events_url": "https://api.github.com/users/ColdrickSotK/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-08-19T11:09:52Z", "updated_at": "2022-08-24T21:17:18Z", "closed_at": "2022-08-24T21:17:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Context\r\n\r\nWhen using moto's implementation of S3's multipart upload to upload an object, the ACL seems like it is not set on the object unless it is specified explicitly by the uploader. This causes problems with subsequent requests to access the object, eg. `HeadObject`.\r\n\r\nFor some reason that I've not got to the bottom of, this issue only seems to occur when using presigned URLs to send the `HeadObject` request, using boto's client methods directly works as expected.\r\n\r\n### Expected behaviour\r\n\r\n- Upload a large object using multipart upload\r\n- Send a HeadObject request using a presigned URL\r\n- Get a successful response\r\n\r\n### Actual behaviour\r\n\r\n- Upload a large object using multipart upload\r\n- Send a HeadObject request using a presigned URL\r\n- An `AttributeError` is raised in the `mock_s3` context manager\r\n\r\n\r\n## Traceback\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/werkzeug/serving.py\", line 335, in run_wsgi\r\n    execute(self.server.app)\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/werkzeug/serving.py\", line 322, in execute\r\n    application_iter = app(environ, start_response)\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/moto/moto_server/werkzeug_app.py\", line 240, in __call__\r\n    return backend_app(environ, start_response)\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/flask/app.py\", line 2548, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/flask/app.py\", line 2528, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/flask_cors/extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/flask/app.py\", line 2525, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/flask/app.py\", line 1822, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/flask_cors/extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/flask/app.py\", line 1820, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/flask/app.py\", line 1796, in dispatch_request\r\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/moto/core/utils.py\", line 128, in __call__\r\n    result = self.callback(request, request.url, dict(request.headers))\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/moto/core/utils.py\", line 262, in _wrapper\r\n    response = f(*args, **kwargs)\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/moto/s3/responses.py\", line 1087, in key_response\r\n    response = self._key_response(request, full_url, self.headers)\r\n  File \"/home/adam/Projects/buildstream/buildgrid/.tox/venv/lib/python3.10/site-packages/moto/s3/responses.py\", line 1132, in _key_response\r\n    if not key.acl.public_read and not signed_url:\r\nAttributeError: 'NoneType' object has no attribute 'public_read'\r\n```\r\n\r\n## Reproduction\r\n\r\nThis snippet demonstrates the issue for me. In my actual codebase I'm using presigned URLs for the upload steps too, but the problem is also present when using boto3 directly as in this example.\r\n\r\n``` python\r\nimport boto3\r\nfrom moto import mock_s3\r\nimport requests\r\n\r\nwith mock_s3():\r\n    auth_args = {\r\n        \"aws_access_key_id\": \"access_key\",\r\n        \"aws_secret_access_key\": \"secret_key\"\r\n    }\r\n    client = boto3.client('s3', **auth_args)\r\n\r\n    bucket_name = 'testing'\r\n    client.create_bucket(Bucket=bucket_name)\r\n\r\n    object_key = 'test_multipart_object'\r\n    content = b'some large thing' + b'.' * 200 * 1024 * 1024\r\n\r\n    multipart_response = client.create_multipart_upload(\r\n        # ACL='private',  # Uncomment to \"fix\" the issue, but this parameter is optional\r\n        Bucket=bucket_name,\r\n        Key=object_key\r\n    )\r\n    upload_id = multipart_response['UploadId']\r\n\r\n    chunk_size = 100 * 1024 * 1024\r\n    offset = 0\r\n    part_number = 1\r\n    parts = {}\r\n    while offset < len(content):\r\n        part = client.upload_part(\r\n            Bucket=bucket_name,\r\n            Key=object_key,\r\n            UploadId=upload_id,\r\n            PartNumber=part_number,\r\n            Body=content[offset:offset+chunk_size]\r\n        )\r\n        parts[part_number] = part['ETag']\r\n        part_number += 1\r\n        offset += chunk_size\r\n\r\n    client.complete_multipart_upload(\r\n        Bucket=bucket_name,\r\n        Key=object_key,\r\n        UploadId=upload_id,\r\n        MultipartUpload={\r\n            'Parts': [\r\n                {\r\n                    'ETag': tag,\r\n                    'PartNumber': number\r\n                }\r\n                for number, tag in parts.items()\r\n            ]\r\n        }\r\n    )\r\n\r\n    # Works fine\r\n    client.head_object(Bucket=bucket_name, Key=object_key)\r\n\r\n    # Raises an AttributeError in moto\r\n    url = client.generate_presigned_url(\r\n        'head_object',\r\n        Params={'Bucket': bucket_name, 'Key': object_key}\r\n    )\r\n    requests.get(url)\r\n```\r\n\r\n## Version info\r\n\r\nUsing the moto python mocks. Dependencies installed with pip into a virtualenv managed by tox.\r\n\r\nmoto==3.1.16\r\nboto3==1.24.49\r\nbotocore==1.27.49", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5408/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5408/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5404", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5404/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5404/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5404/events", "html_url": "https://github.com/getmoto/moto/issues/5404", "id": 1343484538, "node_id": "I_kwDOAH5NfM5QE_J6", "number": 5404, "title": "DynamoDB table Creates only in us-east-1", "user": {"login": "jluevan13", "id": 97073150, "node_id": "U_kgDOBck3_g", "avatar_url": "https://avatars.githubusercontent.com/u/97073150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jluevan13", "html_url": "https://github.com/jluevan13", "followers_url": "https://api.github.com/users/jluevan13/followers", "following_url": "https://api.github.com/users/jluevan13/following{/other_user}", "gists_url": "https://api.github.com/users/jluevan13/gists{/gist_id}", "starred_url": "https://api.github.com/users/jluevan13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jluevan13/subscriptions", "organizations_url": "https://api.github.com/users/jluevan13/orgs", "repos_url": "https://api.github.com/users/jluevan13/repos", "events_url": "https://api.github.com/users/jluevan13/events{/privacy}", "received_events_url": "https://api.github.com/users/jluevan13/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-08-18T18:55:59Z", "updated_at": "2022-08-23T22:46:25Z", "closed_at": "2022-08-23T22:46:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to create a dynamodb table in us-east-2, the table is created in us-east-1. \r\n\r\nWith us-east-2 set in the client, the arn is returned as 'arn:aws:dynamodb:us-east-1:123456789012:table/test_table'.\r\n\r\nimport pytest\r\nimport boto3\r\nfrom moto import mock_dynamodb\r\nimport os\r\n\r\n\r\n@pytest.fixture\r\ndef mock_credentials():\r\n    \"\"\"\r\n    Create mock session for moto\r\n    \"\"\"\r\n    os.environ[\"AWS_ACCESS_KEY_ID\"] = \"testing\"\r\n    os.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"testing\"\r\n    os.environ[\"AWS_SECURITY_TOKEN\"] = \"testing\"\r\n    os.environ[\"AWS_SESSION_TOKEN\"] = \"testing\"\r\n\r\n\r\n@pytest.fixture\r\ndef dynamo_conn_ohio(mock_credentials):\r\n    \"\"\"\r\n    Create mock dynamodb client\r\n    \"\"\"\r\n    with mock_dynamodb():\r\n        yield boto3.client(\"dynamodb\", region_name=\"us-east-2\")\r\n\r\n\r\ndef test_table_create(dynamo_conn_ohio):\r\n    create_dynamo_ohio = dynamo_conn_ohio.create_table(\r\n        AttributeDefinitions=[\r\n            {\"AttributeName\": \"AMI_Id\", \"AttributeType\": \"S\"},\r\n        ],\r\n        TableName=\"mock_Foundational_AMI_Catalog\",\r\n        KeySchema=[\r\n            {\"AttributeName\": \"AMI_Id\", \"KeyType\": \"HASH\"},\r\n        ],\r\n        BillingMode=\"PAY_PER_REQUEST\",\r\n        StreamSpecification={\r\n            \"StreamEnabled\": True,\r\n            \"StreamViewType\": \"NEW_AND_OLD_IMAGES\",\r\n        },\r\n        SSESpecification={\r\n            \"Enabled\": False,\r\n        },\r\n        TableClass=\"STANDARD\",\r\n    )\r\n    describe_response = dynamo_conn_ohio.describe_table(\r\n        TableName=\"mock_Foundational_AMI_Catalog\"\r\n    )[\"Table\"][\"TableArn\"]\r\n    assert describe_response == \"arn:aws:dynamodb:us-east-2:123456789012:table/test_table\"\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5404/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5404/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5403", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5403/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5403/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5403/events", "html_url": "https://github.com/getmoto/moto/issues/5403", "id": 1343149682, "node_id": "I_kwDOAH5NfM5QDtZy", "number": 5403, "title": "Trust policy validation missing sts:TagSession action", "user": {"login": "zumic96", "id": 63529189, "node_id": "MDQ6VXNlcjYzNTI5MTg5", "avatar_url": "https://avatars.githubusercontent.com/u/63529189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zumic96", "html_url": "https://github.com/zumic96", "followers_url": "https://api.github.com/users/zumic96/followers", "following_url": "https://api.github.com/users/zumic96/following{/other_user}", "gists_url": "https://api.github.com/users/zumic96/gists{/gist_id}", "starred_url": "https://api.github.com/users/zumic96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zumic96/subscriptions", "organizations_url": "https://api.github.com/users/zumic96/orgs", "repos_url": "https://api.github.com/users/zumic96/repos", "events_url": "https://api.github.com/users/zumic96/events{/privacy}", "received_events_url": "https://api.github.com/users/zumic96/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-08-18T13:59:35Z", "updated_at": "2022-08-24T21:17:38Z", "closed_at": "2022-08-24T21:17:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Moto version: 3.1.18\r\nusing Python mocks\r\nboto3 version: 1.17.112\r\nbotocore version: 1.20.112\r\n\r\nMissing **`sts:TagSession`** as allowed action in Trust policy validation https://github.com/spulec/moto/blob/master/moto/iam/policy_validation.py#L566\r\nUsing it per this [AWS document](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html#id_session-tags_permissions-required) and noticed my tests started failing after this validation was added.\r\n\r\nIssue can be reproduced by adding that action to list of allowed action when testing update_assume_role_policy command.\r\nThe test fails with `MalformedPolicyDocumentException` and when I do it live it works normally.\r\n\r\nI think this **`sts:TagSession`** should be added to the list of viable actions.\r\n\r\nError:\r\n```\r\n___________________________ test_update_trust_policy ___________________________\r\n\r\n    @mock_iam\r\n    def test_update_trust_policy():\r\n        \"\"\"\r\n        Test update trust policy\r\n        :return:\r\n        \"\"\"\r\n        client = boto3.client('iam')\r\n        role = create_iam_stuff(client)\r\n        request = \\\r\n            UpdatePolicyRequest(\r\n                **{\r\n                    'policy': {\r\n                        'Version': '2012-10-17',\r\n                        'Statement': [\r\n                            {\r\n                                'Effect': 'Allow',\r\n                                'Principal': {\r\n                                    'AWS': [\r\n                                        \"arn:aws:iam::123456789012:user/user1\",\r\n                                        \"arn:aws:iam::123456789012:role/role1\"\r\n                                    ]\r\n                                },\r\n                                'Action': ['sts:AssumeRole', 'sts:TagSession']\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            )\r\n        with patch('app.aws.iam.service.clients.get_boto_client') as mock_boto:\r\n            mock_boto.return_value = client\r\n>           response = service.update_trust_policy(tenant='tenant',\r\n                                                   profile='profile',\r\n                                                   role_name=role['Role']['RoleName'],\r\n                                                   request=request)\r\n\r\ntest/aws/iam/test_service.py:167: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\napp/aws/iam/service.py:176: in update_trust_policy\r\n    response = client.update_assume_role_policy(\r\nenv/lib/python3.10/site-packages/botocore/client.py:386: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\nenv/lib/python3.10/site-packages/epsagon/modules/botocore.py:31: in _wrapper\r\n    return wrapper(BotocoreEventFactory, wrapped, instance, args, kwargs)\r\nenv/lib/python3.10/site-packages/epsagon/modules/general_wrapper.py:28: in wrapper\r\n    response = wrapped(*args, **kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.IAM object at 0x7f008d747220>\r\noperation_name = 'UpdateAssumeRolePolicy'\r\napi_params = {'PolicyDocument': '{\"Version\": \"2012-10-17\", \"Statement\": [{\"Effect\": \"Allow\", \"Principal\": {\"AWS\": [\"arn:aws:iam::123456789012:role/role1\"]}, \"Action\": [\"sts:AssumeRole\", \"sts:TagSession\"]}]}', 'RoleName': 'test-role'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record('API_CALL', {\r\n            'service': service_name,\r\n            'operation': operation_name,\r\n            'params': api_params,\r\n        })\r\n        if operation_model.deprecated:\r\n            logger.debug('Warning: %s.%s() is deprecated',\r\n                         service_name, operation_name)\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            model=operation_model, params=request_dict,\r\n            request_signer=self._request_signer, context=request_context)\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context)\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            http_response=http, parsed=parsed_response,\r\n            model=operation_model, context=request_context\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.errorfactory.MalformedPolicyDocumentException: An error occurred (MalformedPolicyDocument) when calling the UpdateAssumeRolePolicy operation: Trust Policy statement actions can only be sts:AssumeRole, sts:AssumeRoleWithSAML,  and sts:AssumeRoleWithWebIdentity\r\n\r\nenv/lib/python3.10/site-packages/botocore/client.py:705: MalformedPolicyDocumentException\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5403/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5403/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5400", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5400/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5400/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5400/events", "html_url": "https://github.com/getmoto/moto/issues/5400", "id": 1341456876, "node_id": "I_kwDOAH5NfM5P9QHs", "number": 5400, "title": "Cognito REFRESH_TOKEN auth raises incorrect error for invalid token", "user": {"login": "paulmdavies", "id": 2221779, "node_id": "MDQ6VXNlcjIyMjE3Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2221779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulmdavies", "html_url": "https://github.com/paulmdavies", "followers_url": "https://api.github.com/users/paulmdavies/followers", "following_url": "https://api.github.com/users/paulmdavies/following{/other_user}", "gists_url": "https://api.github.com/users/paulmdavies/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulmdavies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulmdavies/subscriptions", "organizations_url": "https://api.github.com/users/paulmdavies/orgs", "repos_url": "https://api.github.com/users/paulmdavies/repos", "events_url": "https://api.github.com/users/paulmdavies/events{/privacy}", "received_events_url": "https://api.github.com/users/paulmdavies/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-08-17T09:28:57Z", "updated_at": "2022-09-16T09:34:49Z", "closed_at": "2022-09-15T22:50:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Versions\r\n\r\n`moto`: 3.1.16\r\n`boto3`: 1.21.46\r\n\r\n# Code\r\n```\r\nresponse = self.cognito_client.admin_initiate_auth(\r\n    UserPoolId=self.user_pool_id,\r\n    ClientId=self.user_pool_client_id,\r\n    AuthFlow='ADMIN_USER_PASSWORD_AUTH',\r\n    AuthParameters={\r\n        'USERNAME': 'foo',\r\n        'PASSWORD': 'bar'\r\n    }\r\n)\r\n\r\nrefresh_token = response['AuthenticationResult']['RefreshToken']\r\nprint(refresh_token)\r\n\r\nself.cognito_client.admin_user_global_sign_out(\r\n    UserPoolId=self.user_pool_id,\r\n    Username='foo'\r\n)\r\n\r\nself.cognito_client.admin_initiate_auth(\r\n    UserPoolId=self.user_pool_id,\r\n    ClientId=self.user_pool_client_id,\r\n    AuthFlow='REFRESH_TOKEN',\r\n    AuthParameters={\r\n        'REFRESH_TOKEN': refresh_token,\r\n    }\r\n)\r\n```\r\n\r\n# Expectation\r\nA `NotAuthorizedException`\r\n\r\n# Reality\r\n`TypeError: cannot unpack non-iterable NoneType object`\r\n\r\n# Full Code\r\n```\r\nfrom unittest import TestCase\r\n\r\nimport boto3\r\nimport botocore\r\nfrom moto import mock_cognitoidp\r\n\r\n\r\n@mock_cognitoidp\r\nclass TestCognitoUserDeleter(TestCase):\r\n    def setUp(self) -> None:\r\n        self.cognito_client = boto3.client('cognito-idp')\r\n\r\n        self.user_pool_id = self.cognito_client.create_user_pool(PoolName='test-pool')['UserPool']['Id']\r\n\r\n        self.user_pool_client_id = self.cognito_client.create_user_pool_client(\r\n            UserPoolId=self.user_pool_id,\r\n            ClientName='test-client'\r\n        )['UserPoolClient']['ClientId']\r\n\r\n    def test_should(self):\r\n        self.cognito_client.admin_create_user(\r\n            UserPoolId=self.user_pool_id,\r\n            Username='foo',\r\n            TemporaryPassword='bar'\r\n        )\r\n\r\n        self.cognito_client.admin_set_user_password(\r\n            UserPoolId=self.user_pool_id,\r\n            Username='foo',\r\n            Password='bar',\r\n            Permanent=True\r\n        )\r\n\r\n        response = self.cognito_client.admin_initiate_auth(\r\n            UserPoolId=self.user_pool_id,\r\n            ClientId=self.user_pool_client_id,\r\n            AuthFlow='ADMIN_USER_PASSWORD_AUTH',\r\n            AuthParameters={\r\n                'USERNAME': 'foo',\r\n                'PASSWORD': 'bar'\r\n            }\r\n        )\r\n\r\n        refresh_token = response['AuthenticationResult']['RefreshToken']\r\n        print(refresh_token)\r\n\r\n        self.cognito_client.admin_user_global_sign_out(\r\n            UserPoolId=self.user_pool_id,\r\n            Username='foo'\r\n        )\r\n\r\n        with self.assertRaises(botocore.exceptions.ClientError) as context:\r\n            self.cognito_client.admin_initiate_auth(\r\n                UserPoolId=self.user_pool_id,\r\n                ClientId=self.user_pool_client_id,\r\n                AuthFlow='REFRESH_TOKEN',\r\n                AuthParameters={\r\n                    'REFRESH_TOKEN': refresh_token,\r\n                }\r\n            )\r\n\r\n        self.assertEqual(\r\n            'NotAuthorizedException',\r\n            context.exception.response['Error']['Code']\r\n        )\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5400/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5356", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5356/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5356/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5356/events", "html_url": "https://github.com/getmoto/moto/issues/5356", "id": 1327305950, "node_id": "I_kwDOAH5NfM5PHRTe", "number": 5356, "title": "Error listing Lambda layers after layer deletion", "user": {"login": "jhw", "id": 8852, "node_id": "MDQ6VXNlcjg4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhw", "html_url": "https://github.com/jhw", "followers_url": "https://api.github.com/users/jhw/followers", "following_url": "https://api.github.com/users/jhw/following{/other_user}", "gists_url": "https://api.github.com/users/jhw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhw/subscriptions", "organizations_url": "https://api.github.com/users/jhw/orgs", "repos_url": "https://api.github.com/users/jhw/repos", "events_url": "https://api.github.com/users/jhw/events{/privacy}", "received_events_url": "https://api.github.com/users/jhw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-08-03T14:26:05Z", "updated_at": "2022-08-12T16:32:42Z", "closed_at": "2022-08-12T16:32:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\n`lambda.list_layers()` fails if you create a layer and then subsequently delete it\r\n\r\nHere's an example illustrating the problem -\r\n\r\n```\r\nfrom moto import mock_lambda, mock_s3\r\n\r\nimport boto3, unittest, zlib\r\n\r\nMyBucket={\"name\": \"my-bucket\"}\r\n\r\nPyyamlLayer={\"name\": \"pyyaml\",\r\n             \"bucket\": \"my-bucket\"}\r\n\r\n@mock_lambda\r\n@mock_s3\r\nclass MockLayerDeleteTest(unittest.TestCase):\r\n\r\n    def setup_s3(self, buckets=[MyBucket], layers=[PyyamlLayer]):\r\n        self.s3=boto3.client(\"s3\")\r\n        for bucket in buckets:\r\n            self.s3.create_bucket(Bucket=bucket[\"name\"],\r\n                                  CreateBucketConfiguration={'LocationConstraint': 'EU'})\r\n        for layer in layers:\r\n            s3key=\"layer-%s.zip\" % layer[\"name\"]\r\n            payload=zlib.compress(\"how now brown cow\".encode('utf-8'))\r\n            self.s3.put_object(Bucket=layer[\"bucket\"],\r\n                               Key=s3key,\r\n                               Body=payload,\r\n                               ContentType=\"application/gzip\")\r\n            \r\n    def setUp(self):\r\n        self.setup_s3()\r\n        self.lamda=boto3.client(\"lambda\")\r\n            \r\n    def test_create_delete_list_layer(self, bucket=MyBucket, layer=PyyamlLayer):\r\n        s3key=\"layer-%s.zip\" % layer[\"name\"]\r\n        print (\"--- creating layer ---\")\r\n        resp=self.lamda.publish_layer_version(LayerName=layer[\"name\"],\r\n                                              Content={\"S3Bucket\": bucket[\"name\"],\r\n                                                       \"S3Key\": s3key})\r\n        layerarn=resp[\"LayerVersionArn\"]\r\n        layerversion=int(layerarn.split(\":\")[-1])\r\n        print (self.lamda.list_layers()) # <- WORKS FINE HERE\r\n        print (\"--- deleting layer ---\")\r\n        self.lamda.delete_layer_version(LayerName=layer[\"name\"],\r\n                                        VersionNumber=layerversion)\r\n        print (self.lamda.list_layers()) # <- FAILS HERE\r\n    \r\n    def teardown_s3(self, buckets=[MyBucket]):\r\n        def empty_bucket(s3, bucket):            \r\n            struct=s3.list_objects(Bucket=bucket[\"name\"])\r\n            if \"Contents\" in struct:\r\n                for obj in struct[\"Contents\"]:\r\n                    # print (\"deleting %s\" % obj[\"Key\"])\r\n                    s3.delete_object(Bucket=bucket[\"name\"],\r\n                                     Key=obj[\"Key\"])\r\n        def delete_bucket(s3, bucket):\r\n            s3.delete_bucket(Bucket=bucket[\"name\"])\r\n        for bucket in buckets:\r\n            empty_bucket(self.s3, bucket)\r\n            delete_bucket(self.s3, bucket)\r\n\r\n    def tearDown(self):\r\n        self.teardown_s3()\r\n\r\nif __name__==\"__main__\":\r\n    unittest.main()\r\n```\r\n\r\nAnd here's what happens when you run it -\r\n\r\n```\r\n(env) jhw@Justins-Air layman2 % python dev/mock_layer_delete_test.py\r\n--- creating layer ---\r\n{'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {}, 'RetryAttempts': 0}, 'Layers': [{'LayerName': 'pyyaml', 'LayerArn': 'arn:aws:lambda:eu-west-1:123456789012:layer:pyyaml', 'LatestMatchingVersion': {'LayerVersionArn': 'arn:aws:lambda:eu-west-1:123456789012:layer:pyyaml:1', 'Version': 1, 'Description': '', 'CreatedDate': '2022-08-03 14:22:07', 'CompatibleRuntimes': [], 'LicenseInfo': '', 'CompatibleArchitectures': []}}]}\r\n--- deleting layer ---\r\nE\r\n======================================================================\r\nERROR: test_create_delete_list_layer (__main__.MockLayerDeleteTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/moto/core/models.py\", line 120, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/moto/core/models.py\", line 120, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"dev/mock_layer_delete_test.py\", line 43, in test_create_delete_list_layer\r\n    print (self.lamda.list_layers()) # <- FAILS HERE\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/client.py\", line 508, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/client.py\", line 898, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/client.py\", line 921, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/endpoint.py\", line 119, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/endpoint.py\", line 202, in _send_request\r\n    while self._needs_retry(\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/endpoint.py\", line 354, in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/hooks.py\", line 412, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/hooks.py\", line 256, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/hooks.py\", line 239, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/retryhandler.py\", line 207, in __call__\r\n    if self._checker(**checker_kwargs):\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/retryhandler.py\", line 284, in __call__\r\n    should_retry = self._should_retry(\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/retryhandler.py\", line 307, in _should_retry\r\n    return self._checker(\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/retryhandler.py\", line 363, in __call__\r\n    checker_response = checker(\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/retryhandler.py\", line 247, in __call__\r\n    return self._check_caught_exception(\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/retryhandler.py\", line 416, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/endpoint.py\", line 278, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/hooks.py\", line 412, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/hooks.py\", line 256, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/botocore/hooks.py\", line 239, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/moto/core/botocore_stubber.py\", line 55, in __call__\r\n    status, headers, body = response_callback(\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/moto/awslambda/responses.py\", line 80, in list_layers\r\n    return self._list_layers()\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/moto/awslambda/responses.py\", line 461, in _list_layers\r\n    layers = self.lambda_backend.list_layers()\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/moto/awslambda/models.py\", line 1434, in list_layers\r\n    return self._layers.list_layers()\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/moto/awslambda/models.py\", line 1245, in list_layers\r\n    return [layer.to_dict() for layer in self._layers.values()]\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/moto/awslambda/models.py\", line 1245, in <listcomp>\r\n    return [layer.to_dict() for layer in self._layers.values()]\r\n  File \"/Users/jhw/work/layman2/env/lib/python3.8/site-packages/moto/awslambda/models.py\", line 370, in to_dict\r\n    \"LatestMatchingVersion\": self.layer_versions[\r\nKeyError: '1'\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.264s\r\n\r\nFAILED (errors=1)\r\n```\r\n\r\nI'm using the latest version of `moto` - `3.1.16`\r\n\r\nRgds :)", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5356/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5356/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5355", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5355/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5355/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5355/events", "html_url": "https://github.com/getmoto/moto/issues/5355", "id": 1327079863, "node_id": "I_kwDOAH5NfM5PGaG3", "number": 5355, "title": "Make Redshift creation time to be UTC", "user": {"login": "matanabudy", "id": 6321912, "node_id": "MDQ6VXNlcjYzMjE5MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/6321912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matanabudy", "html_url": "https://github.com/matanabudy", "followers_url": "https://api.github.com/users/matanabudy/followers", "following_url": "https://api.github.com/users/matanabudy/following{/other_user}", "gists_url": "https://api.github.com/users/matanabudy/gists{/gist_id}", "starred_url": "https://api.github.com/users/matanabudy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matanabudy/subscriptions", "organizations_url": "https://api.github.com/users/matanabudy/orgs", "repos_url": "https://api.github.com/users/matanabudy/repos", "events_url": "https://api.github.com/users/matanabudy/events{/privacy}", "received_events_url": "https://api.github.com/users/matanabudy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-08-03T11:31:12Z", "updated_at": "2022-08-23T17:23:40Z", "closed_at": "2022-08-23T17:23:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently Redshift snapshot is initialized with `datetime.now()` instead of `datetime.utcnow()`. It should be UTC time for compatibility.\r\n\r\nFor reference see [models.py](https://github.com/spulec/moto/blob/master/moto/redshift/models.py). In cluster creation it is:\r\n```python\r\nself.create_time = iso_8601_datetime_with_milliseconds(datetime.datetime.utcnow())\r\n```\r\nAnd in snapshot creation it is:\r\n```python\r\nself.create_time = iso_8601_datetime_with_milliseconds(datetime.datetime.now())\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5355/reactions", "total_count": 13, "+1": 13, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5355/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5346", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5346/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5346/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5346/events", "html_url": "https://github.com/getmoto/moto/issues/5346", "id": 1322906200, "node_id": "I_kwDOAH5NfM5O2fJY", "number": 5346, "title": "ec2 created without keypair has KeyName = 'None'", "user": {"login": "tekumara", "id": 125105, "node_id": "MDQ6VXNlcjEyNTEwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/125105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tekumara", "html_url": "https://github.com/tekumara", "followers_url": "https://api.github.com/users/tekumara/followers", "following_url": "https://api.github.com/users/tekumara/following{/other_user}", "gists_url": "https://api.github.com/users/tekumara/gists{/gist_id}", "starred_url": "https://api.github.com/users/tekumara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tekumara/subscriptions", "organizations_url": "https://api.github.com/users/tekumara/orgs", "repos_url": "https://api.github.com/users/tekumara/repos", "events_url": "https://api.github.com/users/tekumara/events{/privacy}", "received_events_url": "https://api.github.com/users/tekumara/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-07-30T05:29:26Z", "updated_at": "2022-07-31T16:26:46Z", "closed_at": "2022-07-30T21:12:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When creating an instance without a keypair, moto describes the instance as having a keypair called`None`:\r\n\r\n```python\r\nimport boto3\r\nfrom moto import mock_ec2\r\n\r\nmock = mock_ec2()\r\nmock.start()\r\n\r\nec2_client = boto3.client(\"ec2\", region_name=\"us-east-1\")\r\nec2_client.run_instances(\r\n    MaxCount=1,\r\n    MinCount=1,\r\n)\r\n\r\nresponse = ec2_client.describe_instances()\r\n\r\n# the following is true\r\nassert response['Reservations'][0]['Instances'][0]['KeyName'] == 'None'\r\n```\r\n\r\nHowever the EC2 describe instances API will return a response without the KeyName field for EC2 instances without a keypair.\r\n \r\n moto 3.1.16", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5346/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5346/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5342", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5342/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5342/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5342/events", "html_url": "https://github.com/getmoto/moto/issues/5342", "id": 1321156302, "node_id": "I_kwDOAH5NfM5Ovz7O", "number": 5342, "title": "Jinja2 template name must be string or Template type", "user": {"login": "TimothyLoyer", "id": 1606132, "node_id": "MDQ6VXNlcjE2MDYxMzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1606132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimothyLoyer", "html_url": "https://github.com/TimothyLoyer", "followers_url": "https://api.github.com/users/TimothyLoyer/followers", "following_url": "https://api.github.com/users/TimothyLoyer/following{/other_user}", "gists_url": "https://api.github.com/users/TimothyLoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimothyLoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimothyLoyer/subscriptions", "organizations_url": "https://api.github.com/users/TimothyLoyer/orgs", "repos_url": "https://api.github.com/users/TimothyLoyer/repos", "events_url": "https://api.github.com/users/TimothyLoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/TimothyLoyer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-07-28T15:52:30Z", "updated_at": "2022-07-29T17:41:15Z", "closed_at": "2022-07-29T17:41:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Moto [creates template names based on the Python memory `id()`](https://github.com/spulec/moto/blob/c0ce38dba888af7abccec7edec629747f5e15e21/moto/core/responses.py#L112), causing them to be set as integers. Newer versions of [Jinja specify that the name must be a string or a Jinja Template](https://jinja.palletsprojects.com/en/3.1.x/api/#jinja2.Environment.get_template). This can result in unexpected behavior in other packages which are expecting a string.\r\n\r\nIt seems like wrapping the call to `id()` with `str()` could be enough to remedy this issue.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5342/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5342/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5341", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5341/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5341/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5341/events", "html_url": "https://github.com/getmoto/moto/issues/5341", "id": 1320830824, "node_id": "I_kwDOAH5NfM5Oukdo", "number": 5341, "title": "Moto server hangs with the latest version of werkzeug (v2.2.1)", "user": {"login": "svetlin-mladenov", "id": 639378, "node_id": "MDQ6VXNlcjYzOTM3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/639378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svetlin-mladenov", "html_url": "https://github.com/svetlin-mladenov", "followers_url": "https://api.github.com/users/svetlin-mladenov/followers", "following_url": "https://api.github.com/users/svetlin-mladenov/following{/other_user}", "gists_url": "https://api.github.com/users/svetlin-mladenov/gists{/gist_id}", "starred_url": "https://api.github.com/users/svetlin-mladenov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svetlin-mladenov/subscriptions", "organizations_url": "https://api.github.com/users/svetlin-mladenov/orgs", "repos_url": "https://api.github.com/users/svetlin-mladenov/repos", "events_url": "https://api.github.com/users/svetlin-mladenov/events{/privacy}", "received_events_url": "https://api.github.com/users/svetlin-mladenov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2174001772, "node_id": "MDU6TGFiZWwyMTc0MDAxNzcy", "url": "https://api.github.com/repos/getmoto/moto/labels/dependency-management", "name": "dependency-management", "color": "b8c9fc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2022-07-28T12:04:01Z", "updated_at": "2022-10-21T20:56:47Z", "closed_at": "2022-10-17T19:07:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is what I do:\r\n```bash\r\nmamba env create -n test-moto  # this creates a clean environment.\r\nconda activate test-moto\r\npip install moto  # OR mamba install moto -c conda-forge\r\nmoto_server -p 5555\r\n```\r\nthen in a different terminal I run\r\n```bash\r\ncurl \"http://localhost:5555/\"\r\n```\r\n\r\nExpected behavior:\r\nThe `curl` should immediately return a result.\r\n\r\nActual behavior:\r\nThe `moto_server` hangs. The process is at 100% CPU  usage so maybe it is busy waiting for something (just a guess).\r\n\r\nIf `werkzeug` is manually downgraded to v2.1.0 (`pip install Werkzeug=2.1.0`) or previous everything works as expected.\r\n\r\nHere is my complete `pip freeze`:\r\n```\r\n-- edit by @bblommers - removed to clean the thread a bit\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5341/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5341/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5329", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5329/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5329/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5329/events", "html_url": "https://github.com/getmoto/moto/issues/5329", "id": 1316450336, "node_id": "I_kwDOAH5NfM5Od3Ag", "number": 5329, "title": "urllib3.exceptions.ReadTimeoutError: AWSHTTPConnectionPool when connecting to moto server", "user": {"login": "MamedovaMaria", "id": 47032302, "node_id": "MDQ6VXNlcjQ3MDMyMzAy", "avatar_url": "https://avatars.githubusercontent.com/u/47032302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MamedovaMaria", "html_url": "https://github.com/MamedovaMaria", "followers_url": "https://api.github.com/users/MamedovaMaria/followers", "following_url": "https://api.github.com/users/MamedovaMaria/following{/other_user}", "gists_url": "https://api.github.com/users/MamedovaMaria/gists{/gist_id}", "starred_url": "https://api.github.com/users/MamedovaMaria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MamedovaMaria/subscriptions", "organizations_url": "https://api.github.com/users/MamedovaMaria/orgs", "repos_url": "https://api.github.com/users/MamedovaMaria/repos", "events_url": "https://api.github.com/users/MamedovaMaria/events{/privacy}", "received_events_url": "https://api.github.com/users/MamedovaMaria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2174001772, "node_id": "MDU6TGFiZWwyMTc0MDAxNzcy", "url": "https://api.github.com/repos/getmoto/moto/labels/dependency-management", "name": "dependency-management", "color": "b8c9fc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2022-07-25T08:21:03Z", "updated_at": "2022-08-05T22:17:31Z", "closed_at": "2022-08-05T22:17:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "(1) I am running a standalone moto_server on a localhost on port 5000 with:\r\n- moto version 3.1.16\r\n- boto3 version 1.24.36\r\n- botocore version 1.27.36\r\n\r\nI am trying to create a bucket via:\r\n```\r\n  server_client = boto3.client(\"s3\", endpoint_url=\"http://127.0.0.1:5000\", aws_access_key_id=\"test\", aws_secret_access_key=\"test\")\r\n  server_client.create_bucket(Bucket=\"my-test-bucket\")\r\n```\r\n\r\n(2) I am getting a socket timeout exception. \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 426, in _make_request\r\n    six.raise_from(e, None)\r\n  File \"<string>\", line 3, in raise_from\r\n  File \"/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 421, in _make_request\r\n    httplib_response = conn.getresponse()\r\n  File \"/..pyenv/versions/3.9.6/lib/python3.9/http/client.py\", line 1349, in getresponse\r\n    response.begin()\r\n  File \"/..pyenv/versions/3.9.6/lib/python3.9/http/client.py\", line 316, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/..pyenv/versions/3.9.6/lib/python3.9/http/client.py\", line 277, in _read_status\r\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\r\n  File \"/..pyenv/versions/3.9.6/lib/python3.9/socket.py\", line 704, in readinto\r\n    return self._sock.recv_into(b)\r\nsocket.timeout: timed out\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/lib/python3.9/site-packages/botocore/httpsession.py\", line 253, in send\r\n    urllib_response = conn.urlopen(\r\n  File \"/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 726, in urlopen\r\ntearDown\r\n    retries = retries.increment(\r\n  File \"/lib/python3.9/site-packages/urllib3/util/retry.py\", line 386, in increment\r\n    raise six.reraise(type(error), error, _stacktrace)\r\n  File \"/lib/python3.9/site-packages/urllib3/packages/six.py\", line 735, in reraise\r\n    raise value\r\n  File \"/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 670, in urlopen\r\n    httplib_response = self._make_request(\r\n  File \"/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 428, in _make_request\r\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\r\n  File \"/lib/python3.9/site-packages/urllib3/connectionpool.py\", line 335, in _raise_timeout\r\n    raise ReadTimeoutError(\r\nurllib3.exceptions.ReadTimeoutError: AWSHTTPConnectionPool(host='127.0.0.1', port=5000): Read timed out. (read timeout=60)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/xx/moto_test.py\", line 28, in test_load_data_using_decorators\r\n    server_client.create_bucket(Bucket=\"my-test-bucket\")\r\n  File \"/lib/python3.9/site-packages/botocore/client.py\", line 357, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/lib/python3.9/site-packages/botocore/client.py\", line 647, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"/lib/python3.9/site-packages/botocore/client.py\", line 667, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/lib/python3.9/site-packages/botocore/endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/lib/python3.9/site-packages/botocore/endpoint.py\", line 136, in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\n  File \"/lib/python3.9/site-packages/botocore/endpoint.py\", line 228, in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n  File \"/lib/python3.9/site-packages/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/lib/python3.9/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/lib/python3.9/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/lib/python3.9/site-packages/botocore/retryhandler.py\", line 183, in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n  File \"/lib/python3.9/site-packages/botocore/retryhandler.py\", line 250, in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\n  File \"/lib/python3.9/site-packages/botocore/retryhandler.py\", line 277, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"/lib/python3.9/site-packages/botocore/retryhandler.py\", line 316, in __call__\r\n    checker_response = checker(attempt_number, response,\r\n  File \"/lib/python3.9/site-packages/botocore/retryhandler.py\", line 222, in __call__\r\n    return self._check_caught_exception(\r\n  File \"/lib/python3.9/site-packages/botocore/retryhandler.py\", line 359, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"/lib/python3.9/site-packages/botocore/endpoint.py\", line 200, in _do_get_response\r\n    http_response = self._send(request)\r\n  File \"/lib/python3.9/site-packages/botocore/endpoint.py\", line 244, in _send\r\n    return self.http_session.send(request)\r\n  File \"/lib/python3.9/site-packages/botocore/httpsession.py\", line 288, in send\r\n    raise ReadTimeoutError(endpoint_url=request.url, error=e)\r\nbotocore.exceptions.ReadTimeoutError: Read timeout on endpoint URL: \"http://127.0.0.1:5000/my-test-bucket\"\r\n```\r\n\r\n(3) Additionally, the rest api is not accessible via http://127.0.0.1:5000/moto-api \r\n\r\n```\r\n root@xxx:~# moto_server -H 0.0.0.0 &\r\n * Running on all addresses (0.0.0.0)\r\n   WARNING: This is a development server. Do not use it in a production deployment.\r\n * Running on http://127.0.0.1:5000\r\n127.0.0.1 - - [25/Jul/2022 08:14:43] \"GET /moto-api HTTP/1.1\" 404 -\r\n```\r\n\r\n```\r\nroot@xxx:~# curl http://127.0.0.1:5000/moto-api\r\n127.0.0.1 - - [25/Jul/2022 08:20:08] \"GET /moto-api HTTP/1.1\" 404 -\r\n<!doctype html>\r\n<html lang=en>\r\n<title>404 Not Found</title>\r\n<h1>Not Found</h1>\r\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5329/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5329/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5327", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5327/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5327/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5327/events", "html_url": "https://github.com/getmoto/moto/issues/5327", "id": 1315934708, "node_id": "I_kwDOAH5NfM5Ob5H0", "number": 5327, "title": "AutoscalingGroup with LaunchTemplate and no version throws 500", "user": {"login": "hans-d", "id": 46201, "node_id": "MDQ6VXNlcjQ2MjAx", "avatar_url": "https://avatars.githubusercontent.com/u/46201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hans-d", "html_url": "https://github.com/hans-d", "followers_url": "https://api.github.com/users/hans-d/followers", "following_url": "https://api.github.com/users/hans-d/following{/other_user}", "gists_url": "https://api.github.com/users/hans-d/gists{/gist_id}", "starred_url": "https://api.github.com/users/hans-d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hans-d/subscriptions", "organizations_url": "https://api.github.com/users/hans-d/orgs", "repos_url": "https://api.github.com/users/hans-d/repos", "events_url": "https://api.github.com/users/hans-d/events{/privacy}", "received_events_url": "https://api.github.com/users/hans-d/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-07-24T15:20:26Z", "updated_at": "2022-08-23T16:13:55Z", "closed_at": "2022-08-23T16:13:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nAWS_ACCESS_KEY_ID=1 AWS_SECRET_ACCESS_KEY=1 AWS_DEFAULT_REGION=us-east-1 aws  --endpoint=http://127.0.0.1:5000 autoscaling create-auto-scaling-group --auto-scaling-group-name group1 --min-size 1 --max-size 10 --launch-template 'LaunchTemplateName=tmpl' --availability-zones us-east-1a\r\n```\r\nresults in\r\n```\r\nUnable to parse response (syntax error: line 1, column 0), invalid XML received. Further retries may succeed:\r\nb'<!doctype html>\\n<html lang=en>\\n<title>500 Internal Server Error</title>\\n<h1>Internal Server Error</h1>\\n<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>\\n'\r\n```\r\n\r\n```\r\n127.0.0.1 - - [24/Jul/2022 17:18:04] \"POST / HTTP/1.1\" 500 -\r\nError on request:\r\nTraceback (most recent call last):\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/werkzeug/serving.py\", line 335, in run_wsgi\r\n    execute(self.server.app)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/werkzeug/serving.py\", line 322, in execute\r\n    application_iter = app(environ, start_response)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/moto_server/werkzeug_app.py\", line 240, in __call__\r\n    return backend_app(environ, start_response)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask/app.py\", line 2091, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask/app.py\", line 2076, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask_cors/extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask/app.py\", line 2073, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask/app.py\", line 1519, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask_cors/extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask/app.py\", line 1517, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask/app.py\", line 1503, in dispatch_request\r\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/core/utils.py\", line 128, in __call__\r\n    result = self.callback(request, request.url, dict(request.headers))\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/core/responses.py\", line 205, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/core/responses.py\", line 318, in _dispatch\r\n    return self.call_action()\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/core/responses.py\", line 408, in call_action\r\n    response = method()\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/autoscaling/responses.py\", line 80, in create_auto_scaling_group\r\n    self.autoscaling_backend.create_auto_scaling_group(\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/autoscaling/models.py\", line 817, in create_auto_scaling_group\r\n    group = FakeAutoScalingGroup(\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/autoscaling/models.py\", line 320, in __init__\r\n    self._set_launch_configuration(launch_config_name, launch_template)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/autoscaling/models.py\", line 419, in _set_launch_configuration\r\n    self.launch_template_version = launch_template[\"version\"]\r\nKeyError: 'version'\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5327/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5326", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5326/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5326/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5326/events", "html_url": "https://github.com/getmoto/moto/issues/5326", "id": 1315893428, "node_id": "I_kwDOAH5NfM5ObvC0", "number": 5326, "title": "Autoscaling with missing availabilityZones and launchTemplate results in broken dashboard", "user": {"login": "hans-d", "id": 46201, "node_id": "MDQ6VXNlcjQ2MjAx", "avatar_url": "https://avatars.githubusercontent.com/u/46201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hans-d", "html_url": "https://github.com/hans-d", "followers_url": "https://api.github.com/users/hans-d/followers", "following_url": "https://api.github.com/users/hans-d/following{/other_user}", "gists_url": "https://api.github.com/users/hans-d/gists{/gist_id}", "starred_url": "https://api.github.com/users/hans-d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hans-d/subscriptions", "organizations_url": "https://api.github.com/users/hans-d/orgs", "repos_url": "https://api.github.com/users/hans-d/repos", "events_url": "https://api.github.com/users/hans-d/events{/privacy}", "received_events_url": "https://api.github.com/users/hans-d/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-07-24T12:23:35Z", "updated_at": "2022-08-23T16:09:36Z", "closed_at": "2022-08-23T16:09:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\nfresh install of moto, run via `moto_server`\r\n\r\nterraform json fragments (generated)\r\n```\r\n   \"aws_autoscaling_group\": {\r\n      \"ec2_auto_16C147B8\": {\r\n        \"//\": {\r\n          \"metadata\": {\r\n            \"path\": \"proj1/ec2/auto\",\r\n            \"uniqueId\": \"ec2_auto_16C147B8\"\r\n          }\r\n        },\r\n        \"launch_template\": {\r\n          \"id\": \"${aws_launch_template.ec2_tmpl_7F4E28E6.id}\",\r\n          \"version\": \"$Default\"\r\n        },\r\n        \"max_size\": 10,\r\n        \"min_size\": 1\r\n      }\r\n \r\n   \"aws_launch_template\": {\r\n      \"ec2_tmpl_7F4E28E6\": {\r\n        \"//\": {\r\n          \"metadata\": {\r\n            \"path\": \"proj1/ec2/tmpl\",\r\n            \"uniqueId\": \"ec2_tmpl_7F4E28E6\"\r\n          }\r\n        },\r\n        \"image_id\": \"${data.aws_ami.ec2_ami_086DC4ED.id}\",\r\n        \"instance_type\": \"t2.micro\"\r\n      }\r\n    }\r\n\r\n```\r\n\r\nterraform output:\r\n```\r\n[2022-07-24T14:16:26.667] [ERROR] default - \u2577\r\n\u2502 Error: creating Auto Scaling Group (terraform-20220724121556627800000004): :\r\n\u2502 \tstatus code: 400, request id: 7a62c49f-347e-4fc4-9331-6e8eEXAMPLE\r\n\u2502\r\n\u2502   with aws_autoscaling_group.ec2_auto_16C147B8,\r\n\u2502   on cdk.tf.json line 115, in resource.aws_autoscaling_group.ec2_auto_16C147B8:\r\n\u2502  115:       }\r\n```\r\nlogging output moto server:\r\n```\r\n127.0.0.1 - - [24/Jul/2022 14:15:56] \"POST / HTTP/1.1\" 400 -\r\n```\r\nwhen going to `http://127.0.0.1:5000/moto-api/#`\r\n- screen remains blank (only black header visible)\r\nlogging output moto server:\r\n```\r\n127.0.0.1 - - [24/Jul/2022 14:16:46] \"GET /moto-api/data.json HTTP/1.1\" 500 -\r\nError on request:\r\nTraceback (most recent call last):\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/werkzeug/serving.py\", line 335, in run_wsgi\r\n    execute(self.server.app)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/werkzeug/serving.py\", line 322, in execute\r\n    application_iter = app(environ, start_response)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/moto_server/werkzeug_app.py\", line 240, in __call__\r\n    return backend_app(environ, start_response)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask/app.py\", line 2091, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask/app.py\", line 2076, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask_cors/extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask/app.py\", line 2073, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask/app.py\", line 1519, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask_cors/extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask/app.py\", line 1517, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/flask/app.py\", line 1503, in dispatch_request\r\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/core/utils.py\", line 128, in __call__\r\n    result = self.callback(request, request.url, dict(request.headers))\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/moto_api/_internal/responses.py\", line 56, in model_data\r\n    json.dumps(getattr(instance, attr))\r\n  File \"/Users/hansdonner/.local/share/virtualenvs/proj1-LvnwPjOk/lib/python3.9/site-packages/moto/autoscaling/models.py\", line 511, in image_id\r\n    if self.launch_template:\r\nAttributeError: 'FakeAutoScalingGroup' object has no attribute 'launch_template'\r\n```\r\n\r\nExpecting:\r\n- more verbose logging on moto why requests are returning errors\r\n- autoscaling group to be created without error\r\n- dashboard to be functioning\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5326/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5326/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5310", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5310/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5310/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5310/events", "html_url": "https://github.com/getmoto/moto/issues/5310", "id": 1309118519, "node_id": "I_kwDOAH5NfM5OB5A3", "number": 5310, "title": "RDS aurora-mysql DB instance engine type", "user": {"login": "martijnvdp", "id": 73637849, "node_id": "MDQ6VXNlcjczNjM3ODQ5", "avatar_url": "https://avatars.githubusercontent.com/u/73637849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martijnvdp", "html_url": "https://github.com/martijnvdp", "followers_url": "https://api.github.com/users/martijnvdp/followers", "following_url": "https://api.github.com/users/martijnvdp/following{/other_user}", "gists_url": "https://api.github.com/users/martijnvdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/martijnvdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martijnvdp/subscriptions", "organizations_url": "https://api.github.com/users/martijnvdp/orgs", "repos_url": "https://api.github.com/users/martijnvdp/repos", "events_url": "https://api.github.com/users/martijnvdp/events{/privacy}", "received_events_url": "https://api.github.com/users/martijnvdp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-07-19T07:45:10Z", "updated_at": "2022-07-26T16:12:51Z", "closed_at": "2022-07-26T16:12:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\nI cant seem to create a rds db instance with instance type aurora-mysql with the latest version\r\n\r\nerror:\r\n```hcl engine = 'aurora-mysql', storage_type = 'gp2'\r\n\r\n    @staticmethod\r\n    def default_allocated_storage(engine, storage_type):\r\n>       return {\r\n            \"aurora\": {\"gp2\": 0, \"io1\": 0, \"standard\": 0},\r\n            \"mysql\": {\"gp2\": 20, \"io1\": 100, \"standard\": 5},\r\n            \"mariadb\": {\"gp2\": 20, \"io1\": 100, \"standard\": 5},\r\n            \"postgres\": {\"gp2\": 20, \"io1\": 100, \"standard\": 5},\r\n            \"oracle-ee\": {\"gp2\": 20, \"io1\": 100, \"standard\": 10},\r\n            \"oracle-se2\": {\"gp2\": 20, \"io1\": 100, \"standard\": 10},\r\n            \"oracle-se1\": {\"gp2\": 20, \"io1\": 100, \"standard\": 10},\r\n            \"oracle-se\": {\"gp2\": 20, \"io1\": 100, \"standard\": 10},\r\n            \"sqlserver-ee\": {\"gp2\": 200, \"io1\": 200, \"standard\": 200},\r\n            \"sqlserver-ex\": {\"gp2\": 20, \"io1\": 100, \"standard\": 20},\r\n            \"sqlserver-se\": {\"gp2\": 200, \"io1\": 200, \"standard\": 200},\r\n            \"sqlserver-web\": {\"gp2\": 20, \"io1\": 100, \"standard\": 20},\r\n        }[engine][storage_type]\r\nE       KeyError: 'aurora-mysql\r\n```\r\n\r\nto reproduce:\r\n```hcl\r\n@pytest.fixture\r\ndef mysql_db_instance(rds):\r\n    rds_cluster_instance = rds.create_db_instance(\r\n        DBClusterIdentifier=\"test\",\r\n        DBInstanceIdentifier=\"test-01\",\r\n        DBInstanceClass=\"db.r5.large\",\r\n        Engine=\"aurora-mysql\",\r\n    )\r\n    yield\r\n```\r\n\r\nThe valid values should be as on the aws site https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html:\r\n\r\n```hcl\r\naurora (for MySQL 5.6-compatible Aurora)\r\naurora-mysql (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)\r\naurora-postgresql\r\ncustom-oracle-ee (for RDS Custom for Oracle instances)\r\ncustom-sqlserver-ee (for RDS Custom for SQL Server instances)\r\ncustom-sqlserver-se (for RDS Custom for SQL Server instances)\r\ncustom-sqlserver-web (for RDS Custom for SQL Server instances)\r\nmariadb\r\nmysql\r\noracle-ee\r\noracle-ee-cdb\r\noracle-se2\r\noracle-se2-cdb\r\npostgres\r\nsqlserver-ee\r\nsqlserver-se\r\nsqlserver-ex\r\nsqlserver-web\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5310/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5310/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5280", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5280/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5280/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5280/events", "html_url": "https://github.com/getmoto/moto/issues/5280", "id": 1290277464, "node_id": "I_kwDOAH5NfM5M6BJY", "number": 5280, "title": "Cognito client describe_user_pool does not return with associated domain", "user": {"login": "janoskranczler", "id": 6105557, "node_id": "MDQ6VXNlcjYxMDU1NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6105557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janoskranczler", "html_url": "https://github.com/janoskranczler", "followers_url": "https://api.github.com/users/janoskranczler/followers", "following_url": "https://api.github.com/users/janoskranczler/following{/other_user}", "gists_url": "https://api.github.com/users/janoskranczler/gists{/gist_id}", "starred_url": "https://api.github.com/users/janoskranczler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janoskranczler/subscriptions", "organizations_url": "https://api.github.com/users/janoskranczler/orgs", "repos_url": "https://api.github.com/users/janoskranczler/repos", "events_url": "https://api.github.com/users/janoskranczler/events{/privacy}", "received_events_url": "https://api.github.com/users/janoskranczler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-06-30T15:10:18Z", "updated_at": "2022-07-03T09:27:53Z", "closed_at": "2022-07-03T02:52:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI would like to test our programmatically created user pool's domain but it seems that the user pool's domain property is not implemented in the `describe_user_pool()` response in moto.\r\nI'm using boto version `1.24.20` and moto version `3.1.16`.\r\n\r\nI've created a test to reproduce the error:\r\n```python\r\nimport boto3\r\nfrom moto import mock_cognitoidp\r\n\r\n\r\n@mock_cognitoidp\r\ndef test_moto_cognito_user_pool_domain():\r\n    client = boto3.client(\"cognito-idp\")\r\n    user_pool_id = client.create_user_pool(PoolName='TestPool')['UserPool']['Id']\r\n    client.create_user_pool_domain(\r\n        Domain='test-domain123',\r\n        UserPoolId=user_pool_id\r\n    )\r\n\r\n    user_pool = client.describe_user_pool(UserPoolId=user_pool_id)['UserPool']\r\n\r\n    assert user_pool['Domain'] == 'test-domain123'\r\n```\r\n\r\nThis test fails on the last line with `KeyError: 'Domain'`, however, it is working with boto.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5280/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5280/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5279", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5279/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5279/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5279/events", "html_url": "https://github.com/getmoto/moto/issues/5279", "id": 1290220832, "node_id": "I_kwDOAH5NfM5M5zUg", "number": 5279, "title": "Username instead of email in Cognito JWT access token claims", "user": {"login": "mglowinski93", "id": 31914443, "node_id": "MDQ6VXNlcjMxOTE0NDQz", "avatar_url": "https://avatars.githubusercontent.com/u/31914443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglowinski93", "html_url": "https://github.com/mglowinski93", "followers_url": "https://api.github.com/users/mglowinski93/followers", "following_url": "https://api.github.com/users/mglowinski93/following{/other_user}", "gists_url": "https://api.github.com/users/mglowinski93/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglowinski93/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglowinski93/subscriptions", "organizations_url": "https://api.github.com/users/mglowinski93/orgs", "repos_url": "https://api.github.com/users/mglowinski93/repos", "events_url": "https://api.github.com/users/mglowinski93/events{/privacy}", "received_events_url": "https://api.github.com/users/mglowinski93/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-06-30T14:29:07Z", "updated_at": "2022-11-10T17:08:58Z", "closed_at": "2022-11-10T17:08:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\nI would like to ask about `email` being present in Cognito JWT access token claims.\r\nAccording to [congito documentation ](https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-the-access-token.html) it should include `username` and not `email`.\r\n\r\nI don't see any option to change that behaviour based on `create_jwt` method:\r\n```python\r\n    def create_access_token(self, client_id, username):\r\n        extra_data = {}\r\n        user = self._get_user(username)\r\n        if len(user.groups) > 0:\r\n            extra_data[\"cognito:groups\"] = [group.group_name for group in user.groups]\r\n\r\n        access_token, expires_in = self.create_jwt(\r\n            client_id, username, \"access\", extra_data=extra_data\r\n        )\r\n        self.access_tokens[access_token] = (client_id, username)\r\n        return access_token, expires_in\r\n\r\n    def create_jwt(\r\n        self, client_id, username, token_use, expires_in=60 * 60, extra_data=None\r\n    ):\r\n        now = int(time.time())\r\n        payload = {\r\n            \"iss\": \"https://cognito-idp.{}.amazonaws.com/{}\".format(\r\n                self.region, self.id\r\n            ),\r\n            \"sub\": self._get_user(username).id,\r\n            \"aud\": client_id,\r\n            \"token_use\": token_use,\r\n            \"auth_time\": now,\r\n            \"exp\": now + expires_in,\r\n            \"email\": flatten_attrs(self._get_user(username).attributes).get(\"email\"),\r\n        }\r\n        payload.update(extra_data or {})\r\n        headers = {\"kid\": \"dummy\"}  # KID as present in jwks-public.json\r\n\r\n        return (\r\n            jws.sign(payload, self.json_web_key, headers, algorithm=\"RS256\"),\r\n            expires_in,\r\n        )\r\n```\r\n\r\nDo you consider that as a bug or kind of deprecation?\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5279/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5279/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5276", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5276/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5276/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5276/events", "html_url": "https://github.com/getmoto/moto/issues/5276", "id": 1289335738, "node_id": "I_kwDOAH5NfM5M2bO6", "number": 5276, "title": "Calling emr run_job_flow with AutoTerminationPolicy causes TypeError", "user": {"login": "matthewlv30", "id": 6581125, "node_id": "MDQ6VXNlcjY1ODExMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6581125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewlv30", "html_url": "https://github.com/matthewlv30", "followers_url": "https://api.github.com/users/matthewlv30/followers", "following_url": "https://api.github.com/users/matthewlv30/following{/other_user}", "gists_url": "https://api.github.com/users/matthewlv30/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewlv30/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewlv30/subscriptions", "organizations_url": "https://api.github.com/users/matthewlv30/orgs", "repos_url": "https://api.github.com/users/matthewlv30/repos", "events_url": "https://api.github.com/users/matthewlv30/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewlv30/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-06-29T21:45:18Z", "updated_at": "2022-08-13T20:36:30Z", "closed_at": "2022-08-13T20:36:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\nWhen calling `run_job_flow` with `AutoTerminationPolicy` as a parameter like. `{\"IdleTimeout\" : 123} `causes a TypeError with Exception TypeError: Unknown type long. However AutoTerminationPolicy expect a dict with integer value. \r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5276/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5276/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5269", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5269/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5269/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5269/events", "html_url": "https://github.com/getmoto/moto/issues/5269", "id": 1286008990, "node_id": "I_kwDOAH5NfM5MpvCe", "number": 5269, "title": "Missing requirement?", "user": {"login": "tcmnal", "id": 105016801, "node_id": "U_kgDOBkJt4Q", "avatar_url": "https://avatars.githubusercontent.com/u/105016801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tcmnal", "html_url": "https://github.com/tcmnal", "followers_url": "https://api.github.com/users/tcmnal/followers", "following_url": "https://api.github.com/users/tcmnal/following{/other_user}", "gists_url": "https://api.github.com/users/tcmnal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tcmnal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tcmnal/subscriptions", "organizations_url": "https://api.github.com/users/tcmnal/orgs", "repos_url": "https://api.github.com/users/tcmnal/repos", "events_url": "https://api.github.com/users/tcmnal/events{/privacy}", "received_events_url": "https://api.github.com/users/tcmnal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2174001772, "node_id": "MDU6TGFiZWwyMTc0MDAxNzcy", "url": "https://api.github.com/repos/getmoto/moto/labels/dependency-management", "name": "dependency-management", "color": "b8c9fc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-06-27T15:56:12Z", "updated_at": "2022-11-23T21:55:29Z", "closed_at": "2022-06-28T00:05:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently switched from moto 3.1.14 to 3.1.15.\r\n\r\nNow when using the @mock_ssm decorator, I get a ModuleNotFoundError for openapi_spec_validator. Minimum code example :\r\n\r\n```\r\nfrom moto import mock_ssm\r\n\r\n@mock_ssm\r\ndef test_ssm():\r\n   client = boto3.client('ssm')\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"<bug-script>\", line 4, in <module>\r\n    def test_ssm():\r\n  File \"...\\lib\\site-packages\\moto\\__init__.py\", line 30, in f\r\n    module = importlib.import_module(module_name, \"moto\")\r\n  File \"C:\\Python310\\lib\\importlib\\__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1050, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 1027, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 1006, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 688, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 883, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 241, in _call_with_frames_removed\r\n  File \"...\\lib\\site-packages\\moto\\ssm\\__init__.py\", line 1, in <module>\r\n    from .models import ssm_backends\r\n  File \"...\\lib\\site-packages\\moto\\ssm\\models.py\", line 10, in <module>\r\n    from moto.ec2 import ec2_backends\r\n  File \"...\\lib\\site-packages\\moto\\ec2\\__init__.py\", line 1, in <module>\r\n    from .models import ec2_backends\r\n  File \"...\\lib\\site-packages\\moto\\ec2\\models\\__init__.py\", line 14, in <module>\r\n    from .elastic_block_store import EBSBackend\r\n  File \"...\\lib\\site-packages\\moto\\ec2\\models\\elastic_block_store.py\", line 2, in <module>\r\n    from moto.kms import kms_backends\r\n  File \"...\\lib\\site-packages\\moto\\kms\\__init__.py\", line 1, in <module>\r\n    from .models import kms_backends\r\n  File \"...\\lib\\site-packages\\moto\\kms\\models.py\", line 9, in <module>\r\n    from moto.apigateway.exceptions import ValidationException\r\n  File \"C:\\dev\\python-venvs\\testing-cfct\\lib\\site-packages\\moto\\apigateway\\__init__.py\", line 1, in <module>\r\n    from .models import apigateway_backends\r\n  File \"...\\lib\\site-packages\\moto\\apigateway\\models.py\", line 9, in <module>\r\n    from openapi_spec_validator import validate_spec\r\nModuleNotFoundError: No module named 'openapi_spec_validator'\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5269/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5269/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5267", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5267/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5267/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5267/events", "html_url": "https://github.com/getmoto/moto/issues/5267", "id": 1285019353, "node_id": "I_kwDOAH5NfM5Ml9bZ", "number": 5267, "title": "3.1.15 is broken with openapi_spec_validator dependence", "user": {"login": "timhaines", "id": 19700, "node_id": "MDQ6VXNlcjE5NzAw", "avatar_url": "https://avatars.githubusercontent.com/u/19700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timhaines", "html_url": "https://github.com/timhaines", "followers_url": "https://api.github.com/users/timhaines/followers", "following_url": "https://api.github.com/users/timhaines/following{/other_user}", "gists_url": "https://api.github.com/users/timhaines/gists{/gist_id}", "starred_url": "https://api.github.com/users/timhaines/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timhaines/subscriptions", "organizations_url": "https://api.github.com/users/timhaines/orgs", "repos_url": "https://api.github.com/users/timhaines/repos", "events_url": "https://api.github.com/users/timhaines/events{/privacy}", "received_events_url": "https://api.github.com/users/timhaines/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2174001772, "node_id": "MDU6TGFiZWwyMTc0MDAxNzcy", "url": "https://api.github.com/repos/getmoto/moto/labels/dependency-management", "name": "dependency-management", "color": "b8c9fc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-06-26T20:10:25Z", "updated_at": "2022-07-05T12:07:08Z", "closed_at": "2022-06-27T10:51:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "My tests run successfully with 3.1.14.\r\n\r\nWith 3.1.15 they error, with:\r\n\r\n```\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/moto/__init__.py:[30](https://github.com/<snip>i/runs/70630955?check_suite_focus=true#step:6:31): in f\r\n    module = importlib.import_module(module_name, \"moto\")\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/importlib/__init__.py:127: in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/moto/ssm/__init__.py:1: in <module>\r\n    from .models import ssm_backends\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/moto/ssm/models.py:10: in <module>\r\n    from moto.ec2 import ec2_backends\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/moto/ec2/__init__.py:1: in <module>\r\n    from .models import ec2_backends\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/moto/ec2/models/__init__.py:14: in <module>\r\n    from .elastic_block_store import EBSBackend\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/moto/ec2/models/elastic_block_store.py:2: in <module>\r\n    from moto.kms import kms_backends\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/moto/kms/__init__.py:1: in <module>\r\n    from .models import kms_backends\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/moto/kms/models.py:9: in <module>\r\n    from moto.apigateway.exceptions import ValidationException\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/moto/apigateway/__init__.py:1: in <module>\r\n    from .models import apigateway_backends\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n    from __future__ import absolute_import\r\n    import random\r\n    import string\r\n    import re\r\n    from collections import defaultdict\r\n    from copy import copy\r\n>   from openapi_spec_validator import validate_spec\r\nE   ModuleNotFoundError: No module named 'openapi_spec_validator'\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/moto/apigateway/models.py:9: ModuleNotFoundError\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5267/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5267/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5256", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5256/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5256/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5256/events", "html_url": "https://github.com/getmoto/moto/issues/5256", "id": 1281483161, "node_id": "I_kwDOAH5NfM5MYeGZ", "number": 5256, "title": "Tagging count in S3 response breaks requests", "user": {"login": "Kostia-K", "id": 22246866, "node_id": "MDQ6VXNlcjIyMjQ2ODY2", "avatar_url": "https://avatars.githubusercontent.com/u/22246866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kostia-K", "html_url": "https://github.com/Kostia-K", "followers_url": "https://api.github.com/users/Kostia-K/followers", "following_url": "https://api.github.com/users/Kostia-K/following{/other_user}", "gists_url": "https://api.github.com/users/Kostia-K/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kostia-K/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kostia-K/subscriptions", "organizations_url": "https://api.github.com/users/Kostia-K/orgs", "repos_url": "https://api.github.com/users/Kostia-K/repos", "events_url": "https://api.github.com/users/Kostia-K/events{/privacy}", "received_events_url": "https://api.github.com/users/Kostia-K/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-06-23T01:40:55Z", "updated_at": "2022-06-23T20:38:23Z", "closed_at": "2022-06-23T20:38:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using `requests` to download a file from S3 using a presigned link. Here's example code where I expect it to print `b\"abc\"` but it throws an exception when calling `requests.get`.\r\n\r\n```python\r\nimport boto3\r\nimport requests\r\nfrom moto import mock_s3\r\n\r\nwith mock_s3():\r\n    s3 = boto3.client(\"s3\")\r\n    s3.create_bucket(Bucket=\"my-bucket\")\r\n    s3.put_object(\r\n        Bucket=\"my-bucket\", Key=\"test.txt\", Body=b\"abc\", Tagging=\"MyTag=value\"\r\n    )\r\n    url = s3.generate_presigned_url(\r\n        \"get_object\", Params={\"Bucket\": \"my-bucket\", \"Key\": \"test.txt\"}\r\n    )\r\n    response = requests.get(url)\r\n    print(response.content)\r\n```\r\n\r\nInstallation `pip install moto boto3 requests` using all latest versions.\r\n```\r\nboto3==1.24.15\r\nbotocore==1.27.15\r\nmoto==3.1.14\r\nrequests==2.28.0\r\nurllib3==1.26.9\r\n```\r\n\r\nTraceback\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"test_mock_s3.py\", line 14, in <module>\r\n    response = requests.get(url)\r\n  File \"/home/konstantin/test/moto/venv/lib/python3.8/site-packages/requests/api.py\", line 73, in get\r\n    return request(\"get\", url, params=params, **kwargs)\r\n  File \"/home/konstantin/test/moto/venv/lib/python3.8/site-packages/requests/api.py\", line 59, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/konstantin/test/moto/venv/lib/python3.8/site-packages/requests/sessions.py\", line 587, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/konstantin/test/moto/venv/lib/python3.8/site-packages/requests/sessions.py\", line 701, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/konstantin/test/moto/venv/lib/python3.8/site-packages/responses/__init__.py\", line 1042, in unbound_on_send\r\n    return self._on_request(adapter, request, *a, **kwargs)\r\n  File \"/home/konstantin/test/moto/venv/lib/python3.8/site-packages/responses/__init__.py\", line 1000, in _on_request\r\n    response = adapter.build_response(  # type: ignore[no-untyped-call]\r\n  File \"/home/konstantin/test/moto/venv/lib/python3.8/site-packages/requests/adapters.py\", line 312, in build_response\r\n    response.headers = CaseInsensitiveDict(getattr(resp, \"headers\", {}))\r\n  File \"/home/konstantin/test/moto/venv/lib/python3.8/site-packages/requests/structures.py\", line 44, in __init__\r\n    self.update(data, **kwargs)\r\n  File \"/usr/lib/python3.8/_collections_abc.py\", line 832, in update\r\n    self[key] = other[key]\r\n  File \"/home/konstantin/test/moto/venv/lib/python3.8/site-packages/urllib3/_collections.py\", line 158, in __getitem__\r\n    return \", \".join(val[1:])\r\nTypeError: sequence item 0: expected str instance, int found\r\n```\r\n\r\nIf you remove the `Tagging` parameter, it works as expected.\r\n\r\nSeems like it's expecting header values to be strings but the S3 mock returns an int. The culprit is this line in the `moto` code https://github.com/spulec/moto/blob/master/moto/s3/models.py#L294. If I change it to\r\n```python\r\nres[\"x-amz-tagging-count\"] = str(len(tags.keys()))\r\n```\r\nthe above code works as expected.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5256/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5256/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5205", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5205/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5205/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5205/events", "html_url": "https://github.com/getmoto/moto/issues/5205", "id": 1265265157, "node_id": "I_kwDOAH5NfM5LamoF", "number": 5205, "title": "create_vpc should never create a default vpc", "user": {"login": "jbmchuck", "id": 5964742, "node_id": "MDQ6VXNlcjU5NjQ3NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5964742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbmchuck", "html_url": "https://github.com/jbmchuck", "followers_url": "https://api.github.com/users/jbmchuck/followers", "following_url": "https://api.github.com/users/jbmchuck/following{/other_user}", "gists_url": "https://api.github.com/users/jbmchuck/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbmchuck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbmchuck/subscriptions", "organizations_url": "https://api.github.com/users/jbmchuck/orgs", "repos_url": "https://api.github.com/users/jbmchuck/repos", "events_url": "https://api.github.com/users/jbmchuck/events{/privacy}", "received_events_url": "https://api.github.com/users/jbmchuck/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-06-08T20:26:19Z", "updated_at": "2022-06-10T12:06:51Z", "closed_at": "2022-06-10T12:06:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently if no VPCs exist the create_vpc call will create a default VPC.  AFAICT in AWS CreateVpc never creates default VPCs - a separate call CreateDefaultVpc is used for this.\r\n\r\nRepro:\r\n\r\n    #!/usr/bin/env python3\r\n\r\n    import boto3\r\n    import moto\r\n\r\n    @moto.mock_ec2\r\n    def delete_all_vpcs_then_create_non_default_vpc():\r\n        client = boto3.client(\"ec2\", region_name=\"us-east-1\")\r\n        initial_vpcs = client.describe_vpcs().get(\"Vpcs\", [])\r\n        assert(len(initial_vpcs) != 0)\r\n        for initial_vpc in initial_vpcs:\r\n            client.delete_vpc(VpcId=initial_vpc[\"VpcId\"])\r\n        no_vpcs = client.describe_vpcs()[\"Vpcs\"]\r\n        assert(len(no_vpcs) == 0)\r\n        client.create_vpc(CidrBlock=\"10.0.0.0/24\")\r\n        created_vpcs = client.describe_vpcs()[\"Vpcs\"]\r\n        assert(len(created_vpcs) == 1)\r\n        assert(created_vpcs[0][\"IsDefault\"] == False)\r\n\r\n    delete_all_vpcs_then_create_non_default_vpc()\r\n\r\n...\r\n\r\n    Traceback (most recent call last):\r\n      File \"/.../mototest/./test.py\", line 20, in <module>\r\n        delete_all_vpcs_then_create_non_default_vpc()\r\n      File \"/.../mototest/venv/lib/python3.10/site-packages/moto/core/models.py\", line 120, in wrapper\r\n        result = func(*args, **kwargs)\r\n      File \"/.../mototest/./test.py\", line 18, in delete_all_vpcs_then_create_non_default_vpc\r\n        assert(created_vpcs[0][\"IsDefault\"] == False)\r\n    AssertionError\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5205/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5205/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5204", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5204/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5204/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5204/events", "html_url": "https://github.com/getmoto/moto/issues/5204", "id": 1265171787, "node_id": "I_kwDOAH5NfM5LaP1L", "number": 5204, "title": "DynamoDB: transact_write_items does not return Item in CancellationReasons", "user": {"login": "magicmark", "id": 1590756, "node_id": "MDQ6VXNlcjE1OTA3NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1590756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magicmark", "html_url": "https://github.com/magicmark", "followers_url": "https://api.github.com/users/magicmark/followers", "following_url": "https://api.github.com/users/magicmark/following{/other_user}", "gists_url": "https://api.github.com/users/magicmark/gists{/gist_id}", "starred_url": "https://api.github.com/users/magicmark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magicmark/subscriptions", "organizations_url": "https://api.github.com/users/magicmark/orgs", "repos_url": "https://api.github.com/users/magicmark/repos", "events_url": "https://api.github.com/users/magicmark/events{/privacy}", "received_events_url": "https://api.github.com/users/magicmark/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-06-08T19:03:56Z", "updated_at": "2022-09-17T09:50:32Z", "closed_at": "2022-09-17T09:50:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "moto does not appear to return `Item` under `err.response[\"CancellationReasons\"][n]` when a transaction fails, and we've set ` \"ReturnValuesOnConditionCheckFailure\": \"ALL_OLD\"`.\r\n\r\nI've created a minimal repro with a failing test case here: https://github.com/magicmark/moto-issue-demo.git\r\n\r\n```\r\n\u2554\u2550 markl@C02DG2X9MD6Q: T/tmp.TOXHwuqG/moto-issue-demo git:(main)via \ud83d\udc0d v3.8.9 \r\n\u255a\u2550 \u266a poetry show moto \r\nname         : moto\r\nversion      : 3.1.1\r\n```\r\n\r\n### Repro instructions \r\n\r\n```bash\r\n$ git clone https://github.com/magicmark/moto-issue-demo.git\r\n$ cd moto-issue-demo\r\n$ poetry install\r\n$ poetry run pytest -vvv\r\n```\r\n\r\n### Output\r\n\r\n```\r\n        try:\r\n            order_breakfast()\r\n        except BaseException as err:\r\n>           assert 'Item' in err.response[\"CancellationReasons\"][0]\r\nE           AssertionError: assert 'Item' in {'Code': 'ConditionalCheckFailed', 'Message': 'The conditional request failed'}\r\n\r\ntests/test_order_breakfast.py:40: AssertionError\r\n============================================================= short test summary info =============================================================\r\nFAILED tests/test_order_breakfast.py::test_breakfast_order - AssertionError: assert 'Item' in {'Code': 'ConditionalCheckFailed', 'Message': 'The...\r\n================================================================ 1 failed in 0.67s ================================================================\r\n```\r\n\r\n### What's the problem?\r\n\r\nWith DynamoDB+boto3, when a transaction fails due to a `ConditionExpression` failing,\r\nAND we've set `\"ReturnValuesOnConditionCheckFailure\": \"ALL_OLD\",` we should see the\r\ncurrent item in the error response.\r\n\r\nFor example, if we ran `order-breakfast` when hitting DynamoDB for real, here's the output\r\nof catching the exception and pprinting `err.reason`:\r\n\r\n```python\r\n{'CancellationReasons': [{'Code': 'ConditionalCheckFailed',\r\n                          'Item': {'customer': {'S': 'mark'},\r\n                                   'lock': {'M': {'acquired_at': {'N': '123'}}},\r\n                                   'mealtime': {'S': 'breakfast'}},\r\n                          'Message': 'The conditional request failed'}],\r\n 'Error': {'Code': 'TransactionCanceledException',\r\n           'Message': 'Transaction cancelled, please refer cancellation '\r\n                      'reasons for specific reasons [ConditionalCheckFailed]'},\r\n 'Message': 'Transaction cancelled, please refer cancellation reasons for '\r\n            'specific reasons [ConditionalCheckFailed]',\r\n 'ResponseMetadata': {'HTTPHeaders': {'connection': 'keep-alive',\r\n                                      'content-length': '393',\r\n                                      'content-type': 'application/x-amz-json-1.0',\r\n                                      'date': 'Wed, 08 Jun 2022 18:55:51 GMT',\r\n                                      'server': 'Server',\r\n                                      'x-amz-crc32': '947576560',\r\n                                      'x-amzn-requestid': 'BDBL292TOK52OSPP0GTJTTS2CVVV4KQNSO5AEMVJF66Q9ASUAAJG'},\r\n                      'HTTPStatusCode': 400,\r\n                      'RequestId': 'BDBL292TOK52OSPP0GTJTTS2CVVV4KQNSO5AEMVJF66Q9ASUAAJG',\r\n                      'RetryAttempts': 0}}\r\n```\r\n\r\nNote that we see,`Code`, `Message`, and `Item`.\r\n\r\nUnder moto, we do not see `Item`.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5204/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5204/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5199", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5199/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5199/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5199/events", "html_url": "https://github.com/getmoto/moto/issues/5199", "id": 1264175834, "node_id": "I_kwDOAH5NfM5LWcra", "number": 5199, "title": "Secret ARNs should have 6 random characters at end, not 5", "user": {"login": "mdavis-xyz", "id": 7035647, "node_id": "MDQ6VXNlcjcwMzU2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7035647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdavis-xyz", "html_url": "https://github.com/mdavis-xyz", "followers_url": "https://api.github.com/users/mdavis-xyz/followers", "following_url": "https://api.github.com/users/mdavis-xyz/following{/other_user}", "gists_url": "https://api.github.com/users/mdavis-xyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdavis-xyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdavis-xyz/subscriptions", "organizations_url": "https://api.github.com/users/mdavis-xyz/orgs", "repos_url": "https://api.github.com/users/mdavis-xyz/repos", "events_url": "https://api.github.com/users/mdavis-xyz/events{/privacy}", "received_events_url": "https://api.github.com/users/mdavis-xyz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-06-08T04:26:51Z", "updated_at": "2022-06-08T19:54:51Z", "closed_at": "2022-06-08T19:54:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When you create a secret in AWS secrets manager, the ARN is what you'd expect, plus `-xxxxxx`, where `x` is random characters.\r\n\r\nMoto already adds random characters, but 5 instead of 6 (excluding the hyphen).\r\n\r\nFor context, I'm testing code which is asserting that the ARN of a secret matches an expected secret name. So I'm checking these characters with regex.\r\n\r\nRun this code with and without the `.start()` line commented out.\r\n\r\n```\r\nimport boto3\r\nfrom moto import mock_secretsmanager\r\n\r\n#mock_secretsmanager().start()\r\n\r\nsecret_name = 'test/moto/secret'\r\n\r\nclient = boto3.client('secretsmanager')\r\n\r\nresponse = client.create_secret(\r\n    Name=secret_name,\r\n    SecretString='abc',\r\n)\r\narn = response['ARN']\r\n\r\nclient.delete_secret(\r\n    SecretId=arn,\r\n    RecoveryWindowInDays=7,\r\n)\r\n\r\n\r\nprint(f\"arn: {arn}\")\r\n```\r\n\r\nExpected result (i.e. result with `.start()` commented out)\r\n\r\n```\r\narn: arn:aws:secretsmanager:ap-southeast-2:1234:secret:test/moto/secret-1yUghW\r\n```\r\n\r\nnote that `1yUghW` is 6 characters.\r\n\r\nActual result (using moto):\r\n\r\n```\r\narn: arn:aws:secretsmanager:ap-southeast-2:123456789012:secret:test/moto/secret-MoSlv\r\n```\r\nNote that `MoSlv` is 5 characters.\r\n\r\nI think the problem is this line:\r\n\r\nhttps://github.com/spulec/moto/blob/c82b437195a455b735be261eaa9740c4117ffa14/moto/secretsmanager/utils.py#L67\r\n\r\nCan someone confirm that, so I can submit a PR?", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5199/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5199/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5183", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5183/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5183/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5183/events", "html_url": "https://github.com/getmoto/moto/issues/5183", "id": 1255608857, "node_id": "I_kwDOAH5NfM5K1xIZ", "number": 5183, "title": "mock_quicksight endpoint url pattern matching bug", "user": {"login": "Dryja", "id": 2962187, "node_id": "MDQ6VXNlcjI5NjIxODc=", "avatar_url": "https://avatars.githubusercontent.com/u/2962187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dryja", "html_url": "https://github.com/Dryja", "followers_url": "https://api.github.com/users/Dryja/followers", "following_url": "https://api.github.com/users/Dryja/following{/other_user}", "gists_url": "https://api.github.com/users/Dryja/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dryja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dryja/subscriptions", "organizations_url": "https://api.github.com/users/Dryja/orgs", "repos_url": "https://api.github.com/users/Dryja/repos", "events_url": "https://api.github.com/users/Dryja/events{/privacy}", "received_events_url": "https://api.github.com/users/Dryja/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-06-01T10:25:02Z", "updated_at": "2022-06-02T21:21:39Z", "closed_at": "2022-06-02T21:21:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Mocking Quicksight does not work when you use for example  [```create_group_membership```](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateGroupMembership.html) with member name that contains a dot.\r\n\r\nReproduced based on moto unit tests:\r\n```python\r\n@mock_quicksight\r\ndef test_quick():\r\n    ACCOUNT_ID = \"123456789012\"\r\n    user_name = \"test@email.com\"\r\n\r\n    client = boto3.client(\"quicksight\")\r\n    client.register_user(\r\n        AwsAccountId=ACCOUNT_ID,\r\n        Namespace=\"default\",\r\n        Email=\"fakeemail@example.com\",\r\n        IdentityType=\"QUICKSIGHT\",\r\n        UserName=user_name,\r\n        UserRole=\"READER\",\r\n    )\r\n    client.create_group(\r\n        AwsAccountId=ACCOUNT_ID, Namespace=\"default\", GroupName=\"group1\"\r\n    )\r\n    client.create_group_membership(\r\n        MemberName=user_name,\r\n        GroupName=\"group1\",\r\n        AwsAccountId=ACCOUNT_ID,\r\n        Namespace=\"default\",\r\n    )\r\n\r\n```\r\nThat results in exception:\r\n```\r\nbotocore.exceptions.ClientError: An error occurred (UnrecognizedClientException) when calling the CreateGroupMembership operation: The security token included in the request is invalid.\r\n```\r\nWhen you remove dot from `test@email.com` it works flawlessly. \r\n\r\nI believe its due to the fact that the pattern (`[^/.]`) used for catching namespace, groupname and username stops at dot.\r\nhttps://github.com/spulec/moto/blob/18ec060edce2c662c3fb86e0cb09c03cbd4682de/moto/quicksight/urls.py#L12-L21\r\n\r\nIt should be changed to `[^/]+` or even to `[\\u0020-\\u00FF]+` to match 1:1 with AWS docs. I can work on this and create PR.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5183/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5183/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5162", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5162/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5162/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5162/events", "html_url": "https://github.com/getmoto/moto/issues/5162", "id": 1246546237, "node_id": "I_kwDOAH5NfM5KTMk9", "number": 5162, "title": "Version 3.1.10 generates failure with \"ModuleNotFoundError: No module named 'openapi_spec_validator'\"", "user": {"login": "w0rmr1d3r", "id": 20722014, "node_id": "MDQ6VXNlcjIwNzIyMDE0", "avatar_url": "https://avatars.githubusercontent.com/u/20722014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/w0rmr1d3r", "html_url": "https://github.com/w0rmr1d3r", "followers_url": "https://api.github.com/users/w0rmr1d3r/followers", "following_url": "https://api.github.com/users/w0rmr1d3r/following{/other_user}", "gists_url": "https://api.github.com/users/w0rmr1d3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/w0rmr1d3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/w0rmr1d3r/subscriptions", "organizations_url": "https://api.github.com/users/w0rmr1d3r/orgs", "repos_url": "https://api.github.com/users/w0rmr1d3r/repos", "events_url": "https://api.github.com/users/w0rmr1d3r/events{/privacy}", "received_events_url": "https://api.github.com/users/w0rmr1d3r/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2174001772, "node_id": "MDU6TGFiZWwyMTc0MDAxNzcy", "url": "https://api.github.com/repos/getmoto/moto/labels/dependency-management", "name": "dependency-management", "color": "b8c9fc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-05-24T13:19:05Z", "updated_at": "2022-07-14T19:47:28Z", "closed_at": "2022-05-25T09:18:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "## bug\r\n\r\nRead the issue template.\r\n\r\nLooked for my issue or a similar one and haven't found anything.\r\nIt happens on version 3.1.10, which was released yesterday. The newest issue doesn't seem related either.\r\n\r\nOn version 3.1.10, tests fails, traceback is:\r\n```text\r\n==================================== ERRORS ====================================\r\n[16](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:17)\r\n_________________ ERROR collecting tests/test_boto3_client.py __________________\r\n[17](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:18)\r\nImportError while importing test module '/home/runner/work/cfripper/cfripper/tests/test_boto3_client.py'.\r\n[18](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:19)\r\nHint: make sure your test modules/packages have valid Python names.\r\n[19](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:20)\r\nTraceback:\r\n[20](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:21)\r\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/importlib/__init__.py:126: in import_module\r\n[21](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:22)\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n[22](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:23)\r\ntests/test_boto3_client.py:305: in <module>\r\n[23](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:24)\r\n    def test_export_values(boto3_client: Boto3Client):\r\n[24](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:25)\r\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/moto/__init__.py:30: in f\r\n[25](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:26)\r\n    module = importlib.import_module(module_name, \"moto\")\r\n[26](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:27)\r\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/importlib/__init__.py:126: in import_module\r\n[27](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:28)\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n[28](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:29)\r\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/moto/cloudformation/__init__.py:1: in <module>\r\n[29](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:30)\r\n    from .models import cloudformation_backends\r\n[30](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:31)\r\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/moto/cloudformation/models.py:18: in <module>\r\n[31](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:32)\r\n    from .parsing import ResourceMap, OutputMap\r\n[32](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:33)\r\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/moto/cloudformation/parsing.py:17: in <module>\r\n[33](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:34)\r\n    from moto.apigateway import models  # noqa  # pylint: disable=all\r\n[34](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:35)\r\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/moto/apigateway/__init__.py:1: in <module>\r\n[35](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:36)\r\n    from .models import apigateway_backends\r\n[36](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:37)\r\n/opt/hostedtoolcache/Python/3.10.4/x64/lib/python3.10/site-packages/moto/apigateway/models.py:9: in <module>\r\n[37](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:38)\r\n    from openapi_spec_validator import validate_spec\r\n[38](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:39)\r\nE   ModuleNotFoundError: No module named 'openapi_spec_validator'\r\n[39](https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true#step:6:40)\r\n---- generated xml file: /home/runner/work/cfripper/cfripper/build/test.xml ----\r\n```\r\nref. -> https://github.com/Skyscanner/cfripper/runs/6573693883?check_suite_focus=true\r\n\r\nWe were using 3.1.6 and it worked fine. Tested the same on 3.1.9 and works fine.\r\nWhen using 3.1.10 the coverage of the project breaks.\r\nThis is the PR where the issue has been found:\r\nhttps://github.com/Skyscanner/cfripper/pull/227\r\n\r\nHappy to provide more information.\r\n\r\nthank you :)", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5162/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5162/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5161", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5161/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5161/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5161/events", "html_url": "https://github.com/getmoto/moto/issues/5161", "id": 1246520368, "node_id": "I_kwDOAH5NfM5KTGQw", "number": 5161, "title": " RDS creation via terraform error: strconv.ParseBool: parsing \"none\": invalid syntax", "user": {"login": "pyToshka", "id": 25948642, "node_id": "MDQ6VXNlcjI1OTQ4NjQy", "avatar_url": "https://avatars.githubusercontent.com/u/25948642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyToshka", "html_url": "https://github.com/pyToshka", "followers_url": "https://api.github.com/users/pyToshka/followers", "following_url": "https://api.github.com/users/pyToshka/following{/other_user}", "gists_url": "https://api.github.com/users/pyToshka/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyToshka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyToshka/subscriptions", "organizations_url": "https://api.github.com/users/pyToshka/orgs", "repos_url": "https://api.github.com/users/pyToshka/repos", "events_url": "https://api.github.com/users/pyToshka/events{/privacy}", "received_events_url": "https://api.github.com/users/pyToshka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-05-24T13:02:06Z", "updated_at": "2022-05-25T09:21:04Z", "closed_at": "2022-05-25T09:21:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, i tried to use moto as mock server for terraform code testing, during rds creation i got in debug mode error like\r\n\r\n**Repro steps**:\r\n- Start moto server \r\n- Configure AWS provider for using custom endpoint\r\n- Create simple rds_db_instance resource\r\n- export TF_LOG=TRACE\r\n- terraform init\r\n- terraform plan\r\n- terraform apply\r\nAws provider configuration \r\n```hcl\r\nprovider \"aws\" {\r\n  skip_credentials_validation = true\r\n  skip_metadata_api_check     = true\r\n  skip_requesting_account_id  = true\r\n  access_key                  = \"fake\"\r\n  secret_key                  = \"fake\"\r\n  region                      = \"us-west-2\"\r\n  endpoints {\r\n    ec2     = \"http://127.0.0.1:9999/\"\r\n    route53 = \"http://127.0.0.1:9999/\"\r\n    iam     = \"http://127.0.0.1:9999/\"\r\n    kms     = \"http://127.0.0.1:9999/\"\r\n    rds = \"http://127.0.0.1:9999/\"\r\n    ssm = \"http://127.0.0.1:9999/\"\r\n  }\r\n}\r\n```\r\n\r\nExample of terraform resource \r\n```hcl\r\nresource \"aws_db_instance\" \"test-rds\" {\r\n  engine            = \"postgres\"\r\n  instance_class    = \"db.m4.large\"\r\n  name              = \"mydb\"\r\n  identifier        = \"mytestdb\"\r\n  allocated_storage = 20\r\n  username          = \"admin\"\r\n  password          = \"admin\"\r\n  multi_az = false\r\n}\r\n```\r\n**Description**: \r\nCreation of rds instance return timestamp in wrong format\r\nBased on error below creation of rds had never finished\r\n`\r\ncaused by: strconv.ParseBool: parsing \"none\": invalid syntax: timestamp=2022-05-24T15:51:12.679+0400\r\n`\r\n**Debug log**:\r\n```\r\n----------------------------------------------------: timestamp=2022-05-24T15:51:12.678+0400\r\n2022-05-24T15:51:12.679+0400 [INFO]  provider.terraform-provider-aws_v3.73.0_x5: 2022/05/24 15:51:12 [DEBUG] [aws-sdk-go] <CreateDBInstanceResponse xmlns=\"http://rds.amazonaws.com/doc/2014-09-01/\"><CreateDBInstanceResult><DBInstance>\r\n              <BackupRetentionPeriod>0</BackupRetentionPeriod>\r\n              <DBInstanceStatus>available</DBInstanceStatus>\r\n              <DBName>mydb</DBName>\r\n              <MultiAZ>None</MultiAZ>\r\n              <VpcSecurityGroups>\r\n                \r\n              </VpcSecurityGroups>\r\n              \r\n              <DBInstanceIdentifier>mytestdb</DBInstanceIdentifier>\r\n              <DbiResourceId>db-M5ENSHXFPU6XHZ4G4ZEI5QIO2U</DbiResourceId>\r\n              <InstanceCreateTime>2022-05-24T15:51:12.657Z</InstanceCreateTime>\r\n              <PreferredBackupWindow>03:50-04:20</PreferredBackupWindow>\r\n              <PreferredMaintenanceWindow>wed:06:38-wed:07:08</PreferredMaintenanceWindow>\r\n              <ReadReplicaDBInstanceIdentifiers>\r\n                \r\n              </ReadReplicaDBInstanceIdentifiers>\r\n              <StatusInfos>\r\n                \r\n              </StatusInfos>\r\n              <EnabledCloudwatchLogsExports>\r\n              \r\n              </EnabledCloudwatchLogsExports>\r\n              \r\n              <Engine>postgres</Engine>\r\n              <IAMDatabaseAuthenticationEnabled>none</IAMDatabaseAuthenticationEnabled>\r\n              <LicenseModel>None</LicenseModel>\r\n              <EngineVersion>9.3.3</EngineVersion>\r\n              <OptionGroupMemberships>\r\n                <OptionGroupMembership>\r\n                  <OptionGroupName>default.postgres9.3</OptionGroupName>\r\n                  <Status>in-sync</Status>\r\n                </OptionGroupMembership>\r\n              </OptionGroupMemberships>\r\n              <DBParameterGroups>\r\n                \r\n                <DBParameterGroup>\r\n                  <ParameterApplyStatus>in-sync</ParameterApplyStatus>\r\n                  <DBParameterGroupName>default.postgres9.3</DBParameterGroupName>\r\n                </DBParameterGroup>\r\n                \r\n              </DBParameterGroups>\r\n              <DBSecurityGroups>\r\n                \r\n              </DBSecurityGroups>\r\n              \r\n              <PubliclyAccessible>false</PubliclyAccessible>\r\n              <CopyTagsToSnapshot>false</CopyTagsToSnapshot>\r\n              <AutoMinorVersionUpgrade>true</AutoMinorVersionUpgrade>\r\n              <AllocatedStorage>20</AllocatedStorage>\r\n              <StorageEncrypted>false</StorageEncrypted>\r\n              \r\n              \r\n              <StorageType>gp2</StorageType>\r\n              \r\n              <DBInstanceClass>db.m4.large</DBInstanceClass>\r\n              <MasterUsername>admin</MasterUsername>\r\n              <Endpoint>\r\n                <Address>mytestdb.aaaaaaaaaa.us-west-2.rds.amazonaws.com</Address>\r\n                <Port>5432</Port>\r\n              </Endpoint>\r\n              <DBInstanceArn>arn:aws:rds:us-west-2:123456789012:db:mytestdb</DBInstanceArn>\r\n              <TagList></TagList>\r\n              <DeletionProtection>false</DeletionProtection>\r\n            </DBInstance></CreateDBInstanceResult><ResponseMetadata><RequestId>523e3218-afc7-11c3-90f5-f90431260ab4</RequestId></ResponseMetadata></CreateDBInstanceResponse>: timestamp=2022-05-24T15:51:12.678+0400\r\n2022-05-24T15:51:12.679+0400 [INFO]  provider.terraform-provider-aws_v3.73.0_x5: 2022/05/24 15:51:12 [DEBUG] [aws-sdk-go] DEBUG: Unmarshal Response rds/CreateDBInstance failed, attempt 10/25, error SerializationError: failed decoding Query response\r\n\tstatus code: 200, request id: \r\ncaused by: strconv.ParseBool: parsing \"none\": invalid syntax: timestamp=2022-05-24T15:51:12.679+0400\r\n\r\n```\r\n**Expected**:\r\nRDS instance has been created and attributes available \r\n\r\n**Versions**:\r\n- moto==3.1.10\r\n- terraform 1.1.3\r\nThank you in advance ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5161/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5128", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5128/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5128/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5128/events", "html_url": "https://github.com/getmoto/moto/issues/5128", "id": 1235179547, "node_id": "I_kwDOAH5NfM5Jn1gb", "number": 5128, "title": "Index error in moto server when attempting to create Instance with availability zone not matching the region", "user": {"login": "szopen321", "id": 32538420, "node_id": "MDQ6VXNlcjMyNTM4NDIw", "avatar_url": "https://avatars.githubusercontent.com/u/32538420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/szopen321", "html_url": "https://github.com/szopen321", "followers_url": "https://api.github.com/users/szopen321/followers", "following_url": "https://api.github.com/users/szopen321/following{/other_user}", "gists_url": "https://api.github.com/users/szopen321/gists{/gist_id}", "starred_url": "https://api.github.com/users/szopen321/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/szopen321/subscriptions", "organizations_url": "https://api.github.com/users/szopen321/orgs", "repos_url": "https://api.github.com/users/szopen321/repos", "events_url": "https://api.github.com/users/szopen321/events{/privacy}", "received_events_url": "https://api.github.com/users/szopen321/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-05-13T12:28:31Z", "updated_at": "2022-05-16T16:58:14Z", "closed_at": "2022-05-16T16:58:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\n**Repro steps:**\r\n    1. Start moto server.\r\n    2. Prepare terraform file that will:\r\n        \u25e6 connect to the started moto server ( add: endpoints {ec2 = \"http://127.0.0.1:5000/\"} in provider block)\r\n        \u25e6 contain defined region (eg.: us-east-1) \r\n        \u25e6 contain availability zone from a different region (eg.: us-west-2b)\r\n    3. Run terraform init; terraform apply\r\n    4. Type yes and press enter when prompted.\r\n\r\n**Description:**\r\nWhen attempting to create an instance with availability zone not matching region on running moto server one of the functions (get_default_subnet) will throe an IndexError: list index out of range.\r\n\r\n**Observed results:**\r\nIndex error in moto server when attempting to create Instance with availability zone not matching the region\r\n\r\n**Expected results:**\r\nInformative error with status code 400 - matching true AWS behaviour when attempting to create Instance with availability zone not matching the region.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5128/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5128/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5125", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5125/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5125/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5125/events", "html_url": "https://github.com/getmoto/moto/issues/5125", "id": 1233886824, "node_id": "I_kwDOAH5NfM5Ji55o", "number": 5125, "title": "EventBridge rule doesn't match null value with \"exists\" filter", "user": {"login": "henrinikku", "id": 39443679, "node_id": "MDQ6VXNlcjM5NDQzNjc5", "avatar_url": "https://avatars.githubusercontent.com/u/39443679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henrinikku", "html_url": "https://github.com/henrinikku", "followers_url": "https://api.github.com/users/henrinikku/followers", "following_url": "https://api.github.com/users/henrinikku/following{/other_user}", "gists_url": "https://api.github.com/users/henrinikku/gists{/gist_id}", "starred_url": "https://api.github.com/users/henrinikku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henrinikku/subscriptions", "organizations_url": "https://api.github.com/users/henrinikku/orgs", "repos_url": "https://api.github.com/users/henrinikku/repos", "events_url": "https://api.github.com/users/henrinikku/events{/privacy}", "received_events_url": "https://api.github.com/users/henrinikku/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-05-12T12:09:55Z", "updated_at": "2022-05-13T22:06:49Z", "closed_at": "2022-05-13T22:06:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "### What I expected to happen\r\n\r\nI expected moto to match null values with `{\"exists\": true}` as this is the way AWS behaves.\r\n\r\n### What actually happens\r\n\r\nMoto doesn't seem to match null values with `{\"exists\": true}`.\r\n\r\n### How to reproduce the issue\r\n\r\nUsing `python 3.9.7`, run the following tests using `boto3==1.22.4`, `botocore==1.25.4` and `moto==3.1.8`. The first test passes but the second one throws \r\n```\r\nAssertionError: Lists differ: [{'foo': '123', 'bar': '123'}] != [{'foo': '123', 'bar': '123'}, {'foo': None, 'bar': '123'}]\r\n\r\nSecond list contains 1 additional elements.\r\nFirst extra element 1:\r\n{'foo': None, 'bar': '123'}\r\n\r\n- [{'bar': '123', 'foo': '123'}]\r\n+ [{'bar': '123', 'foo': '123'}, {'bar': '123', 'foo': None}]\r\n```\r\n\r\n```python\r\nimport json\r\nimport unittest\r\n\r\nimport boto3\r\nfrom moto import mock_events, mock_logs\r\nfrom moto.core import ACCOUNT_ID\r\n\r\n\r\nclass TestPattern(unittest.TestCase):\r\n    def setUp(self):\r\n        self.pattern = {\r\n            \"source\": [\"test-source\"],\r\n            \"detail-type\": [\"test-detail-type\"],\r\n            \"detail\": {\r\n                \"foo\": [{\"exists\": True}],\r\n                \"bar\": [{\"exists\": True}],\r\n            },\r\n        }\r\n\r\n    def test_aws_matches_none_with_exists_filter(self):\r\n        events_client = boto3.client(\"events\")\r\n        response = events_client.test_event_pattern(\r\n            EventPattern=json.dumps(self.pattern),\r\n            Event=json.dumps(\r\n                {\r\n                    \"id\": \"123\",\r\n                    \"account\": ACCOUNT_ID,\r\n                    \"time\": \"2022-05-12T11:40:30.872473Z\",\r\n                    \"region\": \"eu-west-1\",\r\n                    \"resources\": [],\r\n                    \"source\": \"test-source\",\r\n                    \"detail-type\": \"test-detail-type\",\r\n                    \"detail\": {\"foo\": None, \"bar\": \"123\"},\r\n                }\r\n            ),\r\n        )\r\n        self.assertTrue(response[\"Result\"])\r\n\r\n    @mock_events\r\n    @mock_logs\r\n    def test_moto_matches_none_with_exists_filter(self):\r\n        logs_client = boto3.client(\"logs\")\r\n        log_group_name = \"test-log-group\"\r\n        logs_client.create_log_group(logGroupName=log_group_name)\r\n\r\n        events_client = boto3.client(\"events\")\r\n        event_bus_name = \"test-event-bus\"\r\n        events_client.create_event_bus(Name=event_bus_name)\r\n\r\n        rule_name = \"test-event-rule\"\r\n        events_client.put_rule(\r\n            Name=rule_name,\r\n            State=\"ENABLED\",\r\n            EventPattern=json.dumps(self.pattern),\r\n            EventBusName=event_bus_name,\r\n        )\r\n\r\n        events_client.put_targets(\r\n            Rule=rule_name,\r\n            EventBusName=event_bus_name,\r\n            Targets=[\r\n                {\r\n                    \"Id\": \"123\",\r\n                    \"Arn\": f\"arn:aws:logs:eu-west-1:{ACCOUNT_ID}:log-group:{log_group_name}\",\r\n                }\r\n            ],\r\n        )\r\n\r\n        events_client.put_events(\r\n            Entries=[\r\n                {\r\n                    \"EventBusName\": event_bus_name,\r\n                    \"Source\": \"test-source\",\r\n                    \"DetailType\": \"test-detail-type\",\r\n                    \"Detail\": json.dumps({\"foo\": \"123\", \"bar\": \"123\"}),\r\n                },\r\n                {\r\n                    \"EventBusName\": event_bus_name,\r\n                    \"Source\": \"test-source\",\r\n                    \"DetailType\": \"test-detail-type\",\r\n                    \"Detail\": json.dumps({\"foo\": None, \"bar\": \"123\"}),\r\n                },\r\n            ]\r\n        )\r\n\r\n        events = sorted(\r\n            logs_client.filter_log_events(logGroupName=log_group_name)[\"events\"],\r\n            key=lambda x: x[\"eventId\"],\r\n        )\r\n        event_details = [json.loads(x[\"message\"])[\"detail\"] for x in events]\r\n\r\n        self.assertEqual(\r\n            event_details,\r\n            [\r\n                {\"foo\": \"123\", \"bar\": \"123\"},\r\n                # Moto doesn't match this but it should\r\n                {\"foo\": None, \"bar\": \"123\"},\r\n            ],\r\n        )\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5125/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5125/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5116", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5116/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5116/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5116/events", "html_url": "https://github.com/getmoto/moto/issues/5116", "id": 1231255689, "node_id": "I_kwDOAH5NfM5JY3iJ", "number": 5116, "title": "[dynamodb2] `put_item` with an empty set as an attribute does not throw ValidationException", "user": {"login": "dmukhg", "id": 217056, "node_id": "MDQ6VXNlcjIxNzA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/217056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmukhg", "html_url": "https://github.com/dmukhg", "followers_url": "https://api.github.com/users/dmukhg/followers", "following_url": "https://api.github.com/users/dmukhg/following{/other_user}", "gists_url": "https://api.github.com/users/dmukhg/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmukhg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmukhg/subscriptions", "organizations_url": "https://api.github.com/users/dmukhg/orgs", "repos_url": "https://api.github.com/users/dmukhg/repos", "events_url": "https://api.github.com/users/dmukhg/events{/privacy}", "received_events_url": "https://api.github.com/users/dmukhg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-05-10T14:29:14Z", "updated_at": "2022-05-11T09:14:43Z", "closed_at": "2022-05-11T09:14:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey! Thanks for a great library. It makes unit tests really easy to write!\r\n\r\nThis is similar to #1129 and #1744. Tested on moto version `==2.3.2`\r\n\r\nDynamoDB [does not allow](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes.SetTypes) empty sets as values for items. We've had to write some custom wrappers for this, and I suspect heavy users would do the same.\r\n\r\nWhen writing a unit test though, moto's dynamodb does not error out.\r\n\r\nHow to reproduce:\r\nTry the following [gist](https://gist.github.com/schatten/ecbae774b296b24afbc63e934d554d6e) 50 lines including whitespace.\r\n\r\nKey snippets from the gist:\r\n```python\r\n\r\nitem = {\r\n    \"Key\": \"some-irrelevant_key\",\r\n    \"SetTypeAttribute\": {\"SS\": set([])},\r\n}\r\n\r\n# The table can be a dynamodb table or a moto mocked dynamodb table.\r\ntable.put_item(Item=item)\r\n```\r\n\r\n\r\nThe output I get is:\r\n```\r\nWriting to real dynamodb\r\nFailed writing to real dynamodb\r\nTraceback (most recent call last):\r\n  File \"moto-fail.py\", line 42, in <module>\r\n    write_via_boto()\r\n  File \"moto-fail.py\", line 19, in write_via_boto\r\n    write_item(table=table)\r\n  File \"moto-fail.py\", line 11, in write_item\r\n    table.put_item(Item=item)\r\n  File \"/home/dipanjanm/.local/lib/python3.8/site-packages/boto3/resources/factory.py\", line 520, in do_action\r\n    response = action(self, *args, **kwargs)\r\n  File \"/home/dipanjanm/.local/lib/python3.8/site-packages/boto3/resources/action.py\", line 83, in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\n  File \"/home/dipanjanm/.local/lib/python3.8/site-packages/botocore/client.py\", line 391, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/dipanjanm/.local/lib/python3.8/site-packages/botocore/client.py\", line 719, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (ValidationException) when calling the PutItem operation: One or more parameter values were invalid: An number set  may not be empty\r\n\r\n\r\nWriting to mock dynamodb\r\nSucceeded writing to mock dynamodb\r\n```\r\n\r\n## Expectation\r\nCalling `put_item` on mock dynamodb2 with an empty set as an attribute should fail with a `ValidationException`.\r\n\r\nCheers!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5116/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5116/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5113", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5113/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5113/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5113/events", "html_url": "https://github.com/getmoto/moto/issues/5113", "id": 1230570257, "node_id": "I_kwDOAH5NfM5JWQMR", "number": 5113, "title": "rds - should not return \"DBClusterIdentifier\" if the instance is not in a cluster", "user": {"login": "kentnsw", "id": 84220825, "node_id": "MDQ6VXNlcjg0MjIwODI1", "avatar_url": "https://avatars.githubusercontent.com/u/84220825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kentnsw", "html_url": "https://github.com/kentnsw", "followers_url": "https://api.github.com/users/kentnsw/followers", "following_url": "https://api.github.com/users/kentnsw/following{/other_user}", "gists_url": "https://api.github.com/users/kentnsw/gists{/gist_id}", "starred_url": "https://api.github.com/users/kentnsw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kentnsw/subscriptions", "organizations_url": "https://api.github.com/users/kentnsw/orgs", "repos_url": "https://api.github.com/users/kentnsw/repos", "events_url": "https://api.github.com/users/kentnsw/events{/privacy}", "received_events_url": "https://api.github.com/users/kentnsw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-05-10T03:53:33Z", "updated_at": "2022-05-11T09:15:28Z", "closed_at": "2022-05-11T09:15:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Creating an issue here in case you can't see the comment on the PR.\r\n\r\nWhen describe_db_instances(), the API implementation should not return \"DBClusterIdentifier\" property in the JSON if the instance is not in a cluster.\r\n\r\nPlease see comments on https://github.com/spulec/moto/pull/5101\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5113/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5105", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5105/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5105/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5105/events", "html_url": "https://github.com/getmoto/moto/issues/5105", "id": 1228592554, "node_id": "I_kwDOAH5NfM5JOtWq", "number": 5105, "title": "cognito-idp admin_initiate_auth can't refresh token", "user": {"login": "lkw225657", "id": 5274876, "node_id": "MDQ6VXNlcjUyNzQ4NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/5274876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkw225657", "html_url": "https://github.com/lkw225657", "followers_url": "https://api.github.com/users/lkw225657/followers", "following_url": "https://api.github.com/users/lkw225657/following{/other_user}", "gists_url": "https://api.github.com/users/lkw225657/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkw225657/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkw225657/subscriptions", "organizations_url": "https://api.github.com/users/lkw225657/orgs", "repos_url": "https://api.github.com/users/lkw225657/repos", "events_url": "https://api.github.com/users/lkw225657/events{/privacy}", "received_events_url": "https://api.github.com/users/lkw225657/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-05-07T10:28:38Z", "updated_at": "2022-05-09T08:41:30Z", "closed_at": "2022-05-09T08:41:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Reporting Bugs\r\nmoto==3.1.6\r\n/moto/cognitoidp/[models.py](https://github.com/spulec/moto/tree/9a8c9f164a472598d78d30c78f4581810d945995/moto/cognitoidp/models.py)\r\nfunction admin_initiate_auth line:1276\r\n\r\n        elif auth_flow is AuthFlow.REFRESH_TOKEN:\r\n            refresh_token = auth_parameters.get(\"REFRESH_TOKEN\")\r\n            (\r\n                id_token,\r\n                access_token,\r\n                expires_in,\r\n            ) = user_pool.create_tokens_from_refresh_token(refresh_token)\r\n\r\nid_token and access_token is in the opposite position\r\n\r\nIt is different from other call create_tokens_from_refresh_token\r\n\r\nfunction initiate_auth line:1681\r\n\r\n            if client.generate_secret:\r\n                secret_hash = auth_parameters.get(\"SECRET_HASH\")\r\n                if not check_secret_hash(\r\n                    client.secret, client.id, username, secret_hash\r\n                ):\r\n                    raise NotAuthorizedError(secret_hash)\r\n\r\n            (\r\n                access_token,\r\n                id_token,\r\n                expires_in,\r\n            ) = user_pool.create_tokens_from_refresh_token(refresh_token)\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5105/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5105/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5065", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5065/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5065/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5065/events", "html_url": "https://github.com/getmoto/moto/issues/5065", "id": 1216375883, "node_id": "I_kwDOAH5NfM5IgGxL", "number": 5065, "title": "mocked CloudWatch does not differentiate metrics when they share the dimension", "user": {"login": "tzven0", "id": 36624215, "node_id": "MDQ6VXNlcjM2NjI0MjE1", "avatar_url": "https://avatars.githubusercontent.com/u/36624215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tzven0", "html_url": "https://github.com/tzven0", "followers_url": "https://api.github.com/users/tzven0/followers", "following_url": "https://api.github.com/users/tzven0/following{/other_user}", "gists_url": "https://api.github.com/users/tzven0/gists{/gist_id}", "starred_url": "https://api.github.com/users/tzven0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tzven0/subscriptions", "organizations_url": "https://api.github.com/users/tzven0/orgs", "repos_url": "https://api.github.com/users/tzven0/repos", "events_url": "https://api.github.com/users/tzven0/events{/privacy}", "received_events_url": "https://api.github.com/users/tzven0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-04-26T19:18:06Z", "updated_at": "2022-04-27T20:45:14Z", "closed_at": "2022-04-27T20:45:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hey,\r\n\r\ni didn't have the time to dig deeper, but i realized that i had to switch to an older version than 3.1.6 since the following fails with 3.1.6 but does not with 3.1.5 or older, trying to add two metrics with different metric name that share the same dimension and receiving them separately:\r\n\r\n```\r\n@mock_cloudwatch\r\ndef test_get_metric_data_for_multiple_metrics_w_same_dimensions():\r\n    utc_now = datetime.now(tz=pytz.utc)\r\n    cloudwatch = boto3.client(\"cloudwatch\", \"eu-west-1\")\r\n    namespace = \"my_namespace/\"\r\n    cloudwatch.put_metric_data(\r\n        Namespace=namespace,\r\n        MetricData=[\r\n            {\r\n                \"MetricName\": \"metric1\",\r\n                \"Dimensions\": [{\"Name\": \"Name\", \"Value\": \"B\"}],\r\n                \"Value\": 50,\r\n            },\r\n            {\r\n                \"MetricName\": \"metric2\",\r\n                \"Dimensions\": [{\"Name\": \"Name\", \"Value\": \"B\"}],\r\n                \"Value\": 25,\r\n                \"Unit\": \"Microseconds\",\r\n            }\r\n        ],\r\n    )\r\n    # get_metric_data 1\r\n    response1 = cloudwatch.get_metric_data(\r\n        MetricDataQueries=[\r\n            {\r\n                \"Id\": \"result1\",\r\n                \"MetricStat\": {\r\n                    \"Metric\": {\"Namespace\": namespace, \"MetricName\": \"metric1\", \"Dimensions\": [{\"Name\": \"Name\", \"Value\": \"B\"}],},\r\n                    \"Period\": 60,\r\n                    \"Stat\": \"Sum\",\r\n                },\r\n            },\r\n        ],\r\n        StartTime=utc_now - timedelta(seconds=60),\r\n        EndTime=utc_now + timedelta(seconds=60),\r\n    )\r\n    #\r\n    len(response1[\"MetricDataResults\"]).should.equal(1)\r\n\r\n    res1 = response1[\"MetricDataResults\"][0]\r\n    res1[\"Values\"].should.equal([50.0])\r\n\r\n    # get_metric_data 2\r\n    response2 = cloudwatch.get_metric_data(\r\n        MetricDataQueries=[\r\n            {\r\n                \"Id\": \"result2\",\r\n                \"MetricStat\": {\r\n                    \"Metric\": {\"Namespace\": namespace, \"MetricName\": \"metric2\", \"Dimensions\": [{\"Name\": \"Name\", \"Value\": \"B\"}],},\r\n                    \"Period\": 60,\r\n                    \"Stat\": \"Sum\",\r\n                },\r\n            },\r\n        ],\r\n        StartTime=utc_now - timedelta(seconds=60),\r\n        EndTime=utc_now + timedelta(seconds=60),\r\n    )\r\n    #\r\n    len(response2[\"MetricDataResults\"]).should.equal(1)\r\n\r\n    res2 = response2[\"MetricDataResults\"][0]\r\n    res2[\"Values\"].should.equal([25.0])\r\n```\r\n\r\nSo, when checking out 3.1.5 and adding this test to the tests/test_cloudwatch/test_cloudwatch_boto3.py test, it passes.\r\nAdding the same snippet to the test on 3.1.6 or current master fails with the following:\r\n\r\n```\r\n...\r\n================================== FAILURES ===================================\r\n_________ test_get_metric_data_for_multiple_metrics_w_same_dimensions _________\r\n\r\nself = <sure.AssertionBuilder object at 0x000001D5CAFAEFD0>, args = ([50.0],)\r\nkw = {}\r\n\r\n    @wraps(func)\r\n    def wrapper(self, *args, **kw):\r\n        try:\r\n>           value = func(self, *args, **kw)\r\n\r\nmoto_venv\\lib\\site-packages\\sure\\__init__.py:408:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <sure.AssertionBuilder object at 0x000001D5CAFAEFD0>, what = [50.0]\r\nepsilon = None\r\n\r\n    @assertionmethod\r\n    def equal(self, what, epsilon=None):\r\n        \"\"\"compares given object ``X``  with an expected ``Y`` object.\r\n\r\n        It primarily assures that the compared objects are absolute equal ``==``.\r\n\r\n        :param what: the expected value\r\n        :param epsilon: a delta to leverage upper-bound floating point permissiveness\r\n        \"\"\"\r\n\r\n        try:\r\n            comparison = DeepComparison(self.obj, what, epsilon).compare()\r\n            error = False\r\n        except AssertionError as e:\r\n            error = e\r\n            comparison = None\r\n\r\n        if isinstance(comparison, DeepExplanation):\r\n            error = comparison.get_assertion(self.obj, what)\r\n\r\n        if self.negative:\r\n            if error:\r\n                return True\r\n\r\n            msg = \"%s should differ from %s, but is the same thing\"\r\n            raise AssertionError(msg % (safe_repr(self.obj), safe_repr(what)))\r\n\r\n        else:\r\n            if not error:\r\n                return True\r\n>           raise error\r\nE           AssertionError: given\r\nE           X = [75.0]\r\nE               and\r\nE           Y = [50.0]\r\nE           X[0] != Y[0]\r\n\r\nmoto_venv\\lib\\site-packages\\sure\\__init__.py:729: AssertionError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n    @mock_cloudwatch\r\n    def test_get_metric_data_for_multiple_metrics_w_same_dimensions():\r\n        utc_now = datetime.now(tz=pytz.utc)\r\n        cloudwatch = boto3.client(\"cloudwatch\", \"eu-west-1\")\r\n        namespace = \"my_namespace/\"\r\n        cloudwatch.put_metric_data(\r\n            Namespace=namespace,\r\n            MetricData=[\r\n                {\r\n                    \"MetricName\": \"metric1\",\r\n                    \"Dimensions\": [{\"Name\": \"Name\", \"Value\": \"B\"}],\r\n                    \"Value\": 50,\r\n                },\r\n                {\r\n                    \"MetricName\": \"metric2\",\r\n                    \"Dimensions\": [{\"Name\": \"Name\", \"Value\": \"B\"}],\r\n                    \"Value\": 25,\r\n                    \"Unit\": \"Microseconds\",\r\n                }\r\n            ],\r\n        )\r\n        # get_metric_data 1\r\n        response1 = cloudwatch.get_metric_data(\r\n            MetricDataQueries=[\r\n                {\r\n                    \"Id\": \"result1\",\r\n                    \"MetricStat\": {\r\n                        \"Metric\": {\"Namespace\": namespace, \"MetricName\": \"metric1\", \"Dimensions\": [{\"Name\": \"Name\", \"Value\": \"B\"}],},\r\n                        \"Period\": 60,\r\n                        \"Stat\": \"Sum\",\r\n                    },\r\n                },\r\n            ],\r\n            StartTime=utc_now - timedelta(seconds=60),\r\n            EndTime=utc_now + timedelta(seconds=60),\r\n        )\r\n        #\r\n        len(response1[\"MetricDataResults\"]).should.equal(1)\r\n\r\n        res1 = response1[\"MetricDataResults\"][0]\r\n>       res1[\"Values\"].should.equal([50.0])\r\n\r\ntests\\test_cloudwatch\\test_cloudwatch_boto3.py:1167:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <sure.AssertionBuilder object at 0x000001D5CAFAEFD0>, args = ([50.0],)\r\nkw = {}\r\n\r\n    @wraps(func)\r\n    def wrapper(self, *args, **kw):\r\n        try:\r\n            value = func(self, *args, **kw)\r\n        except AssertionError as e:\r\n>           raise AssertionError(e)\r\nE           AssertionError: given\r\nE           X = [75.0]\r\nE               and\r\nE           Y = [50.0]\r\nE           X[0] != Y[0]\r\n\r\nmoto_venv\\lib\\site-packages\\sure\\__init__.py:410: AssertionError\r\n=========================== short test summary info ===========================\r\nFAILED tests/test_cloudwatch/test_cloudwatch_boto3.py::test_get_metric_data_for_multiple_metrics_w_same_dimensions\r\n======================== 1 failed, 41 passed in 4.39s =========================\r\n(moto_venv)\r\n\r\n```\r\n\r\nIt seems that the mocked client does not really distinguish between different metric names when they share the same dimension and sums the values (\"Stat\": \"Sum\") to 75.0 (50.0 + 25.0 from the two pushes) as if they share the same metric name instead of providing the respective metric's value.\r\n\r\nIf i have the time i may dig deeper into the issue but at least i am able to report it for now.\r\n\r\nThanks in advance for all the effort and great work on moto, really appreciate it.\r\n\r\nLet me know if i am the stupid simply using it wrong, still a beginner though...\r\n\r\nCheers!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5065/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5065/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5064", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5064/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5064/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5064/events", "html_url": "https://github.com/getmoto/moto/issues/5064", "id": 1215952153, "node_id": "I_kwDOAH5NfM5IefUZ", "number": 5064, "title": "Creating an SQS Queue instance using the queue's name (instead of the URL) causes failures when sending messages", "user": {"login": "paulmdavies", "id": 2221779, "node_id": "MDQ6VXNlcjIyMjE3Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2221779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulmdavies", "html_url": "https://github.com/paulmdavies", "followers_url": "https://api.github.com/users/paulmdavies/followers", "following_url": "https://api.github.com/users/paulmdavies/following{/other_user}", "gists_url": "https://api.github.com/users/paulmdavies/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulmdavies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulmdavies/subscriptions", "organizations_url": "https://api.github.com/users/paulmdavies/orgs", "repos_url": "https://api.github.com/users/paulmdavies/repos", "events_url": "https://api.github.com/users/paulmdavies/events{/privacy}", "received_events_url": "https://api.github.com/users/paulmdavies/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-04-26T13:21:44Z", "updated_at": "2022-04-27T22:51:51Z", "closed_at": "2022-04-27T22:51:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "This appears to be an undocumented feature of boto3 that isn't mirrored in moto.\r\n\r\nIt occurs with the latest versions of boto3 (`1.22.0`) and moto (`3.1.6`)\r\n\r\nSource code:\r\n```\r\nimport boto3\r\n\r\n\r\nclass Simple:\r\n    def __init__(self, queue_name):\r\n        self.resource = boto3.resource('sqs')\r\n        self.queue = self.resource.Queue(queue_name)\r\n\r\n    def send_message(self, message_body):\r\n        self.queue.send_message(MessageBody=message_body)\r\n\r\n\r\nif __name__ == '__main__':\r\n    Simple('my-test-queue').send_message('the-body')\r\n```\r\n\r\nTest Code:\r\n```\r\nfrom unittest import TestCase\r\n\r\nimport boto3 as boto3\r\nfrom moto import mock_sqs\r\n\r\nfrom simple import Simple\r\n\r\n\r\n@mock_sqs\r\nclass SimpleTest(TestCase):\r\n    def setUp(self) -> None:\r\n        sqs_resource = boto3.resource('sqs')\r\n        sqs_resource.create_queue(\r\n            QueueName='my-test-queue'\r\n        )\r\n\r\n        self.simple = Simple('my-test-queue')\r\n\r\n    def test_should(self):\r\n        self.simple.send_message('the-body')\r\n```\r\n\r\nReproduction steps:\r\n- Create a file called `simple.py` containing the source code above\r\n- Create a file called `test_simple.py` containing the test code above\r\n- Create an SQS queue called `my-test-queue`\r\n- Execute the source code (`python simple.py`). A message appears in the SQS queue, and no error is thrown\r\n- Run the test (`python -m pytest test_simple.py`). This fails with the following:\r\n```\r\n$ python -m pytest .\r\n================================================================================================================================== test session starts ===================================================================================================================================\r\nplatform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0\r\nrootdir: /tmp/sqs\r\ncollected 1 item                                                                                                                                                                                                                                                                         \r\n\r\ntest_simple.py F                                                                                                                                                                                                                                                                   [100%]\r\n\r\n======================================================================================================================================== FAILURES ========================================================================================================================================\r\n_________________________________________________________________________________________________________________________________ SimpleTest.test_should _________________________________________________________________________________________________________________________________\r\n\r\nself = <test_simple.SimpleTest testMethod=test_should>\r\n\r\n    def test_should(self):\r\n>       self.simple.send_message('the-body')\r\n\r\ntest_simple.py:20: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nsimple.py:10: in send_message\r\n    self.queue.send_message(MessageBody=message_body)\r\nvenv/lib64/python3.10/site-packages/boto3/resources/factory.py:580: in do_action\r\n    response = action(self, *args, **kwargs)\r\nvenv/lib64/python3.10/site-packages/boto3/resources/action.py:88: in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\nvenv/lib64/python3.10/site-packages/botocore/client.py:415: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.SQS object at 0x7f63e9f9ba00>, operation_name = 'SendMessage', api_params = {'MessageBody': 'the-body', 'QueueUrl': 'my-test-queue'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record('API_CALL', {\r\n            'service': service_name,\r\n            'operation': operation_name,\r\n            'params': api_params,\r\n        })\r\n        if operation_model.deprecated:\r\n            logger.debug('Warning: %s.%s() is deprecated',\r\n                         service_name, operation_name)\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context)\r\n        resolve_checksum_context(request_dict, operation_model, api_params)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            model=operation_model, params=request_dict,\r\n            request_signer=self._request_signer, context=request_context)\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            apply_request_checksum(request_dict)\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context)\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            http_response=http, parsed=parsed_response,\r\n            model=operation_model, context=request_context\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.exceptions.ClientError: An error occurred (InvalidAddress) when calling the SendMessage operation: The address my-test-queue is not valid for this endpoint.\r\n\r\nvenv/lib64/python3.10/site-packages/botocore/client.py:745: ClientError\r\n================================================================================================================================ short test summary info =================================================================================================================================\r\nFAILED test_simple.py::SimpleTest::test_should - botocore.exceptions.ClientError: An error occurred (InvalidAddress) when calling the SendMessage operation: The address my-test-queue is not valid for this endpoint.\r\n=================================================================================================================================== 1 failed in 0.38s ====================================================================================================================================\r\n\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5064/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5064/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5063", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5063/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5063/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5063/events", "html_url": "https://github.com/getmoto/moto/issues/5063", "id": 1215916372, "node_id": "I_kwDOAH5NfM5IeWlU", "number": 5063, "title": "Organizations close_account doesn't match public API", "user": {"login": "iainelder", "id": 5024311, "node_id": "MDQ6VXNlcjUwMjQzMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/5024311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iainelder", "html_url": "https://github.com/iainelder", "followers_url": "https://api.github.com/users/iainelder/followers", "following_url": "https://api.github.com/users/iainelder/following{/other_user}", "gists_url": "https://api.github.com/users/iainelder/gists{/gist_id}", "starred_url": "https://api.github.com/users/iainelder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iainelder/subscriptions", "organizations_url": "https://api.github.com/users/iainelder/orgs", "repos_url": "https://api.github.com/users/iainelder/repos", "events_url": "https://api.github.com/users/iainelder/events{/privacy}", "received_events_url": "https://api.github.com/users/iainelder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-04-26T12:54:46Z", "updated_at": "2022-04-30T10:03:20Z", "closed_at": "2022-04-30T10:03:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The Organizations close_account API was added in #5040.\r\n\r\nIt doesn't match the spec of the public [CloseAccount](https://docs.aws.amazon.com/organizations/latest/APIReference/API_CloseAccount.html) API.\r\n\r\n> If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.\r\n\r\n> While the close account request is in progress, Account status will indicate PENDING_CLOSURE. When the close account request completes, the status will change to SUSPENDED. \r\n\r\nThe current implementation does neither of those things:\r\n\r\nHere's the current implementation:\r\n\r\n```python\r\nclass FakeAccount:\r\n    ...\r\n    @property\r\n    def close_account_status(self):\r\n        return {\r\n            \"CloseAccountStatus\": {\r\n                \"Id\": self.create_account_status_id,\r\n                \"AccountName\": self.name,\r\n                \"State\": \"SUCCEEDED\",\r\n                \"RequestedTimestamp\": unix_time(datetime.datetime.utcnow()),\r\n                \"CompletedTimestamp\": unix_time(datetime.datetime.utcnow()),\r\n                \"AccountId\": self.id,\r\n            }\r\n        }\r\n\r\nclass OrganizationsBackend:\r\n    ...\r\n    def close_account(self, **kwargs):\r\n        for account_index in range(len(self.accounts)):\r\n            if kwargs[\"AccountId\"] == self.accounts[account_index].id:\r\n                closed_account_status = self.accounts[\r\n                    account_index\r\n                ].close_account_status\r\n                del self.accounts[account_index]\r\n                return closed_account_status\r\n\r\n        raise AccountNotFoundException\r\n```\r\n\r\nThe current implementation returns a CloseAccountStatus object. This does not exist in the public API. Indeed, the real CloseAccount API returns nothing.\r\n\r\nThe current implementation deletes the account from the backend's account list. That's wrong because the account should remain in the organization in a SUSPENDED state.\r\n\r\nI caught this while adding type hints to the organizations models. There is no CloseAccountResponseTypeDef in mypy_boto3_organizations!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5063/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5063/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5042", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5042/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5042/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5042/events", "html_url": "https://github.com/getmoto/moto/issues/5042", "id": 1210434392, "node_id": "I_kwDOAH5NfM5IJcNY", "number": 5042, "title": "SES verify_email_identity is not idempotent", "user": {"login": "Guriido", "id": 9273340, "node_id": "MDQ6VXNlcjkyNzMzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9273340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Guriido", "html_url": "https://github.com/Guriido", "followers_url": "https://api.github.com/users/Guriido/followers", "following_url": "https://api.github.com/users/Guriido/following{/other_user}", "gists_url": "https://api.github.com/users/Guriido/gists{/gist_id}", "starred_url": "https://api.github.com/users/Guriido/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Guriido/subscriptions", "organizations_url": "https://api.github.com/users/Guriido/orgs", "repos_url": "https://api.github.com/users/Guriido/repos", "events_url": "https://api.github.com/users/Guriido/events{/privacy}", "received_events_url": "https://api.github.com/users/Guriido/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-04-21T03:03:32Z", "updated_at": "2022-04-21T11:55:54Z", "closed_at": "2022-04-21T11:27:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using `verify_email_identity` on an existing identity with boto3 allows to re-send the verification email, without creating a duplicate identity.\r\n\r\nHowever, in moto it duplicates the identity.\r\n\r\n```python3\r\nimport boto3\r\nfrom moto import mock_ses\r\n\r\n@mock_ses\r\ndef verify():\r\n    region = \"us-east-2\"\r\n    client = boto3.client('ses', region_name=region)\r\n    addr = \"test@example.com\"\r\n    _ = client.verify_email_identity(EmailAddress=addr)\r\n    _ = client.verify_email_identity(EmailAddress=addr)\r\n\r\n    identities = client.list_identities()\r\n    return identities[\"Identities\"]\r\n\r\nprint(verify())\r\n#['test@example.com', 'test@example.com']\r\n```\r\n\r\nThere is no check before adding the address to the identities, hence this behavior.\r\nhttps://github.com/spulec/moto/blob/fc170df79621e78935e0feabf0037773b45f12dd/moto/ses/models.py#L133-L136\r\n\r\nI will probably create a PR to fix this.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5042/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5042/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5027", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5027/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5027/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5027/events", "html_url": "https://github.com/getmoto/moto/issues/5027", "id": 1205659757, "node_id": "I_kwDOAH5NfM5H3Oht", "number": 5027, "title": "ACCOUNT_ID Override is not working", "user": {"login": "bsneider", "id": 54788551, "node_id": "MDQ6VXNlcjU0Nzg4NTUx", "avatar_url": "https://avatars.githubusercontent.com/u/54788551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bsneider", "html_url": "https://github.com/bsneider", "followers_url": "https://api.github.com/users/bsneider/followers", "following_url": "https://api.github.com/users/bsneider/following{/other_user}", "gists_url": "https://api.github.com/users/bsneider/gists{/gist_id}", "starred_url": "https://api.github.com/users/bsneider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bsneider/subscriptions", "organizations_url": "https://api.github.com/users/bsneider/orgs", "repos_url": "https://api.github.com/users/bsneider/repos", "events_url": "https://api.github.com/users/bsneider/events{/privacy}", "received_events_url": "https://api.github.com/users/bsneider/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-04-15T15:23:01Z", "updated_at": "2022-08-20T10:57:00Z", "closed_at": "2022-08-20T10:56:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Moto version's tried master branch and 3.1.4\r\n\r\n```python\r\n@mock_sts\r\ndef test_sts_account_override(monkeypatch):\r\n    dummy_account_id = \"MEMEMEMEME\"\r\n    monkeypatch.setenv(\"MOTO_ACCOUNT_ID\", dummy_account_id)\r\n    os_account_id = os.environ.get(\"MOTO_ACCOUNT_ID\")\r\n    os_account_id.should.equal(dummy_account_id)\r\n    client = boto3.client(\"sts\", region_name=\"us-west-2\")\r\n    resp = client.get_caller_identity()\r\n    resp[\"Account\"].should.equal(dummy_account_id)\r\n```\r\nthis fails. \r\n\r\nExpected behavior would be resp[\"Account\"].should.equal(\"MEMEMEMEME\")\r\n\r\nThis test is being run with pytest. Several other ways to patch env variables have been tried. As seen in the test though the env variable is properly set. That is know bc `os_account_id.should.equal(dummy_account_id)` passes. \r\n\r\n## Reporting Bugs\r\n\r\nPlease be aware of the following things when filing bug reports:\r\n\r\n1. Avoid raising duplicate issues. *Please* use the GitHub issue search feature\r\n   to check whether your bug report or feature request has been mentioned in\r\n   the past.\r\n2. When filing bug reports about exceptions or tracebacks, please include the\r\n   *complete* traceback. Partial tracebacks, or just the exception text, are\r\n   not helpful.\r\n3. Make sure you provide a suitable amount of information to work with. This\r\n   means you should provide:\r\n\r\n   - Guidance on **how to reproduce the issue**. Ideally, this should be a\r\n     *small* code sample that can be run immediately by the maintainers.\r\n     Failing that, let us know what you're doing, how often it happens, what\r\n     environment you're using, etc. Be thorough: it prevents us needing to ask\r\n     further questions.\r\n   - Tell us **what you expected to happen**. When we run your example code,\r\n     what are we expecting to happen? What does \"success\" look like for your\r\n     code?\r\n   - Tell us **what actually happens**. It's not helpful for you to say \"it\r\n     doesn't work\" or \"it fails\". Tell us *how* it fails: do you get an\r\n     exception? A hang? How was the actual result different from your expected\r\n     result?\r\n   - Tell us **what version of Moto you're using**, and\r\n     **how you installed it**. Tell us whether you're using standalone server\r\n     mode or the Python mocks. If you are using the Python mocks, include the\r\n     version of boto/boto3/botocore.\r\n\r\n\r\n   If you do not provide all of these things, it will take us much longer to\r\n   fix your problem.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5027/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/5008", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/5008/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/5008/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/5008/events", "html_url": "https://github.com/getmoto/moto/issues/5008", "id": 1194717805, "node_id": "I_kwDOAH5NfM5HNfJt", "number": 5008, "title": "cognito-idp can't find users pool by client id", "user": {"login": "Shpionus", "id": 602530, "node_id": "MDQ6VXNlcjYwMjUzMA==", "avatar_url": "https://avatars.githubusercontent.com/u/602530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Shpionus", "html_url": "https://github.com/Shpionus", "followers_url": "https://api.github.com/users/Shpionus/followers", "following_url": "https://api.github.com/users/Shpionus/following{/other_user}", "gists_url": "https://api.github.com/users/Shpionus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Shpionus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Shpionus/subscriptions", "organizations_url": "https://api.github.com/users/Shpionus/orgs", "repos_url": "https://api.github.com/users/Shpionus/repos", "events_url": "https://api.github.com/users/Shpionus/events{/privacy}", "received_events_url": "https://api.github.com/users/Shpionus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2022-04-06T14:44:32Z", "updated_at": "2022-05-17T14:19:38Z", "closed_at": "2022-05-17T14:19:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "My AWS profile is configured to work with  `us-west-2`\r\n\r\n~/.aws/config\r\n```\r\n[default]\r\nregion = us-west-2\r\noutput = json\r\n```\r\n\r\nI created new `test-pool` user pool.\r\n```sh\r\naws --endpoint-url=http://127.0.0.1:5000 \\\r\n     cognito-idp create-user-pool \\\r\n     --pool-name test-pool\r\n```\r\n\r\n```json\r\n{\r\n    \"UserPool\": {\r\n        \"Id\": \"us-west-2_5b2f81009dd04d01a5c5eee547d78e4f\",\r\n        \"Name\": \"test-pool\",\r\n        \"LastModifiedDate\": 1649255524.0,\r\n        \"CreationDate\": 1649255524.0,\r\n        \"SchemaAttributes\": [\r\n            {\r\n                \"Name\": \"sub\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": false,\r\n                \"Required\": true,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"1\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"name\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"given_name\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"family_name\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"middle_name\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"nickname\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"preferred_username\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"profile\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"picture\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"website\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"email\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"email_verified\",\r\n                \"AttributeDataType\": \"Boolean\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false\r\n            },\r\n            {\r\n                \"Name\": \"gender\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"birthdate\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"10\",\r\n                    \"MaxLength\": \"10\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"zoneinfo\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"locale\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"phone_number\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"phone_number_verified\",\r\n                \"AttributeDataType\": \"Boolean\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false\r\n            },\r\n            {\r\n                \"Name\": \"address\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"StringAttributeConstraints\": {\r\n                    \"MinLength\": \"0\",\r\n                    \"MaxLength\": \"2048\"\r\n                }\r\n            },\r\n            {\r\n                \"Name\": \"updated_at\",\r\n                \"AttributeDataType\": \"Number\",\r\n                \"DeveloperOnlyAttribute\": false,\r\n                \"Mutable\": true,\r\n                \"Required\": false,\r\n                \"NumberAttributeConstraints\": {\r\n                    \"MinValue\": \"0\"\r\n                }\r\n            }\r\n        ],\r\n        \"MfaConfiguration\": \"OFF\",\r\n        \"EstimatedNumberOfUsers\": 0,\r\n        \"Arn\": \"arn:aws:cognito-idp:us-west-2:123456789012:userpool/us-west-2_5b2f81009dd04d01a5c5eee547d78e4f\"\r\n    }\r\n}\r\n```\r\n\r\nThen created a new client id\r\n\r\n```sh\r\naws --endpoint-url=http://127.0.0.1:5000 \\\r\n     cognito-idp create-user-pool-client \\\r\n     --user-pool-id us-west-2_5b2f81009dd04d01a5c5eee547d78e4f \\\r\n     --client-name some-client \\\r\n     --no-generate-secret \\\r\n     --explicit-auth-flows \"ALLOW_USER_PASSWORD_AUTH\" \r\n```\r\n\r\n```json\r\n{\r\n    \"UserPoolClient\": {\r\n        \"UserPoolId\": \"us-west-2_5b2f81009dd04d01a5c5eee547d78e4f\",\r\n        \"ClientName\": \"some-client\",\r\n        \"ClientId\": \"pj1p1pf9esvx1dn3sml2monphd\",\r\n        \"ExplicitAuthFlows\": [\r\n            \"ALLOW_USER_PASSWORD_AUTH\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\nI may find clients by pool id\r\n```sh\r\n     aws --endpoint-url=http://127.0.0.1:5000 \\\r\n     cognito-idp list-user-pool-clients \\\r\n     --user-pool-id us-west-2_5b2f81009dd04d01a5c5eee547d78e4f \\\r\n     --max-items 1\r\n```\r\n\r\n```json\r\n{\r\n    \"UserPoolClients\": [\r\n        {\r\n            \"ClientId\": \"pj1p1pf9esvx1dn3sml2monphd\",\r\n            \"UserPoolId\": \"us-west-2_5b2f81009dd04d01a5c5eee547d78e4f\",\r\n            \"ClientName\": \"some-client\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n\r\nBut the service does not find correct pool when I'am trying to signup a new user\r\n\r\n```sh\r\n     aws --endpoint-url=http://127.0.0.1:5000 \\\r\n     cognito-idp sign-up \\\r\n     --client-id pj1p1pf9esvx1dn3sml2monphd \\\r\n     --username test@gmail.com \\\r\n     --password 12345678\r\n```\r\n```error\r\nAn error occurred (ResourceNotFoundException) when calling the SignUp operation: pj1p1pf9esvx1dn3sml2monphd\r\n```\r\n\r\nBut it works when the `default` profile is configured to use `us-east-1` region.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/5008/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/5008/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4988", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4988/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4988/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4988/events", "html_url": "https://github.com/getmoto/moto/issues/4988", "id": 1186539908, "node_id": "I_kwDOAH5NfM5GuSmE", "number": 4988, "title": "elbv2 describe_tags return ResourceArn empty instead of the correct one", "user": {"login": "linhmeobeo", "id": 88203548, "node_id": "MDQ6VXNlcjg4MjAzNTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/88203548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linhmeobeo", "html_url": "https://github.com/linhmeobeo", "followers_url": "https://api.github.com/users/linhmeobeo/followers", "following_url": "https://api.github.com/users/linhmeobeo/following{/other_user}", "gists_url": "https://api.github.com/users/linhmeobeo/gists{/gist_id}", "starred_url": "https://api.github.com/users/linhmeobeo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linhmeobeo/subscriptions", "organizations_url": "https://api.github.com/users/linhmeobeo/orgs", "repos_url": "https://api.github.com/users/linhmeobeo/repos", "events_url": "https://api.github.com/users/linhmeobeo/events{/privacy}", "received_events_url": "https://api.github.com/users/linhmeobeo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-03-30T14:22:35Z", "updated_at": "2022-03-31T11:40:06Z", "closed_at": "2022-03-31T11:40:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\nI am using the latest version of moto for elbv2. After create_load_balancer with moto, which return resource 'LoadBalancerArn': 'arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/app/loadbalancer/50dc6c495c0c9188'\r\nI ran describe_load_balancers() which returned correct resource,. But when I did describe_tags (ResourceArns =<list of ARN from describe_load_balancers), it returned something similar to this:\r\n{'TagDescriptions': [{'ResourceArn': '', 'Tags': [{'Key': 'aaa', 'Value': ''}]}, {'ResourceArn': '', 'Tags': [{'Key': 'bbb', 'Value': ''}, ..}\r\nSo 'ResourceArn': '' is returned, instead of the correct ResourceArn.\r\nWith this, my test suddenly failed. It was succeed before the change.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4988/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4979", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4979/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4979/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4979/events", "html_url": "https://github.com/getmoto/moto/issues/4979", "id": 1183509822, "node_id": "I_kwDOAH5NfM5Giu0-", "number": 4979, "title": "EKS CreateCluster response encryptionConfig property should be a List/Array", "user": {"login": "scottaubrey", "id": 375812, "node_id": "MDQ6VXNlcjM3NTgxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/375812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottaubrey", "html_url": "https://github.com/scottaubrey", "followers_url": "https://api.github.com/users/scottaubrey/followers", "following_url": "https://api.github.com/users/scottaubrey/following{/other_user}", "gists_url": "https://api.github.com/users/scottaubrey/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottaubrey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottaubrey/subscriptions", "organizations_url": "https://api.github.com/users/scottaubrey/orgs", "repos_url": "https://api.github.com/users/scottaubrey/repos", "events_url": "https://api.github.com/users/scottaubrey/events{/privacy}", "received_events_url": "https://api.github.com/users/scottaubrey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-03-28T14:15:32Z", "updated_at": "2022-03-29T22:40:23Z", "closed_at": "2022-03-29T22:40:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Description\r\n\r\nWhen using moto server, the `CreateCluster` EKS API, the Cluster response object should contain `encryptionConfig` as a List of at-most-one `EncryptionConfig` maps/objects  (as per example here: https://docs.aws.amazon.com/eks/latest/APIReference/API_CreateCluster.html#API_CreateCluster_ResponseSyntax and documented [here](https://docs.aws.amazon.com/eks/latest/APIReference/API_Cluster.html#AmazonEKS-Type-Cluster-encryptionConfig) and [here](https://docs.aws.amazon.com/eks/latest/APIReference/API_EncryptionConfig.html)). Moto returns just a map/object.\r\n\r\nThe issue causes an error for me when using the terraform AWS provider to create a cluster without encryption_config set - terraform attempts to retry because response marshalling failed, then reports the cluster already exists. The incorrect response is the same no matter which client makes the request though (see aws-cli below), it's a matter of how strictly it matches the documented response and how it behaves when it doesn't match.\r\n\r\n### How to reproduce the issue\r\n\r\nStart the motoserver v3.1.3 (latest at reporting time) in docker:\r\n```\r\ndocker run --rm -d --name moto-bug-test -p 5000:5000 motoserver/moto:3.1.3 \r\n```\r\n\r\nCreate basic IAM role:\r\n```\r\naws --region=us-east-1 --endpoint-url=http://localhost:5000 iam create-role \\\r\n          --role-name test-cluster \\\r\n          --assume-role-policy-document '{\"Version\": \"2012-10-17\", \"Statement\": [{\"Action\": \"sts:AssumeRole\", \"Effect\": \"Allow\", \"Principal\": {\"Service\": \"eks.amazonaws.com\"}}]}'\r\n```\r\n\r\nRun create-cluster with just enough setup and `--debug` to show server responses.\r\n``` \r\naws --debug --region=us-east-1 --endpoint-url=http://localhost:5000 eks create-cluster \\\r\n          --name test \\\r\n          --role-arn $(aws --region=us-east-1  --endpoint-url=http://localhost:5000 iam get-role --role-name test-cluster | jq -r .Role.Arn) \\\r\n          --resources-vpc-config \"subnetIds=$(aws --region=us-east-1 --endpoint-url=http://localhost:5000 ec2  describe-security-groups |  jq -r '.SecurityGroups[0].GroupId')\" 2>&1 | grep -A1 'DEBUG - Response body' | tail -n1 | sed \"s/b'//\" | sed \"s/'//\" | jq .cluster.encryptionConfig\r\n```\r\n\r\nNOTE: I'm parsing the debug logs here, because the aws client output actually seem to massage the '{}' response from moto to a '[]' before displaying it.\r\n\r\n### What I expected to happen\r\n\r\n`clusterConfig` should be '[]'\r\n\r\n### what actually happens\r\n\r\n`clusterConfig` is '{}'", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4979/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4979/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4974", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4974/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4974/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4974/events", "html_url": "https://github.com/getmoto/moto/issues/4974", "id": 1182317964, "node_id": "I_kwDOAH5NfM5GeL2M", "number": 4974, "title": "ec2 security group - TypeError: unhashable type: 'list'", "user": {"login": "tekumara", "id": 125105, "node_id": "MDQ6VXNlcjEyNTEwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/125105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tekumara", "html_url": "https://github.com/tekumara", "followers_url": "https://api.github.com/users/tekumara/followers", "following_url": "https://api.github.com/users/tekumara/following{/other_user}", "gists_url": "https://api.github.com/users/tekumara/gists{/gist_id}", "starred_url": "https://api.github.com/users/tekumara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tekumara/subscriptions", "organizations_url": "https://api.github.com/users/tekumara/orgs", "repos_url": "https://api.github.com/users/tekumara/repos", "events_url": "https://api.github.com/users/tekumara/events{/privacy}", "received_events_url": "https://api.github.com/users/tekumara/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-03-27T04:10:37Z", "updated_at": "2022-03-27T16:10:57Z", "closed_at": "2022-03-27T14:32:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "_unhashable.py_:\r\n```python\r\nimport boto3\r\nfrom moto import mock_ec2\r\nfrom moto.ec2 import ec2_backends\r\nfrom moto.ec2.models import AMIS\r\n\r\nmock = mock_ec2()\r\nmock.start()\r\n\r\nec2_client = boto3.client(\"ec2\", region_name=\"us-east-1\")\r\nec2_client.run_instances(\r\n    MaxCount=1,\r\n    MinCount=1,\r\n    NetworkInterfaces=[\r\n        {\r\n            \"DeviceIndex\": 0,\r\n            \"Description\": \"Primary network interface\",\r\n            \"DeleteOnTermination\": True,\r\n            \"SubnetId\": next(ec2_backends[\"us-east-1\"].get_all_subnets()).id,\r\n            \"Ipv6AddressCount\": 0,\r\n            \"Groups\": [\"default\"],\r\n        }\r\n    ],\r\n)\r\n```\r\n\r\n```\r\n$ python unhashable.py    \r\nTraceback (most recent call last):\r\n  File \"/Users/tekumara/code/aec/tests/unhashable.py\", line 10, in <module>\r\n    ec2_client.run_instances(\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/client.py\", line 401, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/client.py\", line 717, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/client.py\", line 737, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/endpoint.py\", line 107, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/endpoint.py\", line 183, in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/endpoint.py\", line 305, in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/hooks.py\", line 358, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/hooks.py\", line 229, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/hooks.py\", line 212, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/retryhandler.py\", line 194, in __call__\r\n    if self._checker(**checker_kwargs):\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/retryhandler.py\", line 267, in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/retryhandler.py\", line 286, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/retryhandler.py\", line 333, in __call__\r\n    checker_response = checker(attempt_number, response,\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/retryhandler.py\", line 233, in __call__\r\n    return self._check_caught_exception(\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/retryhandler.py\", line 376, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/endpoint.py\", line 246, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/hooks.py\", line 358, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/hooks.py\", line 229, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/botocore/hooks.py\", line 212, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/moto/core/models.py\", line 288, in __call__\r\n    status, headers, body = response_callback(\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/moto/core/responses.py\", line 205, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/moto/core/responses.py\", line 315, in _dispatch\r\n    return self.call_action()\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/moto/core/responses.py\", line 405, in call_action\r\n    response = method()\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/moto/ec2/responses/instances.py\", line 82, in run_instances\r\n    new_reservation = self.ec2_backend.add_instances(\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/moto/ec2/models.py\", line 1143, in add_instances\r\n    new_instance = Instance(\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/moto/ec2/models.py\", line 741, in __init__\r\n    self.prep_nics(\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/moto/ec2/models.py\", line 1042, in prep_nics\r\n    use_nic = self.ec2_backend.create_network_interface(\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/moto/ec2/models.py\", line 498, in create_network_interface\r\n    eni = NetworkInterface(\r\n  File \"/Users/tekumara/code/aec/.venv/lib/python3.9/site-packages/moto/ec2/models.py\", line 360, in __init__\r\n    self.ec2_backend.groups[subnet.vpc_id][group_id] = group\r\nTypeError: unhashable type: 'list'\r\n```\r\n\r\nPresent in moto 3.1.2 but not previous versions.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4974/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4974/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4968", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4968/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4968/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4968/events", "html_url": "https://github.com/getmoto/moto/issues/4968", "id": 1180839996, "node_id": "I_kwDOAH5NfM5GYjA8", "number": 4968, "title": "mock_logs delete_metric_filter raises unexpected InvalidParameterException", "user": {"login": "guimorg", "id": 45602000, "node_id": "MDQ6VXNlcjQ1NjAyMDAw", "avatar_url": "https://avatars.githubusercontent.com/u/45602000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guimorg", "html_url": "https://github.com/guimorg", "followers_url": "https://api.github.com/users/guimorg/followers", "following_url": "https://api.github.com/users/guimorg/following{/other_user}", "gists_url": "https://api.github.com/users/guimorg/gists{/gist_id}", "starred_url": "https://api.github.com/users/guimorg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guimorg/subscriptions", "organizations_url": "https://api.github.com/users/guimorg/orgs", "repos_url": "https://api.github.com/users/guimorg/repos", "events_url": "https://api.github.com/users/guimorg/events{/privacy}", "received_events_url": "https://api.github.com/users/guimorg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-03-25T14:08:37Z", "updated_at": "2022-03-26T21:06:23Z", "closed_at": "2022-03-26T21:06:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Issue description\r\n\r\nWhen using the `moto.mock_logs`, `boto3` fails to delete a metric_filter arguing that the `logGroupName` parameter is invalid, even if the log group already exists and that the metric_filter was already created using the same `logGroupName`.\r\n\r\n#### Steps to reproduce the issue\r\n\r\nHere is a code snippet:\r\n\r\n```python\r\n>>> from moto import mock_logs\r\n>>> import boto3\r\n>>> mock_logs().start()\r\n>>> client = boto3.client(\"logs\")\r\n>>> client.create_log_group(logGroupName=\"/hello-world/my-cool-endpoint\")\r\n{'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n>>> client.put_metric_filter(\r\n...     logGroupName=\"/hello-world/my-cool-endpoint\",\r\n...     filterName=\"my-cool-filter\",\r\n...     filterPattern=\"{ $.val = * }\",\r\n...     metricTransformations=[{\r\n...         \"metricName\": \"my-metric\",\r\n...         \"metricNamespace\": \"my-namespace\",\r\n...         \"metricValue\": \"$.value\",\r\n...     }]\r\n... )\r\n{'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n>>> client.delete_metric_filter(logGroupName=\"/hello-world/my-cool-endpoint\", filterName=\"my-cool-filter\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/tmp/e/venv/lib/python3.8/site-packages/botocore/client.py\", line 401, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/tmp/e/venv/lib/python3.8/site-packages/botocore/client.py\", line 731, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.errorfactory.InvalidParameterException: An error occurred (InvalidParameterException) when calling the DeleteMetricFilter operation: 1 validation error detected: Value '/hello-world/my-cool-endpoint' at 'logGroupName' failed to satisfy constraint: Must match pattern: [.-_/#A-Za-z0-9]+$\r\n```\r\n\r\nMy environment:\r\n\r\n- Python: 3.7.12\r\n- boto3 version: '1.21.26'\r\n- moto version: '3.1.1'\r\n\r\n#### What's the expected result?\r\n\r\nThe created filter_metric on the already specified and validated log_group was deleted.\r\n\r\nHere is the behavior running boto3 **without moto**:\r\n\r\n```python\r\n>>> import boto3\r\n>>> client = boto3.client(\"logs\")\r\n>>> client.create_log_group(logGroupName=\"/hello-world/my-cool-endpoint\")\r\n{'ResponseMetadata': {'RequestId': 'xxx', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amzn-requestid': 'xxx', 'content-type': 'application/x-amz-json-1.1', 'content-length': '0', 'date': 'xxx'}, 'RetryAttempts': 0}}\r\n>>> client.put_metric_filter(\r\n...      logGroupName=\"/hello-world/my-cool-endpoint\",\r\n...      filterName=\"my-cool-filter\",\r\n...      filterPattern=\"{ $.val = * }\",\r\n...      metricTransformations=[{\r\n...          \"metricName\": \"my-metric\",\r\n...          \"metricNamespace\": \"my-namespace\",\r\n...          \"metricValue\": \"$.value\",\r\n...      }]\r\n... )\r\n{'ResponseMetadata': {'RequestId': 'xxx', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amzn-requestid': 'xxx', 'content-type': 'application/x-amz-json-1.1', 'content-length': '0', 'date': 'xxx'}, 'RetryAttempts': 0}}\r\n>>> client.delete_metric_filter(logGroupName=\"/hello-world/my-cool-endpoint\", filterName=\"my-cool-filter\")\r\n{'ResponseMetadata': {'RequestId': 'xxx', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amzn-requestid': 'xxx', 'content-type': 'application/x-amz-json-1.1', 'content-length': '0', 'date': 'xxx'}, 'RetryAttempts': 0}}\r\n```\r\n\r\n#### What's the actual result?\r\n\r\nThe method fails somehow due to a parameter exception validation.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4968/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4968/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4941", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4941/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4941/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4941/events", "html_url": "https://github.com/getmoto/moto/issues/4941", "id": 1171097256, "node_id": "I_kwDOAH5NfM5FzYao", "number": 4941, "title": "ECR batch_delete_image incorrectly adding failures to reponse", "user": {"login": "jmeyer42", "id": 34012800, "node_id": "MDQ6VXNlcjM0MDEyODAw", "avatar_url": "https://avatars.githubusercontent.com/u/34012800?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmeyer42", "html_url": "https://github.com/jmeyer42", "followers_url": "https://api.github.com/users/jmeyer42/followers", "following_url": "https://api.github.com/users/jmeyer42/following{/other_user}", "gists_url": "https://api.github.com/users/jmeyer42/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmeyer42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmeyer42/subscriptions", "organizations_url": "https://api.github.com/users/jmeyer42/orgs", "repos_url": "https://api.github.com/users/jmeyer42/repos", "events_url": "https://api.github.com/users/jmeyer42/events{/privacy}", "received_events_url": "https://api.github.com/users/jmeyer42/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-03-16T14:24:35Z", "updated_at": "2022-03-25T15:11:55Z", "closed_at": "2022-03-25T15:11:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/spulec/moto/blob/eed32a5f72fbdc0d33c4876d1b5439dfd1efd5d8/moto/ecr/models.py#L634-L651\r\n\r\nThis block of code appears to be indented one level too far and is running for each iteration of the for loop that begins on line 593 instead of only running once after the loop completes. This results in numerous failures being incorrectly added to the response. \r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4941/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4941/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4927", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4927/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4927/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4927/events", "html_url": "https://github.com/getmoto/moto/issues/4927", "id": 1165030342, "node_id": "I_kwDOAH5NfM5FcPPG", "number": 4927, "title": "mock_kinesis does not automatically reset state when used at class level", "user": {"login": "kishaningithub", "id": 763760, "node_id": "MDQ6VXNlcjc2Mzc2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/763760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kishaningithub", "html_url": "https://github.com/kishaningithub", "followers_url": "https://api.github.com/users/kishaningithub/followers", "following_url": "https://api.github.com/users/kishaningithub/following{/other_user}", "gists_url": "https://api.github.com/users/kishaningithub/gists{/gist_id}", "starred_url": "https://api.github.com/users/kishaningithub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kishaningithub/subscriptions", "organizations_url": "https://api.github.com/users/kishaningithub/orgs", "repos_url": "https://api.github.com/users/kishaningithub/repos", "events_url": "https://api.github.com/users/kishaningithub/events{/privacy}", "received_events_url": "https://api.github.com/users/kishaningithub/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-03-10T10:22:58Z", "updated_at": "2022-03-15T14:28:33Z", "closed_at": "2022-03-15T14:28:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Class code\r\n\r\n```python\r\n@mock_kinesis\r\nclass TestKinesisClient:\r\n    def setup_method(self, *args):\r\n        self.stream_name = \"test_stream\"\r\n        self.boto3_kinesis_client = boto3.client(\"kinesis\")\r\n        self.boto3_kinesis_client.create_stream(\r\n            StreamName=self.stream_name, ShardCount=1\r\n        )\r\n    \r\n   def test_one(self):\r\n      pass\r\n   \r\n  def test_two(self):\r\n      pass\r\n```\r\n\r\n## Expected behavior\r\nThe kinesis state should automatically reset for each test\r\n\r\n## Actual behavior\r\nFollowing error occurs indicating that the stream already exists.\r\n```log\r\nbotocore.errorfactory.ResourceInUseException: An error occurred (ResourceInUseException) when calling the CreateStream operation: test_stream\r\n```\r\n\r\n## Workaround\r\nAfter i added the following `teardown_method` to the class the error was gone\r\n\r\n```python\r\ndef teardown_method(self, *args):\r\n     self.boto3_kinesis_client.delete_stream(StreamName=self.stream_name)\r\n```\r\n\r\n## Versions\r\nMoto:  3.0.7\r\nPython: 3.9\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4927/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4927/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4913", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4913/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4913/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4913/events", "html_url": "https://github.com/getmoto/moto/issues/4913", "id": 1161106199, "node_id": "I_kwDOAH5NfM5FNRMX", "number": 4913, "title": "Errors after responses update to 0.19.0", "user": {"login": "haho16", "id": 13348635, "node_id": "MDQ6VXNlcjEzMzQ4NjM1", "avatar_url": "https://avatars.githubusercontent.com/u/13348635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haho16", "html_url": "https://github.com/haho16", "followers_url": "https://api.github.com/users/haho16/followers", "following_url": "https://api.github.com/users/haho16/following{/other_user}", "gists_url": "https://api.github.com/users/haho16/gists{/gist_id}", "starred_url": "https://api.github.com/users/haho16/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haho16/subscriptions", "organizations_url": "https://api.github.com/users/haho16/orgs", "repos_url": "https://api.github.com/users/haho16/repos", "events_url": "https://api.github.com/users/haho16/events{/privacy}", "received_events_url": "https://api.github.com/users/haho16/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2022-03-07T09:11:09Z", "updated_at": "2022-12-18T08:44:49Z", "closed_at": "2022-03-07T19:57:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, \r\n\r\nFirst off, thanks for the work you input on this very useful project.\r\n\r\nI am seeing a new issue when using moto[s3] in my unit tests. Here is the snippet of code I use:\r\n```\r\nimport boto3\r\nimport os\r\nimport pytest\r\nfrom moto import mock_s3\r\n\r\nfrom s3management import get_mapping_file\r\n\r\n\r\nbucket = \"test-bucket\"\r\nmappinglocation = \"es/devstatus.mapping\"\r\n\r\n@pytest.fixture(scope='function')\r\ndef aws_credentials():\r\n    \"\"\"Mocked AWS Credentials for moto.\"\"\"\r\n    os.environ['AWS_ACCESS_KEY_ID'] = 'testing'\r\n    os.environ['AWS_SECRET_ACCESS_KEY'] = 'testing'\r\n    os.environ['AWS_SECURITY_TOKEN'] = 'testing'\r\n    os.environ['AWS_SESSION_TOKEN'] = 'testing'\r\n    os.environ['AWS_DEFAULT_REGION'] = 'us-east-1'\r\n\r\n\r\n@pytest.fixture(scope='function')\r\ndef s3(aws_credentials):\r\n    with mock_s3():\r\n        yield boto3.resource('s3', region_name='us-east-1')\r\n\r\n\r\n@mock_s3\r\ndef test_get_mapping(s3):\r\n    dataset = \"devstatus\"\r\n    s3path = \"s3://test-bucket/es/\"\r\n\r\n    s3.create_bucket(Bucket=bucket)\r\n    obj = s3.Object(bucket, mappinglocation).put()\r\n\r\n    result = get_mapping_file(s3path, dataset)\r\n    expected_result = (f\"{dataset}.mapping\", bucket)\r\n\r\n    assert result == expected_result\r\n``` \r\nSince, I suspect, today's update in `responses` module from 0.18.0 to 0.19.0, I am getting following errors:\r\n``` \r\n\r\n=================================== FAILURES ===================================\r\n_______________________________ test_get_mapping _______________________________\r\n\r\nargs = (), kwargs = {'s3': s3.ServiceResource()}\r\n\r\n    def wrapper(*args, **kwargs):\r\n>       self.start(reset=reset)\r\n\r\n/usr/local/lib/python3.9/site-packages/moto/core/models.py:118: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/usr/local/lib/python3.9/site-packages/moto/core/models.py:96: in start\r\n    self.enable_patching(reset)\r\n/usr/local/lib/python3.9/site-packages/moto/core/models.py:358: in enable_patching\r\n    responses_mock.add(\r\n/usr/local/lib/python3.9/site-packages/responses/__init__.py:603: in add\r\n    self._registry.add(method)\r\n/usr/local/lib/python3.9/site-packages/responses/registries.py:53: in add\r\n    response = copy.deepcopy(response)\r\n/usr/local/lib/python3.9/copy.py:172: in deepcopy\r\n    y = _reconstruct(x, memo, *rv)\r\n/usr/local/lib/python3.9/copy.py:270: in _reconstruct\r\n    state = deepcopy(state, memo)\r\n/usr/local/lib/python3.9/copy.py:146: in deepcopy\r\n    y = copier(x, memo)\r\n/usr/local/lib/python3.9/copy.py:230: in _deepcopy_dict\r\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n/usr/local/lib/python3.9/copy.py:172: in deepcopy\r\n    y = _reconstruct(x, memo, *rv)\r\n/usr/local/lib/python3.9/copy.py:270: in _reconstruct\r\n    state = deepcopy(state, memo)\r\n/usr/local/lib/python3.9/copy.py:146: in deepcopy\r\n    y = copier(x, memo)\r\n/usr/local/lib/python3.9/copy.py:230: in _deepcopy_dict\r\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n/usr/local/lib/python3.9/copy.py:146: in deepcopy\r\n    y = copier(x, memo)\r\n/usr/local/lib/python3.9/copy.py:237: in _deepcopy_method\r\n    return type(x)(x.__func__, deepcopy(x.__self__, memo))\r\n/usr/local/lib/python3.9/copy.py:172: in deepcopy\r\n    y = _reconstruct(x, memo, *rv)\r\n/usr/local/lib/python3.9/copy.py:270: in _reconstruct\r\n    state = deepcopy(state, memo)\r\n/usr/local/lib/python3.9/copy.py:146: in deepcopy\r\n    y = copier(x, memo)\r\n/usr/local/lib/python3.9/copy.py:230: in _deepcopy_dict\r\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n/usr/local/lib/python3.9/copy.py:172: in deepcopy\r\n    y = _reconstruct(x, memo, *rv)\r\n/usr/local/lib/python3.9/copy.py:270: in _reconstruct\r\n    state = deepcopy(state, memo)\r\n/usr/local/lib/python3.9/copy.py:146: in deepcopy\r\n    y = copier(x, memo)\r\n/usr/local/lib/python3.9/copy.py:230: in _deepcopy_dict\r\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n/usr/local/lib/python3.9/copy.py:172: in deepcopy\r\n    y = _reconstruct(x, memo, *rv)\r\n/usr/local/lib/python3.9/copy.py:270: in _reconstruct\r\n    state = deepcopy(state, memo)\r\n/usr/local/lib/python3.9/copy.py:146: in deepcopy\r\n    y = copier(x, memo)\r\n/usr/local/lib/python3.9/copy.py:230: in _deepcopy_dict\r\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n/usr/local/lib/python3.9/copy.py:146: in deepcopy\r\n    y = copier(x, memo)\r\n/usr/local/lib/python3.9/copy.py:230: in _deepcopy_dict\r\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n/usr/local/lib/python3.9/copy.py:172: in deepcopy\r\n    y = _reconstruct(x, memo, *rv)\r\n/usr/local/lib/python3.9/copy.py:264: in _reconstruct\r\n    y = func(*args)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncls = <class 'jinja2.environment.Template'>, args = ()\r\n\r\n    def __newobj__(cls, *args):\r\n>       return cls.__new__(cls, *args)\r\nE       TypeError: __new__() missing 1 required positional argument: 'source'\r\n\r\n/usr/local/lib/python3.9/copyreg.py:95: TypeError\r\n```\r\nVersions I use are following:\r\nawscli==1.19.112\r\nmoto[s3]==3.0.4\r\npytest==7.0.1\r\n\r\nIf I add `responses==0.18.0` this error doesn't occur. Not sure exactly what is it related to, mayne the usage of `get_response_mock()` method...or so it seems. \r\n\r\nLet me know if you need any further info or tests on my side. Thanks!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4913/reactions", "total_count": 26, "+1": 26, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4913/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4906", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4906/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4906/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4906/events", "html_url": "https://github.com/getmoto/moto/issues/4906", "id": 1158262024, "node_id": "I_kwDOAH5NfM5FCa0I", "number": 4906, "title": "VersionStage is not removed from old secret when updating the value with a custom VersionStage (aws secrets)", "user": {"login": "stromp", "id": 7657725, "node_id": "MDQ6VXNlcjc2NTc3MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7657725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stromp", "html_url": "https://github.com/stromp", "followers_url": "https://api.github.com/users/stromp/followers", "following_url": "https://api.github.com/users/stromp/following{/other_user}", "gists_url": "https://api.github.com/users/stromp/gists{/gist_id}", "starred_url": "https://api.github.com/users/stromp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stromp/subscriptions", "organizations_url": "https://api.github.com/users/stromp/orgs", "repos_url": "https://api.github.com/users/stromp/repos", "events_url": "https://api.github.com/users/stromp/events{/privacy}", "received_events_url": "https://api.github.com/users/stromp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-03-03T10:55:37Z", "updated_at": "2022-03-03T13:02:58Z", "closed_at": "2022-03-03T13:02:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When you update a secret in secret manager with a custom version stage, it will not remove the version stage from the old version. This cause get_secret_value to return you the first version in the list with your custom version stage, (which is probably the oldest in your list) instead of the most recent version. Looking at the code this has only be implemented for the AWSCURRENT stage tag. \r\n\r\nto reproduce:\r\n\r\n```\r\nfrom moto import mock_secretsmanager\r\nimport boto3\r\nfrom pprint import pprint\r\n\r\n\r\ndef stages():\r\n    mock_secretsmanager().start()\r\n    boto_client = boto3.client('secretsmanager')\r\n    boto_client.create_secret(Name='test',\r\n                              Tags=[{'Key': 'a', 'Value': 'b'}])\r\n    boto_client.put_secret_value(SecretId=\"test\",\r\n                                 SecretString=\"[{'test': 'test1'}]\",\r\n                                 VersionStages=['test_stage'])\r\n    boto_client.put_secret_value(SecretId=\"test\",\r\n                                 SecretString=\"[{'test': 'test2'}]\",\r\n                                 VersionStages=['test_stage'])\r\n    secret_value = boto_client.get_secret_value(SecretId='test',\r\n                                                VersionStage='test_stage')\r\n    print(f\"Current secret value: {secret_value['SecretString']}\")\r\n    print(\"Current Versions:\")\r\n    pprint(boto_client.list_secret_version_ids(SecretId='test')['Versions'])\r\n    mock_secretsmanager().stop()\r\n```\r\n\r\noutput:\r\n\r\n```\r\nstages()\r\nCurrent secret value: [{'test': 'test1'}]\r\nCurrent Versions:\r\n[{'CreatedDate': datetime.datetime(2022, 3, 3, 11, 46, 30, tzinfo=tzlocal()),\r\n  'LastAccessedDate': datetime.datetime(2022, 3, 3, 11, 46, 30, tzinfo=tzlocal()),\r\n  'VersionId': '74d927c8-ce3e-42a3-86cd-716c6c6353ad',\r\n  'VersionStages': ['AWSCURRENT']},\r\n {'CreatedDate': datetime.datetime(2022, 3, 3, 11, 46, 30, tzinfo=tzlocal()),\r\n  'LastAccessedDate': datetime.datetime(2022, 3, 3, 11, 46, 30, tzinfo=tzlocal()),\r\n  'VersionId': '8c3e431d-b5bc-4fbf-a11b-377a1ca41959',\r\n  'VersionStages': ['test_stage']},\r\n {'CreatedDate': datetime.datetime(2022, 3, 3, 11, 46, 30, tzinfo=tzlocal()),\r\n  'LastAccessedDate': datetime.datetime(2022, 3, 3, 11, 46, 30, tzinfo=tzlocal()),\r\n  'VersionId': 'd14119f6-72f2-4d8c-bbf5-6c14ef83436e',\r\n  'VersionStages': ['test_stage']}]\r\n```\r\n\r\nAWS behavior:\r\n\r\n```\r\n\u276f aws secretsmanager put-secret-value --secret-id 'test-sjoerd' --secret-string 'something' --version-stages '[\"test\"]'\r\n{\r\n    \"ARN\": \"arn:aws:secretsmanager:eu-west-1:319518030215:secret:test-sjoerd-JOj6kh\",\r\n    \"Name\": \"test-sjoerd\",\r\n    \"VersionId\": \"3a78f9f6-35d6-4533-b738-c9bafb6c3682\",\r\n    \"VersionStages\": [\r\n        \"test\",\r\n        \"AWSCURRENT\"\r\n    ]\r\n}\r\n\u276f aws secretsmanager put-secret-value --secret-id 'test-sjoerd' --secret-string 'something2' --version-stages '[\"test\"]'\r\n{\r\n    \"ARN\": \"arn:aws:secretsmanager:eu-west-1:319518030215:secret:test-sjoerd-JOj6kh\",\r\n    \"Name\": \"test-sjoerd\",\r\n    \"VersionId\": \"0d0202b7-fbfe-4b23-87cd-65dcce959574\",\r\n    \"VersionStages\": [\r\n        \"test\"\r\n    ]\r\n}\r\naws secretsmanager get-secret-value --secret-id 'test-sjoerd' --version-stage \"test\"\r\n{\r\n    \"ARN\": \"arn:aws:secretsmanager:eu-west-1:319518030215:secret:test-sjoerd-JOj6kh\",\r\n    \"Name\": \"test-sjoerd\",\r\n    \"VersionId\": \"0d0202b7-fbfe-4b23-87cd-65dcce959574\",\r\n    \"SecretString\": \"something2\",\r\n    \"VersionStages\": [\r\n        \"test\"\r\n    ],\r\n    \"CreatedDate\": \"2022-03-03T11:52:55.611000+01:00\"\r\n}\r\n\u276f aws secretsmanager list-secret-version-ids --secret-id 'test-sjoerd'\r\n{\r\n    \"Versions\": [\r\n        {\r\n            \"VersionId\": \"0d0202b7-fbfe-4b23-87cd-65dcce959574\",\r\n            \"VersionStages\": [\r\n                \"test\"\r\n            ],\r\n            \"LastAccessedDate\": \"2022-03-03T01:00:00+01:00\",\r\n            \"CreatedDate\": \"2022-03-03T11:52:55.611000+01:00\"\r\n        },\r\n        {\r\n            \"VersionId\": \"3a78f9f6-35d6-4533-b738-c9bafb6c3682\",\r\n            \"VersionStages\": [\r\n                \"AWSCURRENT\"\r\n            ],\r\n            \"CreatedDate\": \"2022-03-03T11:52:46.292000+01:00\"\r\n        }\r\n    ],\r\n    \"ARN\": \"arn:aws:secretsmanager:eu-west-1:319518030215:secret:test-sjoerd-JOj6kh\",\r\n    \"Name\": \"test-sjoerd\"\r\n}\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4906/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4906/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4903", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4903/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4903/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4903/events", "html_url": "https://github.com/getmoto/moto/issues/4903", "id": 1157495012, "node_id": "I_kwDOAH5NfM5E_fjk", "number": 4903, "title": "Invalid instance ID error behaves differently from AWS", "user": {"login": "cheshirex", "id": 9530143, "node_id": "MDQ6VXNlcjk1MzAxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/9530143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cheshirex", "html_url": "https://github.com/cheshirex", "followers_url": "https://api.github.com/users/cheshirex/followers", "following_url": "https://api.github.com/users/cheshirex/following{/other_user}", "gists_url": "https://api.github.com/users/cheshirex/gists{/gist_id}", "starred_url": "https://api.github.com/users/cheshirex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cheshirex/subscriptions", "organizations_url": "https://api.github.com/users/cheshirex/orgs", "repos_url": "https://api.github.com/users/cheshirex/repos", "events_url": "https://api.github.com/users/cheshirex/events{/privacy}", "received_events_url": "https://api.github.com/users/cheshirex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/getmoto/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2022-03-02T17:34:26Z", "updated_at": "2022-03-07T22:28:05Z", "closed_at": "2022-03-07T22:25:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/spulec/moto/blob/ea81377cd0ce669dbb01d2141ef6f7e92c9b757d/moto/ec2/exceptions.py#L238\r\n\r\nWhen I terminate more than one non-existent ID in AWS, I get the error:\r\nAn error occurred (InvalidInstanceID.NotFound) when calling the TerminateInstances operation: The instance IDs 'i-0f5d8ccc56c69fae4, i-0eecca434287a1a33, i-05a2b7d81718e0678' do not exist\r\n\r\nBut this error currently only reports a single instance ID at once.\r\n\r\nNot a major issue, but the behaviour difference did trip me up at first.\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4903/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4901", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4901/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4901/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4901/events", "html_url": "https://github.com/getmoto/moto/issues/4901", "id": 1157095326, "node_id": "I_kwDOAH5NfM5E99-e", "number": 4901, "title": "[sns] sns_backend should default to env AWS_DEFAULT_REGION / DEFAULT_REGION_NAME", "user": {"login": "Lilja", "id": 6134511, "node_id": "MDQ6VXNlcjYxMzQ1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/6134511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lilja", "html_url": "https://github.com/Lilja", "followers_url": "https://api.github.com/users/Lilja/followers", "following_url": "https://api.github.com/users/Lilja/following{/other_user}", "gists_url": "https://api.github.com/users/Lilja/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lilja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lilja/subscriptions", "organizations_url": "https://api.github.com/users/Lilja/orgs", "repos_url": "https://api.github.com/users/Lilja/repos", "events_url": "https://api.github.com/users/Lilja/events{/privacy}", "received_events_url": "https://api.github.com/users/Lilja/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2658233195, "node_id": "MDU6TGFiZWwyNjU4MjMzMTk1", "url": "https://api.github.com/repos/getmoto/moto/labels/documentation", "name": "documentation", "color": "1C22A9", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-03-02T11:57:55Z", "updated_at": "2022-03-03T23:25:06Z", "closed_at": "2022-03-03T23:25:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm checking the documentation to see if it's possible to get the notifications of published SNS messages.\r\n\r\nThere is a like here that says you can access it through:\r\n`from moto.sns import sns_backend`. After 30 minutes of debugging why `sns_backend.topics` was empty when I just created the topic using boto3, I found the following line.\r\n\r\nhttps://github.com/spulec/moto/blob/7e88a901d9ed7612d92bdeb9dd67056c99bf3126/moto/sns/__init__.py#L4\r\n\r\nWe have this line in our tests: \r\n```python\r\nos.environ[\"AWS_DEFAULT_REGION\"] = moto.s3.responses.DEFAULT_REGION_NAME = AWS_REGION = \"eu-west-1\"\r\n```\r\nShouldn't this try to get the backend based on the default region?", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4901/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4901/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4899", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4899/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4899/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4899/events", "html_url": "https://github.com/getmoto/moto/issues/4899", "id": 1155554717, "node_id": "I_kwDOAH5NfM5E4F2d", "number": 4899, "title": "secretsmanager tag_resource creates duplicate tag key's if the key already exists", "user": {"login": "stromp", "id": 7657725, "node_id": "MDQ6VXNlcjc2NTc3MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/7657725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stromp", "html_url": "https://github.com/stromp", "followers_url": "https://api.github.com/users/stromp/followers", "following_url": "https://api.github.com/users/stromp/following{/other_user}", "gists_url": "https://api.github.com/users/stromp/gists{/gist_id}", "starred_url": "https://api.github.com/users/stromp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stromp/subscriptions", "organizations_url": "https://api.github.com/users/stromp/orgs", "repos_url": "https://api.github.com/users/stromp/repos", "events_url": "https://api.github.com/users/stromp/events{/privacy}", "received_events_url": "https://api.github.com/users/stromp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-01T16:35:18Z", "updated_at": "2022-03-01T22:51:08Z", "closed_at": "2022-03-01T22:50:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "secretsmanager tag_resource method add a tag instead of overwrites a tags if the key name is the same. Resulting in keys with duplicated keys. \r\n\r\nNormal AWS behavior:\r\n\r\n```\r\n\u276f aws secretsmanager create-secret --name 'test-sjoerd'\r\n{\r\n    \"ARN\": \"arn:aws:secretsmanager:eu-west-1:319518030215:secret:test-sjoerd-JOj6kh\",\r\n    \"Name\": \"test-sjoerd\"\r\n}\r\n\u276f aws secretsmanager tag-resource --secret-id 'test-sjoerd' --tags \"[{'Key': 'a', 'Value': 'b'}]\"\r\n\r\n\u276f aws secretsmanager describe-secret --secret-id 'test-sjoerd'\r\n{\r\n    \"ARN\": \"arn:aws:secretsmanager:eu-west-1:319518030215:secret:test-sjoerd-JOj6kh\",\r\n    \"Name\": \"test-sjoerd\",\r\n    \"LastChangedDate\": \"2022-03-01T16:39:02.553000+01:00\",\r\n    \"Tags\": [\r\n        {\r\n            \"Key\": \"a\",\r\n            \"Value\": \"b\"\r\n        }\r\n    ],\r\n    \"CreatedDate\": \"2022-03-01T16:37:05.377000+01:00\"\r\n}\r\n\u276f aws secretsmanager tag-resource --secret-id 'test-sjoerd' --tags '[{\"Key\": \"a\", \"Value\": \"c\"}]'\r\n\u276f aws secretsmanager describe-secret --secret-id 'test-sjoerd'\r\n{\r\n    \"ARN\": \"arn:aws:secretsmanager:eu-west-1:319518030215:secret:test-sjoerd-JOj6kh\",\r\n    \"Name\": \"test-sjoerd\",\r\n    \"LastChangedDate\": \"2022-03-01T16:39:29.306000+01:00\",\r\n    \"Tags\": [\r\n        {\r\n            \"Key\": \"a\",\r\n            \"Value\": \"c\"\r\n        }\r\n    ],\r\n    \"CreatedDate\": \"2022-03-01T16:37:05.377000+01:00\"\r\n}\r\n```\r\n\r\nhowever in moto you get:\r\n\r\n```\r\nfrom moto import mock_secretsmanager\r\nimport boto3\r\n\r\n\r\ndef tags():\r\n    mock_secretsmanager().start()\r\n    boto_client = boto3.client('secretsmanager')\r\n    boto_client.create_secret(Name='test',\r\n                              Tags=[{'Key': 'a', 'Value': 'b'}])\r\n    boto_client.tag_resource(SecretId='test',\r\n                             Tags=[{'Key': 'a', 'Value': 'c'}])\r\n    print(boto_client.describe_secret(SecretId='test')['Tags']\r\n```\r\nresulting in:\r\n\r\n```\r\ntags()\r\n[{'Key': 'a', 'Value': 'b'}, {'Key': 'a', 'Value': 'c'}]\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4899/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4893", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4893/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4893/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4893/events", "html_url": "https://github.com/getmoto/moto/issues/4893", "id": 1152138218, "node_id": "I_kwDOAH5NfM5ErDvq", "number": 4893, "title": "MOTO_ALLOW_NONEXISTENT_REGION with DynamoDB not creating table with invalid region.", "user": {"login": "mika-koivusaari", "id": 17751081, "node_id": "MDQ6VXNlcjE3NzUxMDgx", "avatar_url": "https://avatars.githubusercontent.com/u/17751081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mika-koivusaari", "html_url": "https://github.com/mika-koivusaari", "followers_url": "https://api.github.com/users/mika-koivusaari/followers", "following_url": "https://api.github.com/users/mika-koivusaari/following{/other_user}", "gists_url": "https://api.github.com/users/mika-koivusaari/gists{/gist_id}", "starred_url": "https://api.github.com/users/mika-koivusaari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mika-koivusaari/subscriptions", "organizations_url": "https://api.github.com/users/mika-koivusaari/orgs", "repos_url": "https://api.github.com/users/mika-koivusaari/repos", "events_url": "https://api.github.com/users/mika-koivusaari/events{/privacy}", "received_events_url": "https://api.github.com/users/mika-koivusaari/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-02-26T18:53:07Z", "updated_at": "2022-02-28T05:06:44Z", "closed_at": "2022-02-27T21:47:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have following code and test.\r\n\r\nddbresource.py\r\n```\r\nimport boto3\r\n\r\n\r\nclass UseDynamoDb:\r\n    dynamo_db = None\r\n\r\n    def __init__(self, dynamo_db):\r\n        self.dynamo_db = dynamo_db\r\n\r\n    def create_table(self):\r\n        table = self.dynamo_db.create_table(\r\n            TableName='test_table',\r\n            KeySchema=[\r\n                {\r\n                    'AttributeName': 'key',\r\n                    'KeyType': 'HASH'  # Partition key\r\n                },\r\n                {\r\n                    'AttributeName': 'sort',\r\n                    'KeyType': 'RANGE'  # Sort key\r\n                }\r\n            ],\r\n            AttributeDefinitions=[\r\n                {\r\n                    'AttributeName': 'key',\r\n                    'AttributeType': 'S'\r\n                },\r\n                {\r\n                    'AttributeName': 'sort',\r\n                    'AttributeType': 'S'\r\n                }],\r\n            ProvisionedThroughput={\r\n                'ReadCapacityUnits': 1,\r\n                'WriteCapacityUnits': 1\r\n            }\r\n        )\r\n```\r\n\r\ntest_ddbresource.py\r\n```\r\nimport unittest\r\nimport boto3\r\nfrom moto import mock_dynamodb2\r\nimport os\r\n\r\n\r\nclass MyTestCase(unittest.TestCase):\r\n\r\n    @mock_dynamodb2\r\n    def test_table_creation(self):\r\n        # dynamo_db = boto3.resource('dynamodb', region_name='us-east-1')  # Success\r\n        dynamo_db = boto3.resource('dynamodb', region_name='test')  # Fail\r\n        from moto.core import patch_client, patch_resource\r\n\r\n        from ddbresource import UseDynamoDb\r\n        use_dynamo_db = UseDynamoDb(dynamo_db)\r\n        use_dynamo_db.create_table()\r\n\r\n        tables = list(dynamo_db.tables.all())\r\n        self.assertEqual(1, len(tables), 'One table should be created')\r\n        self.assertEqual('test_table', tables[0]._name)\r\n\r\n\r\nos.environ[\"MOTO_ALLOW_NONEXISTENT_REGION\"] = \"True\"\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n```\r\n\r\nBy changing the region with following two lines test either fails or succeeds.\r\n```\r\n        # dynamo_db = boto3.resource('dynamodb', region_name='us-east-1')  # Success\r\n        dynamo_db = boto3.resource('dynamodb', region_name='test')  # Fail\r\n```\r\nFail is from assert 'One table should be created'. My understanding is that MOTO_ALLOW_NONEXISTENT_REGION should enable invalid regions (which seems to work, removing the the setting gives error about region), but for reason table creation/or listing does not seem to work?\r\n\r\nVersions:\r\nboto3              1.20.54\r\nbotocore           1.23.54\r\nmoto               3.0.4\r\nPython 3.9.7", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4893/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4893/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4880", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4880/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4880/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4880/events", "html_url": "https://github.com/getmoto/moto/issues/4880", "id": 1146196144, "node_id": "I_kwDOAH5NfM5EUZCw", "number": 4880, "title": "table.update_item raises ValueError instead of expected ResourceNotFoundException", "user": {"login": "jrobbins-LiveData", "id": 79278744, "node_id": "MDQ6VXNlcjc5Mjc4NzQ0", "avatar_url": "https://avatars.githubusercontent.com/u/79278744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrobbins-LiveData", "html_url": "https://github.com/jrobbins-LiveData", "followers_url": "https://api.github.com/users/jrobbins-LiveData/followers", "following_url": "https://api.github.com/users/jrobbins-LiveData/following{/other_user}", "gists_url": "https://api.github.com/users/jrobbins-LiveData/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrobbins-LiveData/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrobbins-LiveData/subscriptions", "organizations_url": "https://api.github.com/users/jrobbins-LiveData/orgs", "repos_url": "https://api.github.com/users/jrobbins-LiveData/repos", "events_url": "https://api.github.com/users/jrobbins-LiveData/events{/privacy}", "received_events_url": "https://api.github.com/users/jrobbins-LiveData/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-02-21T20:20:20Z", "updated_at": "2022-02-26T20:53:11Z", "closed_at": "2022-02-24T07:28:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using `moto` v3.0.4 on Windows 10.\r\n\r\nIssue https://github.com/spulec/moto/issues/4344 (Closed) reported something similar with `batch_get_item`, but this report is for `update_item`.   My code is expecting `ResourceNotFoundException` in the case of a non-existent table (which is the observed behavior on AWS.)  But with `moto`, `ValueError` is raised instead.\r\n\r\nReproduction available at https://github.com/LiveData-Inc/moto_dynamodb2_issue.\r\n\r\n```python\r\n    with mock_dynamodb2():\r\n        client = boto3.client(\"dynamodb\")\r\n        resource_client = boto3.resource(\"dynamodb\")\r\n\r\n        test_table = resource_client.Table(\"test\")\r\n\r\n        try:\r\n            result = test_table.update_item(\r\n                Key={\"Index\": \"something\"},\r\n                UpdateExpression=\"SET owner = :owner\",\r\n                ExpressionAttributeValues={\":owner\": \"some_owner\"},\r\n                ConditionExpression=Attr(\"owner\").eq(\"UNOWNED\") | Attr(\"owner\").not_exists(),\r\n                ReturnValues=\"ALL_NEW\",\r\n                ReturnConsumedCapacity=\"TOTAL\",\r\n            )\r\n\r\n            print(f\"{result=}\")\r\n\r\n        # NOTE I expected this exception\r\n        except client.exceptions.ResourceNotFoundException as error:\r\n            print(f\"{error=}\")\r\n\r\n        # NOTE but instead got this exception\r\n        except ValueError as error:\r\n            print(f\"{error=}\")\r\n```\r\n\r\n\r\n\r\nFull Traceback\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\test.py\", line 41, in <module>\r\n    main()\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\test.py\", line 20, in main\r\n    result = test_table.update_item(\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\boto3\\resources\\factory.py\", line 520, in do_action\r\n    response = action(self, *args, **kwargs)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\boto3\\resources\\action.py\", line 83, in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\client.py\", line 391, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\client.py\", line 705, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\client.py\", line 725, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\endpoint.py\", line 106, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\endpoint.py\", line 182, in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\endpoint.py\", line 301, in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\hooks.py\", line 357, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\retryhandler.py\", line 192, in __call__\r\n    if self._checker(**checker_kwargs):\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\retryhandler.py\", line 265, in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\retryhandler.py\", line 284, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\retryhandler.py\", line 331, in __call__\r\n    checker_response = checker(attempt_number, response,\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\retryhandler.py\", line 231, in __call__\r\n    return self._check_caught_exception(\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\retryhandler.py\", line 374, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\endpoint.py\", line 245, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\hooks.py\", line 357, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\botocore\\hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\moto\\core\\models.py\", line 289, in __call__\r\n    status, headers, body = response_callback(\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\moto\\core\\responses.py\", line 205, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\moto\\core\\responses.py\", line 315, in _dispatch\r\n    return self.call_action()\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\moto\\core\\utils.py\", line 229, in _wrapper\r\n    response = f(*args, **kwargs)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\moto\\core\\utils.py\", line 261, in _wrapper\r\n    response = f(*args, **kwargs)\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\moto\\dynamodb2\\responses.py\", line 136, in call_action\r\n    response = getattr(self, endpoint)()\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\moto\\dynamodb2\\responses.py\", line 950, in update_item\r\n    existing_item = copy.deepcopy(self.dynamodb_backend.get_item(name, key))\r\n  File \"C:\\Users\\jeff1\\Documents\\projects\\git\\moto_dynamodb2_issue\\.venv\\lib\\site-packages\\moto\\dynamodb2\\models\\__init__.py\", line 1397, in get_item\r\n    raise ValueError(\"No table found\")\r\nValueError: No table found\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4880/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4880/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4870", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4870/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4870/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4870/events", "html_url": "https://github.com/getmoto/moto/issues/4870", "id": 1142820144, "node_id": "I_kwDOAH5NfM5EHg0w", "number": 4870, "title": "moto breaks repsonses library usage", "user": {"login": "07pepa", "id": 9963200, "node_id": "MDQ6VXNlcjk5NjMyMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9963200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/07pepa", "html_url": "https://github.com/07pepa", "followers_url": "https://api.github.com/users/07pepa/followers", "following_url": "https://api.github.com/users/07pepa/following{/other_user}", "gists_url": "https://api.github.com/users/07pepa/gists{/gist_id}", "starred_url": "https://api.github.com/users/07pepa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/07pepa/subscriptions", "organizations_url": "https://api.github.com/users/07pepa/orgs", "repos_url": "https://api.github.com/users/07pepa/repos", "events_url": "https://api.github.com/users/07pepa/events{/privacy}", "received_events_url": "https://api.github.com/users/07pepa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/getmoto/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2022-02-18T10:45:01Z", "updated_at": "2022-03-03T15:54:53Z", "closed_at": "2022-02-28T22:57:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "if moto is used with responses for mocking request responses library will be broken\r\n\r\n```python\r\nimport responses\r\nfrom moto import mock_s3\r\n@mock_s3\r\n@responses.activate\r\ndef test():\r\n    responses.add(\r\n        responses.POST,\r\n        url='http://someurl',\r\n        body=\"4\",\r\n        match=[\r\n            matchers.header_matcher({\"Accept\": \"text/plain\"})\r\n        ])\r\n     conn = boto3.resource('s3', region_name='us-east-1')\r\n     boto3.client('s3', region_name='us-east-1')\r\n     s3.put_object(Bucket='mybucket', Key=\"name\", Body=\"value\")\r\n     code_under_test()\r\n\r\n\r\ndef code_under_test():\r\n    body = boto3.resource('s3', region_name='us-east-1').Object('mybucket', 'name').get()['Body'].read().decode(\"utf-8\")\r\n    with requests.get(\"http://someurl\") as r:\r\n        pass\r\n```\r\n\r\na matchers.header_matcher will cause null pointer exception because request is None\r\n\r\nsince this does not happen when i mock boto3 in diferent way i presume it is failiure of moto library however\r\ni recomend to cooperate with https://github.com/getsentry/responses team\r\n\r\n\r\nsecondly same code will fail even earlyer if you swap order of decorators\r\n\r\n```python\r\nimport responses\r\nfrom moto import mock_s3\r\n@responses.activate\r\n@mock_s3\r\ndef test():\r\n    responses.add(\r\n        responses.POST,\r\n        url='http://someurl',\r\n        body=\"4\",\r\n        match=[\r\n            matchers.header_matcher({\"Accept\": \"text/plain\"})\r\n        ])\r\n     conn = boto3.resource('s3', region_name='us-east-1')\r\n     boto3.client('s3', region_name='us-east-1')\r\n     s3.put_object(Bucket='mybucket', Key=\"name\", Body=\"value\")\r\n     code_under_test()\r\n\r\n\r\ndef code_under_test():\r\n    body = boto3.resource('s3', region_name='us-east-1').Object('mybucket', 'steve').get()['Body'].read().decode(\"utf-8\")\r\n    with requests.get(\"http://someurl\") as r:\r\n        pass\r\n```\r\nresponses does not activate and request may get 400", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4870/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4870/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4857", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4857/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4857/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4857/events", "html_url": "https://github.com/getmoto/moto/issues/4857", "id": 1134970432, "node_id": "I_kwDOAH5NfM5DpkZA", "number": 4857, "title": "TimestreamWrite (TimestreamTable.write_records) uses append rather than extend when appropriate.", "user": {"login": "whardier", "id": 305301, "node_id": "MDQ6VXNlcjMwNTMwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/305301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whardier", "html_url": "https://github.com/whardier", "followers_url": "https://api.github.com/users/whardier/followers", "following_url": "https://api.github.com/users/whardier/following{/other_user}", "gists_url": "https://api.github.com/users/whardier/gists{/gist_id}", "starred_url": "https://api.github.com/users/whardier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whardier/subscriptions", "organizations_url": "https://api.github.com/users/whardier/orgs", "repos_url": "https://api.github.com/users/whardier/repos", "events_url": "https://api.github.com/users/whardier/events{/privacy}", "received_events_url": "https://api.github.com/users/whardier/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-02-13T01:53:21Z", "updated_at": "2022-02-14T20:17:49Z", "closed_at": "2022-02-14T20:17:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Near as I can tell this was just an oversight:\r\n\r\nhttps://github.com/spulec/moto/blob/master/moto/timestreamwrite/models.py#L17\r\n\r\nRecords will never be a single entity per the spec.\r\n\r\nhttps://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/timestream-write.html#TimestreamWrite.Client.write_records\r\n\r\nFor now I'm running records through more_itertools.flatten to ensure this isn't a problem when testing code.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4857/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4841", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4841/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4841/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4841/events", "html_url": "https://github.com/getmoto/moto/issues/4841", "id": 1127150264, "node_id": "I_kwDOAH5NfM5DLvK4", "number": 4841, "title": "KeyError: 'aurora-postgresql' when calling rds2 `create_db_cluster` on Moto 3.0.2", "user": {"login": "arnaudh", "id": 842509, "node_id": "MDQ6VXNlcjg0MjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/842509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arnaudh", "html_url": "https://github.com/arnaudh", "followers_url": "https://api.github.com/users/arnaudh/followers", "following_url": "https://api.github.com/users/arnaudh/following{/other_user}", "gists_url": "https://api.github.com/users/arnaudh/gists{/gist_id}", "starred_url": "https://api.github.com/users/arnaudh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arnaudh/subscriptions", "organizations_url": "https://api.github.com/users/arnaudh/orgs", "repos_url": "https://api.github.com/users/arnaudh/repos", "events_url": "https://api.github.com/users/arnaudh/events{/privacy}", "received_events_url": "https://api.github.com/users/arnaudh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-02-08T11:47:27Z", "updated_at": "2022-02-08T22:01:00Z", "closed_at": "2022-02-08T17:37:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n```\r\nimport boto3\r\nfrom moto import mock_rds2\r\n\r\nwith mock_rds2():\r\n    client = boto3.client(\"rds\", region_name=\"us-east-1\")\r\n    cluster = client.create_db_cluster(\r\n        DBClusterIdentifier=\"dbc-id\",\r\n        Engine=\"aurora-postgresql\",\r\n        MasterUsername=\"dbuser\",\r\n        MasterUserPassword=\"abcd1234\",\r\n    )\r\n```\r\n\r\nWith moto 3.0.1 this runs without error.\r\n\r\nWith moto 3.0.2 we get the following error:\r\n\r\n```\r\ntests/test_issue.py:10: in <module>\r\n    MasterUserPassword=\"abcd1234\",\r\n.tox/py37/lib/python3.7/site-packages/botocore/client.py:391: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n.tox/py37/lib/python3.7/site-packages/botocore/client.py:706: in _make_api_call\r\n    operation_model, request_dict, request_context)\r\n.tox/py37/lib/python3.7/site-packages/botocore/client.py:725: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n.tox/py37/lib/python3.7/site-packages/botocore/endpoint.py:106: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n.tox/py37/lib/python3.7/site-packages/botocore/endpoint.py:183: in _send_request\r\n    success_response, exception):\r\n.tox/py37/lib/python3.7/site-packages/botocore/endpoint.py:304: in _needs_retry\r\n    caught_exception=caught_exception, request_dict=request_dict)\r\n.tox/py37/lib/python3.7/site-packages/botocore/hooks.py:357: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n.tox/py37/lib/python3.7/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n.tox/py37/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n.tox/py37/lib/python3.7/site-packages/botocore/retryhandler.py:192: in __call__\r\n    if self._checker(**checker_kwargs):\r\n.tox/py37/lib/python3.7/site-packages/botocore/retryhandler.py:266: in __call__\r\n    caught_exception)\r\n.tox/py37/lib/python3.7/site-packages/botocore/retryhandler.py:284: in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n.tox/py37/lib/python3.7/site-packages/botocore/retryhandler.py:332: in __call__\r\n    caught_exception)\r\n.tox/py37/lib/python3.7/site-packages/botocore/retryhandler.py:232: in __call__\r\n    attempt_number, caught_exception)\r\n.tox/py37/lib/python3.7/site-packages/botocore/retryhandler.py:374: in _check_caught_exception\r\n    raise caught_exception\r\n.tox/py37/lib/python3.7/site-packages/botocore/endpoint.py:245: in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n.tox/py37/lib/python3.7/site-packages/botocore/hooks.py:357: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n.tox/py37/lib/python3.7/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n.tox/py37/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n.tox/py37/lib/python3.7/site-packages/moto/core/models.py:286: in __call__\r\n    request, request.url, request.headers\r\n.tox/py37/lib/python3.7/site-packages/moto/core/responses.py:205: in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n.tox/py37/lib/python3.7/site-packages/moto/core/responses.py:315: in _dispatch\r\n    return self.call_action()\r\n.tox/py37/lib/python3.7/site-packages/moto/core/responses.py:405: in call_action\r\n    response = method()\r\n.tox/py37/lib/python3.7/site-packages/moto/rds2/responses.py:498: in create_db_cluster\r\n    cluster = self.backend.create_db_cluster(kwargs)\r\n.tox/py37/lib/python3.7/site-packages/moto/rds2/models.py:1750: in create_db_cluster\r\n    cluster = Cluster(**kwargs)\r\n.tox/py37/lib/python3.7/site-packages/moto/rds2/models.py:51: in __init__\r\n    self.engine_version = Cluster.default_engine_version(self.engine)\r\n.tox/py37/lib/python3.7/site-packages/moto/rds2/models.py:202: in default_engine_version\r\n    }[engine]\r\nE   KeyError: 'aurora-postgresql'\r\n```\r\n\r\nI see `default_engine_version` [was added](https://github.com/spulec/moto/pull/4790/files#diff-33d75ddb5688506c7eaa4cb77110308822d470376a209a925a8f3ccf7a4a692dR183) in 3.0.2 and a call is made to it inside Cluster `__init__`.\r\n\r\nHowever it seems this method doesn't support all engine types (notably `aurora-postgresql` which I am using) as per the [AWS reference](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html).\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4841/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4841/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4831", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4831/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4831/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4831/events", "html_url": "https://github.com/getmoto/moto/issues/4831", "id": 1124580754, "node_id": "I_kwDOAH5NfM5DB72S", "number": 4831, "title": "new clients/resources do not find the resources created in Setup()", "user": {"login": "lynkfox", "id": 14082243, "node_id": "MDQ6VXNlcjE0MDgyMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/14082243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lynkfox", "html_url": "https://github.com/lynkfox", "followers_url": "https://api.github.com/users/lynkfox/followers", "following_url": "https://api.github.com/users/lynkfox/following{/other_user}", "gists_url": "https://api.github.com/users/lynkfox/gists{/gist_id}", "starred_url": "https://api.github.com/users/lynkfox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lynkfox/subscriptions", "organizations_url": "https://api.github.com/users/lynkfox/orgs", "repos_url": "https://api.github.com/users/lynkfox/repos", "events_url": "https://api.github.com/users/lynkfox/events{/privacy}", "received_events_url": "https://api.github.com/users/lynkfox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-02-04T20:16:10Z", "updated_at": "2022-02-05T15:56:47Z", "closed_at": "2022-02-05T11:47:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Versions: \r\nmoto 3.0.2\r\nboto3 1.20.24\r\npytest 6.2.5\r\n \r\n \r\n with the update past 3.0, any of our tests using moto failed with \"Resource not Found\"\r\n \r\n The tests originally looked something like this (which worked under 2.3.2:\r\n\r\n (create table creates the table in use and add a single item to, and returns a dynamodb resource)\r\n\r\n\r\n ```\r\n @mock_dynamodb2\r\nclass Test_from_dynamo():\r\n    def setup(self):\r\n        self.dynamodb = create_table()\r\n\r\n    def teardown(self):\r\n        # self.dynamodb.Table(TEST_TABLE_NAME).delete()\r\n       pass\r\n\r\n    def test_mock_data_in_dynamo(self):\r\n        table = self.dynamodb.Table(TEST_TABLE_NAME)\r\n        all_items = table.scan()\r\n        assert len(all_items[\"Items\"]) == 1\r\n```\r\n\r\nplease note the recreation of the boto3 resource inside the test.\r\n\r\nI am aware of the teardown workaround, however the test is failing with Resource Not Found on the table=self.dynamodb.Table(TEST_TABLE_NAME) line.\r\n\r\nso resources set up in setup are not sticking around  into the test itself.\r\n\r\nhowever, if we change the test to:\r\n\r\n```\r\ndef test_mock_data_successfully_setup_for_comparing_premiums(self):\r\n        dynamodb = create_table()\r\n        table = dynamodb.Table(TEST_TABLE_NAME)\r\n        all_items = table.scan()\r\n        assert len(all_items[\"Items\"]) == 1\r\n```\r\n\r\nThe test now passes.\r\n\r\nWith over 1700 unit tests across 40 some files, most of them dealing with boto3/moto resources in some way, is there some work around that does not involve me updating every single test to call the creation driectly? Or is there some other issue here?\r\n\r\n(of note, we've just gone back to 2.3.2 for now but would like to be able to keep our libs up to date.)", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4831/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4831/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4821", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4821/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4821/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4821/events", "html_url": "https://github.com/getmoto/moto/issues/4821", "id": 1122206964, "node_id": "I_kwDOAH5NfM5C44T0", "number": 4821, "title": "s3 list_object_versions ignores Prefix on DeleteMarkers.", "user": {"login": "FZetting", "id": 16813860, "node_id": "MDQ6VXNlcjE2ODEzODYw", "avatar_url": "https://avatars.githubusercontent.com/u/16813860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FZetting", "html_url": "https://github.com/FZetting", "followers_url": "https://api.github.com/users/FZetting/followers", "following_url": "https://api.github.com/users/FZetting/following{/other_user}", "gists_url": "https://api.github.com/users/FZetting/gists{/gist_id}", "starred_url": "https://api.github.com/users/FZetting/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FZetting/subscriptions", "organizations_url": "https://api.github.com/users/FZetting/orgs", "repos_url": "https://api.github.com/users/FZetting/repos", "events_url": "https://api.github.com/users/FZetting/events{/privacy}", "received_events_url": "https://api.github.com/users/FZetting/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2022-02-02T17:34:50Z", "updated_at": "2022-02-25T11:27:47Z", "closed_at": "2022-02-25T11:27:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nafter deleting some objects in a bucket with versioning, when I search with client.list_object_versions(Bucket='myBucket', Prefix='MyKey') only objects with the key \"MyKey\" should appear in the result. For \"Versions\" this is true, for \"DeleteMarkers\" the prefix is ignored.\r\nIf I do the same with MinIo the expected result appears.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4821/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4821/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4819", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4819/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4819/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4819/events", "html_url": "https://github.com/getmoto/moto/issues/4819", "id": 1119379693, "node_id": "I_kwDOAH5NfM5CuGDt", "number": 4819, "title": "SNS publish_batch issue with RawMessageDelivery", "user": {"login": "simonschmidt", "id": 2243140, "node_id": "MDQ6VXNlcjIyNDMxNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/2243140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonschmidt", "html_url": "https://github.com/simonschmidt", "followers_url": "https://api.github.com/users/simonschmidt/followers", "following_url": "https://api.github.com/users/simonschmidt/following{/other_user}", "gists_url": "https://api.github.com/users/simonschmidt/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonschmidt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonschmidt/subscriptions", "organizations_url": "https://api.github.com/users/simonschmidt/orgs", "repos_url": "https://api.github.com/users/simonschmidt/repos", "events_url": "https://api.github.com/users/simonschmidt/events{/privacy}", "received_events_url": "https://api.github.com/users/simonschmidt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-01-31T12:41:31Z", "updated_at": "2022-02-21T22:01:39Z", "closed_at": "2022-02-21T22:01:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "To reproduce: https://github.com/spulec/moto/pull/4818\r\n\r\nThe behavior between `sns.publish` and `sns.publish_batch` seems to be slightly different, in `sns.publish` the message attributes are handled with `SNSResponse._parse_message_attributes`.\r\n\r\nThis leads to an exception being raised in `SNSModel.publish_batch` that's not a `InvalidParameterValue` so the message is not listed in neither `\"Failed\"` or `\"Succeeded\"` in the response:\r\nhttps://github.com/spulec/moto/blob/0a1bb6bae165b38cdec5e299a7f859f2cb27de93/moto/sns/models.py#L887-L888\r\n\r\nIn `SNSResponse.publish_batch` I tried hardcoding the `\"MessageAttributes\"` to the same format that's provided by `_parse_message_attributes` which seemed to make it work (besides the attribute being hardcoded of course)\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4819/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4819/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4806", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4806/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4806/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4806/events", "html_url": "https://github.com/getmoto/moto/issues/4806", "id": 1117624879, "node_id": "I_kwDOAH5NfM5CnZov", "number": 4806, "title": "AWS Batch using resourceRequirements raises TypeError", "user": {"login": "afaulconbridge", "id": 617276, "node_id": "MDQ6VXNlcjYxNzI3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/617276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afaulconbridge", "html_url": "https://github.com/afaulconbridge", "followers_url": "https://api.github.com/users/afaulconbridge/followers", "following_url": "https://api.github.com/users/afaulconbridge/following{/other_user}", "gists_url": "https://api.github.com/users/afaulconbridge/gists{/gist_id}", "starred_url": "https://api.github.com/users/afaulconbridge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afaulconbridge/subscriptions", "organizations_url": "https://api.github.com/users/afaulconbridge/orgs", "repos_url": "https://api.github.com/users/afaulconbridge/repos", "events_url": "https://api.github.com/users/afaulconbridge/events{/privacy}", "received_events_url": "https://api.github.com/users/afaulconbridge/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-01-28T16:50:11Z", "updated_at": "2022-01-29T12:07:10Z", "closed_at": "2022-01-29T12:07:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Moto 3.0.1 with the Python mocks. Small code demo: https://gist.github.com/afaulconbridge/01d1a7f0190c3f30a167244e20aeaa6d#file-gistfile1-txt-L149-L157\r\n\r\nFor AWS Batch, when creating a job definition with `boto3.client(\"batch\").register_job_definition()` for running on fargate there is a section in `resourceRequirements` that specifies vCPU & memory. Boto3 wants the them to be specified as a string (e.g. `\"512\"`) and will reject it if it isn't, but Moto validates it as if it is an integer: https://github.com/spulec/moto/blob/bcf2eeb13ba3cc55de7bf4a46b3ce73b74214ed6/moto/batch/models.py#L286-L296\r\n\r\nThere is also a legacy option in Boto where they *are* specified as integers, and I think that was the original way this validation in Moto was intended to be used. I'll have a look and see if I can make a PR to fix it.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4806/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4806/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4797", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4797/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4797/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4797/events", "html_url": "https://github.com/getmoto/moto/issues/4797", "id": 1114942525, "node_id": "I_kwDOAH5NfM5CdKw9", "number": 4797, "title": "\"Bucket does not exist\" thrown from inherited tearDown method in moto 3.0.1", "user": {"login": "crbunney", "id": 4267911, "node_id": "MDQ6VXNlcjQyNjc5MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4267911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crbunney", "html_url": "https://github.com/crbunney", "followers_url": "https://api.github.com/users/crbunney/followers", "following_url": "https://api.github.com/users/crbunney/following{/other_user}", "gists_url": "https://api.github.com/users/crbunney/gists{/gist_id}", "starred_url": "https://api.github.com/users/crbunney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crbunney/subscriptions", "organizations_url": "https://api.github.com/users/crbunney/orgs", "repos_url": "https://api.github.com/users/crbunney/repos", "events_url": "https://api.github.com/users/crbunney/events{/privacy}", "received_events_url": "https://api.github.com/users/crbunney/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-01-26T12:01:57Z", "updated_at": "2022-01-27T10:32:08Z", "closed_at": "2022-01-27T00:01:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have this code:\r\n```python\r\nimport unittest\r\n\r\nimport boto3\r\nfrom moto import mock_s3\r\n\r\n\r\n@mock_s3\r\nclass BaseTest(unittest.TestCase):\r\n\r\n    def setUp(self) -> None:\r\n        self.s3 = boto3.resource('s3')\r\n        self.test_bucket = self.s3.Bucket(\"testbucket\")\r\n        self.test_bucket.create()\r\n\r\n    def tearDown(self) -> None:\r\n        self.test_bucket.delete()\r\n\r\n\r\n@mock_s3\r\nclass MyTest(BaseTest):\r\n\r\n    def test_a_thing(self):\r\n        pass\r\n\r\n```\r\n\r\nI'm running this code using:\r\n* Python 3.8.12 \r\n* `pytest==6.2.5`\r\n* `boto3==1.20.30`\r\n* `botocore==1.23.30`\r\n\r\nAlthough working in a conda environment, in all cases I've installed moto into the conda env from pypi using pip.\r\n\r\nI expect that the `BaseTest` `setUp` and `tearDown` is run for each test in `MyTest`. I do this to share common setup code between multiple test classes. In practice, there's more shared code than I've given here, this is just the minimal code I needed to demonstrate the issue.\r\n\r\nUnder `moto==2.3.2`, this has worked as expected (and under earlier versions, although I specifically checked the above code with `2.3.2` whilst raising this ticket)\r\n\r\nUnder `moto==3.0.1` it fails with a `NoSuchBucket` exception:\r\n<details><summary> click to expand full traceback</summary>\r\n<p>\r\n\r\n```\r\ntests/unit/data/test_moto.py:27 (MyTest.test_a_thing)\r\nself = <tests.unit.data.test_moto.MyTest testMethod=test_a_thing>\r\n\r\n    def tearDown(self) -> None:\r\n>       self.test_bucket.delete()\r\n\r\nunit/data/test_moto.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../../../conda/envs/cap_env/lib/python3.8/site-packages/boto3/resources/factory.py:520: in do_action\r\n    response = action(self, *args, **kwargs)\r\n../../../conda/envs/cap_env/lib/python3.8/site-packages/boto3/resources/action.py:83: in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\n../../../conda/envs/cap_env/lib/python3.8/site-packages/botocore/client.py:391: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.S3 object at 0x7f258d36eb20>\r\noperation_name = 'DeleteBucket', api_params = {'Bucket': 'testbucket'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record('API_CALL', {\r\n            'service': service_name,\r\n            'operation': operation_name,\r\n            'params': api_params,\r\n        })\r\n        if operation_model.deprecated:\r\n            logger.debug('Warning: %s.%s() is deprecated',\r\n                         service_name, operation_name)\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            model=operation_model, params=request_dict,\r\n            request_signer=self._request_signer, context=request_context)\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context)\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            http_response=http, parsed=parsed_response,\r\n            model=operation_model, context=request_context\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.errorfactory.NoSuchBucket: An error occurred (NoSuchBucket) when calling the DeleteBucket operation: The specified bucket does not exist\r\n\r\n../../../conda/envs/cap_env/lib/python3.8/site-packages/botocore/client.py:719: NoSuchBucket\r\n```\r\n</p>\r\n</details>\r\n\r\n\r\nI've found a workaround in the form of explicitly calling the `setUp`/`tearDown` methods from the subclasses, but I don't think this it's obvious/intuitive to users that they'd need to do this. I suspect most would just give up and declare it broken/bugged. It was only because I knew it used to work in earlier versions and went hunting for a changelog that I read about the change in behaviour for the class level decorator and thought to give this a go.\r\n<details><summary>click to expand code with workaround applied</summary>\r\n<p>\r\n\r\n```python\r\nimport unittest\r\n\r\nimport boto3\r\nfrom moto import mock_s3\r\n\r\n\r\n@mock_s3\r\nclass BaseTest(unittest.TestCase):\r\n\r\n    def setUp(self) -> None:\r\n        self.s3 = boto3.resource('s3')\r\n        self.test_bucket = self.s3.Bucket(\"testbucket\")\r\n        self.test_bucket.create()\r\n\r\n    def tearDown(self) -> None:\r\n        self.test_bucket.delete()\r\n\r\n\r\n@mock_s3\r\nclass MyTest(BaseTest):\r\n\r\n    def setUp(self) -> None:\r\n        super().setUp()\r\n\r\n    def tearDown(self) -> None:\r\n        super().tearDown()\r\n\r\n    def test_a_thing(self):\r\n        pass\r\n\r\n```\r\n</p>\r\n</details>", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4797/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4777", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4777/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4777/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4777/events", "html_url": "https://github.com/getmoto/moto/issues/4777", "id": 1108125241, "node_id": "I_kwDOAH5NfM5CDKY5", "number": 4777, "title": "`UnicodeDecodeError` when mocking Glacier Vault's `upload_archive`", "user": {"login": "EnzoMolion", "id": 12967226, "node_id": "MDQ6VXNlcjEyOTY3MjI2", "avatar_url": "https://avatars.githubusercontent.com/u/12967226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EnzoMolion", "html_url": "https://github.com/EnzoMolion", "followers_url": "https://api.github.com/users/EnzoMolion/followers", "following_url": "https://api.github.com/users/EnzoMolion/following{/other_user}", "gists_url": "https://api.github.com/users/EnzoMolion/gists{/gist_id}", "starred_url": "https://api.github.com/users/EnzoMolion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EnzoMolion/subscriptions", "organizations_url": "https://api.github.com/users/EnzoMolion/orgs", "repos_url": "https://api.github.com/users/EnzoMolion/repos", "events_url": "https://api.github.com/users/EnzoMolion/events{/privacy}", "received_events_url": "https://api.github.com/users/EnzoMolion/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-01-19T13:50:24Z", "updated_at": "2022-01-27T10:40:42Z", "closed_at": "2022-01-27T10:40:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Problem\r\nI am trying to mock a call to Glacier Vault object's `upload_archive` method. \r\nWhat I am trying to archive is a gzip file as `bytes`.\r\nWhen mocking, I get `UnicodeDecodeError: 'utf-8' codec can't decode byte 0x8b in position 1: invalid start byte`, while archiving the **same** object to an actual Glacier Vault archives successfully.\r\n\r\n### Code to reproduce\r\n\r\n```python\r\nfilename = <actual gzip file>\r\nwith open(filename, \"rb\") as archive:\r\n    content = archive.read()\r\n    print(f\"Content is: {content}\")\r\n\r\n    glacier = boto3.resource(\"glacier\", region_name=<region name>)\r\n    res = glacier.Vault(\"-\", \"<vault name>).upload_archive(body=content)\r\n    print(f\"Success: {res}\")\r\n\r\n    with mock_glacier():\r\n        glacier = boto3.resource(\"glacier\", region_name=<region name>)\r\n        res = glacier.Vault(\"-\", \"<vault name>).upload_archive(body=content)\r\n``` \r\n\r\n### Error trace: \r\n```\r\nContent is: b'\\x1f\\x8b\\x08\\x08\\t\\xe3\\xe6a\\x00\\x03log_file.txt\\x00s\\xce\\xcf+I\\xcd+\\xe1\\x02\\x00\\xb9\\xbaUd\\x08\\x00\\x00\\x00'\r\n\r\nSuccess: glacier.Archive(account_id='-', vault_name='com.diabeloop.dev.vault.technical-logs', id='diXolDWTXV3RcAiGxA-RyzMYRYqV9g7laUpnMvrRr5SHkKyIxoXHqN5w4PxXWPLwd90mFmJ-LkxqYgZxqAFvu3He87liBKWS6euNtim-I0KARLEbedLPumlcql9hx2ZEqpIehXHKNw')\r\n\r\nTraceback (most recent call last):\r\n  File \"mvp.py\", line 18, in <module>\r\n    glacier.Vault(\"-\", \"<vault name>\").upload_archive(body=content)\r\n  File \"~/.venv/lib/python3.7/site-packages/boto3/resources/factory.py\", line 520, in do_action\r\n    response = action(self, *args, **kwargs)\r\n  File \"~/.venv/lib/python3.7/site-packages/boto3/resources/action.py\", line 83, in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/client.py\", line 386, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/client.py\", line 692, in _make_api_call\r\n    operation_model, request_dict, request_context)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/client.py\", line 711, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/endpoint.py\", line 137, in _send_request\r\n    success_response, exception):\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/endpoint.py\", line 256, in _needs_retry\r\n    caught_exception=caught_exception, request_dict=request_dict)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/retryhandler.py\", line 183, in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/retryhandler.py\", line 251, in __call__\r\n    caught_exception)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/retryhandler.py\", line 269, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/retryhandler.py\", line 317, in __call__\r\n    caught_exception)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/retryhandler.py\", line 223, in __call__\r\n    attempt_number, caught_exception)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/retryhandler.py\", line 359, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/endpoint.py\", line 197, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"~/.venv/lib/python3.7/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"~/.venv/lib/python3.7/site-packages/moto/core/models.py\", line 405, in __call__\r\n    request, request.url, request.headers\r\n  File \"~/.venv/lib/python3.7/site-packages/moto/glacier/responses.py\", line 58, in vault_archive_response\r\n    self.setup_class(request, full_url, headers)\r\n  File \"~/.venv/lib/python3.7/site-packages/moto/core/responses.py\", line 224, in setup_class\r\n    self.body = self.body.decode(\"utf-8\")\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x8b in position 1: invalid start byte\r\n```\r\n-----\r\nThanks for moto, that really is both useful and easy to use !! \u2764", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4777/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4757", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4757/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4757/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4757/events", "html_url": "https://github.com/getmoto/moto/issues/4757", "id": 1102191608, "node_id": "I_kwDOAH5NfM5Bshv4", "number": 4757, "title": "SNS Message Attributes incorrectly converted to float values", "user": {"login": "JordanReiter", "id": 228942, "node_id": "MDQ6VXNlcjIyODk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/228942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JordanReiter", "html_url": "https://github.com/JordanReiter", "followers_url": "https://api.github.com/users/JordanReiter/followers", "following_url": "https://api.github.com/users/JordanReiter/following{/other_user}", "gists_url": "https://api.github.com/users/JordanReiter/gists{/gist_id}", "starred_url": "https://api.github.com/users/JordanReiter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JordanReiter/subscriptions", "organizations_url": "https://api.github.com/users/JordanReiter/orgs", "repos_url": "https://api.github.com/users/JordanReiter/repos", "events_url": "https://api.github.com/users/JordanReiter/events{/privacy}", "received_events_url": "https://api.github.com/users/JordanReiter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2022-01-13T19:05:39Z", "updated_at": "2022-02-21T22:01:39Z", "closed_at": "2022-02-21T22:01:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Relevant code in `moto/sns/responses.py` ([lines 64-74](https://github.com/spulec/moto/blob/72fdaa3552079e0db53bb53078cebfe426319b65/moto/sns/responses.py#L64-L74))\r\n\r\n                if data_type == \"Number\":\r\n                    try:\r\n                        transform_value = float(value[\"StringValue\"])\r\n                    except ValueError:\r\n                        raise InvalidParameterValue(\r\n                            \"An error occurred (ParameterValueInvalid) \"\r\n                            \"when calling the Publish operation: \"\r\n                            \"Could not cast message attribute '{0}' value to number.\".format(\r\n                                name\r\n                            )\r\n                        )\r\n\r\nUsing `float` converts any number to a float, even numbers which were originally integers. This is not how AWS behaves; it correctly distinguishes between integers and float values.\r\n\r\n### To reproduce\r\n\r\nFirst create a SNS topic and subscribe an SQS queue to that topic with `RawMessageDelivery` attribute set to true.\r\n\r\nThen:\r\n\r\n        sns_client.publish(\r\n            TopicArn=topic_arn,\r\n            Message=message,\r\n            MessageAttributes={\r\n                'integer': {\r\n                    'DataType': 'Number',\r\n                    'StringValue': '123'\r\n                },\r\n                'float': {\r\n                    'DataType': 'Number',\r\n                    'StringValue': '12.34'\r\n                },\r\n                **extra\r\n            },\r\n            MessageGroupId=task_id\r\n        )\r\n        messages_resp = sqs_client.receive_message(\r\n            QueueUrl=queue_url,\r\n            MessageAttributeNames=['All']\r\n        )\r\n        message = messages_resp['Messages'][0]\r\n        message_attributes = message['MessageAttributes']\r\n\r\n### Expected:\r\n\r\nMessage attributes should look like:\r\n\r\n```\r\n{\r\n     'float': {'DataType': 'Number', 'StringValue': '12.34'},\r\n    'integer': {'DataType': 'Number', 'StringValue': '123'}\r\n}\r\n```\r\n\r\n### Actual:\r\n\r\nMessage attributes are returned as:\r\n```\r\n{\r\n    'float': {'DataType': 'Number', 'StringValue': '12.34'},\r\n    'integer': {'DataType': 'Number', 'StringValue': '123.0'}\r\n}\r\n```\r\n\r\n### Solution:\r\n\r\nWhen outputting the response, it should detect whether or not it is an integer or a decimal/float-like object\r\n\r\nOne possible implementation:\r\n\r\n                    try:\r\n                        try:\r\n                            transform_value = int(value[\"StringValue\"])\r\n                        except ValueError:\r\n                            transform_value = float(value[\"StringValue\"])\r\n\r\nIf the value is int-like, then `int` will work. If it has a decimal point, it will fail and fall over to use `float` to convert.\r\n\r\nIt may even be better to use `decimal.Decimal` to convert the value, especially considering it is frequently used to store float-like values (see, e.g. DynamoDB).", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4757/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4757/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4756", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4756/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4756/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4756/events", "html_url": "https://github.com/getmoto/moto/issues/4756", "id": 1102105472, "node_id": "I_kwDOAH5NfM5BsMuA", "number": 4756, "title": "SQS Message Attributes created for raw message delivery incorrectly format number values", "user": {"login": "JordanReiter", "id": 228942, "node_id": "MDQ6VXNlcjIyODk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/228942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JordanReiter", "html_url": "https://github.com/JordanReiter", "followers_url": "https://api.github.com/users/JordanReiter/followers", "following_url": "https://api.github.com/users/JordanReiter/following{/other_user}", "gists_url": "https://api.github.com/users/JordanReiter/gists{/gist_id}", "starred_url": "https://api.github.com/users/JordanReiter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JordanReiter/subscriptions", "organizations_url": "https://api.github.com/users/JordanReiter/orgs", "repos_url": "https://api.github.com/users/JordanReiter/repos", "events_url": "https://api.github.com/users/JordanReiter/events{/privacy}", "received_events_url": "https://api.github.com/users/JordanReiter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-01-13T17:53:48Z", "updated_at": "2022-02-21T22:01:39Z", "closed_at": "2022-02-21T22:01:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Relevant code in `moto/sns/models.py` ([lines 212-218](https://github.com/spulec/moto/blob/72fdaa3552079e0db53bb53078cebfe426319b65/moto/sns/models.py#L214-L218))\r\n\r\n                for key, value in message_attributes.items():\r\n                    type = \"string_value\"\r\n                    type_value = value[\"Value\"]\r\n                    if value[\"Type\"].startswith(\"Binary\"):\r\n                        type = \"binary_value\"\r\n                    elif value[\"Type\"].startswith(\"Number\"):\r\n                        type_value = \"{0:g}\".format(value[\"Value\"])\r\n\r\nThe format `{0:g}` converts any number larger than 1000000 to use scientific (exponential) notation.\r\n\r\nThis is a different situation (but possibly related) to issue #996 where exponential values were showing unexpectedly in SQS message timestamps.\r\n\r\n### To reproduce\r\n\r\nFirst create a SNS topic and subscribe an SQS queue to that topic with `RawMessageDelivery` attribute set to true.\r\n\r\nThen:\r\n\r\n        sns_client.publish(\r\n            TopicArn=topic_arn,\r\n            Message=message,\r\n            MessageAttributes={\r\n                'big-integer': {\r\n                    'DataType': 'Number',\r\n                    'StringValue': '123456789'\r\n                },\r\n                'big-float': {\r\n                    'DataType': 'Number',\r\n                    'StringValue': '123456.789'\r\n                },\r\n                **extra\r\n            },\r\n            MessageGroupId=task_id\r\n        )\r\n        messages_resp = sqs_client.receive_message(\r\n            QueueUrl=queue_url,\r\n            MessageAttributeNames=['All']\r\n        )\r\n        message = messages_resp['Messages'][0]\r\n        message_attributes = message['MessageAttributes']\r\n\r\n### Expected:\r\n\r\nMessage attributes should look like:\r\n\r\n```\r\n{\r\n    'big-float': {'DataType': 'Number', 'StringValue': '123456.789'},\r\n     'big-integer': {'DataType': 'Number', 'StringValue': '123456789'}\r\n}\r\n```\r\n\r\n### Actual:\r\n\r\nMessage attributes are returned as:\r\n```\r\n{\r\n    'big-float': {'DataType': 'Number', 'StringValue': '123457'},\r\n    'big-integer': {'DataType': 'Number', 'StringValue': '1.23457e+08'}\r\n}\r\n```\r\n\r\n### Solution:\r\n\r\nThere is no reason I can think of for using `{0:g}` in this scenario. If you test this in AWS, it leaves the number 100% as-is without formatting it or truncating it.\r\n\r\nJust change \r\n\r\n                        type_value = \"{0:g}\".format(value[\"Value\"])\r\n\r\nto\r\n\r\n                        type_value = str(value[\"Value\"])\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4756/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4756/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4750", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4750/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4750/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4750/events", "html_url": "https://github.com/getmoto/moto/issues/4750", "id": 1099744314, "node_id": "I_kwDOAH5NfM5BjMQ6", "number": 4750, "title": "Moto reset API fails - Connection refused by Responses - the call doesn't match any registered mock", "user": {"login": "kogakenji", "id": 42406839, "node_id": "MDQ6VXNlcjQyNDA2ODM5", "avatar_url": "https://avatars.githubusercontent.com/u/42406839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kogakenji", "html_url": "https://github.com/kogakenji", "followers_url": "https://api.github.com/users/kogakenji/followers", "following_url": "https://api.github.com/users/kogakenji/following{/other_user}", "gists_url": "https://api.github.com/users/kogakenji/gists{/gist_id}", "starred_url": "https://api.github.com/users/kogakenji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kogakenji/subscriptions", "organizations_url": "https://api.github.com/users/kogakenji/orgs", "repos_url": "https://api.github.com/users/kogakenji/repos", "events_url": "https://api.github.com/users/kogakenji/events{/privacy}", "received_events_url": "https://api.github.com/users/kogakenji/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2022-01-12T00:24:35Z", "updated_at": "2022-01-12T14:39:19Z", "closed_at": "2022-01-12T13:16:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using moto==2.0.5 with python 3.7.9.\r\n\r\nTest case:\r\n\r\n```\r\nimport requests\r\nfrom moto import mock_s3\r\nimport unittest\r\n\r\n\r\n@mock_s3\r\nclass TestMotoReset(unittest.TestCase):\r\n    def test_reset(self):\r\n        requests.post(\"http://motoapi.amazonaws.com/moto-api/reset\")\r\n```\r\n\r\n\r\n\r\nThis gives me the following trace:\r\n\r\n```\r\nTest session starts (platform: darwin, Python 3.7.9, pytest 5.4.2, pytest-sugar 0.9.3)\r\ndjango: settings:=**.local-settings (from env)\r\nrootdir: /Users/**/src/**, inifile: pytest.ini\r\nplugins: mock-3.1.0, django-3.9.0, sugar-0.9.3, hypothesis-5.14.0, cov-2.8.1\r\ncollecting ...\r\n\r\n\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 TestMotoReset.test_reset \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\r\n\r\nself = <src.lib.tests.example_issue.TestMotoReset testMethod=test_reset>\r\n\r\n    def test_reset(self):\r\n>       requests.post(\"http://motoapi.amazonaws.com/moto-api/reset\")\r\n\r\nsrc/lib/tests/example_issue.py:10:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n.venv/lib/python3.7/site-packages/requests/api.py:119: in post\r\n    return request('post', url, data=data, json=json, **kwargs)\r\n.venv/lib/python3.7/site-packages/requests/api.py:61: in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n.venv/lib/python3.7/site-packages/requests/sessions.py:542: in request\r\n    resp = self.send(prep, **send_kwargs)\r\n.venv/lib/python3.7/site-packages/requests/sessions.py:655: in send\r\n    r = adapter.send(request, **kwargs)\r\n.venv/lib/python3.7/site-packages/responses/__init__.py:842: in unbound_on_send\r\n    return self._on_request(adapter, request, *a, **kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <responses.RequestsMock object at 0x11c744290>, adapter = <requests.adapters.HTTPAdapter object at 0x11dfd6250>, request = <PreparedRequest [POST]>\r\nkwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': None, ...}, match = None, match_failed_reasons = [], resp_callback = None\r\nerror_msg = \"Connection refused by Responses - the call doesn't match any registered mock.\\n\\nRequest: \\n- POST http://motoapi.amazonaws.com/moto-api/reset\\n\\nAvailable matches:\\n\"\r\ni = 0, m = <moto.core.models.CallbackResponse object at 0x11df6b450>\r\n\r\n    def _on_request(self, adapter, request, **kwargs):\r\n        # add attributes params and req_kwargs to 'request' object for further match comparison\r\n        # original request object does not have these attributes\r\n        request.params = self._parse_request_params(request.path_url)\r\n        request.req_kwargs = kwargs\r\n\r\n        match, match_failed_reasons = self._find_match(request)\r\n        resp_callback = self.response_callback\r\n\r\n        if match is None:\r\n            if any(\r\n                [\r\n                    p.match(request.url)\r\n                    if isinstance(p, Pattern)\r\n                    else request.url.startswith(p)\r\n                    for p in self.passthru_prefixes\r\n                ]\r\n            ):\r\n                logger.info(\"request.allowed-passthru\", extra={\"url\": request.url})\r\n                return _real_send(adapter, request, **kwargs)\r\n\r\n            error_msg = (\r\n                \"Connection refused by Responses - the call doesn't \"\r\n                \"match any registered mock.\\n\\n\"\r\n                \"Request: \\n\"\r\n                \"- %s %s\\n\\n\"\r\n                \"Available matches:\\n\" % (request.method, request.url)\r\n            )\r\n            for i, m in enumerate(self.registered()):\r\n                error_msg += \"- {} {} {}\\n\".format(\r\n>                   m.method, m.url, match_failed_reasons[i]\r\n                )\r\nE               IndexError: list index out of range\r\n\r\n.venv/lib/python3.7/site-packages/responses/__init__.py:813: IndexError\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4750/reactions", "total_count": 1, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 1}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4750/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4737", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4737/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4737/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4737/events", "html_url": "https://github.com/getmoto/moto/issues/4737", "id": 1093826659, "node_id": "I_kwDOAH5NfM5BMnhj", "number": 4737, "title": "Publishing to FIFO sns topic with FIFO sqs queue subscription doesn't work", "user": {"login": "sindrig", "id": 683742, "node_id": "MDQ6VXNlcjY4Mzc0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/683742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sindrig", "html_url": "https://github.com/sindrig", "followers_url": "https://api.github.com/users/sindrig/followers", "following_url": "https://api.github.com/users/sindrig/following{/other_user}", "gists_url": "https://api.github.com/users/sindrig/gists{/gist_id}", "starred_url": "https://api.github.com/users/sindrig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sindrig/subscriptions", "organizations_url": "https://api.github.com/users/sindrig/orgs", "repos_url": "https://api.github.com/users/sindrig/repos", "events_url": "https://api.github.com/users/sindrig/events{/privacy}", "received_events_url": "https://api.github.com/users/sindrig/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2022-01-04T23:11:41Z", "updated_at": "2022-01-06T16:04:55Z", "closed_at": "2022-01-06T16:04:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Creating a FIFO sns topic and subscribing a FIFO sqs queue works, but there's no way to publish to it since the MessageGroupId parameter is not forwarded.\r\n\r\nExample test case:\r\n\r\n```python\r\nfrom moto import mock_sns, mock_sqs\r\nimport boto3\r\n\r\ndef test_sns_sqs():\r\n    with mock_sns(), mock_sqs():\r\n        sns = boto3.resource('sns')\r\n        sqs = boto3.resource('sqs')\r\n        queue = sqs.create_queue(\r\n            QueueName=\"queue.fifo\",\r\n            Attributes={\r\n                'FifoQueue': 'true',\r\n                'ContentBasedDeduplication': 'true',\r\n            },\r\n        )\r\n\r\n        topic = sns.create_topic(\r\n            Name=\"topic.fifo\",\r\n            Attributes={\r\n                'FifoTopic': 'true',\r\n                'ContentBasedDeduplication': 'true',\r\n            },\r\n        )\r\n        topic.subscribe(\r\n            Protocol='sqs',\r\n            Endpoint=queue.attributes['QueueArn'],\r\n        )\r\n\r\n        topic.publish(Message=\"message\", MessageGroupId=\"message_group_id\")\r\n\r\n```\r\n\r\nTraceback:\r\n\r\n```\r\n______________________________________________ test_sns_sqs ______________________________________________\r\n\r\n    def test_sns_sqs():\r\n    \r\n        with mock_sns(), mock_sqs():\r\n            sns = boto3.resource('sns')\r\n            sqs = boto3.resource('sqs')\r\n            queue = sqs.create_queue(\r\n                QueueName=\"queue.fifo\",\r\n                Attributes={\r\n                    'FifoQueue': 'true',\r\n                    'ContentBasedDeduplication': 'true',\r\n                },\r\n            )\r\n    \r\n            topic = sns.create_topic(\r\n                Name=\"topic.fifo\",\r\n                Attributes={\r\n                    'FifoTopic': 'true',\r\n                    'ContentBasedDeduplication': 'true',\r\n                },\r\n            )\r\n            topic.subscribe(\r\n                Protocol='sqs',\r\n                Endpoint=queue.attributes['QueueArn'],\r\n            )\r\n    \r\n>           topic.publish(Message=\"message\", MessageGroupId=\"message_group_id\")\r\n\r\napp/test_main.py:71: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../../.direnv/python-3.10.1/lib/python3.10/site-packages/boto3/resources/factory.py:520: in do_action\r\n    response = action(self, *args, **kwargs)\r\n../../.direnv/python-3.10.1/lib/python3.10/site-packages/boto3/resources/action.py:83: in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\n../../.direnv/python-3.10.1/lib/python3.10/site-packages/botocore/client.py:491: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.SNS object at 0x7f5b1b134610>, operation_name = 'Publish'\r\napi_params = {'Message': 'message', 'MessageGroupId': 'message_group_id', 'TopicArn': 'arn:aws:sns:eu-west-1:123456789012:topic.fifo'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record(\r\n            'API_CALL',\r\n            {\r\n                'service': service_name,\r\n                'operation': operation_name,\r\n                'params': api_params,\r\n            },\r\n        )\r\n        if operation_model.deprecated:\r\n            logger.debug(\r\n                'Warning: %s.%s() is deprecated', service_name, operation_name\r\n            )\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context\r\n        )\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id, operation_name=operation_name\r\n            ),\r\n            model=operation_model,\r\n            params=request_dict,\r\n            request_signer=self._request_signer,\r\n            context=request_context,\r\n        )\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context\r\n            )\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id, operation_name=operation_name\r\n            ),\r\n            http_response=http,\r\n            parsed=parsed_response,\r\n            model=operation_model,\r\n            context=request_context,\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.exceptions.ClientError: An error occurred (MissingParameter) when calling the Publish operation: The request must contain the parameter MessageGroupId.\r\n\r\n../../.direnv/python-3.10.1/lib/python3.10/site-packages/botocore/client.py:897: ClientError\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4737/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4737/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4718", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4718/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4718/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4718/events", "html_url": "https://github.com/getmoto/moto/issues/4718", "id": 1088065211, "node_id": "I_kwDOAH5NfM5A2o67", "number": 4718, "title": "Support volumes for LaunchTemplates", "user": {"login": "tekumara", "id": 125105, "node_id": "MDQ6VXNlcjEyNTEwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/125105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tekumara", "html_url": "https://github.com/tekumara", "followers_url": "https://api.github.com/users/tekumara/followers", "following_url": "https://api.github.com/users/tekumara/following{/other_user}", "gists_url": "https://api.github.com/users/tekumara/gists{/gist_id}", "starred_url": "https://api.github.com/users/tekumara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tekumara/subscriptions", "organizations_url": "https://api.github.com/users/tekumara/orgs", "repos_url": "https://api.github.com/users/tekumara/repos", "events_url": "https://api.github.com/users/tekumara/events{/privacy}", "received_events_url": "https://api.github.com/users/tekumara/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-12-24T00:42:47Z", "updated_at": "2022-04-21T14:19:36Z", "closed_at": "2022-04-21T14:19:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\nimport boto3\r\nfrom moto import mock_ec2\r\nfrom moto.ec2.models import AMIS\r\n\r\nmock = mock_ec2()\r\nmock.start()\r\n\r\nami_id = AMIS[0][\"ami_id\"]\r\n\r\nec2_client = boto3.client(\"ec2\", region_name=\"ap-southeast-2\")\r\nec2_client.create_launch_template(\r\n    LaunchTemplateName=\"launchie\",\r\n    LaunchTemplateData={\r\n        \"ImageId\": ami_id,\r\n        \"BlockDeviceMappings\": [\r\n            {\r\n                \"DeviceName\": \"/dev/sda1\",\r\n                \"Ebs\": {\r\n                    \"VolumeSize\": 20,\r\n                    \"DeleteOnTermination\": True,\r\n                    \"VolumeType\": \"gp3\",\r\n                    \"Encrypted\": True,\r\n                },\r\n            }\r\n        ],\r\n    },\r\n)\r\n\r\nec2_client.run_instances(MaxCount=1, MinCount=1, LaunchTemplate={\"LaunchTemplateName\": \"launchie\"})\r\nec2_client = boto3.client(\"ec2\", region_name=\"ap-southeast-2\")\r\nvolumes = ec2_client.describe_volumes()\r\nprint(volumes[\"Volumes\"][0][\"Size\"])\r\nassert volumes[\"Volumes\"][0][\"Size\"] == 20\r\n```\r\n\r\nFails with the AssertionError:\r\n```\r\nE       assert 8 == 20\r\n```\r\n\r\nmoto   2.2.19", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4718/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4715", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4715/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4715/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4715/events", "html_url": "https://github.com/getmoto/moto/issues/4715", "id": 1087548068, "node_id": "I_kwDOAH5NfM5A0qqk", "number": 4715, "title": "Cancel spot fleet request without terminate incorrectly removes the fleet entirely", "user": {"login": "cheshirex", "id": 9530143, "node_id": "MDQ6VXNlcjk1MzAxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/9530143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cheshirex", "html_url": "https://github.com/cheshirex", "followers_url": "https://api.github.com/users/cheshirex/followers", "following_url": "https://api.github.com/users/cheshirex/following{/other_user}", "gists_url": "https://api.github.com/users/cheshirex/gists{/gist_id}", "starred_url": "https://api.github.com/users/cheshirex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cheshirex/subscriptions", "organizations_url": "https://api.github.com/users/cheshirex/orgs", "repos_url": "https://api.github.com/users/cheshirex/repos", "events_url": "https://api.github.com/users/cheshirex/events{/privacy}", "received_events_url": "https://api.github.com/users/cheshirex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-12-23T09:46:10Z", "updated_at": "2022-10-03T12:30:52Z", "closed_at": "2022-10-03T12:30:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/spulec/moto/blob/c301f8822c71a402d14b380865aa45b07e880ebd/moto/ec2/models.py#L6549\r\n\r\nI'm working with localstack on moto and trying to simulate a flow of:\r\n\r\n- create spot fleet with X instances\r\n- cancel the fleet without terminating instances\r\n- cancel the fleet with terminating instances\r\n\r\nHowever, I see the referenced line is deleting the fleet from moto's dictionary *regardless* of whether the instances are being terminated. This results in the last part of my flow failing.\r\n\r\nThe actual AWS behaviour is that the fleet goes to cancelled_running state without affecting the instances when a spot fleet request is cancelled without terminating instances, and only actually gets cancelled when all the instances are terminated. It is therefore possible to submit another termination request to AWS with the flag to terminate instances.\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4715/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4715/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4705", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4705/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4705/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4705/events", "html_url": "https://github.com/getmoto/moto/issues/4705", "id": 1085334869, "node_id": "I_kwDOAH5NfM5AsOVV", "number": 4705, "title": "Moto ECR mock throws away user-provided registry IDs", "user": {"login": "sichinumi", "id": 2764627, "node_id": "MDQ6VXNlcjI3NjQ2Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/2764627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sichinumi", "html_url": "https://github.com/sichinumi", "followers_url": "https://api.github.com/users/sichinumi/followers", "following_url": "https://api.github.com/users/sichinumi/following{/other_user}", "gists_url": "https://api.github.com/users/sichinumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sichinumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sichinumi/subscriptions", "organizations_url": "https://api.github.com/users/sichinumi/orgs", "repos_url": "https://api.github.com/users/sichinumi/repos", "events_url": "https://api.github.com/users/sichinumi/events{/privacy}", "received_events_url": "https://api.github.com/users/sichinumi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-12-21T01:05:29Z", "updated_at": "2022-01-06T22:05:23Z", "closed_at": "2022-01-06T22:05:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "The Moto ECR mock does not respect registry ID parameters with any ECR APIs - instead it uses a hard-coded default (the account ID itself). This causes incorrect state/output when test authors need to mock behavior around specific registry IDs.\r\n\r\nExample code - just a create_repository call with a specific, non-default registry ID:\r\n\r\n```\r\nclient = boto3.client('ecr', region_name='us-west-2')\r\nclient.create_repository(\r\n        registryId='222222222222',\r\n        repositoryName='myRepoName'\r\n    )\r\nprint(client.describe_repositories())\r\n```\r\n\r\nExample output showing that the repository was created under the wrong registry ID:\r\n\r\n```\r\n{'repositories': [{'repositoryArn': 'arn:aws:ecr:us-west-2:123456789012:repository/myRepoName', 'registryId': '123456789012', 'repositoryName': 'myRepoName', 'repositoryUri': '123456789012.dkr.ecr.us-west-2.amazonaws.com/myRepoName', 'createdAt': datetime.datetime(2021, 12, 21, 0, 53, 14, tzinfo=tzlocal()), 'imageTagMutability': 'MUTABLE', 'imageScanningConfiguration': {'scanOnPush': False}, 'encryptionConfiguration': {'encryptionType': 'AES256'}}], 'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n```\r\n\r\nThe output says the registry ID is 123456789012 which is the default account ID. My input of registry ID of 222222222222 was ignored.\r\n\r\nReading the source code this seems like it's by design - we hard-code the registry ID here: https://github.com/spulec/moto/blame/43269fc8af7872aebb648233c551053d499503b4/moto/ecr/models.py#L75\r\n\r\nIn addition we don't even accept a registry ID for create_repository: https://github.com/spulec/moto/blame/43269fc8af7872aebb648233c551053d499503b4/moto/ecr/models.py#L407-L414\r\n\r\nThis is with Moto v2.2.19 (latest I believe) and Boto3 v1.20.21.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4705/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4705/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4702", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4702/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4702/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4702/events", "html_url": "https://github.com/getmoto/moto/issues/4702", "id": 1084690854, "node_id": "I_kwDOAH5NfM5ApxGm", "number": 4702, "title": "ELBv2 models create_target_group does not get the matcher key passed in the kwargs", "user": {"login": "rickbowden", "id": 22094101, "node_id": "MDQ6VXNlcjIyMDk0MTAx", "avatar_url": "https://avatars.githubusercontent.com/u/22094101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rickbowden", "html_url": "https://github.com/rickbowden", "followers_url": "https://api.github.com/users/rickbowden/followers", "following_url": "https://api.github.com/users/rickbowden/following{/other_user}", "gists_url": "https://api.github.com/users/rickbowden/gists{/gist_id}", "starred_url": "https://api.github.com/users/rickbowden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rickbowden/subscriptions", "organizations_url": "https://api.github.com/users/rickbowden/orgs", "repos_url": "https://api.github.com/users/rickbowden/repos", "events_url": "https://api.github.com/users/rickbowden/events{/privacy}", "received_events_url": "https://api.github.com/users/rickbowden/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-12-20T11:42:10Z", "updated_at": "2021-12-20T18:33:44Z", "closed_at": "2021-12-20T17:06:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "When creating a Target Group if you pass in a Matcher dictionary it does not appear to get passed in via kwargs to the create_target_group method in the elbv2 models module.\r\n\r\nThe create_target_group method contains this code which never finds \"matcher\" so every target group ends up with the default http code 200.\r\n\r\n```\r\nif (\r\n    kwargs.get(\"matcher\")\r\n    and FakeTargetGroup.HTTP_CODE_REGEX.match(kwargs[\"matcher\"][\"HttpCode\"])\r\n    is None\r\n):\r\n...\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4702/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4702/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4694", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4694/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4694/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4694/events", "html_url": "https://github.com/getmoto/moto/issues/4694", "id": 1081190473, "node_id": "I_kwDOAH5NfM5AcahJ", "number": 4694, "title": "`IoTDataPlaneResponse.publish` fails to correctly pass payload to `IotDataPlaneBackend.publish` method", "user": {"login": "iggyzap", "id": 4525023, "node_id": "MDQ6VXNlcjQ1MjUwMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/4525023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iggyzap", "html_url": "https://github.com/iggyzap", "followers_url": "https://api.github.com/users/iggyzap/followers", "following_url": "https://api.github.com/users/iggyzap/following{/other_user}", "gists_url": "https://api.github.com/users/iggyzap/gists{/gist_id}", "starred_url": "https://api.github.com/users/iggyzap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iggyzap/subscriptions", "organizations_url": "https://api.github.com/users/iggyzap/orgs", "repos_url": "https://api.github.com/users/iggyzap/repos", "events_url": "https://api.github.com/users/iggyzap/events{/privacy}", "received_events_url": "https://api.github.com/users/iggyzap/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-12-15T15:41:28Z", "updated_at": "2022-02-10T09:02:40Z", "closed_at": "2022-02-10T09:02:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWhen trying to implement a unit test that validates that MQTT message was sent via `boto3.client('iot-data')` client to specific topic, I found out that `IoTDataPlaneResponse.publish` fails to pass down `payload` correctly to `IotDataPlaneBackend.publish` method.\r\n\r\nI was able to mock IotDataPlaneBackend backend for interaction in interest and even record publish calls, but payload was empty.\r\n\r\nThis is due to the fact that aws IoT client posts payload as http post body, but `IoTDataPlaneResponse.publish` expects payload to be passed as parameter (code below):\r\n```python\r\nclass IoTDataPlaneResponse(BaseResponse):\r\n...\r\n    def publish(self):\r\n        topic = self._get_param(\"topic\")\r\n        qos = self._get_int_param(\"qos\")\r\n        payload = self._get_param(\"payload\")\r\n        self.iotdata_backend.publish(topic=topic, qos=qos, payload=payload)\r\n        return json.dumps(dict())\r\n```\r\nImage from debugger:\r\n<img width=\"773\" alt=\"image\" src=\"https://user-images.githubusercontent.com/4525023/146213115-d3d82245-1f82-405b-ba36-7d0cdb4e9cd4.png\">\r\n\r\nI would expect when payload was posted to an MQTT topic then it will become available and passed down as payload to `IoTDataPlaneResponse.publish` method.\r\n\r\nFollowing version of moto is used:\r\n```json\r\n\"moto\": {\r\n            \"hashes\": [\r\n                \"sha256:2b3fa22778504b45715868cad95ad458fdea7227f9005b12e522fc9c2ae0cabc\",\r\n                \"sha256:79aeaeed1592a24d3c488840065a3fcb3f4fa7ba40259e112482454c0e48a03a\"\r\n            ],\r\n            \"index\": \"pypi\",\r\n            \"version\": \"==1.3.14\"\r\n        }\r\n\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4694/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4694/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4691", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4691/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4691/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4691/events", "html_url": "https://github.com/getmoto/moto/issues/4691", "id": 1080925252, "node_id": "I_kwDOAH5NfM5AbZxE", "number": 4691, "title": "Dedicated moto-logger?", "user": {"login": "Wurstnase", "id": 8709415, "node_id": "MDQ6VXNlcjg3MDk0MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8709415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wurstnase", "html_url": "https://github.com/Wurstnase", "followers_url": "https://api.github.com/users/Wurstnase/followers", "following_url": "https://api.github.com/users/Wurstnase/following{/other_user}", "gists_url": "https://api.github.com/users/Wurstnase/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wurstnase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wurstnase/subscriptions", "organizations_url": "https://api.github.com/users/Wurstnase/orgs", "repos_url": "https://api.github.com/users/Wurstnase/repos", "events_url": "https://api.github.com/users/Wurstnase/events{/privacy}", "received_events_url": "https://api.github.com/users/Wurstnase/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-12-15T11:29:11Z", "updated_at": "2021-12-15T14:52:12Z", "closed_at": "2021-12-15T14:51:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to disable the logging for other modules outside my project. Unfortunately the expressions module for dynamodb2 is using the root logger. \r\n\r\nhttps://github.com/spulec/moto/blob/de9aa9a8e3b998902381a565e25b5da17960c7f7/moto/dynamodb2/parsing/expressions.py#L64", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4691/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4691/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4677", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4677/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4677/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4677/events", "html_url": "https://github.com/getmoto/moto/issues/4677", "id": 1077361554, "node_id": "I_kwDOAH5NfM5ANzuS", "number": 4677, "title": "elbv2 modify_rule expects 'Conditions' key to be present in params", "user": {"login": "hudelgado", "id": 2730695, "node_id": "MDQ6VXNlcjI3MzA2OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2730695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hudelgado", "html_url": "https://github.com/hudelgado", "followers_url": "https://api.github.com/users/hudelgado/followers", "following_url": "https://api.github.com/users/hudelgado/following{/other_user}", "gists_url": "https://api.github.com/users/hudelgado/gists{/gist_id}", "starred_url": "https://api.github.com/users/hudelgado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hudelgado/subscriptions", "organizations_url": "https://api.github.com/users/hudelgado/orgs", "repos_url": "https://api.github.com/users/hudelgado/repos", "events_url": "https://api.github.com/users/hudelgado/events{/privacy}", "received_events_url": "https://api.github.com/users/hudelgado/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-12-11T02:22:57Z", "updated_at": "2021-12-12T21:10:15Z", "closed_at": "2021-12-12T21:10:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Summary\r\n\r\nelbv2 [modify_rule](https://github.com/spulec/moto/blob/master/moto/elbv2/responses.py#L358) wrongly expects to receive `Conditions` key in the params, failing if it isn't supplied.\r\n\r\nin [aws boto3 documentation](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/elbv2.html#ElasticLoadBalancingv2.Client.modify_rule)  we have that the only required argument is the `RuleArn` and that `Any properties that you do not specify are unchanged.`\r\n\r\n\r\n### Exception\r\n\r\n```\r\nself = <moto.elbv2.responses.ELBV2Response object at 0x1113b6d60>\r\n\r\n    @amzn_request_id\r\n    def modify_rule(self):\r\n        rule_arn = self._get_param(\"RuleArn\")\r\n        params = self._get_params()\r\n>       conditions = params[\"Conditions\"]\r\nE       KeyError: 'Conditions'\r\n\r\nmoto/elbv2/responses.py:358: KeyError\r\n```\r\n\r\n## Root cause\r\n\r\nin [responses.py](https://github.com/spulec/moto/blob/master/moto/elbv2/responses.py#L358) we have \r\n```\r\n    def modify_rule(self):\r\n        rule_arn = self._get_param(\"RuleArn\")\r\n        params = self._get_params()\r\n        conditions = params[\"Conditions\"] # <- this will imply 'Conditions' key to be present\r\n        actions = params.get(\"Actions\", [])\r\n        rules = self.elbv2_backend.modify_rule(\r\n            rule_arn=rule_arn, conditions=conditions, actions=actions\r\n        )\r\n        ...\r\n```\r\n\r\nThis fails when trying to modify a rule without passing any conditions to it with `elbv2_client.modify_rule(RuleArn=\"arn\", Actions=[action1, action2])`\r\n\r\nWe can see in [models.py](https://github.com/spulec/moto/blob/master/moto/elbv2/models.py#L1166-L1167) that it's actually respecting the documentation and already skips conditions if they are empty:\r\n\r\n```\r\n    def modify_rule(self, rule_arn, conditions, actions):\r\n        ...\r\n        if conditions:\r\n            rule.conditions = conditions\r\n        if actions:\r\n            rule.actions = actions\r\n        return rule\r\n\r\n```\r\n\r\n### Suggested Fix\r\nin [responses.py](https://github.com/spulec/moto/blob/master/moto/elbv2/responses.py#L358) do instead:\r\n```\r\n    def modify_rule(self):\r\n        rule_arn = self._get_param(\"RuleArn\")\r\n        params = self._get_params()\r\n        conditions = params.get(\"Conditions\", []) # suggested change here\r\n        actions = params.get(\"Actions\", [])\r\n        rules = self.elbv2_backend.modify_rule(\r\n            rule_arn=rule_arn, conditions=conditions, actions=actions\r\n        )\r\n        ...\r\n```\r\n\r\nHappy to open a PR for it\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4677/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4677/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4676", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4676/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4676/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4676/events", "html_url": "https://github.com/getmoto/moto/issues/4676", "id": 1077108832, "node_id": "I_kwDOAH5NfM5AM2Bg", "number": 4676, "title": "sqs receive_message gives subject as null", "user": {"login": "evohnave", "id": 9681292, "node_id": "MDQ6VXNlcjk2ODEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/9681292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evohnave", "html_url": "https://github.com/evohnave", "followers_url": "https://api.github.com/users/evohnave/followers", "following_url": "https://api.github.com/users/evohnave/following{/other_user}", "gists_url": "https://api.github.com/users/evohnave/gists{/gist_id}", "starred_url": "https://api.github.com/users/evohnave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evohnave/subscriptions", "organizations_url": "https://api.github.com/users/evohnave/orgs", "repos_url": "https://api.github.com/users/evohnave/repos", "events_url": "https://api.github.com/users/evohnave/events{/privacy}", "received_events_url": "https://api.github.com/users/evohnave/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-12-10T18:14:24Z", "updated_at": "2021-12-12T19:07:32Z", "closed_at": "2021-12-12T19:07:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometime between moto=2.2.11 and moto==2.2.17 the \"Subject\" of an sqs message was deleted so that \r\n\r\n`messages = sqs.receive_message(QueueUrl=sqs_queue_url)`  \r\n`body = eval(messages.get('Messages')[0].get('Body'))`  \r\n\r\nresults in  \r\n\r\n>   File \"\\<string\\>\", line 7, in \\<module\\>\r\n> \r\n> NameError: name 'null' is not defined\r\n\r\nInvestigation of the `\"Message\".\"Body\"` shows that, in 2.2.11, `\"Subject\"` is \"my subject\" and, in 2.2.17, `\"Subject\"` is `null` , i.e., inside of `\"Body\"`,  \r\n\r\n> ...`\"Subject\": \"my subject\",\\n  \"Timestamp\"`...\r\n  \r\n   vs  \r\n\r\n> ...`\"Subject\": null,\\n  \"Timestamp\"`...  \r\n\r\nand `eval` chokes on evaluating \"null\".\r\n\r\nMy code never provided the \"Subject\", so it appears to me to be a `moto` thing.\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4676/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4676/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4675", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4675/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4675/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4675/events", "html_url": "https://github.com/getmoto/moto/issues/4675", "id": 1076154355, "node_id": "I_kwDOAH5NfM5AJM_z", "number": 4675, "title": "IoT models hard-codes account ID as 1", "user": {"login": "dhmistry3", "id": 41965630, "node_id": "MDQ6VXNlcjQxOTY1NjMw", "avatar_url": "https://avatars.githubusercontent.com/u/41965630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhmistry3", "html_url": "https://github.com/dhmistry3", "followers_url": "https://api.github.com/users/dhmistry3/followers", "following_url": "https://api.github.com/users/dhmistry3/following{/other_user}", "gists_url": "https://api.github.com/users/dhmistry3/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhmistry3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhmistry3/subscriptions", "organizations_url": "https://api.github.com/users/dhmistry3/orgs", "repos_url": "https://api.github.com/users/dhmistry3/repos", "events_url": "https://api.github.com/users/dhmistry3/events{/privacy}", "received_events_url": "https://api.github.com/users/dhmistry3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-12-09T22:56:42Z", "updated_at": "2021-12-12T18:07:34Z", "closed_at": "2021-12-12T18:07:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "the cert that is created when doing something such as client('iot').create_keys_and_certificate(setAsActive=True) has an account id hard-coded to 1 instead of retrieving the accountid that other things do.\r\n\r\n\r\nhttps://github.com/spulec/moto/blob/master/moto/iot/models.py#L139\r\n\r\nI changed it to\r\n\r\n`self.arn = \"arn:aws:iot:%s:%s:cert/%s\" % (region_name, ACCOUNT_ID, self.certificate_id)`\r\n\r\nand added ACCOUNT_ID import from moto.core and it worked.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4675/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4675/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4665", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4665/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4665/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4665/events", "html_url": "https://github.com/getmoto/moto/issues/4665", "id": 1072015006, "node_id": "I_kwDOAH5NfM4_5aae", "number": 4665, "title": "_call_s3(\"upload_part\") doesn't set `ETag` in response", "user": {"login": "shearer12345", "id": 3845677, "node_id": "MDQ6VXNlcjM4NDU2Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/3845677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shearer12345", "html_url": "https://github.com/shearer12345", "followers_url": "https://api.github.com/users/shearer12345/followers", "following_url": "https://api.github.com/users/shearer12345/following{/other_user}", "gists_url": "https://api.github.com/users/shearer12345/gists{/gist_id}", "starred_url": "https://api.github.com/users/shearer12345/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shearer12345/subscriptions", "organizations_url": "https://api.github.com/users/shearer12345/orgs", "repos_url": "https://api.github.com/users/shearer12345/repos", "events_url": "https://api.github.com/users/shearer12345/events{/privacy}", "received_events_url": "https://api.github.com/users/shearer12345/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2021-12-06T11:03:21Z", "updated_at": "2022-03-07T00:34:36Z", "closed_at": "2022-02-19T00:07:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "When writing a multi-part file to S3 using s3fs, s3fs expects `ETag` to be set in the response dictionary, and when using mock_s3it is missing. The same code without mock_s3 doesn't raise, writes to s3, and retun `ETag` in the response dictionary \r\n```\r\n{'ResponseMetadata': ...,\r\n'ETag': '\"79b281060d337b9b2b84ccf390adcf74\"'}\r\n```\r\n\r\n### Reproduction\r\n\r\n```\r\nimport boto3\r\nimport botocore\r\nimport moto\r\nfrom s3fs import S3FileSystem\r\n\r\nwith moto.mock_s3():\r\n    class MockedAWSResponse(botocore.awsrequest.AWSResponse):\r\n        raw_headers = {}  # type: ignore\r\n        async def read(self):  # type: ignore\r\n            return self.text\r\n\r\n    botocore.awsrequest.AWSResponse = MockedAWSResponse\r\n    try:\r\n        moto.core.models.AWSResponse = MockedAWSResponse\r\n    except AttributeError as err:\r\n        if str(err) == \"module 'moto' has no attribute 'core'\":\r\n            raise AttributeError(\r\n               \"moto mock needs to be present prior to setting up the mockedAWSResponse\") from err\r\n        raise err\r\n\r\n    s3_resource = boto3.resource(\"s3\")\r\n    test_bucket = s3_resource.Bucket(\"test-mocked-s3-bucket\")\r\n    test_bucket.create()\r\n\r\n    s3 = S3FileSystem()\r\n\r\n    with s3.open(f'{test_bucket.name}/small_file.txt', mode='wb') as small_file:\r\n        small_file.write(2 ** 2 * b'a')\r\n\r\n    with s3.open(f'{test_bucket.name}/just_small_enough_file.txt', mode='wb') as just_small_enough_file:\r\n        just_small_enough_file.write((just_small_enough_file.blocksize-1) * b'a')\r\n\r\n    # raises KeyError: 'ETag' at s3fs/core.py#1958 in _upload_chunk\r\n    #     self.parts.append({\"PartNumber\": part, \"ETag\": out[\"ETag\"]})\r\n    with s3.open(f'{test_bucket.name}/just_too_big_file.txt', mode='wb') as just_too_big_file:\r\n        just_too_big_file.write(just_too_big_file.blocksize * b'a')\r\n\r\n```\r\n\r\n### Versions\r\n\r\nRunning on Windows\r\n\r\nboto3=1.19.8\r\nbotocore=1.22.8\r\nmoto=2.2.17\r\ns3fs==2021.11.1\r\n\r\ninstall through pip (requirements.txt), or through poetry - both show the same behaviour\r\n\r\nusing Python mocks, using AWSResponse modifications as in https://github.com/aio-libs/aiobotocore/issues/755 to allow s3fs to work.\r\n\r\n\r\nThis **may** be related to #4472 and #4548 (\"Multipart upload tags not applied\")\r\n\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"xxxxxxxxxxxx/code/test/key_error__etag/key_error__etag_test.py\", line 34, in <module>\r\n    just_too_big_file.write(just_too_big_file.blocksize * b'a')\r\n  File \"xxxxxxxxxxxx\\code\\test\\key_error__etag\\env\\lib\\site-packages\\fsspec\\spec.py\", line 1481, in write\r\n    self.flush()\r\n  File \"xxxxxxxxxxxx\\code\\test\\key_error__etag\\env\\lib\\site-packages\\fsspec\\spec.py\", line 1522, in flush\r\n    if self._upload_chunk(final=force) is not False:\r\n  File \"xxxxxxxxxxxx\\code\\test\\key_error__etag\\env\\lib\\site-packages\\s3fs\\core.py\", line 1958, in _upload_chunk\r\n    self.parts.append({\"PartNumber\": part, \"ETag\": out[\"ETag\"]})\r\nKeyError: 'ETag'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"xxxxxxxxxxxx/code/test/key_error__etag/key_error__etag_test.py\", line 34, in <module>\r\n    just_too_big_file.write(just_too_big_file.blocksize * b'a')\r\n  File \"xxxxxxxxxxxx\\code\\test\\key_error__etag\\env\\lib\\site-packages\\fsspec\\spec.py\", line 1684, in __exit__\r\n    self.close()\r\n  File \"xxxxxxxxxxxx\\code\\test\\key_error__etag\\env\\lib\\site-packages\\fsspec\\spec.py\", line 1651, in close\r\n    self.flush(force=True)\r\n  File \"xxxxxxxxxxxx\\code\\test\\key_error__etag\\env\\lib\\site-packages\\fsspec\\spec.py\", line 1522, in flush\r\n    if self._upload_chunk(final=force) is not False:\r\n  File \"xxxxxxxxxxxx\\code\\test\\key_error__etag\\env\\lib\\site-packages\\s3fs\\core.py\", line 1958, in _upload_chunk\r\n    self.parts.append({\"PartNumber\": part, \"ETag\": out[\"ETag\"]})\r\nKeyError: 'ETag'\r\npython-BaseException\r\n\r\nProcess finished with exit code 1\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4665/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4665/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4660", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4660/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4660/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4660/events", "html_url": "https://github.com/getmoto/moto/issues/4660", "id": 1071550440, "node_id": "I_kwDOAH5NfM4_3o_o", "number": 4660, "title": "LocalSecondaryIndexes does not work for querying in dynamodb", "user": {"login": "krupnov", "id": 5932394, "node_id": "MDQ6VXNlcjU5MzIzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5932394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krupnov", "html_url": "https://github.com/krupnov", "followers_url": "https://api.github.com/users/krupnov/followers", "following_url": "https://api.github.com/users/krupnov/following{/other_user}", "gists_url": "https://api.github.com/users/krupnov/gists{/gist_id}", "starred_url": "https://api.github.com/users/krupnov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krupnov/subscriptions", "organizations_url": "https://api.github.com/users/krupnov/orgs", "repos_url": "https://api.github.com/users/krupnov/repos", "events_url": "https://api.github.com/users/krupnov/events{/privacy}", "received_events_url": "https://api.github.com/users/krupnov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-12-05T20:31:25Z", "updated_at": "2021-12-05T23:05:30Z", "closed_at": "2021-12-05T23:05:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am using the moto3 for testing inside my projects. It us really cool and thank you guys for your effort.\r\n\r\nBut recently I have discovered there is a problem with querying LocalSecondaryIndexes in DynamoDb. \r\n\r\nI use mock_dynamodb2 and create a local index in a table. After adding some items into the table I try to query the index to get values that are greater than a specific value. But all items are returned. If you are interested I can provide a full testing example.\r\n\r\nAlso I noticed there is no tests that check my use case in the repository.\r\n\r\nCould  you please take a look?", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4660/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4643", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4643/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4643/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4643/events", "html_url": "https://github.com/getmoto/moto/issues/4643", "id": 1066341675, "node_id": "I_kwDOAH5NfM4_jxUr", "number": 4643, "title": "No support to remove RedrivePolicy from SQS", "user": {"login": "rolsen", "id": 279439, "node_id": "MDQ6VXNlcjI3OTQzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/279439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rolsen", "html_url": "https://github.com/rolsen", "followers_url": "https://api.github.com/users/rolsen/followers", "following_url": "https://api.github.com/users/rolsen/following{/other_user}", "gists_url": "https://api.github.com/users/rolsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rolsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rolsen/subscriptions", "organizations_url": "https://api.github.com/users/rolsen/orgs", "repos_url": "https://api.github.com/users/rolsen/repos", "events_url": "https://api.github.com/users/rolsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rolsen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-11-29T18:06:21Z", "updated_at": "2021-12-06T22:42:12Z", "closed_at": "2021-12-06T22:42:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like to be able to remove a RedrivePolicy from SQS using set_queue_attributes. Doing so with boto is supported like this:\r\n\r\n```python3\r\n        sqs_client = boto3.client(\"sqs\", region_name=\"us-east-1\")\r\n        sqs_client.set_queue_attributes(\r\n            QueueUrl=some_queue_url,\r\n            Attributes={\"RedrivePolicy\": \"\"},\r\n        )\r\n```\r\n\r\nWith live boto/AWS, a `get_queue_attributes` call after this returns a dict that simply doesn't have a `RedrivePolicy`.\r\n\r\nWith moto==2.2.16 installed via pip, this test fails:\r\n\r\n```python3\r\nimport json\r\nimport boto3\r\nfrom moto import mock_sqs\r\n\r\n@mock_sqs\r\ndef test_tear_down_removes_redrive():\r\n    sqs_client = boto3.client(\"sqs\", region_name=\"us-east-1\")\r\n\r\n    temp_dlq = sqs_client.create_queue(QueueName='test-temporary-dlq')\r\n    dlq_arn = sqs_client.get_queue_attributes(\r\n        QueueUrl=temp_dlq[\"QueueUrl\"], AttributeNames=[\"QueueArn\"]\r\n    )[\"Attributes\"][\"QueueArn\"]\r\n\r\n    my_queue = sqs_client.create_queue(\r\n        QueueName='test-my-queue',\r\n        Attributes={\r\n            \"RedrivePolicy\": json.dumps(\r\n                {\r\n                    \"deadLetterTargetArn\": dlq_arn,\r\n                    \"maxReceiveCount\": \"5\",\r\n                }\r\n            )\r\n        }\r\n    )\r\n\r\n    sqs_client.set_queue_attributes(\r\n        QueueUrl=my_queue['QueueUrl'],\r\n        Attributes={\"RedrivePolicy\": \"\"},\r\n    )\r\n\r\n    attributes = sqs_client.get_queue_attributes(\r\n        QueueUrl=my_queue[\"QueueUrl\"], AttributeNames=[\"All\"]\r\n    )[\"Attributes\"]\r\n\r\n    assert \"RedrivePolicy\" not in attributes\r\n```\r\n\r\n...Where the assertion fails because `attributes` contains:\r\n\r\n```\r\n'RedrivePolicy': '{\"deadLetterTargetArn\": \"arn:aws:sqs:us-east-1:123456789012:test-temporary-dlq\", \"maxReceiveCount\": 5}'\r\n```\r\n\r\nIt looks like [any falsy RedrivePolicy is ignored](https://github.com/spulec/moto/blob/39fff6449382e17ac949d14588642a3e117aede3/moto/sqs/models.py#L326).\r\n\r\nI'm doing this as part of a DLQ replay script, so I'm setting up and tearing down a temporary DLQ for my main DLQ.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4643/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4643/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4622", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4622/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4622/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4622/events", "html_url": "https://github.com/getmoto/moto/issues/4622", "id": 1060893698, "node_id": "I_kwDOAH5NfM4_O_QC", "number": 4622, "title": "DynamoDB query does not fail when >= (gte) is used on table partition key", "user": {"login": "sujithcphilip", "id": 55387886, "node_id": "MDQ6VXNlcjU1Mzg3ODg2", "avatar_url": "https://avatars.githubusercontent.com/u/55387886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sujithcphilip", "html_url": "https://github.com/sujithcphilip", "followers_url": "https://api.github.com/users/sujithcphilip/followers", "following_url": "https://api.github.com/users/sujithcphilip/following{/other_user}", "gists_url": "https://api.github.com/users/sujithcphilip/gists{/gist_id}", "starred_url": "https://api.github.com/users/sujithcphilip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sujithcphilip/subscriptions", "organizations_url": "https://api.github.com/users/sujithcphilip/orgs", "repos_url": "https://api.github.com/users/sujithcphilip/repos", "events_url": "https://api.github.com/users/sujithcphilip/events{/privacy}", "received_events_url": "https://api.github.com/users/sujithcphilip/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-11-23T06:54:30Z", "updated_at": "2021-11-23T19:50:00Z", "closed_at": "2021-11-23T19:49:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "boto3=1.20.11\r\nbotocore=1.23.11\r\nmoto==2.2.16\r\n\r\n\r\nWhen >= is used on DynamoDB query **KeyConditionExpression**, an exception is expected but the actual result is an empty list.\r\n\r\nWhen **Actor** is the partition key of a table\r\nQuery KeyConditionExpression `Key(\"Actor\").gt(\"K\")` result in botocore ClientError, which is expected. But `Key(\"Actor\").gte(\"K\")` does not raise exception which is unexpected. AWS [documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.KeyConditionExpressions) mentions _You must specify the partition key name and value as an equality condition._ \r\n\r\nPlease see the test file below.\r\n\r\n\r\n```py\r\nfrom boto3.dynamodb.conditions import Attr, Key\r\nimport pytest\r\nimport boto3\r\nfrom botocore.exceptions import ClientError\r\nimport json\r\nfrom moto.dynamodb2 import mock_dynamodb2\r\n\r\nTABLE_NAME = \"Movie_Table\"\r\n\r\n\r\ndef setup_table(records):\r\n    \"\"\"Creates table, add records and return the table object\"\"\"\r\n\r\n    ddb_resource = boto3.resource(\"dynamodb\", region_name=\"eu-west-2\")\r\n    table = ddb_resource.create_table(\r\n        TableName=TABLE_NAME,\r\n        KeySchema=[\r\n            {\"AttributeName\": \"Actor\", \"KeyType\": \"HASH\"},\r\n            {\"AttributeName\": \"Movie\", \"KeyType\": \"RANGE\"},\r\n        ],\r\n        AttributeDefinitions=[\r\n            {\"AttributeName\": \"Actor\", \"AttributeType\": \"S\"},\r\n            {\"AttributeName\": \"Movie\", \"AttributeType\": \"S\"}\r\n        ],\r\n        ProvisionedThroughput={\"ReadCapacityUnits\": 5, \"WriteCapacityUnits\": 5},\r\n    )\r\n\r\n    for item in records:\r\n        table.put_item(Item=item)\r\n\r\n    return table\r\n\r\n\r\n@pytest.fixture\r\ndef movie_records():\r\n    return [\r\n        {\r\n            \"Role\": \"C__p_r\",\r\n            \"Movie\": \"_nt_rst_ll_r\",\r\n            \"Genre\": \"Sci-fi/Adventure\",\r\n            \"Year\": \"2014\",\r\n            \"Actor\": \"M_tth_w McC_n__gh_y\",\r\n            \"__Version__\": \"1\",\r\n        },\r\n        {\r\n            \"Role\": \"_l_f\",\r\n            \"Movie\": \"Fr_z_n\",\r\n            \"Genre\": \"Family/Musical\",\r\n            \"Year\": \"2013\",\r\n            \"Actor\": \"J_sh G_d\",\r\n            \"__Version__\": \"1\",\r\n        },\r\n    ]\r\n\r\n\r\n@mock_dynamodb2\r\ndef test_query(movie_records):\r\n    table = setup_table(movie_records)\r\n    conditions = Key(\"Actor\").gte(\"K\")\r\n    # conditions = Key(\"Actor\").gt(\"K\") # Works as expected (Raises exception)\r\n\r\n    with pytest.raises(ClientError):\r\n        result = table.query(KeyConditionExpression=conditions)\r\n```\r\n\r\nPytest log\r\n\r\n```log\r\n    @mock_dynamodb2\r\n    def test_query(movie_records):\r\n        table = setup_table(movie_records)\r\n        conditions = Key(\"Actor\").gte(\"K\")\r\n        # conditions = Key(\"Actor\").gt(\"K\") # Works as expected (Raises exception)\r\n\r\n        with pytest.raises(ClientError):\r\n>           result = table.query(KeyConditionExpression=conditions)\r\nE           Failed: DID NOT RAISE <class 'botocore.exceptions.ClientError'>\r\n\r\ntest_query_bug.py:89: Failed\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4622/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4622/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4618", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4618/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4618/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4618/events", "html_url": "https://github.com/getmoto/moto/issues/4618", "id": 1060560469, "node_id": "I_kwDOAH5NfM4_Nt5V", "number": 4618, "title": "Only First Batch Job Has Tags", "user": {"login": "aperiodic", "id": 115510, "node_id": "MDQ6VXNlcjExNTUxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/115510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aperiodic", "html_url": "https://github.com/aperiodic", "followers_url": "https://api.github.com/users/aperiodic/followers", "following_url": "https://api.github.com/users/aperiodic/following{/other_user}", "gists_url": "https://api.github.com/users/aperiodic/gists{/gist_id}", "starred_url": "https://api.github.com/users/aperiodic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aperiodic/subscriptions", "organizations_url": "https://api.github.com/users/aperiodic/orgs", "repos_url": "https://api.github.com/users/aperiodic/repos", "events_url": "https://api.github.com/users/aperiodic/events{/privacy}", "received_events_url": "https://api.github.com/users/aperiodic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-11-22T20:22:50Z", "updated_at": "2021-11-23T00:47:35Z", "closed_at": "2021-11-23T00:47:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "When creating batch job definitions using `moto_client.register_job_definition()` and then retrieving all definitions using `moto_client.describe_job_definitions()`, only the first registered job definition has tags. The second registered definition, and all subsequent definitions, have an empty tags dictionary, even though tags are passed to `register_job_definition` to create the job.\r\n\r\nHere is a test that should pass if all job definitions have the tags that were passed at registration time:\r\n\r\n```\r\nimport boto3\r\nimport moto\r\n\r\n\r\nAWS_REGION = \"us-east-1\"\r\n\r\n\r\n@moto.mock_batch()\r\ndef test_second_job_definition_registered_has_no_tags():\r\n    client = boto3.client(\"batch\", region_name=AWS_REGION)\r\n\r\n    two_tags = {\"Foo\": \"bar\", \"Baz\": \"buzz\"}\r\n    container_props = {\r\n        \"image\": \"1234567890123.dkr.ecr.us-east-1.amazonaws.com/test:test\",\r\n        \"memory\": 1024,\r\n        \"vcpus\": 2,\r\n    }\r\n\r\n    client.register_job_definition(\r\n        jobDefinitionName=\"test-job\",\r\n        type=\"container\",\r\n        tags=two_tags,\r\n        parameters={},\r\n        containerProperties=container_props,\r\n    )\r\n\r\n    assert len(two_tags) == 2\r\n    container_props[\"memory\"] = 2048\r\n    client.register_job_definition(\r\n        jobDefinitionName=\"test-job\",\r\n        type=\"container\",\r\n        tags=two_tags,\r\n        parameters={},\r\n        containerProperties=container_props,\r\n    )\r\n\r\n    job_defs = client.describe_job_definitions()[\"jobDefinitions\"]\r\n    assert len(job_defs) == 2\r\n    assert job_defs[0][\"tags\"] == two_tags\r\n    assert job_defs[1][\"tags\"] == two_tags\r\n```\r\n\r\nI expect the test to pass (i.e. all the assertions to succeed). Instead, it fails on the last assertion:\r\n```\r\n>       assert job_defs[1][\"tags\"] == two_tags\r\nE       AssertionError: assert {} == {'Baz': 'buzz', 'Foo': 'bar'}\r\nE         Right contains 2 more items:\r\nE         {'Baz': 'buzz', 'Foo': 'bar'}\r\nE         Full diff:\r\nE         - {'Baz': 'buzz', 'Foo': 'bar'}\r\nE         + {}\r\n```\r\n\r\nI am using the Python mocks, with the following versions of moto and boto3/botocore:\r\n```\r\nboto3==1.18.51\r\nbotocore==1.21.51\r\nmoto==2.2.16\r\n```\r\nMoto is installed into a project-specific virtual environment, using the virtual environment's `pip` binary and passing it a requirements file that contains\r\n```\r\nmoto[batch] >= 2.2.9\r\nboto3\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4618/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4618/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4617", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4617/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4617/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4617/events", "html_url": "https://github.com/getmoto/moto/issues/4617", "id": 1060441343, "node_id": "I_kwDOAH5NfM4_NQz_", "number": 4617, "title": "Dynamo raising ResourceNotFoundException instead of returning dict with empty Items list", "user": {"login": "boazsilverman", "id": 72120141, "node_id": "MDQ6VXNlcjcyMTIwMTQx", "avatar_url": "https://avatars.githubusercontent.com/u/72120141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boazsilverman", "html_url": "https://github.com/boazsilverman", "followers_url": "https://api.github.com/users/boazsilverman/followers", "following_url": "https://api.github.com/users/boazsilverman/following{/other_user}", "gists_url": "https://api.github.com/users/boazsilverman/gists{/gist_id}", "starred_url": "https://api.github.com/users/boazsilverman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boazsilverman/subscriptions", "organizations_url": "https://api.github.com/users/boazsilverman/orgs", "repos_url": "https://api.github.com/users/boazsilverman/repos", "events_url": "https://api.github.com/users/boazsilverman/events{/privacy}", "received_events_url": "https://api.github.com/users/boazsilverman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/getmoto/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": {"login": "bpandola", "id": 11675295, "node_id": "MDQ6VXNlcjExNjc1Mjk1", "avatar_url": "https://avatars.githubusercontent.com/u/11675295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpandola", "html_url": "https://github.com/bpandola", "followers_url": "https://api.github.com/users/bpandola/followers", "following_url": "https://api.github.com/users/bpandola/following{/other_user}", "gists_url": "https://api.github.com/users/bpandola/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpandola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpandola/subscriptions", "organizations_url": "https://api.github.com/users/bpandola/orgs", "repos_url": "https://api.github.com/users/bpandola/repos", "events_url": "https://api.github.com/users/bpandola/events{/privacy}", "received_events_url": "https://api.github.com/users/bpandola/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bpandola", "id": 11675295, "node_id": "MDQ6VXNlcjExNjc1Mjk1", "avatar_url": "https://avatars.githubusercontent.com/u/11675295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpandola", "html_url": "https://github.com/bpandola", "followers_url": "https://api.github.com/users/bpandola/followers", "following_url": "https://api.github.com/users/bpandola/following{/other_user}", "gists_url": "https://api.github.com/users/bpandola/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpandola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpandola/subscriptions", "organizations_url": "https://api.github.com/users/bpandola/orgs", "repos_url": "https://api.github.com/users/bpandola/repos", "events_url": "https://api.github.com/users/bpandola/events{/privacy}", "received_events_url": "https://api.github.com/users/bpandola/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2021-11-22T17:56:07Z", "updated_at": "2021-11-23T09:21:48Z", "closed_at": "2021-11-23T09:21:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Exception raised instead of response\r\n\r\nWhen calling the table.query function, if the value is not found AWS returns a dict with an empty Items list, as can seen below (this is boto3 python configured to actual AWS account). However in moto a ResourceNotFoundException is raised.\r\n\r\nThanks!\r\n\r\n```\r\nIn [12]: table = dynamodb.Table(table_name)\r\n\r\nIn [13]: filtering_exp = Key(key).eq(value)\r\n\r\nIn [14]: response = table.query(KeyConditionExpression=filtering_exp)\r\n\r\nIn [15]: response\r\nOut[15]: \r\n{'Items': [],\r\n 'Count': 0,\r\n 'ScannedCount': 0,\r\n 'ResponseMetadata': {'RequestId': 'E8SRGAS833L1BGS222BROSFHLRVV4KQNSO5AEMVJF66Q9ASUAAJG',\r\n  'HTTPStatusCode': 200,\r\n  'HTTPHeaders': {'server': 'Server',\r\n   'date': 'Mon, 22 Nov 2021 17:55:15 GMT',\r\n   'content-type': 'application/x-amz-json-1.0',\r\n   'content-length': '39',\r\n   'connection': 'keep-alive',\r\n   'x-amzn-requestid': 'E8SRGAS833L1BGS222BROSFHLRVV4KQNSO5AEMVJF66Q9ASUAAJG',\r\n   'x-amz-crc32': '3413411624'},\r\n  'RetryAttempts': 0}}\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4617/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4617/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4616", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4616/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4616/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4616/events", "html_url": "https://github.com/getmoto/moto/issues/4616", "id": 1060386071, "node_id": "I_kwDOAH5NfM4_NDUX", "number": 4616, "title": "Delete thing with certificates", "user": {"login": "boazsilverman", "id": 72120141, "node_id": "MDQ6VXNlcjcyMTIwMTQx", "avatar_url": "https://avatars.githubusercontent.com/u/72120141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boazsilverman", "html_url": "https://github.com/boazsilverman", "followers_url": "https://api.github.com/users/boazsilverman/followers", "following_url": "https://api.github.com/users/boazsilverman/following{/other_user}", "gists_url": "https://api.github.com/users/boazsilverman/gists{/gist_id}", "starred_url": "https://api.github.com/users/boazsilverman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boazsilverman/subscriptions", "organizations_url": "https://api.github.com/users/boazsilverman/orgs", "repos_url": "https://api.github.com/users/boazsilverman/repos", "events_url": "https://api.github.com/users/boazsilverman/events{/privacy}", "received_events_url": "https://api.github.com/users/boazsilverman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-11-22T16:56:32Z", "updated_at": "2021-12-23T12:18:33Z", "closed_at": "2021-12-22T15:41:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Thing deleted when error should have been thrown\r\n\r\nWhen a thing has certificates attached to it, according to AWS it cannot be deleted, and all certificates must be detached first.\r\nHowever, in the code here the thing is deleted. The function delete_thing iterates over all the thing's certificates and deletes them, while it should return an InvalidRequestException if any certificates are found.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4616/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4616/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4586", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4586/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4586/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4586/events", "html_url": "https://github.com/getmoto/moto/issues/4586", "id": 1055803495, "node_id": "I_kwDOAH5NfM4-7khn", "number": 4586, "title": "Bug: S3 list_part API is not works as expected", "user": {"login": "stdll00", "id": 16006732, "node_id": "MDQ6VXNlcjE2MDA2NzMy", "avatar_url": "https://avatars.githubusercontent.com/u/16006732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stdll00", "html_url": "https://github.com/stdll00", "followers_url": "https://api.github.com/users/stdll00/followers", "following_url": "https://api.github.com/users/stdll00/following{/other_user}", "gists_url": "https://api.github.com/users/stdll00/gists{/gist_id}", "starred_url": "https://api.github.com/users/stdll00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stdll00/subscriptions", "organizations_url": "https://api.github.com/users/stdll00/orgs", "repos_url": "https://api.github.com/users/stdll00/repos", "events_url": "https://api.github.com/users/stdll00/events{/privacy}", "received_events_url": "https://api.github.com/users/stdll00/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-11-17T07:34:43Z", "updated_at": "2021-11-23T19:47:48Z", "closed_at": "2021-11-23T19:47:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Behavior is different between boto3+AWS and moto.\r\nWhen upload PartNumber=1,  PartNumber=2, PartNumber=10000 and call `list_parts`,\r\nExpected behavior(AWS behavior): returns part info about [1,2,10000] \r\nActual behavior: return part info about [1,2]\r\n\r\nFrom this document (https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html) , actual behavior seems not collect.\r\n\r\nMy environment : installed `moto[s3]`\r\n\r\n## code snippets\r\n#### AWS version(Please change bucket name if you want to try on aws)\r\n```python3\r\nimport random\r\n\r\nimport boto3\r\nimport moto\r\nimport os\r\nfrom mypy_boto3_s3.client import S3Client\r\n\r\n#@moto.mock_s3\r\ndef main():\r\n    random_file = os.urandom(1024 * 1024 * 12 + 1)\r\n    bucket = \"----please-change--here---\"\r\n    boto3_session = boto3.session.Session()\r\n    s3_client: S3Client = boto3_session.client(\"s3\")\r\n\r\n    key = f\"test/test_file_{random.randint(10000, 10000000)}\"\r\n    # s3_client.create_bucket(\r\n    #     Bucket=bucket,\r\n    #     CreateBucketConfiguration={\"LocationConstraint\": \"ap-northeast-1\"},\r\n    # )\r\n\r\n    mpu = s3_client.create_multipart_upload(Bucket=bucket, Key=key)\r\n    id = mpu[\"UploadId\"]\r\n    s3_client.upload_part(Bucket=bucket, Key=key, PartNumber=1, UploadId=id, Body=random_file[:6 * 1024 * 1024])\r\n    s3_client.upload_part(Bucket=bucket, Key=key, PartNumber=2, UploadId=id,\r\n                          Body=random_file[6 * 1024 * 1024:12 * 1024 * 1024])\r\n    s3_client.upload_part(Bucket=bucket, Key=key, PartNumber=10000, UploadId=id, Body=random_file[12 * 1024 * 1024:])\r\n\r\n    parts = {\"Parts\": [{'PartNumber': part['PartNumber'], 'ETag': part['ETag']} for part in\r\n                       s3_client.list_parts(Bucket=bucket, Key=key, UploadId=id)['Parts']]}\r\n    print(parts)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(boto3.__version__)\r\n    print(moto.__version__)\r\n    main()\r\n```\r\n\r\noutput\r\n```\r\n1.17.106\r\n2.2.13\r\n{'Parts': [{'PartNumber': 1, 'ETag': '\"4cbc7bc5ec2d263add0a23eee079ea0e\"'}, {'PartNumber': 2, 'ETag': '\"ec626206cec60a777db9576383dac7a9\"'}, {'PartNumber': 10000, 'ETag': '\"d6e4a86e03b9b1f0bbf5d9582a4ae8ef\"'}]}\r\n```\r\n### MOTO version (Only annotation, bucket name, create bucket line are different)\r\n```python\r\nimport random\r\n\r\nimport boto3\r\nimport moto\r\nimport os\r\nfrom mypy_boto3_s3.client import S3Client\r\n\r\n\r\n@moto.mock_s3\r\ndef main():\r\n    random_file = os.urandom(1024 * 1024 * 12 + 1)\r\n    bucket = \"dummy\"\r\n    boto3_session = boto3.session.Session()\r\n    s3_client: S3Client = boto3_session.client(\"s3\")\r\n\r\n    key = f\"test/test_file_{random.randint(10000, 10000000)}\"\r\n    s3_client.create_bucket(\r\n        Bucket=bucket,\r\n        CreateBucketConfiguration={\"LocationConstraint\": \"ap-northeast-1\"},\r\n    )\r\n\r\n    mpu = s3_client.create_multipart_upload(Bucket=bucket, Key=key)\r\n    id = mpu[\"UploadId\"]\r\n    s3_client.upload_part(Bucket=bucket, Key=key, PartNumber=1, UploadId=id, Body=random_file[:6 * 1024 * 1024])\r\n    s3_client.upload_part(Bucket=bucket, Key=key, PartNumber=2, UploadId=id,\r\n                          Body=random_file[6 * 1024 * 1024:12 * 1024 * 1024])\r\n    s3_client.upload_part(Bucket=bucket, Key=key, PartNumber=10000, UploadId=id, Body=random_file[12 * 1024 * 1024:])\r\n\r\n    parts = {\"Parts\": [{'PartNumber': part['PartNumber'], 'ETag': part['ETag']} for part in\r\n                       s3_client.list_parts(Bucket=bucket, Key=key, UploadId=id)['Parts']]}\r\n    print(parts)\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(boto3.__version__)\r\n    print(moto.__version__)\r\n    main()\r\n```\r\nresult\r\n```\r\n1.17.106\r\n2.2.13\r\n{'Parts': [{'PartNumber': 1, 'ETag': '\"868570b4f9451183bd9f9a3d2e30ef42\"'}, {'PartNumber': 2, 'ETag': '\"d2cca415737c0952b7ea60926735e2f5\"'}]}\r\n```\r\n\r\n`'PartNumber': 10000` is not eixits.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4586/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4586/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4580", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4580/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4580/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4580/events", "html_url": "https://github.com/getmoto/moto/issues/4580", "id": 1054225737, "node_id": "I_kwDOAH5NfM4-1jVJ", "number": 4580, "title": "DynamoDB ConditionExpression emulation does not support special characters in item attribute names", "user": {"login": "BrandonLWhite", "id": 2344027, "node_id": "MDQ6VXNlcjIzNDQwMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/2344027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrandonLWhite", "html_url": "https://github.com/BrandonLWhite", "followers_url": "https://api.github.com/users/BrandonLWhite/followers", "following_url": "https://api.github.com/users/BrandonLWhite/following{/other_user}", "gists_url": "https://api.github.com/users/BrandonLWhite/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrandonLWhite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrandonLWhite/subscriptions", "organizations_url": "https://api.github.com/users/BrandonLWhite/orgs", "repos_url": "https://api.github.com/users/BrandonLWhite/repos", "events_url": "https://api.github.com/users/BrandonLWhite/events{/privacy}", "received_events_url": "https://api.github.com/users/BrandonLWhite/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/getmoto/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-11-15T23:07:05Z", "updated_at": "2022-01-27T12:56:07Z", "closed_at": "2022-01-27T12:56:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `dynamodb2.comparisons.ConditionExpressionParser._lex_one_node` does not match on attribute names that contain special characters such as `$` and instead raises a `ValueError` exception. \r\n\r\nDynamoDB does support special characters in attribute names.  In our application we have some names that start with dollar signs.  I imagine there are several other printable special symbols/characters that are legal too.\r\n\r\nI think that `attribute_regex = r\"(:|#)?[A-z0-9\\-_]+\"` should be updated to permit `$` and other printable special chars.\r\n\r\nVersion:\r\n`moto==2.2.12`\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4580/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4580/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4570", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4570/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4570/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4570/events", "html_url": "https://github.com/getmoto/moto/issues/4570", "id": 1052899721, "node_id": "I_kwDOAH5NfM4-wfmJ", "number": 4570, "title": "No module named 'yaml' in tag 2.2.14(moto/cloudformation)", "user": {"login": "yaronbenezra", "id": 84681092, "node_id": "MDQ6VXNlcjg0NjgxMDky", "avatar_url": "https://avatars.githubusercontent.com/u/84681092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaronbenezra", "html_url": "https://github.com/yaronbenezra", "followers_url": "https://api.github.com/users/yaronbenezra/followers", "following_url": "https://api.github.com/users/yaronbenezra/following{/other_user}", "gists_url": "https://api.github.com/users/yaronbenezra/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaronbenezra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaronbenezra/subscriptions", "organizations_url": "https://api.github.com/users/yaronbenezra/orgs", "repos_url": "https://api.github.com/users/yaronbenezra/repos", "events_url": "https://api.github.com/users/yaronbenezra/events{/privacy}", "received_events_url": "https://api.github.com/users/yaronbenezra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-11-14T10:10:23Z", "updated_at": "2021-11-15T11:12:31Z", "closed_at": "2021-11-15T11:12:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nCan you please help?,\r\n\r\n/python3.8/site-packages/moto/cloudformation/models.py:3: in <module>\r\n    import yaml\r\nE   ModuleNotFoundError: No module named 'yaml'\r\n\r\nNote:\r\ndowngrade to Tag  2.2.13 bug does not exist\r\n\r\nRegards,\r\nYaron\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4570/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4570/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4551", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4551/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4551/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4551/events", "html_url": "https://github.com/getmoto/moto/issues/4551", "id": 1049233009, "node_id": "I_kwDOAH5NfM4-igZx", "number": 4551, "title": "S3 sometimes returns etags with extra \" characters", "user": {"login": "psxpaul", "id": 1706594, "node_id": "MDQ6VXNlcjE3MDY1OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1706594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psxpaul", "html_url": "https://github.com/psxpaul", "followers_url": "https://api.github.com/users/psxpaul/followers", "following_url": "https://api.github.com/users/psxpaul/following{/other_user}", "gists_url": "https://api.github.com/users/psxpaul/gists{/gist_id}", "starred_url": "https://api.github.com/users/psxpaul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psxpaul/subscriptions", "organizations_url": "https://api.github.com/users/psxpaul/orgs", "repos_url": "https://api.github.com/users/psxpaul/repos", "events_url": "https://api.github.com/users/psxpaul/events{/privacy}", "received_events_url": "https://api.github.com/users/psxpaul/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2021-11-09T23:26:55Z", "updated_at": "2021-11-11T16:34:21Z", "closed_at": "2021-11-11T16:17:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We have a CI build that uses a docker image with 'motoserver/moto:latest'. Sometime between November 2nd and November 9th, we began getting an error that `Invalid base 16 character: '\"'`.\r\n\r\nLooking in the moto UI, I can see that some objects have an etag with extra quotes around them. Changing our build to use the docker image 'motoserver/moto:2.2.12' seems to have fixed our issues for the time being.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4551/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4551/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4521", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4521/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4521/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4521/events", "html_url": "https://github.com/getmoto/moto/issues/4521", "id": 1042755375, "node_id": "I_kwDOAH5NfM4-Jy8v", "number": 4521, "title": "Can't perform GET/PUT operations against server from inside docker container", "user": {"login": "eschkufz", "id": 637102, "node_id": "MDQ6VXNlcjYzNzEwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/637102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eschkufz", "html_url": "https://github.com/eschkufz", "followers_url": "https://api.github.com/users/eschkufz/followers", "following_url": "https://api.github.com/users/eschkufz/following{/other_user}", "gists_url": "https://api.github.com/users/eschkufz/gists{/gist_id}", "starred_url": "https://api.github.com/users/eschkufz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eschkufz/subscriptions", "organizations_url": "https://api.github.com/users/eschkufz/orgs", "repos_url": "https://api.github.com/users/eschkufz/repos", "events_url": "https://api.github.com/users/eschkufz/events{/privacy}", "received_events_url": "https://api.github.com/users/eschkufz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-11-02T19:58:42Z", "updated_at": "2021-11-02T22:02:42Z", "closed_at": "2021-11-02T22:02:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Minimal Reproducible Example:\r\n\r\nRun a moto server\r\n```\r\npython3 -m moto.server -p5001\r\n```\r\nVerify that the server is accepting requests\r\n```\r\n$ curl localhost:5001\r\n# Prints: \r\n# bcaf1ffd86f41161ca5fb16fd081034fwebfile\r\n```\r\nNow try connecting to the server from inside a docker container:\r\n```\r\n$ curl host.docker.internal:5001\r\n# Prints:\r\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n# <Error>\r\n#   <Code>NoSuchBucket</Code>\r\n#    <Message>The specified bucket does not exist</Message>\r\n#    <BucketName>host</BucketName>\r\n#    <RequestID>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</RequestID>\r\n# </Error># curl host.docker.internal:5001\r\n```\r\n\r\nWhy `host.docker.internal` instead of `localhost`?\r\n\r\nInside of a docker container, `localhost` points to a privately visible URL. Docker provides a special hostname `host.docker.internal` which maps to `localhost` on the machine which is running the container. `curl host.docker.internal:5001` escapes the container its running in and connects to the moto server running on the machine which is also running the container. \r\n\r\nWhat's going on?\r\n\r\n`subdomain_based_buckets` has special cases for connection requests from `localhost` (as well as a few other cases such as `localstack` --- see https://bitbucket.org/atlassian/localstack/issues/8/creating-s3-bucket-using-aws-cli-from). There's no special case for `host.docker.internal` so the mock assumes that it refers to bucket name.\r\n\r\nWhat's the solution?\r\n\r\nAdd a new case below line 198 of `moto/s3/responses.py`:\r\n```\r\n        if (\r\n            not host\r\n            or host.startswith(\"localhost\")\r\n            or host.startswith(\"localstack\")\r\n            or host.startswith(\"host.docker.internal\")\r\n            or re.match(r\"^[^.]+$\", host)\r\n            or re.match(r\"^.*\\.svc\\.cluster\\.local:?\\d*$\", host)\r\n        ):\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4521/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4521/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4513", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4513/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4513/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4513/events", "html_url": "https://github.com/getmoto/moto/issues/4513", "id": 1040497399, "node_id": "I_kwDOAH5NfM4-BLr3", "number": 4513, "title": "S3 copy_object fails for keys with embedded percent encoding", "user": {"login": "bodnarbm", "id": 121035, "node_id": "MDQ6VXNlcjEyMTAzNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/121035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bodnarbm", "html_url": "https://github.com/bodnarbm", "followers_url": "https://api.github.com/users/bodnarbm/followers", "following_url": "https://api.github.com/users/bodnarbm/following{/other_user}", "gists_url": "https://api.github.com/users/bodnarbm/gists{/gist_id}", "starred_url": "https://api.github.com/users/bodnarbm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bodnarbm/subscriptions", "organizations_url": "https://api.github.com/users/bodnarbm/orgs", "repos_url": "https://api.github.com/users/bodnarbm/repos", "events_url": "https://api.github.com/users/bodnarbm/events{/privacy}", "received_events_url": "https://api.github.com/users/bodnarbm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-10-31T15:05:41Z", "updated_at": "2021-11-01T22:17:07Z", "closed_at": "2021-11-01T22:17:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While attempting to use [localstack](https://github.com/localstack/localstack) recently, my team found an issue where copying existing S3 objects to a new bucket and/or key would fail if the source object's key contained some embedded percent encoding (or url encoding). For example, we have a number of keys that use `%2F` within the key name to prevent S3's UIs and APIs from treating forward slash characters within that part of the key specially. These keys can be created using `put_object` and can be retrieved using `get_object`, but when attempting to copy them using `copy_object`, we received a 404 Not Found error when targeting localstack. The same operations work without issue against the real S3 apis.\r\n\r\nLooking into the error, the root issue seems to be a bug in moto's handling of the copy operation where the source key is being url decoded multiple times. This results in a copy request for a key like `some/key/with%2Furl%2Fencoding` attempting to search for and copy the key `some/key/with/url/encoding` instead and thus throws a 404 Not Found since that source key does not exist.\r\n\r\n## How to Reproduce the Issue\r\n\r\nBelow is a sample test that reproduces the problem\r\n\r\n```\r\nimport unittest\r\nimport boto3\r\nimport pytest\r\nimport sure # noqa # pylint: disable=unused-import\r\nfrom moto import mock_s3\r\n\r\n\r\n@pytest.mark.parametrize(\r\n    \"key\", [\"key/without/urlencoding\", \"key/with/some%2Furl%2Fencoding\"]\r\n)\r\n@mock_s3\r\ndef test_copy_key(key):\r\n    client = boto3.client(\"s3\", region_name=\"us-east-1\")\r\n\r\n    src_bucket = \"src-bucket\"\r\n    dest_bucket = \"dest-bucket\"\r\n    value = b\"value\"\r\n\r\n    client.create_bucket(Bucket=src_bucket)\r\n    client.put_object(Bucket=src_bucket, Key=key, Body=value)\r\n    src_response = client.get_object(Bucket=src_bucket, Key=key)\r\n    src_response[\"Body\"].read().should.equal(value)\r\n\r\n    client.create_bucket(Bucket=dest_bucket)\r\n    client.copy_object(\r\n        CopySource={\"Bucket\": src_bucket, \"Key\": key}, Bucket=dest_bucket, Key=key\r\n    )\r\n    dest_response = client.get_object(Bucket=dest_bucket, Key=key)\r\n    dest_response[\"Body\"].read().should.equal(value)\r\n```\r\n\r\n## What I expect to happen\r\nThe above test to pass for both inputs\r\n\r\n## What actually happens\r\n\r\nThe above test fails for the input with embedded percent / url encodings with the following output\r\n\r\n```\r\n pytest tests/test.py\r\n======================================================================================= test session starts ========================================================================================\r\nplatform linux -- Python 3.8.10, pytest-6.2.5, py-1.10.0, pluggy-1.0.0\r\nrootdir: /home/bodnarbm/scratch/moto-test\r\ncollected 2 items                                                                                                                                                                                  \r\n\r\ntests/test.py .F                                                                                                                                                                             [100%]\r\n\r\n============================================================================================= FAILURES =============================================================================================\r\n__________________________________________________________________________ test_copy_key[key/with/some%2Furl%2Fencoding] ___________________________________________________________________________\r\n\r\nkey = 'key/with/some%2Furl%2Fencoding'\r\n\r\n    @pytest.mark.parametrize(\r\n        \"key\", [\"key/without/urlencoding\", \"key/with/some%2Furl%2Fencoding\"]\r\n    )\r\n    @mock_s3\r\n    def test_copy_key(key):\r\n        client = boto3.client(\"s3\", region_name=\"us-east-1\")\r\n    \r\n        src_bucket = \"src-bucket\"\r\n        dest_bucket = \"dest-bucket\"\r\n        value = b\"value\"\r\n    \r\n        client.create_bucket(Bucket=src_bucket)\r\n        client.put_object(Bucket=src_bucket, Key=key, Body=value)\r\n        src_response = client.get_object(Bucket=src_bucket, Key=key)\r\n        src_response[\"Body\"].read().should.equal(value)\r\n    \r\n        client.create_bucket(Bucket=dest_bucket)\r\n>       client.copy_object(\r\n            CopySource={\"Bucket\": src_bucket, \"Key\": key}, Bucket=dest_bucket, Key=key\r\n        )\r\n\r\ntests/test.py:25: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../../.pyenv/versions/moto-test/lib/python3.8/site-packages/botocore/client.py:388: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.S3 object at 0x7fcb7cc13f40>, operation_name = 'CopyObject'\r\napi_params = {'Bucket': 'dest-bucket', 'CopySource': 'src-bucket/key/with/some%252Furl%252Fencoding', 'Key': 'key/with/some%2Furl%2Fencoding'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record('API_CALL', {\r\n            'service': service_name,\r\n            'operation': operation_name,\r\n            'params': api_params,\r\n        })\r\n        if operation_model.deprecated:\r\n            logger.debug('Warning: %s.%s() is deprecated',\r\n                         service_name, operation_name)\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            model=operation_model, params=request_dict,\r\n            request_signer=self._request_signer, context=request_context)\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context)\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            http_response=http, parsed=parsed_response,\r\n            model=operation_model, context=request_context\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.exceptions.ClientError: An error occurred (404) when calling the CopyObject operation: Not Found\r\n\r\n../../.pyenv/versions/moto-test/lib/python3.8/site-packages/botocore/client.py:708: ClientError\r\n===================================================================================== short test summary info ======================================================================================\r\nFAILED tests/test.py::test_copy_key[key/with/some%2Furl%2Fencoding] - botocore.exceptions.ClientError: An error occurred (404) when calling the CopyObject operation: Not Found\r\n=================================================================================== 1 failed, 1 passed in 0.49s ====================================================================================\r\n```\r\n\r\n## Versions being used\r\n\r\nThe above was ran in a python 3.8.10 virtual environment with the following installed\r\n```\r\nboto3==1.19.7\r\nmoto[s3]==2.2.12\r\npytest==6.2.5\r\nsure==2.0.0\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4513/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4434", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4434/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4434/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4434/events", "html_url": "https://github.com/getmoto/moto/issues/4434", "id": 1029681208, "node_id": "I_kwDOAH5NfM49X7A4", "number": 4434, "title": "cognito-idp throws incorrect exceptions when user pool doesn't exist", "user": {"login": "k0mmsussert0d", "id": 26551643, "node_id": "MDQ6VXNlcjI2NTUxNjQz", "avatar_url": "https://avatars.githubusercontent.com/u/26551643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k0mmsussert0d", "html_url": "https://github.com/k0mmsussert0d", "followers_url": "https://api.github.com/users/k0mmsussert0d/followers", "following_url": "https://api.github.com/users/k0mmsussert0d/following{/other_user}", "gists_url": "https://api.github.com/users/k0mmsussert0d/gists{/gist_id}", "starred_url": "https://api.github.com/users/k0mmsussert0d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k0mmsussert0d/subscriptions", "organizations_url": "https://api.github.com/users/k0mmsussert0d/orgs", "repos_url": "https://api.github.com/users/k0mmsussert0d/repos", "events_url": "https://api.github.com/users/k0mmsussert0d/events{/privacy}", "received_events_url": "https://api.github.com/users/k0mmsussert0d/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 859118470, "node_id": "MDU6TGFiZWw4NTkxMTg0NzA=", "url": "https://api.github.com/repos/getmoto/moto/labels/cleanup", "name": "cleanup", "color": "e278ab", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-10-18T23:05:28Z", "updated_at": "2021-10-27T08:36:50Z", "closed_at": "2021-10-27T08:36:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When calling a method referring to non-existent user pool via `UserPoolId` parameter, boto3 throws a `ResourceNotFoundException` with the following message: `User pool (...) does not exist.`. Moto implementation has only given `UserPoolId` parameter in message.\r\n\r\nIn other words, this should pass:\r\n```python\r\n@mock_cognitoidp\r\ndef test_describe_user_pool_resource_not_found():\r\n    conn = boto3.client(\"cognito-idp\", \"us-east-1\")\r\n\r\n    user_pool_id = \"us-east-1_FooBar123\"\r\n    with pytest.raises(ClientError) as exc:\r\n        conn.describe_user_pool(UserPoolId=user_pool_id)\r\n\r\n    err = exc.value.response[\"Error\"]\r\n    err[\"Code\"].should.equal(\"ResourceNotFoundException\")\r\n    err[\"Message\"].should.equal(f\"User pool {user_pool_id} does not exist.\")\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4434/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4409", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4409/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4409/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4409/events", "html_url": "https://github.com/getmoto/moto/issues/4409", "id": 1025709456, "node_id": "I_kwDOAH5NfM49IxWQ", "number": 4409, "title": "dynamodb2 \u2013 create_table() throws incorrect exception for redundant AttributeDefinitions", "user": {"login": "k0mmsussert0d", "id": 26551643, "node_id": "MDQ6VXNlcjI2NTUxNjQz", "avatar_url": "https://avatars.githubusercontent.com/u/26551643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k0mmsussert0d", "html_url": "https://github.com/k0mmsussert0d", "followers_url": "https://api.github.com/users/k0mmsussert0d/followers", "following_url": "https://api.github.com/users/k0mmsussert0d/following{/other_user}", "gists_url": "https://api.github.com/users/k0mmsussert0d/gists{/gist_id}", "starred_url": "https://api.github.com/users/k0mmsussert0d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k0mmsussert0d/subscriptions", "organizations_url": "https://api.github.com/users/k0mmsussert0d/orgs", "repos_url": "https://api.github.com/users/k0mmsussert0d/repos", "events_url": "https://api.github.com/users/k0mmsussert0d/events{/privacy}", "received_events_url": "https://api.github.com/users/k0mmsussert0d/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 3423292931, "node_id": "LA_kwDOAH5NfM7MC04D", "url": "https://api.github.com/repos/getmoto/moto/labels/hacktoberfest-accepted", "name": "hacktoberfest-accepted", "color": "36AD75", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-10-13T21:23:50Z", "updated_at": "2021-10-18T09:11:05Z", "closed_at": "2021-10-18T09:11:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you call `create_table()` of dynamodb2 handler with an entry in an `AttributeDefinitions` parameter that refers to the key not mentioned in any of `KeySchema` entries, this misleading exception is thrown:\r\n```\r\nOne or more parameter values were invalid: Some index key attributes are not defined in AttributeDefinitions. Keys: ['foo'], AttributeDefinitions: ['bar', 'foo']\r\n```\r\nwhile real message says:\r\n```\r\nOne or more parameter values were invalid: Number of attributes in KeySchema does not exactly match number of attributes defined in AttributeDefinitions\r\n```\r\n\r\nExample:\r\n```python\r\n@mock_dynamodb2\r\ndef test_index_with_additional_attributes():\r\n    dynamodb = boto3.client(\"dynamodb\", region_name=\"us-east-1\")\r\n\r\n    with pytest.raises(ClientError) as ex:\r\n        dynamodb.create_table(\r\n            TableName=\"test-table\",\r\n            AttributeDefinitions=[\r\n                {\"AttributeName\": \"id\", \"AttributeType\": \"S\"},\r\n                {\"AttributeName\": \"created_at\", \"AttributeType\": \"N\"}\r\n            ],\r\n            KeySchema=[\r\n                {\"AttributeName\": \"id\", \"KeyType\": \"HASH\"}\r\n            ],\r\n            BillingMode=\"PAY_PER_REQUEST\"\r\n        )\r\n\r\n    ex.value.response[\"Error\"][\"Code\"].should.equal(\"ValidationException\")\r\n    ex.value.response[\"Error\"][\"Message\"].should.equal(\"One or more parameter values were invalid: Number of attributes in KeySchema does not exactly match number of attributes defined in AttributeDefinitions\")  # <-- FAILS\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4409/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4409/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4389", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4389/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4389/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4389/events", "html_url": "https://github.com/getmoto/moto/issues/4389", "id": 1022102628, "node_id": "I_kwDOAH5NfM487Axk", "number": 4389, "title": "cognito_idp.list_users() allows to use custom attributes in Filter parameter", "user": {"login": "k0mmsussert0d", "id": 26551643, "node_id": "MDQ6VXNlcjI2NTUxNjQz", "avatar_url": "https://avatars.githubusercontent.com/u/26551643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k0mmsussert0d", "html_url": "https://github.com/k0mmsussert0d", "followers_url": "https://api.github.com/users/k0mmsussert0d/followers", "following_url": "https://api.github.com/users/k0mmsussert0d/following{/other_user}", "gists_url": "https://api.github.com/users/k0mmsussert0d/gists{/gist_id}", "starred_url": "https://api.github.com/users/k0mmsussert0d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k0mmsussert0d/subscriptions", "organizations_url": "https://api.github.com/users/k0mmsussert0d/orgs", "repos_url": "https://api.github.com/users/k0mmsussert0d/repos", "events_url": "https://api.github.com/users/k0mmsussert0d/events{/privacy}", "received_events_url": "https://api.github.com/users/k0mmsussert0d/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-10-10T22:00:23Z", "updated_at": "2021-10-13T09:55:59Z", "closed_at": "2021-10-13T09:55:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Per [boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html#CognitoIdentityProvider.Client.list_users), an attribute filter can be used only for a specific set of attribute names:\r\n\r\n> You can only search for the following standard attributes:\r\n> \r\n>     username (case-sensitive)\r\n>     email\r\n>     phone_number\r\n>     name\r\n>     given_name\r\n>     family_name\r\n>     preferred_username\r\n>     cognito:user_status (called Status in the Console) (case-insensitive)\r\n>     status (called **Enabled** in the Console) (case-sensitive)\r\n>     sub\r\n> \r\n> Custom attributes are not searchable.\r\n\r\nHowever, moto implementation allows any attribute.\r\n\r\n```python\r\n@mock_cognitoidp\r\ndef test_list_users():\r\n    conn = boto3.client(\"cognito-idp\", \"us-west-2\")\r\n\r\n    username = str(uuid.uuid4())\r\n    user_pool_id = conn.create_user_pool(PoolName=str(uuid.uuid4()))[\"UserPool\"][\"Id\"]\r\n    conn.admin_create_user(UserPoolId=user_pool_id, Username=username)\r\n    result = conn.list_users(UserPoolId=user_pool_id)\r\n    result[\"Users\"].should.have.length_of(1)\r\n    result[\"Users\"][0][\"Username\"].should.equal(username)\r\n\r\n    username_bis = str(uuid.uuid4())\r\n    conn.admin_create_user(\r\n        UserPoolId=user_pool_id,\r\n        Username=username_bis,\r\n        UserAttributes=[{\"Name\": \"phone_number\", \"Value\": \"+33666666666\"}, {\"Name\": \"custom:foo\", \"Value\": \"bar\"}],\r\n    )\r\n    result = conn.list_users(\r\n        UserPoolId=user_pool_id, Filter='phone_number=\"+33666666666\"'\r\n    )\r\n    result[\"Users\"].should.have.length_of(1)\r\n    result[\"Users\"][0][\"Username\"].should.equal(username_bis)\r\n\r\n    result = conn.list_users(\r\n        UserPoolId=user_pool_id, Filter='custom:foo = \"bar\"'\r\n    )\r\n    result[\"Users\"].should.have.length_of(1)  # <-- PASSED\r\n    result[\"Users\"][0][\"Username\"].should.equal(username_bis)\r\n```\r\n\r\nIn order to properly reflect behavior of `cognito-idp` client, filter using any attribute name outside of the list quoted should be rejected by throwing an exception:\r\n```\r\nbotocore.errorfactory.InvalidParameterException: An error occurred (InvalidParameterException) when calling the ListUsers operation: Invalid search attribute: custom:foo\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4389/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4389/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4376", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4376/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4376/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4376/events", "html_url": "https://github.com/getmoto/moto/issues/4376", "id": 1019476712, "node_id": "I_kwDOAH5NfM48w_ro", "number": 4376, "title": "describe_network_interfaces after run_instances fails with InvalidAddress.NotFound", "user": {"login": "sblask", "id": 681955, "node_id": "MDQ6VXNlcjY4MTk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/681955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sblask", "html_url": "https://github.com/sblask", "followers_url": "https://api.github.com/users/sblask/followers", "following_url": "https://api.github.com/users/sblask/following{/other_user}", "gists_url": "https://api.github.com/users/sblask/gists{/gist_id}", "starred_url": "https://api.github.com/users/sblask/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sblask/subscriptions", "organizations_url": "https://api.github.com/users/sblask/orgs", "repos_url": "https://api.github.com/users/sblask/repos", "events_url": "https://api.github.com/users/sblask/events{/privacy}", "received_events_url": "https://api.github.com/users/sblask/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2021-10-07T00:08:07Z", "updated_at": "2021-10-16T20:16:38Z", "closed_at": "2021-10-16T20:16:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code will raise an exception for the second describe_network_interfaces call:\r\n\r\n```\r\n#!/usr/bin/env python3\r\nimport boto3\r\nimport moto\r\n\r\n\r\n@moto.mock_ec2\r\ndef main():\r\n    client = boto3.client(\"ec2\", region_name=\"ap-southeast-2\")\r\n\r\n    print(client.describe_network_interfaces())\r\n\r\n    client.run_instances(\r\n        ImageId=client.describe_images()[\"Images\"][0][\"ImageId\"],\r\n        MinCount=1,\r\n        MaxCount=1,\r\n    )\r\n\r\n    print(client.describe_network_interfaces())\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n```\r\n\r\n```\r\n$ python test.py\r\n{'NetworkInterfaces': [], 'ResponseMetadata': {'RequestId': 'ddb0aaf1-8b65-4f0a-94fa-654b18b8a204', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 22, in <module>\r\n    main()\r\n  File \"/Users/sebastian/Clones/packer-cleanup/.venv/lib/python3.8/site-packages/moto/core/models.py\", line 114, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"test.py\", line 18, in main\r\n    print(client.describe_network_interfaces())\r\n  File \"/Users/sebastian/Clones/packer-cleanup/.venv/lib/python3.8/site-packages/botocore/client.py\", line 386, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/sebastian/Clones/packer-cleanup/.venv/lib/python3.8/site-packages/botocore/client.py\", line 705, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (InvalidAddress.NotFound) when calling the DescribeNetworkInterfaces operation: Address '['54.214.49.42']' not found.\r\n```\r\n\r\nI'd expect the call to just succeed or if Moto can't handle it a Moto exception with a possible workaround.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4376/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4376/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4370", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4370/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4370/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4370/events", "html_url": "https://github.com/getmoto/moto/issues/4370", "id": 1016008583, "node_id": "I_kwDOAH5NfM48jw-H", "number": 4370, "title": "DynamoDB: ProjectionExpression not working on get_item()", "user": {"login": "janluak", "id": 12571346, "node_id": "MDQ6VXNlcjEyNTcxMzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/12571346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janluak", "html_url": "https://github.com/janluak", "followers_url": "https://api.github.com/users/janluak/followers", "following_url": "https://api.github.com/users/janluak/following{/other_user}", "gists_url": "https://api.github.com/users/janluak/gists{/gist_id}", "starred_url": "https://api.github.com/users/janluak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janluak/subscriptions", "organizations_url": "https://api.github.com/users/janluak/orgs", "repos_url": "https://api.github.com/users/janluak/repos", "events_url": "https://api.github.com/users/janluak/events{/privacy}", "received_events_url": "https://api.github.com/users/janluak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-10-05T08:00:21Z", "updated_at": "2021-11-11T11:08:50Z", "closed_at": "2021-11-11T11:08:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "On the mock of the dynamo_db resource the query function is handling the ProjectionExpression correctly.\r\nYet, the get_item function is returning an empty response (only Metadata) instead of the item limited to specified attributes.\r\n\r\n\r\nmoto: v2.2.6\r\nboto3: v1.17.79\r\n\r\n\r\n```\r\nimport boto3\r\n\r\ndynamo_db_resource = boto3.resource(\"dynamodb\")\r\ntable = dynamo_db_resource.Table(\"TableName\")\r\n\r\n# empty response\r\ntable.get_item(Key={\"pk\": pk}, ProjectionExpression=\"expected_attribute_name\")\r\n\r\n# working response\r\ntable.query(IndexName=\"index_name\", KeyConditionExpression={\"index_pk\": \"index_pk_value\"}, ProjectionExpression=\"expected_attribute_name\")\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4370/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4370/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4365", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4365/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4365/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4365/events", "html_url": "https://github.com/getmoto/moto/issues/4365", "id": 1013577348, "node_id": "I_kwDOAH5NfM48afaE", "number": 4365, "title": "ELBv2: Can't create listener", "user": {"login": "Bohdan-Ilchyshyn", "id": 43094332, "node_id": "MDQ6VXNlcjQzMDk0MzMy", "avatar_url": "https://avatars.githubusercontent.com/u/43094332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bohdan-Ilchyshyn", "html_url": "https://github.com/Bohdan-Ilchyshyn", "followers_url": "https://api.github.com/users/Bohdan-Ilchyshyn/followers", "following_url": "https://api.github.com/users/Bohdan-Ilchyshyn/following{/other_user}", "gists_url": "https://api.github.com/users/Bohdan-Ilchyshyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bohdan-Ilchyshyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bohdan-Ilchyshyn/subscriptions", "organizations_url": "https://api.github.com/users/Bohdan-Ilchyshyn/orgs", "repos_url": "https://api.github.com/users/Bohdan-Ilchyshyn/repos", "events_url": "https://api.github.com/users/Bohdan-Ilchyshyn/events{/privacy}", "received_events_url": "https://api.github.com/users/Bohdan-Ilchyshyn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-10-01T17:07:51Z", "updated_at": "2021-10-06T09:25:00Z", "closed_at": "2021-10-06T09:25:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Part of my code:\r\n```\r\n@mock_ec2\r\n@mock_elbv2\r\nclass TestElasticLoadBalancingV2(unittest.TestCase):\r\n\r\n    def setUp(self):\r\n        self.tags = [\r\n            {\r\n                'Key': 'test_key',\r\n                'Value': 'test_value'\r\n            }\r\n        ]\r\n        self.region = 'us-east-1'\r\n        self.credentials = {\r\n            \"aws_access_key_id\": \"\",\r\n            \"aws_secret_access_key\": \"\"\r\n        }\r\n\r\n        self.client = boto3.client(\r\n            'elbv2',\r\n            self.region,\r\n            **self.credentials\r\n        )\r\n\r\n\r\n    def create_resources(self):\r\n        self.elb_name = 'test_elb'\r\n        subnets_ids = self.subnets_ids()\r\n        lb_arn = self.create_load_balancer(self.elb_name, subnets_ids)\r\n        tg_arn = self.create_target_group()\r\n        self.create_listener(lb_arn, tg_arn)\r\n\r\n    def create_load_balancer(self, elb_name, subnets):\r\n        response = self.client.create_load_balancer(\r\n            Name=elb_name,\r\n            Tags=self.tags,\r\n            Subnets=subnets\r\n        )\r\n        return response['LoadBalancers'][0]['LoadBalancerArn']\r\n\r\n    def create_target_group(self):\r\n        response = self.client.create_target_group(\r\n            Name='test-target-group',\r\n            Protocol='HTTPS',\r\n            Tags=self.tags,\r\n            Port = 6081,\r\n            TargetType='instance'\r\n        )\r\n        return response['TargetGroups'][0]['TargetGroupArn']\r\n\r\n    def create_listener(self, lb_arn, tg_arn):\r\n        self.client.create_listener(\r\n            LoadBalancerArn=lb_arn,\r\n            DefaultActions=[\r\n                {\r\n                    'Type': 'fixed-response',\r\n                    'FixedResponseConfig': {\r\n                        'StatusCode': '200',\r\n                        'ContentType': 'application/json'\r\n                    }\r\n                }\r\n            ],\r\n            Tags=self.tags\r\n        )\r\n\r\n    def subnets_ids(self):\r\n        ec2_client = boto3.client(\r\n            'ec2',\r\n            self.region,\r\n            **self.credentials\r\n        )\r\n        response = ec2_client.describe_subnets()\r\n        subnets_ids = [subnet['SubnetId'] for subnet in response['Subnets']]\r\n        return subnets_ids\r\n\r\n\r\n    def test_elbv2(self):\r\n        self.create_resources()\r\n```\r\nTraceback:\r\n```\r\n File \"/home/geek/try_moto/tests.py\", line 646, in create_listener\r\n    self.client.create_listener(\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/client.py\", line 386, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/client.py\", line 691, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/client.py\", line 711, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/endpoint.py\", line 134, in _send_request\r\n    success_response, exception = self._get_response(\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/endpoint.py\", line 166, in _get_response\r\n    success_response, exception = self._do_get_response(\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/endpoint.py\", line 217, in _do_get_response\r\n    parsed_response = parser.parse(\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 245, in parse\r\n    parsed = self._do_parse(response, shape)\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 523, in _do_parse\r\n    return self._parse_body_as_xml(response, shape, inject_metadata=True)\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 535, in _parse_body_as_xml\r\n    parsed = self._parse_shape(shape, start)\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 312, in _parse_shape\r\n    return handler(shape, node)\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 388, in _handle_structure\r\n    parsed[member_name] = self._parse_shape(\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 312, in _parse_shape\r\n    return handler(shape, node)\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 370, in _handle_list\r\n    return super(BaseXMLResponseParser, self)._handle_list(shape, node)\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 320, in _handle_list\r\n    parsed.append(self._parse_shape(member_shape, item))\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 312, in _parse_shape\r\n    return handler(shape, node)\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 388, in _handle_structure\r\n    parsed[member_name] = self._parse_shape(\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 312, in _parse_shape\r\n    return handler(shape, node)\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 174, in _get_text_content\r\n    return func(self, shape, text)\r\n  File \"/home/geek/.local/share/virtualenvs/aws_automation-MKiSmjjO/lib/python3.8/site-packages/botocore/parsers.py\", line 486, in _handle_integer\r\n    return int(text)\r\nValueError: invalid literal for int() with base 10: 'None'\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4365/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4365/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4364", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4364/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4364/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4364/events", "html_url": "https://github.com/getmoto/moto/issues/4364", "id": 1012544995, "node_id": "I_kwDOAH5NfM48WjXj", "number": 4364, "title": "AWS Batch job timestamps are missing or not in milliseconds", "user": {"login": "dazza-codes", "id": 240623, "node_id": "MDQ6VXNlcjI0MDYyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/240623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dazza-codes", "html_url": "https://github.com/dazza-codes", "followers_url": "https://api.github.com/users/dazza-codes/followers", "following_url": "https://api.github.com/users/dazza-codes/following{/other_user}", "gists_url": "https://api.github.com/users/dazza-codes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dazza-codes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dazza-codes/subscriptions", "organizations_url": "https://api.github.com/users/dazza-codes/orgs", "repos_url": "https://api.github.com/users/dazza-codes/repos", "events_url": "https://api.github.com/users/dazza-codes/events{/privacy}", "received_events_url": "https://api.github.com/users/dazza-codes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 3423292931, "node_id": "LA_kwDOAH5NfM7MC04D", "url": "https://api.github.com/repos/getmoto/moto/labels/hacktoberfest-accepted", "name": "hacktoberfest-accepted", "color": "36AD75", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-09-30T19:29:56Z", "updated_at": "2021-10-28T09:28:45Z", "closed_at": "2021-10-28T09:28:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "The moto response for an AWS Batch job description must return timestamps in milliseconds since the epoch.  \r\nThis issue is based on moto behavior in:\r\n\r\n```\r\n$ python --version\r\nPython 3.7.10\r\n\r\n$ poetry show moto\r\nname         : moto\r\nversion      : 1.3.16\r\ndescription  : A library that allows your python tests to easily mock out the boto library\r\n\r\n$ docker --version\r\nDocker version 20.10.8, build 3967b7d\r\n```\r\n\r\nAn AWS Batch jobDescription includes fields for timestamps in milliseconds since the epoch for:\r\n\r\n- createdAt\r\n- startedAt\r\n- stoppedAt\r\n\r\nDocumentation at \r\n- https://docs.aws.amazon.com/cli/latest/reference/batch/describe-jobs.html\r\n  - e.g. `\"createdAt\": 1480483387803`\r\n- https://docs.aws.amazon.com/batch/latest/APIReference/API_DescribeJobs.html\r\n- https://docs.aws.amazon.com/batch/latest/APIReference/API_JobDetail.html\r\n\r\n```json\r\n{\r\n      \"createdAt\": 1490626709525,\r\n      \"startedAt\": 1490627034798,\r\n      \"stoppedAt\": 1490627034949,\r\n}\r\n```\r\n\r\nFrom https://docs.aws.amazon.com/batch/latest/APIReference/API_JobDetail.html\r\n\r\n> createdAt\r\n> The Unix timestamp (in milliseconds) for when the job was created. For non-array jobs and parent array jobs, this is when the job entered the SUBMITTED state (at the time SubmitJob was called). For array child jobs, this is when the child job was spawned by its parent and entered the PENDING state.\r\n> Type: Long\r\n> Required: No\r\n\r\n> startedAt\r\n> The Unix timestamp (in milliseconds) for when the job was started (when the job transitioned from the STARTING state to the RUNNING state). This parameter isn't provided for child jobs of array jobs or multi-node parallel jobs.\r\n> Type: Long\r\n> Required: Yes\r\n\r\n> stoppedAt\r\n> The Unix timestamp (in milliseconds) for when the job was stopped (when the job transitioned from the RUNNING state to a terminal state, such as SUCCEEDED or FAILED).\r\n> Type: Long\r\n> Required: No\r\n\r\n\r\nAn example jobDescription from moto:\r\n\r\n```json\r\n{\r\n  \"jobName\": \"sleep-1-job\",\r\n  \"jobId\": \"53774918-1322-45bc-b582-75c037143c58\",\r\n  \"jobQueue\": \"arn:aws:batch:us-west-2:123456789012:job-queue/moto_test_job_queue\",\r\n  \"status\": \"SUCCEEDED\",\r\n  \"startedAt\": 1633028824,\r\n  \"stoppedAt\": 1633028825,\r\n  \"dependsOn\": [],\r\n  \"jobDefinition\": \"arn:aws:batch:us-west-2:123456789012:job-definition/moto_test_job_definition:1\",\r\n  \"container\": {\r\n    \"vcpus\": 1,\r\n    \"command\": [\r\n      \"/bin/sh -c \\\"for a in `seq 1 10`; do echo Hello World; sleep 1; done\\\"\"\r\n    ],\r\n    \"volumes\": [],\r\n    \"readonlyRootFilesystem\": false,\r\n    \"ulimits\": [],\r\n    \"privileged\": false,\r\n    \"logStreamName\": \"moto_test_job_definition/default/53774918-1322-45bc-b582-75c037143c58\"\r\n  }\r\n}\r\n\r\n```\r\n\r\nThe moto timestamps are in seconds, while the actual AWS Batch timestamps are in milliseconds.  To illustrate:\r\n\r\n```python\r\n\r\n# first the moto timestamp from startedAt above\r\n(Pdb) datetime.utcfromtimestamp(1633028824).replace(tzinfo=timezone.utc)\r\ndatetime.datetime(2021, 9, 30, 19, 7, 4, tzinfo=datetime.timezone.utc)\r\n# the same timestamp in milliseconds (and converted back to seconds for py-datetime)\r\n(Pdb) datetime.utcfromtimestamp(1633028824000/1e3).replace(tzinfo=timezone.utc)\r\ndatetime.datetime(2021, 9, 30, 19, 7, 4, tzinfo=datetime.timezone.utc)\r\n\r\n\r\n# now the AWS Batch example from their CLI documentation\r\n# https://docs.aws.amazon.com/cli/latest/reference/batch/describe-jobs.html\r\n# e.g. `\"createdAt\": 1480483387803`\r\n\r\n(Pdb) datetime.utcfromtimestamp(1480483387803).replace(tzinfo=timezone.utc)\r\n*** ValueError: year 48884 is out of range\r\n# converted back to seconds for py-datetime\r\n(Pdb) datetime.utcfromtimestamp(1480483387803/1e3).replace(tzinfo=timezone.utc)\r\ndatetime.datetime(2016, 11, 30, 5, 23, 7, 803000, tzinfo=datetime.timezone.utc)\r\n```\r\n\r\n\r\nOther References:\r\nI discovered this issue while working with moto batch services and trying to debug:\r\n- https://github.com/dazza-codes/aio-aws/issues/56\r\n- that issue has some notes about python and timestamp representations\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4364/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4364/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4359", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4359/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4359/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4359/events", "html_url": "https://github.com/getmoto/moto/issues/4359", "id": 1010233352, "node_id": "I_kwDOAH5NfM48NvAI", "number": 4359, "title": "sqs create_message creates event with differ from AWS prod attributes. MessageAttributes vs messageAttributes", "user": {"login": "chexov", "id": 36091, "node_id": "MDQ6VXNlcjM2MDkx", "avatar_url": "https://avatars.githubusercontent.com/u/36091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chexov", "html_url": "https://github.com/chexov", "followers_url": "https://api.github.com/users/chexov/followers", "following_url": "https://api.github.com/users/chexov/following{/other_user}", "gists_url": "https://api.github.com/users/chexov/gists{/gist_id}", "starred_url": "https://api.github.com/users/chexov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chexov/subscriptions", "organizations_url": "https://api.github.com/users/chexov/orgs", "repos_url": "https://api.github.com/users/chexov/repos", "events_url": "https://api.github.com/users/chexov/events{/privacy}", "received_events_url": "https://api.github.com/users/chexov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/getmoto/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-09-28T21:37:00Z", "updated_at": "2021-10-11T20:35:46Z", "closed_at": "2021-10-11T20:35:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "This test fails under `moto[all]==2.2.8`\r\nbut works well with AWS real event\r\n\r\nMain difference is all the keys in the real AWS SQS Event starts with lower case but the moto ones with Uppercase.\r\nExample would be `MessageAttributes` under moto and `messageAttributes` under AWS\r\n\r\n```\r\n@moto.mock_sqs\r\ndef test_sqs_case_sensitivity():\r\n    sqs = boto3.client(\"sqs\")\r\n    resp = sqs.create_queue(QueueName=\"testqueue\", Attributes={\"DelaySeconds\": \"0\"})\r\n    print(resp)\r\n    testqueue_url = resp.get(\"QueueUrl\")\r\n\r\n    sqs.send_message(\r\n        QueueUrl=testqueue_url,\r\n        MessageBody=\"body\",\r\n        MessageAttributes={\r\n            \"label\": {\"DataType\": \"String\", \"StringValue\": \"label\"},\r\n        },\r\n    )\r\n\r\n    msg = sqs.receive_message(\r\n        QueueUrl=testqueue_url,\r\n        MessageAttributeNames=['All'],\r\n        VisibilityTimeout=0,\r\n        WaitTimeSeconds=0,\r\n    )\r\n\r\n    msg_attr = msg.get(\"Records\", {}).get(\"messageAttributes\", {}).get(\"stringValue\", None)\r\n    assert msg_attr, \"case sensitive attributes. messageAttributes vs MessageAttributes. StringValue vs stringValue\"\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4359/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4359/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4352", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4352/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4352/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4352/events", "html_url": "https://github.com/getmoto/moto/issues/4352", "id": 1007494984, "node_id": "I_kwDOAH5NfM48DSdI", "number": 4352, "title": "Incorrect and misleading error message while performing conditional UpdateItem operation on nonexistent item in dynamodb2", "user": {"login": "k0mmsussert0d", "id": 26551643, "node_id": "MDQ6VXNlcjI2NTUxNjQz", "avatar_url": "https://avatars.githubusercontent.com/u/26551643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k0mmsussert0d", "html_url": "https://github.com/k0mmsussert0d", "followers_url": "https://api.github.com/users/k0mmsussert0d/followers", "following_url": "https://api.github.com/users/k0mmsussert0d/following{/other_user}", "gists_url": "https://api.github.com/users/k0mmsussert0d/gists{/gist_id}", "starred_url": "https://api.github.com/users/k0mmsussert0d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k0mmsussert0d/subscriptions", "organizations_url": "https://api.github.com/users/k0mmsussert0d/orgs", "repos_url": "https://api.github.com/users/k0mmsussert0d/repos", "events_url": "https://api.github.com/users/k0mmsussert0d/events{/privacy}", "received_events_url": "https://api.github.com/users/k0mmsussert0d/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 3423292931, "node_id": "LA_kwDOAH5NfM7MC04D", "url": "https://api.github.com/repos/getmoto/moto/labels/hacktoberfest-accepted", "name": "hacktoberfest-accepted", "color": "36AD75", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-09-26T20:31:11Z", "updated_at": "2021-10-08T07:45:10Z", "closed_at": "2021-10-08T07:45:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Calling `update_item` on `Table` object obtained from `boto3.resource('dynamodb')` with an optional `ConditionalExpression` throws an exception with very misleading error message. The message differs from the one actually returned by the real API.\r\n\r\n```python\r\nimport boto3\r\nfrom moto import mock_dynamodb2\r\n\r\nif __name__ == '__main__':\r\n    with mock_dynamodb2():\r\n        dynamodb = boto3.resource('dynamodb')\r\n        dynamodb.create_table(\r\n            TableName='test-table',\r\n            AttributeDefinitions=[\r\n                {\r\n                    'AttributeName': 'id',\r\n                    'AttributeType': 'S'\r\n                }\r\n            ],\r\n            KeySchema=[\r\n                {\r\n                    'AttributeName': 'id',\r\n                    'KeyType': 'HASH'\r\n                }\r\n            ]\r\n        )\r\n        table = dynamodb.Table('test-table')\r\n        table.put_item(\r\n            Item={\r\n                'id': '1',\r\n                'owner': 'ABC',\r\n                'guests': set(['DEF', 'GHI', 'JKL']),\r\n                'items': ['item0', 'item1', 'item2']\r\n            }\r\n        )\r\n\r\n        test_user = 'DEF'\r\n        new_item = 'item3'\r\n\r\n        res = table.update_item(\r\n            Key={\r\n                'id': '2'\r\n            },\r\n            UpdateExpression='SET #i = list_append(#i, :vals)',\r\n            ConditionExpression='#u = :userid Or contains(#g, :userid)',\r\n            ExpressionAttributeNames={\r\n                '#i': 'items',\r\n                '#u': 'user_id',\r\n                '#g': 'guests'\r\n            },\r\n            ExpressionAttributeValues={\r\n                ':vals': [new_item],\r\n                ':userid': test_user\r\n            },\r\n            ReturnValues='UPDATED_NEW'\r\n        )\r\n\r\n```\r\n\r\nIn `put_item()` function call item with PK `id=1` is being inserted to the table. Then, `update_item()` is being called for an item with PK `id=2` that obviously does not exist at this point. In such a case, boto3 throws this exception:\r\n```\r\nbotocore.errorfactory.ConditionalCheckFailedException: An error occurred (ConditionalCheckFailedException) when calling the UpdateItem operation: The conditional request failed\r\n```\r\nwhich, in my opinion, is not perfect either, as it does not provide any hint for a reason behind request failure. However, the one returned with moto mocks is much more misleading:\r\n```\r\nbotocore.errorfactory.ConditionalCheckFailedException: An error occurred (ConditionalCheckFailedException) when calling the UpdateItem operation: A condition specified in the operation could not be evaluated.\r\n```\r\n\r\nI know this is might be a detail, but to me those two messages have completely different meaning. It is not only misleading to inform user that it is an update expression that lead request to be failed, it completely fails to point at the core of the problem. While the real message is much more general and doesn't point directly at the issue, it doesn't cause any confusion.\r\n\r\nIn order to fix this issue, I'd expect `update_item()` function of `dynamodb` resource called with `ConditionExpression` on `Key` that cannot be resolved to an item to throw an exception with message saying `An error occurred (ConditionalCheckFailedException) when calling the UpdateItem operation: The conditional request failed`.\r\n\r\nMy moto version is 2.2.8", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4352/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4352/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4347", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4347/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4347/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4347/events", "html_url": "https://github.com/getmoto/moto/issues/4347", "id": 1007172638, "node_id": "I_kwDOAH5NfM48CDwe", "number": 4347, "title": "mock_dynamodb2 does not raise ResourceNotFoundError in call to boto3.client(\"dynamodb\").batch_write_item() with an inexistent table", "user": {"login": "DrGFreeman", "id": 22901938, "node_id": "MDQ6VXNlcjIyOTAxOTM4", "avatar_url": "https://avatars.githubusercontent.com/u/22901938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrGFreeman", "html_url": "https://github.com/DrGFreeman", "followers_url": "https://api.github.com/users/DrGFreeman/followers", "following_url": "https://api.github.com/users/DrGFreeman/following{/other_user}", "gists_url": "https://api.github.com/users/DrGFreeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrGFreeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrGFreeman/subscriptions", "organizations_url": "https://api.github.com/users/DrGFreeman/orgs", "repos_url": "https://api.github.com/users/DrGFreeman/repos", "events_url": "https://api.github.com/users/DrGFreeman/events{/privacy}", "received_events_url": "https://api.github.com/users/DrGFreeman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 3423292931, "node_id": "LA_kwDOAH5NfM7MC04D", "url": "https://api.github.com/repos/getmoto/moto/labels/hacktoberfest-accepted", "name": "hacktoberfest-accepted", "color": "36AD75", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-09-25T19:09:43Z", "updated_at": "2021-10-13T09:52:29Z", "closed_at": "2021-10-13T09:52:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Description\r\n\r\nSpecifying a DynamoDB table that does not exist in the `boto3.client(\"dynamodb\").batch_write_item()` or `boto3.resource(\"dynamodb\").batch_write_item()` functions is expected to raise a `ResourceNotFoundError`. When using `mock_dynamodb2`, no exception is raised.\r\n\r\n## Steps to reproduce\r\n\r\nRun the following tests:\r\n\r\n```python\r\nimport boto3\r\nfrom moto import mock_dynamodb2\r\nimport pytest\r\n\r\n\r\n@mock_dynamodb2\r\ndef test_client_batch_write_item_exceptions():\r\n    client = boto3.client(\"dynamodb\")\r\n\r\n    with pytest.raises(client.exceptions.ResourceNotFoundException):\r\n        # Table my-table does not exist\r\n        client.batch_write_item(\r\n            RequestItems={\"my-table\": [{\"PutRequest\": {\"Item\": {}}}]}\r\n        )\r\n\r\n\r\n@mock_dynamodb2\r\ndef test_resource_batch_write_item_exceptions():\r\n    ddb = boto3.resource(\"dynamodb\")\r\n    client = boto3.client(\"dynamodb\")\r\n\r\n    with pytest.raises(client.exceptions.ResourceNotFoundException):\r\n        # Table my-table does not exist\r\n        ddb.batch_write_item(\r\n            RequestItems={\"my-table\": [{\"PutRequest\": {\"Item\": {}}}]}\r\n        )\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe tests pass, i.e. a `ResourceNotFoundException` is raised.\r\n\r\n## Actual behavior\r\n\r\nNo exceptions are raised.\r\n\r\n```\r\n$ python -m pytest -v tests/test_tests.py\r\n========================================= test session starts =========================================\r\nplatform linux -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /home/jul/git/dynamo-pandas/.venv/bin/python3\r\ncachedir: .pytest_cache\r\nrootdir: /home/jul/git/dynamo-pandas, configfile: tox.ini\r\nplugins: cov-2.12.1\r\ncollected 4 items / 2 deselected / 2 selected                                                         \r\n\r\ntests/test_tests.py::test_client_batch_write_item_exceptions FAILED                             [ 50%]\r\ntests/test_tests.py::test_resource_batch_write_item_exceptions FAILED                           [100%]\r\n\r\n============================================== FAILURES ===============================================\r\n_______________________________ test_client_batch_write_item_exceptions _______________________________\r\n\r\n    @mock_dynamodb2\r\n    def test_client_batch_write_item_exceptions():\r\n        client = boto3.client(\"dynamodb\")\r\n    \r\n        with pytest.raises(client.exceptions.ResourceNotFoundException):\r\n            # Table my-table does not exist\r\n>           client.batch_write_item(\r\n                RequestItems={\"my-table\": [{\"PutRequest\": {\"Item\": {}}}]}\r\n            )\r\nE           Failed: DID NOT RAISE <class 'botocore.errorfactory.ResourceNotFoundException'>\r\n\r\ntests/test_tests.py:12: Failed\r\n______________________________ test_resource_batch_write_item_exceptions ______________________________\r\n\r\n    @mock_dynamodb2\r\n    def test_resource_batch_write_item_exceptions():\r\n        ddb = boto3.resource(\"dynamodb\")\r\n        client = boto3.client(\"dynamodb\")\r\n    \r\n        with pytest.raises(client.exceptions.ResourceNotFoundException):\r\n            # Table my-table does not exist\r\n>           ddb.batch_write_item(\r\n                RequestItems={\"my-table\": [{\"PutRequest\": {\"Item\": {}}}]}\r\n            )\r\nE           Failed: DID NOT RAISE <class 'botocore.errorfactory.ResourceNotFoundException'>\r\n\r\ntests/test_tests.py:24: Failed\r\n======================================= short test summary info =======================================\r\nFAILED tests/test_tests.py::test_client_batch_write_item_exceptions - Failed: DID NOT RAISE <class '...\r\nFAILED tests/test_tests.py::test_resource_batch_write_item_exceptions - Failed: DID NOT RAISE <class...\r\n=================================== 2 failed, 2 deselected in 0.29s ===================================\r\n\r\n```\r\n\r\n## Environment\r\n\r\nPackages installed with pip in a virtual environment on Ubuntu 20.04.\r\n\r\n```\r\nboto3                             1.18.48\r\nbotocore                          1.21.48\r\nmoto                              2.2.7\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4347/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4347/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4344", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4344/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4344/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4344/events", "html_url": "https://github.com/getmoto/moto/issues/4344", "id": 1007098553, "node_id": "I_kwDOAH5NfM48Bxq5", "number": 4344, "title": "mock_dynamodb2 raises ValueError instead of ResourceNotFoundError in call to boto3.resource(\"dynamodb\").batch_get_item() with an inexistent table", "user": {"login": "DrGFreeman", "id": 22901938, "node_id": "MDQ6VXNlcjIyOTAxOTM4", "avatar_url": "https://avatars.githubusercontent.com/u/22901938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrGFreeman", "html_url": "https://github.com/DrGFreeman", "followers_url": "https://api.github.com/users/DrGFreeman/followers", "following_url": "https://api.github.com/users/DrGFreeman/following{/other_user}", "gists_url": "https://api.github.com/users/DrGFreeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrGFreeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrGFreeman/subscriptions", "organizations_url": "https://api.github.com/users/DrGFreeman/orgs", "repos_url": "https://api.github.com/users/DrGFreeman/repos", "events_url": "https://api.github.com/users/DrGFreeman/events{/privacy}", "received_events_url": "https://api.github.com/users/DrGFreeman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 3423292931, "node_id": "LA_kwDOAH5NfM7MC04D", "url": "https://api.github.com/repos/getmoto/moto/labels/hacktoberfest-accepted", "name": "hacktoberfest-accepted", "color": "36AD75", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-09-25T14:18:23Z", "updated_at": "2021-10-13T10:36:16Z", "closed_at": "2021-10-13T10:36:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Description\r\n\r\nSpecifying a DynamoDB table that does not exist in the `boto3.resource(\"dynamodb\").batch_get_item()` function is expected to raise a `ResourceNotFoundException`. When using `mock_dynamodb2`, a `ValueError` is raised instead.\r\n\r\n**Update**: Also occurs when calling the `batch_get_item` from a `boto3.client(\"dynamodb\")` client, see details [below](https://github.com/spulec/moto/issues/4344#issuecomment-927172129).\r\n\r\n## Steps to reproduce\r\n\r\nRun the following test:\r\n\r\n```python\r\nimport boto3\r\nfrom moto import mock_dynamodb2\r\nimport pytest\r\n\r\n\r\n@mock_dynamodb2\r\ndef test_batch_get_items_exception():\r\n\r\n    ddb = boto3.resource(\"dynamodb\")\r\n    client = boto3.client(\"dynamodb\")\r\n\r\n    with pytest.raises(client.exceptions.ResourceNotFoundException):\r\n        ddb.batch_get_item(RequestItems={\"my-table\": {\"Keys\": [{\"id\": 0}]}})\r\n\r\n```\r\n\r\n## Expected results\r\n\r\nThe test passes, i.e. a `ResourceNotFoundException` is raised.\r\n\r\n## Actual results\r\n\r\nA `ValueError` is raised:\r\n\r\n```\r\n$ python -m pytest -v tests/test_tests.py\r\n======================================= test session starts ========================================\r\nplatform linux -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- /home/jul/git/dynamo-pandas/.venv/bin/python3\r\ncachedir: .pytest_cache\r\nUsing --randomly-seed=4219719234\r\nrootdir: /home/jul/git/dynamo-pandas, configfile: tox.ini\r\nplugins: cov-2.12.1, randomly-3.8.0\r\ncollected 1 item                                                                                   \r\n\r\ntests/test_tests.py::test_batch_get_items_exception FAILED                                   [100%]\r\n\r\n============================================= FAILURES =============================================\r\n__________________________________ test_batch_get_items_exception __________________________________\r\n\r\n    @mock_dynamodb2\r\n    def test_batch_get_items_exception():\r\n    \r\n        ddb = boto3.resource(\"dynamodb\")\r\n        client = boto3.client(\"dynamodb\")\r\n    \r\n        with pytest.raises(client.exceptions.ResourceNotFoundException):\r\n>           ddb.batch_get_item(RequestItems={\"my-table\": {\"Keys\": [{\"id\": 0}]}})\r\n\r\ntests/test_tests.py:13: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n.venv/lib/python3.8/site-packages/boto3/resources/factory.py:520: in do_action\r\n    response = action(self, *args, **kwargs)\r\n.venv/lib/python3.8/site-packages/boto3/resources/action.py:83: in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\n.venv/lib/python3.8/site-packages/botocore/client.py:386: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n.venv/lib/python3.8/site-packages/botocore/client.py:691: in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n.venv/lib/python3.8/site-packages/botocore/client.py:711: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n.venv/lib/python3.8/site-packages/botocore/endpoint.py:102: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n.venv/lib/python3.8/site-packages/botocore/endpoint.py:136: in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\n.venv/lib/python3.8/site-packages/botocore/endpoint.py:253: in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n.venv/lib/python3.8/site-packages/botocore/hooks.py:357: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n.venv/lib/python3.8/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n.venv/lib/python3.8/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n.venv/lib/python3.8/site-packages/botocore/retryhandler.py:183: in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n.venv/lib/python3.8/site-packages/botocore/retryhandler.py:250: in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\n.venv/lib/python3.8/site-packages/botocore/retryhandler.py:269: in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n.venv/lib/python3.8/site-packages/botocore/retryhandler.py:316: in __call__\r\n    checker_response = checker(attempt_number, response,\r\n.venv/lib/python3.8/site-packages/botocore/retryhandler.py:222: in __call__\r\n    return self._check_caught_exception(\r\n.venv/lib/python3.8/site-packages/botocore/retryhandler.py:359: in _check_caught_exception\r\n    raise caught_exception\r\n.venv/lib/python3.8/site-packages/botocore/endpoint.py:197: in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n.venv/lib/python3.8/site-packages/botocore/hooks.py:357: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n.venv/lib/python3.8/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n.venv/lib/python3.8/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n.venv/lib/python3.8/site-packages/moto/core/models.py:398: in __call__\r\n    status, headers, body = response_callback(\r\n.venv/lib/python3.8/site-packages/moto/core/responses.py:205: in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n.venv/lib/python3.8/site-packages/moto/core/responses.py:315: in _dispatch\r\n    return self.call_action()\r\n.venv/lib/python3.8/site-packages/moto/core/utils.py:250: in _wrapper\r\n    response = f(*args, **kwargs)\r\n.venv/lib/python3.8/site-packages/moto/core/utils.py:282: in _wrapper\r\n    response = f(*args, **kwargs)\r\n.venv/lib/python3.8/site-packages/moto/dynamodb2/responses.py:138: in call_action\r\n    response = getattr(self, endpoint)()\r\n.venv/lib/python3.8/site-packages/moto/dynamodb2/responses.py:473: in batch_get_item\r\n    item = self.dynamodb_backend.get_item(\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <moto.dynamodb2.models.DynamoDBBackend object at 0x7f08470bd610>, table_name = 'my-table'\r\nkeys = {'id': {'N': '0'}}, projection_expression = None\r\n\r\n    def get_item(self, table_name, keys, projection_expression=None):\r\n        table = self.get_table(table_name)\r\n        if not table:\r\n>           raise ValueError(\"No table found\")\r\nE           ValueError: No table found\r\n\r\n.venv/lib/python3.8/site-packages/moto/dynamodb2/models/__init__.py:1273: ValueError\r\n===================================== short test summary info ======================================\r\nFAILED tests/test_tests.py::test_batch_get_items_exception - ValueError: No table found\r\n======================================== 1 failed in 0.40s =========================================\r\n```\r\n\r\n## Environment\r\n\r\nPackages installed with pip in a virtual environment on Ubuntu 20.04.\r\n\r\n```\r\nboto3                             1.18.48\r\nbotocore                          1.21.48\r\nmoto                              2.2.7\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4344/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4344/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4341", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4341/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4341/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4341/events", "html_url": "https://github.com/getmoto/moto/issues/4341", "id": 1006702195, "node_id": "I_kwDOAH5NfM48AQ5z", "number": 4341, "title": "ListUserTags output is incorrect", "user": {"login": "farrellit", "id": 6018542, "node_id": "MDQ6VXNlcjYwMTg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6018542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/farrellit", "html_url": "https://github.com/farrellit", "followers_url": "https://api.github.com/users/farrellit/followers", "following_url": "https://api.github.com/users/farrellit/following{/other_user}", "gists_url": "https://api.github.com/users/farrellit/gists{/gist_id}", "starred_url": "https://api.github.com/users/farrellit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/farrellit/subscriptions", "organizations_url": "https://api.github.com/users/farrellit/orgs", "repos_url": "https://api.github.com/users/farrellit/repos", "events_url": "https://api.github.com/users/farrellit/events{/privacy}", "received_events_url": "https://api.github.com/users/farrellit/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-09-24T17:59:35Z", "updated_at": "2021-09-27T10:04:41Z", "closed_at": "2021-09-27T10:04:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "ListUserTags should have a result `member` under `Tags`, currently there is `item` instead.\r\n\r\nhttps://docs.aws.amazon.com/IAM/latest/APIReference/API_ListUserTags.html\r\n\r\nDiscovered while using localstack with Go SDK.   Expected the SDK to successfully list user tags, but since output doesn't match the spec, it doesn't find the tags in the response. \r\n\r\nInstalled moto via docker localstack.  ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4341/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4341/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4340", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4340/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4340/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4340/events", "html_url": "https://github.com/getmoto/moto/issues/4340", "id": 1006367902, "node_id": "I_kwDOAH5NfM47-_Se", "number": 4340, "title": "Secrets Manager can't find the specified secret during UpdateSecretVersionStage operation ", "user": {"login": "MarkBrook", "id": 24721576, "node_id": "MDQ6VXNlcjI0NzIxNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/24721576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkBrook", "html_url": "https://github.com/MarkBrook", "followers_url": "https://api.github.com/users/MarkBrook/followers", "following_url": "https://api.github.com/users/MarkBrook/following{/other_user}", "gists_url": "https://api.github.com/users/MarkBrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkBrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkBrook/subscriptions", "organizations_url": "https://api.github.com/users/MarkBrook/orgs", "repos_url": "https://api.github.com/users/MarkBrook/repos", "events_url": "https://api.github.com/users/MarkBrook/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkBrook/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-09-24T11:31:12Z", "updated_at": "2021-10-09T13:10:15Z", "closed_at": "2021-10-09T13:10:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to test secrets manager rotation with moto server and aiobotocore. However, I'm facing issue on `UpdateSecretVersionStage` operation.\r\n\r\nEnvironment:\r\n```\r\nPython 3.9.6\r\nmoto[server]==2.2.7\r\naiobotocore==1.4.1\r\n```\r\n\r\nI've prepared a small code sample to reproduce an error. I expect `current_version_id` to be staged as `AWSPREVIOUS` and `token` to be staged as `AWSCURRENT` (from the sample attached):\r\n```python\r\nimport json\r\nimport uuid\r\n\r\nimport aiobotocore\r\nimport pytest\r\n\r\n\r\n@pytest.fixture\r\ndef aiobotocore_session():\r\n    return aiobotocore.get_session()\r\n\r\n\r\n@pytest.fixture\r\ndef aws_kwargs():\r\n    return {\r\n        \"region_name\": \"us-east-1\",\r\n        \"endpoint_url\": \"http://moto:5000\",\r\n        \"aws_access_key_id\": \"test\",\r\n        \"aws_secret_access_key\": \"test\",\r\n    }\r\n\r\n\r\n@pytest.fixture\r\nasync def secrets_manager(aiobotocore_session, aws_kwargs):\r\n    async with aiobotocore_session.create_client(\"secretsmanager\", **aws_kwargs) as service_client:\r\n        yield service_client\r\n\r\n\r\n@pytest.mark.asyncio\r\nasync def test_finish_secret_step_success(secrets_manager):\r\n    very_secret_data = {\"key\": \"old_value\"}\r\n    resp = await secrets_manager.create_secret(Name=\"Foo\", SecretString=json.dumps(very_secret_data))\r\n    arn, current_version_id = resp[\"ARN\"], resp[\"VersionId\"]\r\n    \r\n    updated_secret_data = {\"key\": \"new_value\"}\r\n    token = str(uuid.uuid4())\r\n    await secrets_manager.put_secret_value(SecretId=arn, ClientRequestToken=token, SecretString=json.dumps(updated_secret_data), VersionStages=['AWSPENDING'])\r\n\r\n    await secrets_manager.get_secret_value(SecretId=arn, VersionId=current_version_id, VersionStage=\"AWSCURRENT\")\r\n    await secrets_manager.get_secret_value(SecretId=arn, VersionId=token, VersionStage=\"AWSPENDING\")\r\n\r\n    await secrets_manager.update_secret_version_stage(SecretId=arn, VersionStage=\"AWSCURRENT\", MoveToVersionId=token, RemoveFromVersionId=current_version_id)\r\n```\r\n\r\nHere is an exception:\r\n```\r\n>       await secrets_manager.update_secret_version_stage(SecretId=arn, VersionStage=\"AWSCURRENT\", MoveToVersionId=token, RemoveFromVersionId=current_version_id)\r\n\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <aiobotocore.client.SecretsManager object at 0x10e927640>\r\noperation_name = 'UpdateSecretVersionStage'\r\napi_params = {'MoveToVersionId': 'd768f14b-582a-40d2-a0d7-578dc134ed9e', 'RemoveFromVersionId': '8bdb0868-d37a-4752-a3d8-9b711b8ad278', 'SecretId': 'arn:aws:secretsmanager:us-east-1:123456789012:secret:Foo-LNrXe', 'VersionStage': 'AWSCURRENT'}\r\n\r\n    async def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record('API_CALL', {\r\n            'service': service_name,\r\n            'operation': operation_name,\r\n            'params': api_params,\r\n        })\r\n        if operation_model.deprecated:\r\n            logger.debug('Warning: %s.%s() is deprecated',\r\n                         service_name, operation_name)\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = await self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = await self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            model=operation_model, params=request_dict,\r\n            request_signer=self._request_signer, context=request_context)\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            http, parsed_response = await self._make_request(\r\n                operation_model, request_dict, request_context)\r\n    \r\n        await self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            http_response=http, parsed=parsed_response,\r\n            model=operation_model, context=request_context\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.errorfactory.ResourceNotFoundException: An error occurred (ResourceNotFoundException) when calling the UpdateSecretVersionStage operation: Secrets Manager can't find the specified secret.\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4340/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4340/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4335", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4335/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4335/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4335/events", "html_url": "https://github.com/getmoto/moto/issues/4335", "id": 1005487156, "node_id": "I_kwDOAH5NfM477oQ0", "number": 4335, "title": "Failing to simulate authentication with `mock_iam` and `mock_s3` due to generated keys not validated successfully", "user": {"login": "ivanov-slk", "id": 42289817, "node_id": "MDQ6VXNlcjQyMjg5ODE3", "avatar_url": "https://avatars.githubusercontent.com/u/42289817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanov-slk", "html_url": "https://github.com/ivanov-slk", "followers_url": "https://api.github.com/users/ivanov-slk/followers", "following_url": "https://api.github.com/users/ivanov-slk/following{/other_user}", "gists_url": "https://api.github.com/users/ivanov-slk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanov-slk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanov-slk/subscriptions", "organizations_url": "https://api.github.com/users/ivanov-slk/orgs", "repos_url": "https://api.github.com/users/ivanov-slk/repos", "events_url": "https://api.github.com/users/ivanov-slk/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanov-slk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-09-23T14:12:50Z", "updated_at": "2021-09-25T17:25:28Z", "closed_at": "2021-09-25T17:25:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm writing unit tests for a function that should authenticate to AWS S3 and then perform some operations on S3. I have a bunch of functions that do various things (like downloading/uploading files, checking for existence, etc).\r\n\r\nSince in production these will need authentication, I want to simulate it in the tests, so that I can check that this part of the code is ok too.\r\n\r\nFor mocking the AWS environment I'm using `moto`. As of now I have the following code and traceback - all below. A quick intro to it: `my_head_bucket` is an example function that needs to have unit tests. `create_user_with_access_key_and_policy` should mock the IAM user and policy needed for authenticated S3 access. It is almost the same as in the examples in the documentation.\r\n\r\nThen there are two tests. The first should pass without errors (having the correct authentication). The second should fail with `ClientError`, because `\"invalid\"` keys are being passed.\r\n\r\nFor some reason I am not able to pass through the creation of the mock user and policy, getting `botocore.exceptions.ClientError: An error occurred (InvalidClientTokenId) when calling the AttachUserPolicy operation: The security token included in the request is invalid.` It seems that no authentication should be needed for `create_access_key`, so what am I doing wrong?\r\n```\r\nimport os\r\nimport unittest\r\nimport boto3\r\nimport botocore\r\nfrom moto import mock_s3, mock_iam\r\nfrom botocore.client import ClientError\r\nfrom moto.core import set_initial_no_auth_action_count\r\n\r\nimport json\r\n\r\ndef my_head_bucket(bucket, aws_access_key_id, aws_secret_access_key):\r\n    \"\"\"\r\n    This is a sample function. In the real case, this function will do more than\r\n    just heading a bucket (like uploading/downloading files or other actions).\r\n    \r\n    It would be imported from another module and should not have any decorators (like moto's)\r\n    \"\"\"\r\n    s3_client = boto3.client(\"s3\", aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key)\r\n    s3_client.head_bucket(Bucket=bucket)\r\n\r\n@mock_iam\r\ndef create_user_with_access_key_and_policy(user_name=\"test-user\"):\r\n    \"\"\"\r\n    Should create a user with attached policy allowing read/write operations on S3.\r\n    \"\"\"\r\n    policy_document = {\r\n        \"Version\": \"2012-10-17\",\r\n        \"Statement\": [\r\n            {\"Effect\": \"Allow\", \"Action\": \"s3:*\", \"Resource\": \"*\"}\r\n        ],\r\n    }\r\n    \r\n    # Create client and user\r\n    client = boto3.client(\"iam\", region_name=\"us-east-1\")\r\n    client.create_user(UserName=user_name)\r\n\r\n    # Create and attach the policy\r\n    policy_arn = client.create_policy(\r\n        PolicyName=\"policy1\", PolicyDocument=json.dumps(policy_document)\r\n    )[\"Policy\"][\"Arn\"]\r\n    client.attach_user_policy(UserName=user_name, PolicyArn=policy_arn)\r\n    \r\n    # Return the access keys\r\n    return client.create_access_key(UserName=user_name)[\"AccessKey\"]\r\n\r\nclass TestMyTest(unittest.TestCase):\r\n    @set_initial_no_auth_action_count(0)\r\n    @mock_s3\r\n    def test_correct_credentials(self):\r\n        \"\"\"\r\n        Sets the environment (creates user with keys and policy, creates the bucket), then calls\r\n        the function-to-be-tested and expects it to run without exceptions.\r\n        \"\"\"\r\n        ### Arrange\r\n        iam_keys = create_user_with_access_key_and_policy()\r\n        print(iam_keys)\r\n\r\n        s3 = boto3.client('s3', aws_access_key_id=iam_keys[\"AccessKeyId\"],aws_secret_access_key=iam_keys[\"SecretAccessKey\"])\r\n        s3.create_bucket(Bucket='mock_bucket')\r\n        \r\n        my_head_bucket('mock_bucket', aws_access_key_id=iam_keys[\"AccessKeyId\"],aws_secret_access_key=iam_keys[\"SecretAccessKey\"])\r\n        \r\n    @set_initial_no_auth_action_count(0)\r\n    @mock_s3\r\n    def test_incorrect_credentials(self):\r\n        \"\"\"\r\n        Sets the environment (creates user with keys and policy, creates the bucket), then calls\r\n        the function-to-be-tested and expects it to run without exceptions.\r\n        \"\"\"\r\n        ### Arrange\r\n        iam_keys = create_user_with_access_key_and_policy()\r\n        print(iam_keys)\r\n\r\n        s3 = boto3.client('s3', aws_access_key_id=iam_keys[\"AccessKeyId\"],aws_secret_access_key=iam_keys[\"SecretAccessKey\"])\r\n        s3.create_bucket(Bucket='mock_bucket')\r\n        \r\n        with self.assertRaises(ClientError):\r\n            my_head_bucket('mock_bucket', aws_access_key_id=iam_keys[\"AccessKeyId\"],aws_secret_access_key=\"invalid\")\r\n```\r\n\r\n----------------\r\n\r\n```\r\n==================================================================================================== test session starts =====================================================================================================\r\nplatform linux -- Python 3.6.8, pytest-6.2.5, py-1.10.0, pluggy-0.13.1\r\nrootdir: /home/trusso.storage.maintenance\r\ncollected 2 items                                                                                                                                                                                                            \r\n\r\nsome_test.py FF                                                                                                                                                                                                        [100%]\r\n\r\n========================================================================================================== FAILURES ==========================================================================================================\r\n____________________________________________________________________________________________ TestMyTest.test_correct_credentials _____________________________________________________________________________________________\r\n\r\nself = <some_test.TestMyTest testMethod=test_correct_credentials>\r\n\r\n    @set_initial_no_auth_action_count(0)\r\n    @mock_s3\r\n    def test_correct_credentials(self):\r\n        \"\"\"\r\n        Sets the environment (creates user with keys and policy, creates the bucket), then calls\r\n        the function-to-be-tested and expects it to run without exceptions.\r\n        \"\"\"\r\n        ### Arrange\r\n>       iam_keys = create_user_with_access_key_and_policy()\r\n\r\nsome_test.py:55: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../venvs/storage_env/lib/python3.6/site-packages/moto/core/models.py:115: in wrapper\r\n    result = func(*args, **kwargs)\r\nsome_test.py:35: in create_user_with_access_key_and_policy\r\n    client.create_user(UserName=user_name)\r\n../venvs/storage_env/lib/python3.6/site-packages/botocore/client.py:386: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.IAM object at 0x7f628c16ab00>, operation_name = 'CreateUser', api_params = {'UserName': 'test-user'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record('API_CALL', {\r\n            'service': service_name,\r\n            'operation': operation_name,\r\n            'params': api_params,\r\n        })\r\n        if operation_model.deprecated:\r\n            logger.debug('Warning: %s.%s() is deprecated',\r\n                         service_name, operation_name)\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            model=operation_model, params=request_dict,\r\n            request_signer=self._request_signer, context=request_context)\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context)\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            http_response=http, parsed=parsed_response,\r\n            model=operation_model, context=request_context\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.exceptions.ClientError: An error occurred (InvalidClientTokenId) when calling the CreateUser operation: The security token included in the request is invalid.\r\n\r\n../venvs/storage_env/lib/python3.6/site-packages/botocore/client.py:705: ClientError\r\n___________________________________________________________________________________________ TestMyTest.test_incorrect_credentials ____________________________________________________________________________________________\r\n\r\nself = <some_test.TestMyTest testMethod=test_incorrect_credentials>\r\n\r\n    @set_initial_no_auth_action_count(0)\r\n    @mock_s3\r\n    def test_incorrect_credentials(self):\r\n        \"\"\"\r\n        Sets the environment (creates user with keys and policy, creates the bucket), then calls\r\n        the function-to-be-tested and expects it to run without exceptions.\r\n        \"\"\"\r\n        ### Arrange\r\n>       iam_keys = create_user_with_access_key_and_policy()\r\n\r\nsome_test.py:71: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../venvs/storage_env/lib/python3.6/site-packages/moto/core/models.py:115: in wrapper\r\n    result = func(*args, **kwargs)\r\nsome_test.py:35: in create_user_with_access_key_and_policy\r\n    client.create_user(UserName=user_name)\r\n../venvs/storage_env/lib/python3.6/site-packages/botocore/client.py:386: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.IAM object at 0x7f628b870550>, operation_name = 'CreateUser', api_params = {'UserName': 'test-user'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record('API_CALL', {\r\n            'service': service_name,\r\n            'operation': operation_name,\r\n            'params': api_params,\r\n        })\r\n        if operation_model.deprecated:\r\n            logger.debug('Warning: %s.%s() is deprecated',\r\n                         service_name, operation_name)\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            model=operation_model, params=request_dict,\r\n            request_signer=self._request_signer, context=request_context)\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context)\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            http_response=http, parsed=parsed_response,\r\n            model=operation_model, context=request_context\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.exceptions.ClientError: An error occurred (InvalidClientTokenId) when calling the CreateUser operation: The security token included in the request is invalid.\r\n\r\n../venvs/storage_env/lib/python3.6/site-packages/botocore/client.py:705: ClientError\r\n```\r\n\r\n-------------\r\n\r\nVersions:\r\n`moto`: 2.2.7\r\n`boto3`: 1.18.46\r\n`botocore`: 1.21.46", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4335/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4335/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4324", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4324/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4324/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4324/events", "html_url": "https://github.com/getmoto/moto/issues/4324", "id": 1004148958, "node_id": "I_kwDOAH5NfM472hje", "number": 4324, "title": "mock_sqs throws exception when StringValue is XML", "user": {"login": "sheridansmall", "id": 47950413, "node_id": "MDQ6VXNlcjQ3OTUwNDEz", "avatar_url": "https://avatars.githubusercontent.com/u/47950413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sheridansmall", "html_url": "https://github.com/sheridansmall", "followers_url": "https://api.github.com/users/sheridansmall/followers", "following_url": "https://api.github.com/users/sheridansmall/following{/other_user}", "gists_url": "https://api.github.com/users/sheridansmall/gists{/gist_id}", "starred_url": "https://api.github.com/users/sheridansmall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sheridansmall/subscriptions", "organizations_url": "https://api.github.com/users/sheridansmall/orgs", "repos_url": "https://api.github.com/users/sheridansmall/repos", "events_url": "https://api.github.com/users/sheridansmall/events{/privacy}", "received_events_url": "https://api.github.com/users/sheridansmall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-09-22T10:52:33Z", "updated_at": "2021-09-23T18:55:23Z", "closed_at": "2021-09-23T18:55:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run the following code which uses boto3 and an AWS SQS it works as expected, I get a JSON response containing XML.\r\n\r\n    import boto3\r\n    import time\r\n    \r\n    queue_url = 'https://sqs.eu-west-2.amazonaws.com/[redacted]'\r\n    \r\n    sqs = boto3.client(\"sqs\", region_name=\"eu-west-2\")\r\n    data = {\r\n        'Payload':\r\n            {\r\n                'DataType': 'String',\r\n                'StringValue': '<?xml version=\"1.0\" encoding=\"UTF-8\"?><feed xmlns=\"http://www.w3.org/2005/Atom\"/>'\r\n            },\r\n        'FeedType':\r\n            {\r\n                'DataType': 'String', 'StringValue': 'Atom'\r\n            }\r\n    }\r\n    \r\n    response = sqs.send_message(\r\n        QueueUrl=queue_url,\r\n        MessageBody='NSWSS Atom Feed',\r\n        MessageAttributes=data\r\n    )\r\n    print(response)\r\n    \r\n    time.sleep(5)\r\n    \r\n    fetch_response = sqs.receive_message(\r\n        QueueUrl=queue_url,\r\n        MessageAttributeNames=('Payload', 'FeedType'),\r\n        MaxNumberOfMessages=1,\r\n        VisibilityTimeout=0\r\n    )\r\n    \r\n    print(fetch_response)\r\n\r\nit prints:\r\n\r\n\r\n    {'MD5OfMessageBody': '62f853b97bc8b350d6e868c52bf3e5e0', 'MD5OfMessageAttributes': '61ca54311f9c73c111b62ff02f407e1f', 'MessageId': 'ce092897-4a5e-4902-9070-90c907e8c19f', 'ResponseMetadata': {'RequestId': 'ee0544b6-c1e5-56a7-97fa-1d723231c767', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amzn-requestid': 'ee0544b6-c1e5-56a7-97fa-1d723231c767', 'date': 'Wed, 22 Sep 2021 09:04:20 GMT', 'content-type': 'text/xml', 'content-length': '459'}, 'RetryAttempts': 0}}\r\n\r\n    {'Messages': [{'MessageId': 'ce092897-4a5e-4902-9070-90c907e8c19f', 'ReceiptHandle': 'AQEBMti9hU0LykJfTkrOhJHkoa0sq5ho09frwDgixQDzrnV7F2pCWwkEx1wJSQiJOjcCdFhGvd0xATysW8onRxfgSFELF1Wh+Wew7+lwAKp3/rC9AlSVeU72e/QnPnrLm1PfbOzIzCHbYO9CkUqgDVTsEaHqBq6f+aufQjP+u3MkJF8Kd4ZrapVSWULxz0kfFh2JNfTBEgRmmiOp+MzsjgTPtOSxCmgsss+h48Njx2Z9zSk8AgIIulyiyplNZwCcIRr2cGYTmaIt8D4pyRI2U7WJdfZJ3roG8evy3wauVptjksZY1+JjGvZMzCNY+WS9I8pI1ZwQowJhuEVddWVxJ31c0YgKdXXzPQ3wuiDZn1Ki2RblxOuSWCZU2qbnw5ev6wVYYE9uXQGvKoFbbd7Uhzmn8g==', 'MD5OfBody': '62f853b97bc8b350d6e868c52bf3e5e0', 'Body': 'NSWSS Atom Feed', 'MD5OfMessageAttributes': '61ca54311f9c73c111b62ff02f407e1f', 'MessageAttributes': {'FeedType': {'StringValue': 'Atom', 'DataType': 'String'}, 'Payload': {'StringValue': '<?xml version=\"1.0\" encoding=\"UTF-8\"?><feed xmlns=\"http://www.w3.org/2005/Atom\"/>', 'DataType': 'String'}}}], 'ResponseMetadata': {'RequestId': '7c35d819-e42a-5727-b441-81dd17f3f6e7', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amzn-requestid': '7c35d819-e42a-5727-b441-81dd17f3f6e7', 'date': 'Wed, 22 Sep 2021 09:04:25 GMT', 'content-type': 'text/xml', 'content-length': '1327'}, 'RetryAttempts': 0}}\r\n\r\nHowever when I run similar code with moto, mock_sqs I get an exception and a XML response:\r\n\r\n    import boto3\r\n    import time\r\n    \r\n    from moto import mock_sqs\r\n    \r\n    with mock_sqs():\r\n        sqs = boto3.client(\"sqs\", region_name=\"eu-west-2\")\r\n        queue_url = sqs.create_queue(QueueName=\"test-queue\")[\"QueueUrl\"]\r\n        data = {\r\n            'Payload':\r\n                {\r\n                    'DataType': 'String',\r\n                    'StringValue': '<?xml version=\"1.0\" encoding=\"UTF-8\"?><feed xmlns=\"http://www.w3.org/2005/Atom\"/>'\r\n                },\r\n            'FeedType':\r\n                {\r\n                    'DataType': 'String', 'StringValue': 'Atom'\r\n                }\r\n        }\r\n    \r\n        response = sqs.send_message(\r\n            QueueUrl=queue_url,\r\n            MessageBody='NSWSS Atom Feed',\r\n            MessageAttributes=data\r\n        )\r\n        print(response)\r\n\r\n    time.sleep(5)\r\n\r\n    fetch_response = sqs.receive_message(\r\n        QueueUrl=queue_url,\r\n        MessageAttributeNames=('Payload', 'FeedType'),\r\n        MaxNumberOfMessages=1,\r\n        VisibilityTimeout=0\r\n    )\r\n\r\n    print(fetch_response)\r\n\r\nThe following is printed:\r\n\r\n\r\n    {'MD5OfMessageBody': '62f853b97bc8b350d6e868c52bf3e5e0', 'MD5OfMessageAttributes': '61ca54311f9c73c111b62ff02f407e1f', 'MessageId': '5f92f101-431a-8a92-0d1c-fce671a53204', 'ResponseMetadata': {'RequestId': 'YF7QLBEKZY0A0QUYDMMCKXUR7LM8HQMWZUICHFPUVPXQEZL2FIF1', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com', 'x-amzn-requestid': 'YF7QLBEKZY0A0QUYDMMCKXUR7LM8HQMWZUICHFPUVPXQEZL2FIF1', 'x-amz-crc32': '2210275125'}, 'RetryAttempts': 0}}\r\n\r\n    Traceback (most recent call last):\r\n    File \"C:\\Users\\dan.small\\nswws-public-api-venv\\lib\\site-packages\\botocore\\parsers.py\", line 479, in _parse_xml_string_to_dom\r\n    parser.feed(xml_string)\r\n    xml.etree.ElementTree.ParseError: XML or text declaration not at start of entity: line 1, column 579\r\n\r\n    During handling of the above exception, another exception occurred:\r\n\r\n    Traceback (most recent call last):\r\n    File \".\\test_all_mock.py\", line 20, in <module>\r\n    fetch_response = sqs.receive_message(\r\n        File \"C:\\Users\\dan.small\\nswws-public-api-venv\\lib\\site-packages\\botocore\\client.py\", line 386, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n    File \"C:\\Users\\dan.small\\nswws-public-api-venv\\lib\\site-packages\\botocore\\client.py\", line 691, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n        File \"C:\\Users\\dan.small\\nswws-public-api-venv\\lib\\site-packages\\botocore\\client.py\", line 711, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n    File \"C:\\Users\\dan.small\\nswws-public-api-venv\\lib\\site-packages\\botocore\\endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n    File \"C:\\Users\\dan.small\\nswws-public-api-venv\\lib\\site-packages\\botocore\\endpoint.py\", line 134, in _send_request\r\n    success_response, exception = self._get_response(\r\n        File \"C:\\Users\\dan.small\\nswws-public-api-venv\\lib\\site-packages\\botocore\\endpoint.py\", line 166, in _get_response\r\n    success_response, exception = self._do_get_response(\r\n        File \"C:\\Users\\dan.small\\nswws-public-api-venv\\lib\\site-packages\\botocore\\endpoint.py\", line 217, in _do_get_response\r\n    parsed_response = parser.parse(\r\n        File \"C:\\Users\\dan.small\\nswws-public-api-venv\\lib\\site-packages\\botocore\\parsers.py\", line 245, in parse\r\n    parsed = self._do_parse(response, shape)\r\n    File \"C:\\Users\\dan.small\\nswws-public-api-venv\\lib\\site-packages\\botocore\\parsers.py\", line 551, in _do_parse\r\n    return self._parse_body_as_xml(response, shape, inject_metadata=True)\r\n    File \"C:\\Users\\dan.small\\nswws-public-api-venv\\lib\\site-packages\\botocore\\parsers.py\", line 555, in _parse_body_as_xml\r\n    root = self._parse_xml_string_to_dom(xml_contents)\r\n    File \"C:\\Users\\dan.small\\nswws-public-api-venv\\lib\\site-packages\\botocore\\parsers.py\", line 482, in _parse_xml_string_to_dom\r\n    raise ResponseParserError(\r\n        botocore.parsers.ResponseParserError: Unable to parse response (XML or text declaration not at start of entity: line 1, column 579), invalid XML received. Further retries may succeed: \\\r\n\r\n    b'<ReceiveMessageResponse><ReceiveMessageResult><Message><MessageId>5f92f101-431a-8a92-0d1c-fce671a53204</MessageId><ReceiptHandle>gaunrwkhvrwdxywiwfrqfqevlmrhdzaeoirlfwnyqwvzcaxyjgcczbklfeidymgvmfnxirgraxedcunnolzugnfxauswrybvisujyylzcaorosgyyynsysqkjqynlhzwfvqwznafcvjftzdammqnlkcufregkmxcjoxvtzibgsifkflkvkgvcrpfv</ReceiptHandle><MD5OfBody>62f853b97bc8b350d6e868c52bf3e5e0</MD5OfBody><Body>NSWSS Atom Feed</Body><MD5OfMessageAttributes>61ca54311f9c73c111b62ff02f407e1f</MD5OfMessageAttributes><MessageAttribute><Name>Payload</Name><Value><DataType>String</DataType><StringValue><?xml version=\"1.0\" encoding=\"UTF-8\"?><feed xmlns=\"http://www.w3.org/2005/Atom\"/></StringValue></Value></MessageAttribute><MessageAttribute><Name>FeedType</Name><Value><DataType>String</DataType><StringValue>Atom</StringValue></Value></MessageAttribute></Message></ReceiveMessageResult><ResponseMetadata><RequestId>KVVLFA4R8TE6MEUUZTZZRS89C0K5IR8U6KMYTTWAR4ZVXUGQ5B0O</RequestId></ResponseMetadata></ReceiveMessageResponse>'\r\n    \r\nWhat I was expecting was as similar JSON response to using boto3 with AWS SQS.\r\n\r\nUsing the same code but changing the data to:\r\n\r\n\tdata = {'Payload': {'DataType': 'String', 'StringValue': '<feed xmlns=\"http://www.w3.org/2005/Atom\"/>'}, 'FeedType': {'DataType': 'String', 'StringValue': 'Atom'}}\r\n\r\nIt prints an empty `Payload` `StringValue`:\r\n\r\n    {'Messages': [{'MessageId': 'e98a4d37-ee29-33dd-7c52-9ec2d3588380', 'ReceiptHandle': 'mzlxvlzdxouvkrxbalpvltojegaeourblskjooernlofabbwnrkjsensxgshhwwyqdxxkdoxkeiwnzcwmfwlpdxtkodxhpofmtvrajondaldptrcwqhtzjnedsgtnacnvkfdhqnmrabodmeyklsyipzgnfigtlvhtiypocunisoahpoemrozfknuw', 'MD5OfBody': '62f853b97bc8b350d6e868c52bf3e5e0', 'Body': 'NSWSS Atom Feed', 'MD5OfMessageAttributes': 'f07c25958478170dd7f6ab0e37fbaf19', 'MessageAttributes': {'Payload': {'StringValue': '', 'DataType': 'String'}, 'FeedType': {'StringValue': 'Atom', 'DataType': 'String'}}}], 'ResponseMetadata': {'RequestId': '619FSGJZL1R41AIAPURL2XB9XFEPT9NTXTHUW71NK1G73ROK812K', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com', 'x-amzn-requestid': '619FSGJZL1R41AIAPURL2XB9XFEPT9NTXTHUW71NK1G73ROK812K', 'x-amz-crc32': '3186845082'}, 'RetryAttempts': 0}}\r\n    \r\nWhat I was expecting was as similar JSON response to using boto3 with AWS SQS i.e. not an empty `Payload` `StringValue`.\r\n\r\nUsing (all installed via pip):\r\nmoto==2.2.7\r\nboto3==1.18.44\r\nbotocore==1.21.44\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4324/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4324/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4312", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4312/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4312/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4312/events", "html_url": "https://github.com/getmoto/moto/issues/4312", "id": 1000630202, "node_id": "I_kwDOAH5NfM47pGe6", "number": 4312, "title": "kms.list_resource_tags does not support KeyArn parameter", "user": {"login": "rtoma", "id": 2914051, "node_id": "MDQ6VXNlcjI5MTQwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2914051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtoma", "html_url": "https://github.com/rtoma", "followers_url": "https://api.github.com/users/rtoma/followers", "following_url": "https://api.github.com/users/rtoma/following{/other_user}", "gists_url": "https://api.github.com/users/rtoma/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtoma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtoma/subscriptions", "organizations_url": "https://api.github.com/users/rtoma/orgs", "repos_url": "https://api.github.com/users/rtoma/repos", "events_url": "https://api.github.com/users/rtoma/events{/privacy}", "received_events_url": "https://api.github.com/users/rtoma/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-09-20T06:56:56Z", "updated_at": "2021-09-23T17:25:59Z", "closed_at": "2021-09-23T17:25:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nExpected behaviour: call `kms.list_resource_tags(keyARN)` and get the tags back (if the key was created before).\r\n\r\nActual behaviour:\r\n```\r\nbotocore.errorfactory.NotFoundException: An error occurred (NotFoundException) when calling\r\n  the ListResourceTags operation: The request was rejected because the specified entity or resource\r\n  could not be found.\r\n```\r\n\r\nBoto3 docs https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/kms.html#KMS.Client.list_resource_tags says you can pass KeyID or KeyARN as parameter.\r\n\r\nI traced the `moto.kms.models.list_resource_tags` method and I see it does a dict.get on a dict keyed by KeyID. So, it makes sense a lookup by KeyARN fails.\r\n\r\nThanks again for developing moto!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4312/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4312/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4304", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4304/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4304/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4304/events", "html_url": "https://github.com/getmoto/moto/issues/4304", "id": 1000004476, "node_id": "I_kwDOAH5NfM47mtt8", "number": 4304, "title": "kms.create_key response is missing description, when not specified", "user": {"login": "rtoma", "id": 2914051, "node_id": "MDQ6VXNlcjI5MTQwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2914051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtoma", "html_url": "https://github.com/rtoma", "followers_url": "https://api.github.com/users/rtoma/followers", "following_url": "https://api.github.com/users/rtoma/following{/other_user}", "gists_url": "https://api.github.com/users/rtoma/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtoma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtoma/subscriptions", "organizations_url": "https://api.github.com/users/rtoma/orgs", "repos_url": "https://api.github.com/users/rtoma/repos", "events_url": "https://api.github.com/users/rtoma/events{/privacy}", "received_events_url": "https://api.github.com/users/rtoma/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-09-18T10:57:09Z", "updated_at": "2021-09-18T21:12:18Z", "closed_at": "2021-09-18T21:12:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThanks for developing moto!\r\n\r\nI am using version 2.2.6.  Working on adding tests to code that does:\r\n\r\n```\r\n        key_metadata = client.create_key(KeyUsage=key_usage,\r\n                                         CustomerMasterKeySpec=customer_master_key_spec,\r\n                                         Origin=origin)['KeyMetadata']\r\n```\r\n\r\nAs you see, no description is given.\r\n\r\nI expect the metadata to contain the `Description` field as to an empty string.\r\n\r\nActual behaviour: the dict does not contain the `Description` field.\r\n\r\n--\r\n\r\nI believe this is a bug. Quoting the boto3 `kms.create_key` parameter docs :\r\n\r\n(tldr; default value is an empty string.)\r\n\r\n> Description (string) --\r\nA description of the KMS key.\r\nUse a description that helps you decide whether the KMS key is appropriate for a task. The default value is an empty string (no description).\r\n\r\nSame doc section says the response will contain the field:\r\n\r\n```\r\n{\r\n    'KeyMetadata': {\r\n        .....\r\n        'Description': 'string',\r\n        .....\r\n```\r\n\r\n--\r\n\r\nObviously, the workaround is to pass `Description=''`, but I assume moto is supposed to work without requiring code changed to code-under-test.\r\n\r\nThanks, again\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4304/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4304/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4301", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4301/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4301/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4301/events", "html_url": "https://github.com/getmoto/moto/issues/4301", "id": 998852310, "node_id": "I_kwDOAH5NfM47iUbW", "number": 4301, "title": "ssm broken for python 3.6 (unless dataclasses is installed)", "user": {"login": "JoeAustinC", "id": 84557789, "node_id": "MDQ6VXNlcjg0NTU3Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/84557789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoeAustinC", "html_url": "https://github.com/JoeAustinC", "followers_url": "https://api.github.com/users/JoeAustinC/followers", "following_url": "https://api.github.com/users/JoeAustinC/following{/other_user}", "gists_url": "https://api.github.com/users/JoeAustinC/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoeAustinC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoeAustinC/subscriptions", "organizations_url": "https://api.github.com/users/JoeAustinC/orgs", "repos_url": "https://api.github.com/users/JoeAustinC/repos", "events_url": "https://api.github.com/users/JoeAustinC/events{/privacy}", "received_events_url": "https://api.github.com/users/JoeAustinC/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2174001772, "node_id": "MDU6TGFiZWwyMTc0MDAxNzcy", "url": "https://api.github.com/repos/getmoto/moto/labels/dependency-management", "name": "dependency-management", "color": "b8c9fc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-09-17T02:13:46Z", "updated_at": "2021-09-19T22:04:39Z", "closed_at": "2021-09-19T22:04:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Cause: \r\nModule `dataclasses` is not included in Python 3.6 (whereas it is in version 3.7). \r\n\r\n# Failure:\r\nRunning in Python 3.6.13, the following error occurs when using the ssm mock. \r\n\r\n```\r\n>       with mock_ssm():\r\n--\r\n\u00a0 | \u00a0\r\n\u00a0 | tests/unit/conftest.py:147:\r\n\u00a0 | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\u00a0 | /usr/local/lib/python3.6/site-packages/moto/__init__.py:8: in f\r\n\u00a0 | module = importlib.import_module(module_name, \"moto\")\r\n\u00a0 | /usr/local/lib/python3.6/importlib/__init__.py:126: in import_module\r\n\u00a0 | return _bootstrap._gcd_import(name[level:], package, level)\r\n\u00a0 | /usr/local/lib/python3.6/site-packages/moto/ssm/__init__.py:2: in <module>\r\n\u00a0 | from .models import ssm_backends\r\n\u00a0 | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\u00a0 | \u00a0\r\n\u00a0 | from __future__ import unicode_literals\r\n\u00a0 | \u00a0\r\n\u00a0 | import re\r\n\u00a0 | >   from dataclasses import dataclass\r\n\u00a0 | E   ModuleNotFoundError: No module named 'dataclasses'\r\n\u00a0 | \u00a0\r\n\u00a0 | /usr/local/lib/python3.6/site-packages/moto/ssm/models.py:4: ModuleNotFoundError\r\n```\r\n\r\n# Resolution:\r\nIt is fixed if an explicit 'dataclasses' lib is installed, eg, via:\r\n``` pip install dataclasses```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4301/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4301/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4289", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4289/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4289/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4289/events", "html_url": "https://github.com/getmoto/moto/issues/4289", "id": 997361808, "node_id": "I_kwDOAH5NfM47coiQ", "number": 4289, "title": "moto.dynamodb2.update_item fails when an attribute name in ConditionExpression contains `.`", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-09-15T17:57:09Z", "updated_at": "2021-10-09T13:09:12Z", "closed_at": "2021-10-09T13:09:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "## How to reproduce the issue?\r\nCall `.update_item()` with a `ConditionExpression` that references an `ExpressionAttributeName` containing dots. Working unittest example below. The `#second = test@foo.com` causes the [condition_op here](https://github.com/spulec/moto/blob/master/moto/dynamodb2/models/__init__.py#L1405) to fail. I've confirmed this works against AWS Dynamo.\r\n\r\n```python\r\nimport unittest\r\nimport boto3\r\nfrom moto import mock_dynamodb2\r\n\r\n\r\ndef conditionally_remove_nested_attribute(table, record_id, email_like_str):\r\n    table.update_item(\r\n        Key={\"id\": record_id},\r\n        UpdateExpression=\"REMOVE #first.#second, #other\",\r\n        ExpressionAttributeNames={\r\n            \"#first\": \"first\",\r\n            \"#second\": email_like_str,\r\n            \"#third\": \"third\",\r\n            \"#other\": \"other\"\r\n        },\r\n        ExpressionAttributeValues={\":value\": \"VALUE\", \":one\": 1},\r\n        ConditionExpression=\"size(#first.#second.#third) = :one AND contains(#first.#second.#third, :value)\",\r\n        ReturnValues=\"ALL_NEW\",\r\n    )\r\n\r\n\r\nclass TestDynamoCondition(unittest.TestCase):\r\n    @mock_dynamodb2\r\n    def test_conditionally_remove_nested_attribute(self):\r\n        dynamodb = boto3.resource(\"dynamodb\", region_name=\"us-east-2\")\r\n        table_name = \"Test\"\r\n        dynamodb.create_table(\r\n            TableName=table_name,\r\n            KeySchema=[{\"AttributeName\": \"id\", \"KeyType\": \"HASH\"}],\r\n            AttributeDefinitions=[{\"AttributeName\": \"id\", \"AttributeType\": \"S\"}],\r\n        )\r\n        table = dynamodb.Table(table_name)\r\n\r\n        email_like_str = \"test@foo.com\"\r\n        record = {\r\n            \"id\": \"key-0\",\r\n            \"first\": {\r\n                email_like_str: {\"third\": {\"VALUE\"}},\r\n            },\r\n        }\r\n        table.put_item(Item=record)\r\n\r\n        expected = {\r\n            \"id\": \"key-0\",\r\n            \"first\": {},\r\n        }\r\n        conditionally_remove_nested_attribute(table, \"key-0\", email_like_str)\r\n\r\n        assert table.get_item(Key={\"id\": \"key-0\"})[\"Item\"] == expected\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    unittest.main()\r\n```\r\n\r\n## Expected\r\n`.update_item()` parses the attribute references split by `#`, such that when `{\"#second\": \"foo@test.com\"}`, expression parsing does not split the `.com` from the string and cause the attribute to not be found.\r\n\r\n## Actual\r\n`botocore.errorfactory.ConditionalCheckFailedException: An error occurred (ConditionalCheckFailedException) when calling the UpdateItem operation: A condition specified in the operation could not be evaluated.` is raised due to parsing failure caused by splitting nested attributes on `.`\r\n\r\n## Version\r\n```\r\n\u276f pip show moto\r\nName: moto\r\nVersion: 2.2.6\r\n\r\n\u276f pip show botocore\r\nName: botocore\r\nVersion: 1.21.37\r\n\r\n\u276f pip show boto3\r\nName: boto3\r\nVersion: 1.18.37\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4289/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4249", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4249/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4249/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4249/events", "html_url": "https://github.com/getmoto/moto/issues/4249", "id": 984009910, "node_id": "MDU6SXNzdWU5ODQwMDk5MTA=", "number": 4249, "title": "Missing implementation of Cognito Username/Alias Attributes", "user": {"login": "leothomas", "id": 11858457, "node_id": "MDQ6VXNlcjExODU4NDU3", "avatar_url": "https://avatars.githubusercontent.com/u/11858457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leothomas", "html_url": "https://github.com/leothomas", "followers_url": "https://api.github.com/users/leothomas/followers", "following_url": "https://api.github.com/users/leothomas/following{/other_user}", "gists_url": "https://api.github.com/users/leothomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/leothomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leothomas/subscriptions", "organizations_url": "https://api.github.com/users/leothomas/orgs", "repos_url": "https://api.github.com/users/leothomas/repos", "events_url": "https://api.github.com/users/leothomas/events{/privacy}", "received_events_url": "https://api.github.com/users/leothomas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-08-31T15:41:12Z", "updated_at": "2021-10-20T11:56:45Z", "closed_at": "2021-10-20T11:56:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "First of all, a big thank you for this great tool!\r\n\r\nI think I've stumbled upon a missing or incorrect implementation in the Cognito user-pool users. According to the [cognito docs](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-aliases-settings) when signing up and signing in, there are 2 configuration options (on the user pool) that enable users to use alternative identifiers (phone number, email, etc): \r\n\r\n1. Using the `AliasAttributes` field. In this case the user must supply a Username unique to the user pool and can then sign in with their username or any of the attributes they've specified in the `AliasAttributes` field (provided the email/phone number has been verified)\r\n2. Using the `UsernameAttributes` field. In this case the user does not supply a username, and instead signs up directly with an email or phone number. The user pool generates a GUID for that the user (which become the value of the `sub` field in the JWT) to track it in the UserPool, and all operations are performed using the user's email/phone number as well as their `sub`. When performing a `list-users` or `get-user` operation, the `Username` field will contain the `sub` (uuid) as opposed to the email/phone number used when signing up. \r\n\r\nThis issue is concerning the second option (`UsernameAttributes`) - since that's the implementation that we are using in our app, and the implementation we would like to be able to test.\r\n\r\nCode sample implementing this behaviour: \r\n```python\r\n\r\nfrom moto import mock_cognitoidp\r\nimport boto3\r\n\r\n\r\n@mock_cognitoidp()\r\ndef moto():\r\n    cognito_client = boto3.client(\"cognito-idp\", region_name=\"us-east-1\")\r\n    return setup_user_pool(cognito_client)\r\n\r\n\r\ndef aws():\r\n    cognito_client = boto3.client(\"cognito-idp\", region_name=\"us-east-1\")\r\n    return setup_user_pool(cognito_client)\r\n\r\n\r\ndef setup_user_pool(cognito_client):\r\n    \r\n    # create user pool\r\n    user_pool_id = cognito_client.create_user_pool(\r\n        PoolName=\"moto-implementation-test\",\r\n        # allow users to sign up using an email address as their username\r\n        UsernameAttributes=[\"email\"],\r\n        Schema=[\r\n            {\r\n                \"Name\": \"sub\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": False,\r\n                \"Mutable\": False,\r\n                \"Required\": True,\r\n                \"StringAttributeConstraints\": {\"MinLength\": \"1\", \"MaxLength\": \"2048\"},\r\n            },\r\n            {\r\n                \"Name\": \"preferred_username\",\r\n                \"AttributeDataType\": \"String\",\r\n                \"DeveloperOnlyAttribute\": False,\r\n                \"Mutable\": True,\r\n                \"Required\": True,\r\n                \"StringAttributeConstraints\": {\"MinLength\": \"0\", \"MaxLength\": \"2048\"},\r\n            },\r\n        ],\r\n    )[\"UserPool\"][\"Id\"]\r\n\r\n    # create user pool client\r\n    app_client_id = cognito_client.create_user_pool_client(\r\n        UserPoolId=user_pool_id,\r\n        ClientName=\"moto-implementation-test\",\r\n        CallbackURLs=[\"https://google.com\"],\r\n        ReadAttributes=[\"preferred_username\"],\r\n        ExplicitAuthFlows=[\"ALLOW_REFRESH_TOKEN_AUTH\", \"ALLOW_USER_PASSWORD_AUTH\"],\r\n        AllowedOAuthFlows=[\"implicit\"],\r\n        AllowedOAuthScopes=[\r\n            \"email\",\r\n            \"openid\",\r\n            \"aws.cognito.signin.user.admin\",\r\n            \"profile\",\r\n        ],\r\n    )[\"UserPoolClient\"][\"ClientId\"]\r\n    \r\n    # sign up a new user using an email as the username value\r\n    cognito_client.sign_up(\r\n        ClientId=app_client_id,\r\n        Username=\"test@example.com\",\r\n        Password=\"Password123!\",\r\n        UserAttributes=[\r\n            {\"Name\": \"preferred_username\", \"Value\": \"Test User\"},\r\n            {\"Name\": \"email\", \"Value\": \"test@example.com\"},\r\n        ],\r\n    )\r\n    # confirm the user in order to use them to authenticated later\r\n    try:\r\n        cognito_client.admin_confirm_sign_up(\r\n            UserPoolId=user_pool_id, Username=\"test@example.com\"\r\n        )\r\n    # confirm sign up is not implemented in moto - skip\r\n    except NotImplementedError:\r\n        pass\r\n    \r\n    # retrieve user\r\n    user = cognito_client.admin_get_user(\r\n        UserPoolId=user_pool_id, Username=\"test@example.com\"\r\n    )\r\n\r\n    return user, app_client_id\r\n```\r\n\r\nResult: \r\n```python \r\nIn [7]: moto() # current behaviour\r\nOut[7]:\r\n({'Username': 'test@example.com',\r\n  'UserAttributes': [{'Name': 'preferred_username', 'Value': 'Test User'},\r\n   {'Name': 'email', 'Value': 'test@example.com'}],\r\n  'UserCreateDate': datetime.datetime(2021, 8, 31, 14, 53, 12, tzinfo=tzlocal()),\r\n  'UserLastModifiedDate': datetime.datetime(2021, 8, 31, 14, 53, 12, tzinfo=tzlocal()),\r\n  'Enabled': True,\r\n  'UserStatus': 'UNCONFIRMED',\r\n  'MFAOptions': [],\r\n  'UserMFASettingList': [],\r\n  'ResponseMetadata': {'HTTPStatusCode': 200,\r\n   'HTTPHeaders': {'server': 'amazon.com'},\r\n   'RetryAttempts': 0}},\r\n '7lrk15iku1xocmaq2u4ltjh8nl')\r\n\r\nIn [8]: aws() # desired behaviour\r\nOut[8]:\r\n({'Username': '3854d52d-1a9b-[***]-bea6-d4065e3559c8',\r\n  'UserAttributes': [{'Name': 'sub',\r\n    'Value': '3854d52d-1a9b-[***]-bea6-d4065e3559c8'},\r\n   {'Name': 'email_verified', 'Value': 'false'},\r\n   {'Name': 'preferred_username', 'Value': 'Test User'},\r\n   {'Name': 'email', 'Value': 'test@example.com'}],\r\n  'UserCreateDate': datetime.datetime(2021, 8, 31, 10, 55, 56, 718000, tzinfo=tzlocal()),\r\n  'UserLastModifiedDate': datetime.datetime(2021, 8, 31, 10, 55, 56, 831000, tzinfo=tzlocal()),\r\n  'Enabled': True,\r\n  'UserStatus': 'CONFIRMED',\r\n  'ResponseMetadata': {'RequestId': 'e1e83078-bdee-411b-88e9-d276ed177068',\r\n   'HTTPStatusCode': 200,\r\n   'HTTPHeaders': {'date': 'Tue, 31 Aug 2021 14:55:56 GMT',\r\n    'content-type': 'application/x-amz-json-1.1',\r\n    'content-length': '382',\r\n    'connection': 'keep-alive',\r\n    'x-amzn-requestid': 'e1e83078-bdee-411b-88e9-d276ed177068'},\r\n   'RetryAttempts': 0}},\r\n '2uj2u[***]m1hs1')\r\n```\r\nThe user returned by the mocked cognito instance  has the user's email as the `Username` field, whereas the desired behaviour is that the user instance returned by the aws cognito instance has a `sub` as the `Username` field.\r\n\r\nTo confirm that the AWS cognito instance is correctly configured, I can sign in using the user's email address or their sub: \r\n```python\r\ndef authenticate(username, app_client_id):\r\n    cognito_client = boto3.client(\"cognito-idp\", region_name=\"us-east-1\")\r\n    try:\r\n        result = cognito_client.initiate_auth(\r\n            ClientId=app_client_id,\r\n            AuthFlow=\"USER_PASSWORD_AUTH\",\r\n            AuthParameters={\"USERNAME\": username, \"PASSWORD\": \"Password123!\"},\r\n        )\r\n    except cognito_client.exceptions.UserNotFoundException:\r\n        return \"Failed\"\r\n\r\n    if \"IdToken\" in result.get(\"AuthenticationResult\"):\r\n        return \"Success\"\r\n\r\n    return \"Failed\"\r\n```\r\n\r\nResult:\r\n```python\r\nIn [9]: authenticate(\"test@example.com\", \"2uj2u[***]m1hs1\")\r\nOut[9]: 'Success'\r\n\r\nIn [10]: authenticate(\"3854d52d-1a9b-414b-bea6-d4065e3559c8\", \"2uj2u[***]m1hs1\")\r\nOut[10]: 'Success'\r\n```\r\n\r\nIt looks like the `CognitoIdpUser` class already creates a GUID: https://github.com/spulec/moto/blob/c707ee002c1f258def89dfb7e14a2c4c8cfa9ad4/moto/cognitoidp/models.py#L299-L303 \r\n\r\nI think the necessary modifications are: \r\n- When a user signs up, and the user pool's `UsernameAttributes` option is set:\r\n  - Match the provided `Username` field to either an email or a phone number regex, depending on the value of `UsernameAttribute` and set the value of the `email` or `phone_number` attributes accordingly in the `UserAttributes` field.\r\n- When requesting a user (eg: `get-user` or `list-users`) for a user pool that has the `UsernameAttributes` option set:\r\n  - The `_base_json()` method: https://github.com/spulec/moto/blob/c707ee002c1f258def89dfb7e14a2c4c8cfa9ad4/moto/cognitoidp/models.py#L318-L325 should replace the value of `Username` with `self.id`. \r\n- Enable the rest of the cognito api operations that use the `username` parameters to retrieve users (eg: `initiate-auth`, `admin-delete-user`, `confirm-forgot-password`, etc) to work using either the backend generated `GUID` (`self.id`) **_or_** the fields provided in the `UsernameAttributes`. \r\n\r\nPlease let me know if I can help move this along - I'm happy to open a PR with an initial stab at the functionality if it helps. \r\n\r\nCheers, \r\nLeo\r\n\r\n## Version info: \r\n```python\r\n# installed using: `pip install 'moto[cognito-idp]'`\r\nIn [1]: import moto\r\n\r\nIn [2]: import boto3\r\n\r\nIn [3]: import botocore\r\n\r\nIn [4]: moto.__version__\r\nOut[4]: '2.2.6'\r\n\r\nIn [5]: boto3.__version__\r\nOut[5]: '1.18.6'\r\n\r\nIn [6]: botocore.__version__\r\nOut[6]: '1.21.6'\r\n\r\nIn [7]: import sys\r\n\r\nIn [8]: sys.version\r\nOut[8]: '3.8.7 (default, Mar  5 2021, 10:09:23) \\n[Clang 12.0.0 (clang-1200.0.32.29)]'\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4249/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4249/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4235", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4235/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4235/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4235/events", "html_url": "https://github.com/getmoto/moto/issues/4235", "id": 981681305, "node_id": "MDU6SXNzdWU5ODE2ODEzMDU=", "number": 4235, "title": "SQS:GetQueueAttributes failing when Optional AttributeNames param not passed", "user": {"login": "tkalus", "id": 287181, "node_id": "MDQ6VXNlcjI4NzE4MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/287181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tkalus", "html_url": "https://github.com/tkalus", "followers_url": "https://api.github.com/users/tkalus/followers", "following_url": "https://api.github.com/users/tkalus/following{/other_user}", "gists_url": "https://api.github.com/users/tkalus/gists{/gist_id}", "starred_url": "https://api.github.com/users/tkalus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tkalus/subscriptions", "organizations_url": "https://api.github.com/users/tkalus/orgs", "repos_url": "https://api.github.com/users/tkalus/repos", "events_url": "https://api.github.com/users/tkalus/events{/privacy}", "received_events_url": "https://api.github.com/users/tkalus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-08-28T00:45:37Z", "updated_at": "2021-08-30T16:15:27Z", "closed_at": "2021-08-28T08:34:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "In updating to `moto 2.2.5`, I surfaced an issue with moto's [`sqs.get_queue_attributes`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sqs.html#SQS.Client.get_queue_attributes) where the mock was failing when the optional `AttributeNames` parameter was not passed.\r\n\r\nHere's a brief test that passes with `2.2.4`, but fails with `2.2.5` -- testing in a `pyenv` managed Python 3.9.5 virtualenv on macOS.\r\n\r\n`$ cat test_sqs.py`\r\n```\r\n\"\"\"Illustrate breakage of sqs:GetQueueAttributes().\"\"\"\r\n\r\nimport json\r\nimport os\r\n\r\nimport boto3\r\nimport pytest\r\nfrom moto import mock_sqs\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef aws_credentials():\r\n    \"\"\"Mock AWS Credentials for moto.\"\"\"\r\n    os.environ[\"AWS_ACCESS_KEY_ID\"] = \"testing\"\r\n    os.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"testing\"\r\n    os.environ[\"AWS_SECURITY_TOKEN\"] = \"testing\"\r\n    os.environ[\"AWS_SESSION_TOKEN\"] = \"testing\"\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef sqs(aws_credentials):\r\n    \"\"\"Mock SQS CLient.\"\"\"\r\n    with mock_sqs():\r\n        yield boto3.client(\"sqs\", region_name=\"us-east-1\")\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef sqs_queue(sqs):\r\n    \"\"\"Mock SQS Queue.\"\"\"\r\n    queue_url = sqs.create_queue(QueueName=\"test-queue\")[\"QueueUrl\"]\r\n\r\n    yield {\"QueueUrl\": queue_url}\r\n\r\n    # cleanup\r\n    sqs.delete_queue(QueueUrl=queue_url)\r\n\r\n\r\ndef batch_send_sqs_events(queue_url, events):\r\n    \"\"\"Batch send a bunch of events on SQS.\"\"\"\r\n    sqs_resource = boto3.resource(\"sqs\", region_name=\"us-east-1\")\r\n    sqs_queue = sqs_resource.Queue(queue_url)\r\n    for event in events:\r\n        sqs_queue.send_message(MessageBody=json.dumps(event))\r\n    return len(events)\r\n\r\n\r\ndef test_get_queue_attributes_no_param(sqs, sqs_queue):\r\n    \"\"\"\r\n    Illustrate breakage where Optional `AttributeNames` is NOT passed.\r\n    \r\n    Function: SQS:GetQueueAttributes\r\n    \"\"\"\r\n    queue_url = sqs.get_queue_url(QueueName=\"test-queue\")[\"QueueUrl\"]\r\n    input_event_count = 43\r\n    events = [{\"something\": \"test\"} for x in range(input_event_count)]\r\n\r\n    batch_send_sqs_events(queue_url, events)\r\n\r\n    queue_attrs = sqs.get_queue_attributes(QueueUrl=queue_url)\r\n    assert (\r\n        int(queue_attrs[\"Attributes\"][\"ApproximateNumberOfMessages\"])\r\n        == input_event_count\r\n    )\r\n\r\n\r\ndef test_get_queue_attributes_passed_param(sqs, sqs_queue):\r\n    \"\"\"\r\n    Illustrate functioning where optional `AttributeNames` param is passed.\r\n\r\n    Function: SQS:GetQueueAttributes\r\n    \"\"\"\r\n    queue_url = sqs.get_queue_url(QueueName=\"test-queue\")[\"QueueUrl\"]\r\n    input_event_count = 43\r\n    events = [{\"something\": \"test\"} for x in range(input_event_count)]\r\n\r\n    batch_send_sqs_events(queue_url, events)\r\n\r\n    queue_attrs = sqs.get_queue_attributes(QueueUrl=queue_url, AttributeNames=[\"All\"])\r\n    assert (\r\n        int(queue_attrs[\"Attributes\"][\"ApproximateNumberOfMessages\"])\r\n        == input_event_count\r\n    )\r\n```\r\n\r\nProblem with commit e865362 where code appending the `\"All\"` string to `attribute_names` was removed.  Parent commit that appends `\"All\"` to `attribute_names` as default when param is empty appears to function properly:\r\nhttps://github.com/spulec/moto/blob/21021a6a039dcd7430b45d91c3437ebd814fa845/moto/sqs/models.py#L638-L640\r\n\r\nBoth tests pass with `moto==2.2.4`. `test_get_queue_attributes_no_param` does not pass with `moto==2.2.5`.\r\n\r\nSteps to repro:\r\n```\r\n$ ls\r\ntest_sqs.py\r\n$ pip install pytest moto==2.2.4\r\n$ pytest\r\n# ... observe tests passing ...\r\n$ pip install --upgrade moto==2.2.5\r\n$ pytest\r\n# ... observe tests failing ...\r\n ```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4235/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4235/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4228", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4228/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4228/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4228/events", "html_url": "https://github.com/getmoto/moto/issues/4228", "id": 980999412, "node_id": "MDU6SXNzdWU5ODA5OTk0MTI=", "number": 4228, "title": "Batch compute environment Fargate", "user": {"login": "afaulconbridge", "id": 617276, "node_id": "MDQ6VXNlcjYxNzI3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/617276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afaulconbridge", "html_url": "https://github.com/afaulconbridge", "followers_url": "https://api.github.com/users/afaulconbridge/followers", "following_url": "https://api.github.com/users/afaulconbridge/following{/other_user}", "gists_url": "https://api.github.com/users/afaulconbridge/gists{/gist_id}", "starred_url": "https://api.github.com/users/afaulconbridge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afaulconbridge/subscriptions", "organizations_url": "https://api.github.com/users/afaulconbridge/orgs", "repos_url": "https://api.github.com/users/afaulconbridge/repos", "events_url": "https://api.github.com/users/afaulconbridge/events{/privacy}", "received_events_url": "https://api.github.com/users/afaulconbridge/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-08-27T08:20:14Z", "updated_at": "2021-10-26T12:27:24Z", "closed_at": "2021-10-26T12:27:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi! \ud83d\udc4b   I'm trying to mock AWS Batch on Fargate resources (which I think Moto should support?) and to do that I need to mock a Batch Compute Environment. As I understand the [Boto documentation](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/batch.html#Batch.Client.create_compute_environment) the `instanceRole` parameter is optional and not recommended when creating a compute environment that uses Fargate.\r\n\r\nHowever, Moto seems to require the `instanceRole` parameter. \r\nIs this a bug in Moto that it's requiring this parameter when Boto doesn't? Is mocking AWS Batch Fargate resources supported in Moto? \r\n\r\nThe full error is:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"run.py\", line 65, in <module>\r\n    create_compute_environment(batch_client, \"dummy\", iam_role_arn)\r\n  File \"run.py\", line 18, in create_compute_environment\r\n    response = client.create_compute_environment(\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/client.py\", line 386, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/client.py\", line 691, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/client.py\", line 711, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/endpoint.py\", line 136, in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/endpoint.py\", line 253, in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/hooks.py\", line 357, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/retryhandler.py\", line 183, in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/retryhandler.py\", line 250, in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/retryhandler.py\", line 269, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/retryhandler.py\", line 316, in __call__\r\n    checker_response = checker(attempt_number, response,\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/retryhandler.py\", line 222, in __call__\r\n    return self._check_caught_exception(\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/retryhandler.py\", line 359, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/endpoint.py\", line 197, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/hooks.py\", line 357, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/moto/core/models.py\", line 369, in __call__\r\n    status, headers, body = response_callback(\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/moto/core/responses.py\", line 205, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/moto/core/responses.py\", line 315, in _dispatch\r\n    return self.call_action()\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/moto/core/responses.py\", line 405, in call_action\r\n    response = method()\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/moto/batch/responses.py\", line 53, in createcomputeenvironment\r\n    name, arn = self.batch_backend.create_compute_environment(\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/moto/batch/models.py\", line 835, in create_compute_environment\r\n    self._validate_compute_resources(compute_resources)\r\n  File \"/Users/adam/sano/playground/awsbatch_moto/venv/lib/python3.8/site-packages/moto/batch/models.py\", line 911, in _validate_compute_resources\r\n    \"could not find instanceRole {0}\".format(cr[\"instanceRole\"])\r\nKeyError: 'instanceRole'\r\n```\r\n\r\nThis is using Moto 2.2.4 Boto3 1.18.29 from pip in a virtual environment with code:\r\n\r\n```\r\nfrom moto import mock_batch, mock_iam\r\nimport boto3\r\n\r\nif __name__ == \"__main__\":\r\n    # requires docker on the system\r\n    with mock_batch(), mock_iam():\r\n        iam_client = boto3.client(\"iam\")\r\n\r\n        # create a service role\r\n        iam_role_arn = (\r\n            iam_client.create_role(\r\n                RoleName=\"AliceServiceRole\",\r\n                AssumeRolePolicyDocument=\"{}\",\r\n            )\r\n            .get(\"Role\")\r\n            .get(\"Arn\")\r\n        )\r\n\r\n        batch_client = boto3.client(\"batch\")\r\n        # create compute environment\r\n        batch_client.create_compute_environment(\r\n            computeEnvironmentName=\"DummyEnvironment\",\r\n            type=\"MANAGED\",\r\n            state=\"ENABLED\",\r\n            computeResources={\r\n                \"type\": \"FARGATE\",\r\n                \"maxvCpus\": 100,\r\n                \"subnets\": [\r\n                    \"string\",\r\n                ],\r\n                \"securityGroupIds\": [\r\n                    \"string\",\r\n                ],\r\n            },\r\n            serviceRole=iam_role_arn,\r\n        )\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4228/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4228/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4220", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4220/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4220/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4220/events", "html_url": "https://github.com/getmoto/moto/issues/4220", "id": 979564438, "node_id": "MDU6SXNzdWU5Nzk1NjQ0Mzg=", "number": 4220, "title": "Unable to include Access-Control-Expose-Header = \"ETag\" in CORS response", "user": {"login": "dcappellini", "id": 4132918, "node_id": "MDQ6VXNlcjQxMzI5MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/4132918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcappellini", "html_url": "https://github.com/dcappellini", "followers_url": "https://api.github.com/users/dcappellini/followers", "following_url": "https://api.github.com/users/dcappellini/following{/other_user}", "gists_url": "https://api.github.com/users/dcappellini/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcappellini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcappellini/subscriptions", "organizations_url": "https://api.github.com/users/dcappellini/orgs", "repos_url": "https://api.github.com/users/dcappellini/repos", "events_url": "https://api.github.com/users/dcappellini/events{/privacy}", "received_events_url": "https://api.github.com/users/dcappellini/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-08-25T19:45:54Z", "updated_at": "2021-10-30T10:02:31Z", "closed_at": "2021-10-30T10:02:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone! I'm using Moto to mock an S3 bucket from an end to end test for a web application. Our tests use something similar to Selenium to control the browser so we're interacting with the Moto standalone server via HTTP.\r\n\r\nMoto version: 2.2.2 (Moto standalone server)\r\nHow I installed it:\r\n1. sudo apt install python-pip\r\n2. sudo -H pip install \"moto[s3]\"\r\n3. pip install flask\r\n4. pip install flask_cors\r\n\r\nEnvironment: pipenv with Python 3.8.0 running on an Ubuntu 18.04.5 LTS machine.\r\n\r\nThe issue is that when uploading a file to the bucket, Moto fails because it can't find the ETag. I've found that the browser refuses to set the ETag on the request because it hasn't received an ExposeHeader on the CORS response.\r\n\r\nHere are the steps I'm following:\r\n1. Starting Moto with `moto_server s3 -s -H 0.0.0.0`\r\n2. Creating the bucket with Amazon's S3 SDK in PHP:\r\n \r\n![Screenshot at 2021-08-25 16-08-50](https://user-images.githubusercontent.com/4132918/130850714-ac556115-052c-433b-bcaf-5bec0103946e.png)\r\n\r\n3. Adding the CORS configuration to the bucket. For some reason Amazon's SDK is stripping the \"ExposedHeader\" from the PutBucketCors (I added some prints to check and it's not reaching Moto) so for now I'm sending it via CURL. Here's the request and how Moto shows the rule in /moto-api:\r\n\r\n![postman_curl](https://user-images.githubusercontent.com/4132918/130851307-2eef6353-9081-4abf-af98-1430af525330.png)\r\n![moto_api](https://user-images.githubusercontent.com/4132918/130851323-56eac57d-e24d-4866-97df-0c210d5ed074.png)\r\n\r\n4. Uploading the file from the web application that we want to test. It uses EvaporateJS to communicate with Amazon, so I changed it to point to Moto. Here's the preflight request:\r\n\r\n![preflight](https://user-images.githubusercontent.com/4132918/130851722-959607ab-eb83-4b9f-861b-df63cf214c15.png)\r\n\r\nYou can see that there's no Expose-Header on the response, so on the next request the browser refuses to set the ETag. This causes Moto to fail with the following stack:\r\n\r\n```10.0.6.1 - - [25/Aug/2021 19:18:30] \"POST /mytestbucket/temp/8a6dc338bf4d974cbc68c204f1e42f16586b9fd454dc2a57995e920fe989ff30?uploadId=LwLkW061R0WHC0Jsgx1xhZWsfXeCpfvY5kycVGgUnhKUD5UtIaqsB5n2JQ HTTP/1.1\" 500 -\r\nError on request:\r\nTraceback (most recent call last):\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/werkzeug/serving.py\", line 319, in run_wsgi\r\n    execute(self.server.app)\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/werkzeug/serving.py\", line 308, in execute\r\n    application_iter = app(environ, start_response)\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/moto/server.py\", line 181, in __call__\r\n    return backend_app(environ, start_response)\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/flask/app.py\", line 2088, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/flask/app.py\", line 2073, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/flask_cors/extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/flask/app.py\", line 2070, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/flask/app.py\", line 1515, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/flask_cors/extension.py\", line 165, in wrapped_function\r\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/flask/app.py\", line 1513, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/flask/app.py\", line 1499, in dispatch_request\r\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/moto/core/utils.py\", line 148, in __call__\r\n    result = self.callback(request, request.url, {})\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/moto/s3/responses.py\", line 1005, in key_or_control_response\r\n    response = self._key_response(request, full_url, headers)\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/moto/s3/responses.py\", line 1176, in _key_response\r\n    return self._key_response_post(request, body, bucket_name, query, key_name)\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/moto/s3/responses.py\", line 1792, in _key_response_post\r\n    value, etag = multipart.complete(body)\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/moto/s3/models.py\", line 314, in complete\r\n    for pn, etag in body:\r\n  File \"/home/sb-3/.local/share/virtualenvs/moto-ol9WsJxn/lib/python3.8/site-packages/moto/s3/responses.py\", line 1766, in _complete_multipart_body\r\n    yield (pn, p.getElementsByTagName(\"ETag\")[0].firstChild.wholeText) \r\nAttributeError: 'NoneType' object has no attribute 'wholeText' \r\n```\r\n\r\nI've searched the existing issues but found nothing quite matching this. I can avoid the problem entirely if I just change the part of moto/server.py (line 222) that adds CORS with flask_cors from `CORS(backend_app)` to `CORS(backend_app, expose_headers=\"ETag\")` but I suspect that it isn't the right way to go.\r\n\r\nIt looks like the CORS rule I set isn't being applied when responding to the preflight request. I'm not sure if this is an actual bug, I don't have a ton of experience with HTTP and CORS so I might be missing something. Any help is greatly appreciated.\r\n\r\nThank you all in advance.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4220/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4220/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4218", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4218/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4218/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4218/events", "html_url": "https://github.com/getmoto/moto/issues/4218", "id": 979409184, "node_id": "MDU6SXNzdWU5Nzk0MDkxODQ=", "number": 4218, "title": "Waiting for VPC Peering Connection to become available", "user": {"login": "kbalk", "id": 7536198, "node_id": "MDQ6VXNlcjc1MzYxOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7536198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbalk", "html_url": "https://github.com/kbalk", "followers_url": "https://api.github.com/users/kbalk/followers", "following_url": "https://api.github.com/users/kbalk/following{/other_user}", "gists_url": "https://api.github.com/users/kbalk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbalk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbalk/subscriptions", "organizations_url": "https://api.github.com/users/kbalk/orgs", "repos_url": "https://api.github.com/users/kbalk/repos", "events_url": "https://api.github.com/users/kbalk/events{/privacy}", "received_events_url": "https://api.github.com/users/kbalk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2021-08-25T16:30:30Z", "updated_at": "2021-08-27T14:46:35Z", "closed_at": "2021-08-27T13:56:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I know that you're working on various VPC issues, so you may be aware of this problem.  I wanted to cover my bases and report it in case you're not.  \r\n\r\nI'm using release 2.2.4 of moto.\r\n\r\nI have two tests (written in Terraform) that I run against a Terraform module that sets up a peered connection.  It doesn't matter which order I run the tests, the second one fails with the error below.  I'm struggling to come up with self-contained tests to demonstrate the problem, but if the error message can't help point you at the problem, I'll work on the tests some more.\r\n\r\n```\r\nmodule.vpc_pcx_requester.aws_route_table_association.public[0]: Creation complete after 0s [id=rtbassoc-60df5245]\r\n \r\nError: Error waiting for VPC Peering Connection to become available: \r\nError waiting for VPC Peering Connection (pcx-e88f13a3) to become available\r\nunexpected state 'deleted', wanted target 'pending-acceptance, active'. last error: %!s(<nil>)\r\n\r\n  with module.generated_route_tables.aws_vpc_peering_connection.this,\r\n  on ../../main.tf line 15, in resource \"aws_vpc_peering_connection\" \"this\":\r\n  15: resource \"aws_vpc_peering_connection\" \"this\" { !\r\nmake: *** [pytest//home/kbalk/plus3it/tardigrade-ci/tests/terraform_pytest] Error 1\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4218/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4218/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4198", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4198/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4198/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4198/events", "html_url": "https://github.com/getmoto/moto/issues/4198", "id": 973937361, "node_id": "MDU6SXNzdWU5NzM5MzczNjE=", "number": 4198, "title": "Unverified SES email can produce invalid XML response from Moto", "user": {"login": "amacf", "id": 5497482, "node_id": "MDQ6VXNlcjU0OTc0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/5497482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amacf", "html_url": "https://github.com/amacf", "followers_url": "https://api.github.com/users/amacf/followers", "following_url": "https://api.github.com/users/amacf/following{/other_user}", "gists_url": "https://api.github.com/users/amacf/gists{/gist_id}", "starred_url": "https://api.github.com/users/amacf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amacf/subscriptions", "organizations_url": "https://api.github.com/users/amacf/orgs", "repos_url": "https://api.github.com/users/amacf/repos", "events_url": "https://api.github.com/users/amacf/events{/privacy}", "received_events_url": "https://api.github.com/users/amacf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-08-18T18:18:12Z", "updated_at": "2021-09-23T18:56:22Z", "closed_at": "2021-09-23T18:56:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Moto Version: 2.0.7 installed into a virtualenv via pipenv\r\n\r\n## Problem\r\n\r\nThis problem came up when I was attempting to unit test the behavior of my application when it attempts to send an email via SES from an unverified address (should produce a MessageRejected exception). However, I did not get a MessageRejected exception as expected, because it turns out Moto is producing invalid XML for the MessageRejected exception in this case. Which instead triggers a botocore.parsers.ResponseParserError exception:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/root/.local/share/virtualenvs/testmoto-zOW-GSrY/lib/python3.7/site-packages/botocore/client.py\", line 386, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/root/.local/share/virtualenvs/testmoto-zOW-GSrY/lib/python3.7/site-packages/botocore/client.py\", line 692, in _make_api_call\r\n    operation_model, request_dict, request_context)\r\n  File \"/root/.local/share/virtualenvs/testmoto-zOW-GSrY/lib/python3.7/site-packages/botocore/client.py\", line 711, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/root/.local/share/virtualenvs/testmoto-zOW-GSrY/lib/python3.7/site-packages/botocore/endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/root/.local/share/virtualenvs/testmoto-zOW-GSrY/lib/python3.7/site-packages/botocore/endpoint.py\", line 135, in _send_request\r\n    request, operation_model, context)\r\n  File \"/root/.local/share/virtualenvs/testmoto-zOW-GSrY/lib/python3.7/site-packages/botocore/endpoint.py\", line 167, in _get_response\r\n    request, operation_model)\r\n  File \"/root/.local/share/virtualenvs/testmoto-zOW-GSrY/lib/python3.7/site-packages/botocore/endpoint.py\", line 218, in _do_get_response\r\n    response_dict, operation_model.output_shape)\r\n  File \"/root/.local/share/virtualenvs/testmoto-zOW-GSrY/lib/python3.7/site-packages/botocore/parsers.py\", line 243, in parse\r\n    parsed = self._do_error_parse(response, shape)\r\n  File \"/root/.local/share/virtualenvs/testmoto-zOW-GSrY/lib/python3.7/site-packages/botocore/parsers.py\", line 505, in _do_error_parse\r\n    root = self._parse_xml_string_to_dom(xml_contents)\r\n  File \"/root/.local/share/virtualenvs/testmoto-zOW-GSrY/lib/python3.7/site-packages/botocore/parsers.py\", line 457, in _parse_xml_string_to_dom\r\n    (e, xml_string))\r\nbotocore.parsers.ResponseParserError: Unable to parse response (not well-formed (invalid token): line 6, column 62), invalid XML received. Further retries may succeed:\r\nb'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n  <ErrorResponse>\\n    <Errors>\\n      <Error>\\n        <Code>MessageRejected</Code>\\n        <Message>Email address not verified John Smith <foobar@example.com></Message>\\n        \\n      </Error>\\n    </Errors>\\n  <RequestID>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</RequestID>\\n</ErrorResponse>'\r\n```\r\n\r\nLooking at the moto code, it appears to me the problem is that the email given (specifically, the brackets in the address)  `John Smith <foobar@example.com>` is not properly escaped for XML. For example, one possible fix might be to XML escape here, instead of just putting it blindly into the message:\r\n\r\nhttps://github.com/spulec/moto/blob/master/moto/ses/models.py#L161\r\n```\r\nclass SESBackend(BaseBackend):\r\n    ...\r\n    def send_email(self, source, subject, body, destinations, region):\r\n        ...\r\n        if not self._is_verified_address(source):\r\n            self.rejected_messages_count += 1\r\n            raise MessageRejectedError(\"Email address not verified %s\" % source) # XML-escape source here\r\n```\r\n\r\nThe implication of this is that I am unable to properly unit test the path of my code that handles a MessageRejected error for unverified source address.\r\n\r\n# Recreating\r\n\r\nHere's a sample of calling boto3.client(\"ses\").send_email which would trigger the error in Moto if \"example.com\" is not a verified address (eg. if I have not called something like `boto3.client(\"ses\").verify_domain_identity(\"example.com\")`):\r\n```python3\r\nboto3.client(\"ses\").send_email(\r\n    Source=f\"John Smith <foobar@example.com>\",   # << Unverified source address\r\n    Destination={\r\n        'ToAddresses': [\"blah@example.com\"],\r\n        'CcAddresses': [],\r\n        'BccAddresses': []\r\n    }, Message={\r\n        'Subject': {'Data': \"Hello!\"},\r\n        'Body': {'Html': {'Data': \"<html>Hi</html>\"}}\r\n    }, SourceArn=source_arn,\r\n    ReplyToAddresses=[]\r\n)\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4198/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4198/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4155", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4155/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4155/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4155/events", "html_url": "https://github.com/getmoto/moto/issues/4155", "id": 964251261, "node_id": "MDU6SXNzdWU5NjQyNTEyNjE=", "number": 4155, "title": "ECRBackend delete_repository ignoring force argument", "user": {"login": "victor-mariano-leite", "id": 23106425, "node_id": "MDQ6VXNlcjIzMTA2NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/23106425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/victor-mariano-leite", "html_url": "https://github.com/victor-mariano-leite", "followers_url": "https://api.github.com/users/victor-mariano-leite/followers", "following_url": "https://api.github.com/users/victor-mariano-leite/following{/other_user}", "gists_url": "https://api.github.com/users/victor-mariano-leite/gists{/gist_id}", "starred_url": "https://api.github.com/users/victor-mariano-leite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/victor-mariano-leite/subscriptions", "organizations_url": "https://api.github.com/users/victor-mariano-leite/orgs", "repos_url": "https://api.github.com/users/victor-mariano-leite/repos", "events_url": "https://api.github.com/users/victor-mariano-leite/events{/privacy}", "received_events_url": "https://api.github.com/users/victor-mariano-leite/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "gruebel", "id": 33207684, "node_id": "MDQ6VXNlcjMzMjA3Njg0", "avatar_url": "https://avatars.githubusercontent.com/u/33207684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gruebel", "html_url": "https://github.com/gruebel", "followers_url": "https://api.github.com/users/gruebel/followers", "following_url": "https://api.github.com/users/gruebel/following{/other_user}", "gists_url": "https://api.github.com/users/gruebel/gists{/gist_id}", "starred_url": "https://api.github.com/users/gruebel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gruebel/subscriptions", "organizations_url": "https://api.github.com/users/gruebel/orgs", "repos_url": "https://api.github.com/users/gruebel/repos", "events_url": "https://api.github.com/users/gruebel/events{/privacy}", "received_events_url": "https://api.github.com/users/gruebel/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gruebel", "id": 33207684, "node_id": "MDQ6VXNlcjMzMjA3Njg0", "avatar_url": "https://avatars.githubusercontent.com/u/33207684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gruebel", "html_url": "https://github.com/gruebel", "followers_url": "https://api.github.com/users/gruebel/followers", "following_url": "https://api.github.com/users/gruebel/following{/other_user}", "gists_url": "https://api.github.com/users/gruebel/gists{/gist_id}", "starred_url": "https://api.github.com/users/gruebel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gruebel/subscriptions", "organizations_url": "https://api.github.com/users/gruebel/orgs", "repos_url": "https://api.github.com/users/gruebel/repos", "events_url": "https://api.github.com/users/gruebel/events{/privacy}", "received_events_url": "https://api.github.com/users/gruebel/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2021-08-09T18:21:29Z", "updated_at": "2021-08-12T05:08:28Z", "closed_at": "2021-08-12T05:08:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Bug Description\r\n\r\nRecently in issue #4128 has been made a improvement to the delete_repository method in the ECRBackend class (moto==2.2.1 >=), but when we try to delete a repository with images inside, the `force` execution flow has not been implemented, which has broken our test/CI pipelines this week raising:\r\n\r\n```\r\nbotocore.errorfactory.RepositoryNotEmptyException: An error occurred (RepositoryNotEmptyException) when calling the DeleteRepository operation: The repository with name 'abc-job-dev' in registry with id '123456789012' cannot be deleted because it still contains images\r\n```\r\n\r\nWhen we run this mocked code:\r\n\r\n```\r\necr_client = boto3.client(\"ecr\")\r\necr_client.delete_repository(\r\n   repositoryName=job.image,\r\n   force=True,  # remove all repository images\r\n)\r\n```\r\n\r\nBasically, the temporary solution has been to hardcode moto to 2.2.0.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4155/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4155/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4151", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4151/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4151/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4151/events", "html_url": "https://github.com/getmoto/moto/issues/4151", "id": 963060221, "node_id": "MDU6SXNzdWU5NjMwNjAyMjE=", "number": 4151, "title": "CloudWatchLog's put_subscription_filter() only accepts lambda destination ARNs", "user": {"login": "kbalk", "id": 7536198, "node_id": "MDQ6VXNlcjc1MzYxOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7536198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbalk", "html_url": "https://github.com/kbalk", "followers_url": "https://api.github.com/users/kbalk/followers", "following_url": "https://api.github.com/users/kbalk/following{/other_user}", "gists_url": "https://api.github.com/users/kbalk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbalk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbalk/subscriptions", "organizations_url": "https://api.github.com/users/kbalk/orgs", "repos_url": "https://api.github.com/users/kbalk/repos", "events_url": "https://api.github.com/users/kbalk/events{/privacy}", "received_events_url": "https://api.github.com/users/kbalk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2021-08-06T21:36:12Z", "updated_at": "2021-09-16T02:16:17Z", "closed_at": "2021-09-16T02:16:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The Log service API call [`put_subscription_filter`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/logs.html#CloudWatchLogs.Client.put_subscription_filter) accepts a destination_arn that can be a kinesis stream, a logical destination (?), a kinesis firehose or a lambda.  The moto code assumes the destination ARN is a lambda ... period.\r\n\r\nI have a destination ARN that's a kinesis firehose.  moto doesn't have a firehose backend, although localstack does.  moto does have a kinesis stream backend.\r\n\r\nI might be willing to work on the code for this, but I could use some guidance.  If we're running localstack, is it possible to somehow use that as a backend for firehose?  \r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4151/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4151/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4126", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4126/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4126/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4126/events", "html_url": "https://github.com/getmoto/moto/issues/4126", "id": 958967898, "node_id": "MDU6SXNzdWU5NTg5Njc4OTg=", "number": 4126, "title": "ec2_client.describe_instances wildcard filters match any tag", "user": {"login": "tekumara", "id": 125105, "node_id": "MDQ6VXNlcjEyNTEwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/125105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tekumara", "html_url": "https://github.com/tekumara", "followers_url": "https://api.github.com/users/tekumara/followers", "following_url": "https://api.github.com/users/tekumara/following{/other_user}", "gists_url": "https://api.github.com/users/tekumara/gists{/gist_id}", "starred_url": "https://api.github.com/users/tekumara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tekumara/subscriptions", "organizations_url": "https://api.github.com/users/tekumara/orgs", "repos_url": "https://api.github.com/users/tekumara/repos", "events_url": "https://api.github.com/users/tekumara/events{/privacy}", "received_events_url": "https://api.github.com/users/tekumara/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-08-03T10:25:27Z", "updated_at": "2021-08-18T05:02:20Z", "closed_at": "2021-08-18T05:02:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When ec2_client.describe_instances filters by wildcard, it matches any tag. It should only match the specified tag.\r\n\r\nAn example failing test:\r\n\r\n```\r\n@mock_ec2\r\ndef test_filter_wildcard_in_specified_tag_only():\r\n    ec2_client = boto3.client(\"ec2\", region_name=\"us-west-1\")\r\n\r\n    tags_name = [{'Key': 'Name', 'Value': 'alice in wonderland'}]\r\n    ec2_client.run_instances(MaxCount=1, MinCount=1, TagSpecifications=[{\"ResourceType\": \"instance\", \"Tags\": tags_name}])\r\n\r\n    tags_owner = [{'Key': 'Owner', 'Value': 'alice in wonderland'}]\r\n    ec2_client.run_instances(MaxCount=1, MinCount=1, TagSpecifications=[{\"ResourceType\": \"instance\", \"Tags\": tags_owner}])\r\n\r\n    # should only match the Name tag\r\n    response = ec2_client.describe_instances(Filters=[{\"Name\": \"tag:Name\", \"Values\": [\"*alice*\"]}])\r\n    instances = [i for r in response[\"Reservations\"] for i in r[\"Instances\"]]\r\n    instances.should.have.length_of(1)\r\n```\r\n\r\n2 instances will be returned instead of 1.\r\n\r\nmoto 2.2.1", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4126/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4123", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4123/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4123/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4123/events", "html_url": "https://github.com/getmoto/moto/issues/4123", "id": 958640544, "node_id": "MDU6SXNzdWU5NTg2NDA1NDQ=", "number": 4123, "title": "Can't create an elbv2 listener rule with ForwardConfig if forward is not the first action ", "user": {"login": "sblask", "id": 681955, "node_id": "MDQ6VXNlcjY4MTk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/681955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sblask", "html_url": "https://github.com/sblask", "followers_url": "https://api.github.com/users/sblask/followers", "following_url": "https://api.github.com/users/sblask/following{/other_user}", "gists_url": "https://api.github.com/users/sblask/gists{/gist_id}", "starred_url": "https://api.github.com/users/sblask/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sblask/subscriptions", "organizations_url": "https://api.github.com/users/sblask/orgs", "repos_url": "https://api.github.com/users/sblask/repos", "events_url": "https://api.github.com/users/sblask/events{/privacy}", "received_events_url": "https://api.github.com/users/sblask/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-08-03T01:50:43Z", "updated_at": "2021-10-11T21:12:38Z", "closed_at": "2021-10-11T21:12:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've got tests which test this bit of code:\r\n\r\n```\r\n    elb_client.create_rule(\r\n        ListenerArn=os.environ[\"HTTPS_LISTENER_ARN\"],\r\n        Conditions=[\r\n            {\r\n                \"Field\": \"path-pattern\",\r\n                \"PathPatternConfig\": {\r\n                    \"Values\": [\r\n                        f\"/{instance_name}*\",\r\n                    ]\r\n                },\r\n            },\r\n        ],\r\n        Priority=priority,\r\n        Actions=[\r\n            {\r\n                \"Type\": \"authenticate-cognito\",\r\n                \"Order\": 1,\r\n                \"AuthenticateCognitoConfig\": {\r\n                    \"UserPoolArn\": os.environ[\"POOL_ARN\"],\r\n                    \"UserPoolClientId\": os.environ[\"CLIENT_ID\"],\r\n                    \"UserPoolDomain\": os.environ[\"POOL_DOMAIN\"],\r\n                    \"SessionCookieName\": \"AWSELBAuthSessionCookie\",\r\n                    \"Scope\": \"openid\",\r\n                    \"SessionTimeout\": 604800,\r\n                    \"OnUnauthenticatedRequest\": \"authenticate\",\r\n                },\r\n            },\r\n            {\r\n                \"Type\": action_type,\r\n                \"Order\": 2,\r\n                \"ForwardConfig\": {\r\n                    \"TargetGroups\": [\r\n                        {\"TargetGroupArn\": target_group, \"Weight\": 1},\r\n                    ],\r\n                    \"TargetGroupStickinessConfig\": {\r\n                        \"Enabled\": False,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    )\r\n    return rule\r\n```\r\n\r\nand they fail with:\r\n\r\n```\r\n======================================================================\r\nERROR: test_handler_running (test_handler.TestHandler)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/sebastian/Clones/jupyterhub/.venv/lib/python3.9/site-packages/moto/core/models.py\", line 111, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/Users/sebastian/Clones/jupyterhub/.venv/lib/python3.9/site-packages/moto/core/models.py\", line 111, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/Users/sebastian/Clones/jupyterhub/.venv/lib/python3.9/site-packages/mock/mock.py\", line 1346, in patched\r\n    return func(*newargs, **newkeywargs)\r\n  File \"/Users/sebastian/Clones/jupyterhub/test_handler.py\", line 232, in test_handler_running\r\n    handler.handler(RUNNING_EVENT, {\"test\": True})\r\n  File \"/Users/sebastian/Clones/jupyterhub/handler.py\", line 214, in handler\r\n    create_listener_rule(elb_client, target_group, instance_name)\r\n  File \"/Users/sebastian/Clones/jupyterhub/handler.py\", line 80, in create_listener_rule\r\n    rule = elb_client.create_rule(\r\n  File \"/Users/sebastian/Clones/jupyterhub/.venv/lib/python3.9/site-packages/botocore/client.py\", line 386, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/sebastian/Clones/jupyterhub/.venv/lib/python3.9/site-packages/botocore/client.py\", line 705, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (ValidationError) when calling the CreateRule operation: 1 validation error detected: Value 'forward' at 'actions.2.member.type' failed to satisfy constraint: Member must satisfy enum value set: [forward, redirect, fixed-response]\r\n```\r\n\r\nI have traced the origin to `_validate_actions` in `moto/elbv2/models.py`, the code I have should be covered by:\r\n\r\n```\r\n                action_type == \"forward\"\r\n                and \"forward_config._target_groups.member.{}._target_group_arn\".format(\r\n                    index\r\n                )\r\n                in action.data.keys()\r\n                or \"forward_config\" in action.data.keys()\r\n```\r\n\r\nBut because index is 2 and not 1 (data looks like this: `{'type': 'forward', 'order': '2', 'forward_config._target_groups.member.1._target_group_arn': 'arn:aws:elasticloadbalancing:ap-southeast-2:1:targetgroup/test-instance/50dc6c495c0c9188', 'forward_config._target_groups.member.1._weight': '1', 'forward_config._target_group_stickiness_config._enabled': 'false'}`) the lookup fails giving the above validation error.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4123/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4100", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4100/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4100/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4100/events", "html_url": "https://github.com/getmoto/moto/issues/4100", "id": 955007257, "node_id": "MDU6SXNzdWU5NTUwMDcyNTc=", "number": 4100, "title": "s3 complete_multipart_upload errors out", "user": {"login": "itajaja", "id": 697647, "node_id": "MDQ6VXNlcjY5NzY0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/697647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itajaja", "html_url": "https://github.com/itajaja", "followers_url": "https://api.github.com/users/itajaja/followers", "following_url": "https://api.github.com/users/itajaja/following{/other_user}", "gists_url": "https://api.github.com/users/itajaja/gists{/gist_id}", "starred_url": "https://api.github.com/users/itajaja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itajaja/subscriptions", "organizations_url": "https://api.github.com/users/itajaja/orgs", "repos_url": "https://api.github.com/users/itajaja/repos", "events_url": "https://api.github.com/users/itajaja/events{/privacy}", "received_events_url": "https://api.github.com/users/itajaja/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-07-28T15:57:39Z", "updated_at": "2021-07-30T06:10:07Z", "closed_at": "2021-07-29T19:19:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "works on 2.1.0, fails on 2.2.0. installed using poetry, but I don't think makes any difference. I will try to make a minimum reproducible example\r\n\r\nhere is the full stack trace from pytest\r\n\r\n```\r\nself.s3_client.complete_multipart_upload(\r\n.venv/lib/python3.9/site-packages/botocore/client.py:386: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n.venv/lib/python3.9/site-packages/botocore/client.py:691: in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n.venv/lib/python3.9/site-packages/botocore/client.py:711: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n.venv/lib/python3.9/site-packages/botocore/endpoint.py:102: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n.venv/lib/python3.9/site-packages/botocore/endpoint.py:136: in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\n.venv/lib/python3.9/site-packages/botocore/endpoint.py:253: in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n.venv/lib/python3.9/site-packages/botocore/hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n.venv/lib/python3.9/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n.venv/lib/python3.9/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n.venv/lib/python3.9/site-packages/botocore/retryhandler.py:183: in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n.venv/lib/python3.9/site-packages/botocore/retryhandler.py:250: in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\n.venv/lib/python3.9/site-packages/botocore/retryhandler.py:269: in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n.venv/lib/python3.9/site-packages/botocore/retryhandler.py:316: in __call__\r\n    checker_response = checker(attempt_number, response,\r\n.venv/lib/python3.9/site-packages/botocore/retryhandler.py:222: in __call__\r\n    return self._check_caught_exception(\r\n.venv/lib/python3.9/site-packages/botocore/retryhandler.py:359: in _check_caught_exception\r\n    raise caught_exception\r\n.venv/lib/python3.9/site-packages/botocore/endpoint.py:197: in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n.venv/lib/python3.9/site-packages/botocore/hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n.venv/lib/python3.9/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n.venv/lib/python3.9/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n.venv/lib/python3.9/site-packages/moto/core/models.py:368: in __call__\r\n    status, headers, body = response_callback(\r\n.venv/lib/python3.9/site-packages/moto/s3/responses.py:254: in ambiguous_response\r\n    return self.key_or_control_response(request, full_url, headers)\r\n.venv/lib/python3.9/site-packages/moto/s3/responses.py:1005: in key_or_control_response\r\n    response = self._key_response(request, full_url, headers)\r\n.venv/lib/python3.9/site-packages/moto/s3/responses.py:1176: in _key_response\r\n    return self._key_response_post(request, body, bucket_name, query, key_name)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <moto.s3.responses.ResponseObject object at 0x11ad81250>\r\nrequest = <AWSPreparedRequest stream_output=False, method=POST, url=https://bucket-test.s3.amazonaws.com/f1?uploadId=id1, header...4ab9a3ac8d3a2cfa031fb0b90828191992ab18c00842afabcd0', 'Content-Length': '183', 'host': 'bucket-test.s3.amazonaws.com'}>\r\nbody = <generator object ResponseObject._complete_multipart_body at 0x11c1b97b0>, bucket_name = 'bucket-test'\r\nquery = {'uploadId': ['id1']}, key_name = 'f1'\r\n\r\n    def _key_response_post(self, request, body, bucket_name, query, key_name):\r\n        self._set_action(\"KEY\", \"POST\", query)\r\n        self._authenticate_and_authorize_s3_action()\r\n\r\n        if body == b\"\" and \"uploads\" in query:\r\n            metadata = metadata_from_headers(request.headers)\r\n            multipart = FakeMultipart(key_name, metadata)\r\n            multipart.storage = request.headers.get(\"x-amz-storage-class\", \"STANDARD\")\r\n\r\n            bucket = self.backend.get_bucket(bucket_name)\r\n            bucket.multiparts[multipart.id] = multipart\r\n\r\n            template = self.response_template(S3_MULTIPART_INITIATE_RESPONSE)\r\n            response = template.render(\r\n                bucket_name=bucket_name, key_name=key_name, upload_id=multipart.id\r\n            )\r\n            return 200, {}, response\r\n\r\n        if query.get(\"uploadId\"):\r\n            body = self._complete_multipart_body(body)\r\n            multipart_id = query[\"uploadId\"][0]\r\n\r\n            bucket = self.backend.get_bucket(bucket_name)\r\n            multipart = bucket.multiparts[multipart_id]\r\n            value, etag = multipart.complete(body)\r\n            if value is None:\r\n                return 400, {}, \"\"\r\n\r\n            del bucket.multiparts[multipart_id]\r\n\r\n            key = self.backend.set_object(\r\n                bucket_name,\r\n                multipart.key_name,\r\n                value,\r\n>               storage=multipart.storage,\r\n                etag=etag,\r\n                multipart=multipart,\r\n            )\r\nE           AttributeError: 'FakeMultipart' object has no attribute 'storage'\r\n\r\n.venv/lib/python3.9/site-packages/moto/s3/responses.py:1802: AttributeError\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4100/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4100/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4099", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4099/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4099/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4099/events", "html_url": "https://github.com/getmoto/moto/issues/4099", "id": 954900087, "node_id": "MDU6SXNzdWU5NTQ5MDAwODc=", "number": 4099, "title": "URL Bases regular expressions not escaping dots", "user": {"login": "Cox65", "id": 39118029, "node_id": "MDQ6VXNlcjM5MTE4MDI5", "avatar_url": "https://avatars.githubusercontent.com/u/39118029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cox65", "html_url": "https://github.com/Cox65", "followers_url": "https://api.github.com/users/Cox65/followers", "following_url": "https://api.github.com/users/Cox65/following{/other_user}", "gists_url": "https://api.github.com/users/Cox65/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cox65/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cox65/subscriptions", "organizations_url": "https://api.github.com/users/Cox65/orgs", "repos_url": "https://api.github.com/users/Cox65/repos", "events_url": "https://api.github.com/users/Cox65/events{/privacy}", "received_events_url": "https://api.github.com/users/Cox65/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-07-28T14:10:50Z", "updated_at": "2021-08-28T12:42:45Z", "closed_at": "2021-08-28T12:42:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "All url bases patterns defined per services don't escape dots which brings to wrong backend identification when moto tries to match urls against patterns.\r\nFor example, if you mock both S3 and IoT services and you try to create a bucket starting with \"iot\" it will fail as it will match with the IoT Service url base.\r\n\r\nHere is how to reproduce the issue.\r\n``` python\r\nimport boto3\r\nfrom moto import mock_iot, mock_s3\r\n\r\n\r\nclass TestMockS3:\r\n    @mock_iot\r\n    @mock_s3\r\n    def test_s3_mock(self):\r\n        s3_client = boto3.client(\"s3\", \"eu-west-1\")\r\n        s3_client.create_bucket(\r\n            ACL=\"private\",\r\n            Bucket=\"iot-bucket\",\r\n            CreateBucketConfiguration={\"LocationConstraint\": \"eu-west-1\"},\r\n        )\r\n```\r\nFollowing error is raised:\r\n**botocore.exceptions.ClientError: An error occurred (404) when calling the CreateBucket operation: Not Found**\r\n\r\n\r\nIn urls.py of IoT service:\r\n`url_bases = [\"https?://iot.(.+).amazonaws.com\"]` matches with https://iot-bucket.s3.eu-west-1.amazonaws.com\r\nIt should be:\r\n`url_bases = [\"https?://iot\\.(.+)\\.amazonaws\\.com\"]`\r\n\r\nThe same regexp mistake in url_bases is applicable to all other services.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4099/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4099/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4077", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4077/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4077/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4077/events", "html_url": "https://github.com/getmoto/moto/issues/4077", "id": 949673578, "node_id": "MDU6SXNzdWU5NDk2NzM1Nzg=", "number": 4077, "title": "Deleting whitespace-only S3 objects keys fails", "user": {"login": "Dunedan", "id": 1735355, "node_id": "MDQ6VXNlcjE3MzUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1735355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dunedan", "html_url": "https://github.com/Dunedan", "followers_url": "https://api.github.com/users/Dunedan/followers", "following_url": "https://api.github.com/users/Dunedan/following{/other_user}", "gists_url": "https://api.github.com/users/Dunedan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dunedan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dunedan/subscriptions", "organizations_url": "https://api.github.com/users/Dunedan/orgs", "repos_url": "https://api.github.com/users/Dunedan/repos", "events_url": "https://api.github.com/users/Dunedan/events{/privacy}", "received_events_url": "https://api.github.com/users/Dunedan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-07-21T12:50:27Z", "updated_at": "2021-10-09T10:12:26Z", "closed_at": "2021-10-09T10:12:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "S3 allows most unicode characters as parts of object keys. This includes whitespace characters. S3 also allows whitespace-only object keys. However when using whitespace-only object keys with `moto`, `moto` fails when trying to delete such a key. Here is a minimal example to reproduce this behavior:\r\n\r\n```python\r\nimport boto3\r\nfrom moto import mock_s3\r\n \r\nwith mock_s3():\r\n    resource = boto3.resource(\"s3\")\r\n    bucket = resource.create_bucket(\r\n        Bucket=\"test\",\r\n        CreateBucketConfiguration={\"LocationConstraint\": \"eu-central-1\"},\r\n    )\r\n    key_name = \" \"\r\n    bucket.put_object(Key=key_name, Body=b\"\")\r\n    bucket.delete_objects(Delete={\"Objects\": [{\"Key\": key_name}]})\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/some/dir/.config/JetBrains/PyCharmCE2021.1/scratches/scratch_1.py\", line 12, in <module>\r\n    bucket.delete_objects(Delete={\"Objects\": [{\"Key\": key_name}]})\r\n  File \"/some/dir/lib/python3.8/site-packages/boto3/resources/factory.py\", line 520, in do_action\r\n    response = action(self, *args, **kwargs)\r\n  File \"/some/dir/lib/python3.8/site-packages/boto3/resources/action.py\", line 83, in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/client.py\", line 386, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/client.py\", line 691, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/client.py\", line 711, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/endpoint.py\", line 136, in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/endpoint.py\", line 253, in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/retryhandler.py\", line 183, in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/retryhandler.py\", line 250, in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/retryhandler.py\", line 269, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/retryhandler.py\", line 316, in __call__\r\n    checker_response = checker(attempt_number, response,\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/retryhandler.py\", line 222, in __call__\r\n    return self._check_caught_exception(\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/retryhandler.py\", line 359, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/endpoint.py\", line 197, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/some/dir/lib/python3.8/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/some/dir/lib/python3.8/site-packages/moto/core/models.py\", line 368, in __call__\r\n    status, headers, body = response_callback(\r\n  File \"/some/dir/lib/python3.8/site-packages/moto/s3/responses.py\", line 265, in bucket_response\r\n    response = self._bucket_response(request, full_url, headers)\r\n  File \"/some/dir/lib/python3.8/site-packages/moto/s3/responses.py\", line 317, in _bucket_response\r\n    return self._bucket_response_post(request, body, bucket_name)\r\n  File \"/some/dir/lib/python3.8/site-packages/moto/s3/responses.py\", line 855, in _bucket_response_post\r\n    return self._bucket_response_delete_keys(request, body, bucket_name)\r\n  File \"/some/dir/lib/python3.8/site-packages/moto/s3/responses.py\", line 947, in _bucket_response_delete_keys\r\n    bucket_name, undo_clean_key_name(key_name), version_id=version_id\r\n  File \"/some/dir/lib/python3.8/site-packages/moto/s3/utils.py\", line 105, in undo_clean_key_name\r\n    return quote(key_name)\r\n  File \"/some/dir/lib/python3.8/urllib/parse.py\", line 839, in quote\r\n    return quote_from_bytes(string, safe)\r\n  File \"/some/dir/lib/python3.8/urllib/parse.py\", line 864, in quote_from_bytes\r\n    raise TypeError(\"quote_from_bytes() expected bytes\")\r\nTypeError: quote_from_bytes() expected bytes\r\n```\r\n\r\nThe problem is apparently [using `xmltodict.parse` with its default settings][1], which strips whitespaces, resulting in `None` as value if the value contained only whitespaces:\r\n\r\n```python\r\n>>> import xmltodict\r\n>>> xmltodict.parse(b'<Delete xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"><Object><Key> </Key></Object></Delete>')\r\nOrderedDict([('Delete', OrderedDict([('@xmlns', 'http://s3.amazonaws.com/doc/2006-03-01/'), ('Object', OrderedDict([('Key', None)]))]))])\r\n```\r\n\r\nA fix would be to disable stripping whitespaces when parsing XML and that also sounds reasonable to me, however I'm not sure if that'd break something else:\r\n\r\n```python\r\n>>> import xmltodict\r\n>>> xmltodict.parse(b'<Delete xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"><Object><Key> </Key></Object></Delete>', strip_whitespace=False)\r\nOrderedDict([('Delete', OrderedDict([('@xmlns', 'http://s3.amazonaws.com/doc/2006-03-01/'), ('Object', OrderedDict([('Key', ' ')]))]))])\r\n```\r\n\r\nAlso as `xmltodict.parse` is used in various parts of `moto` it might make sense to revisit the default of stripping whitespace everywhere where it's used, as even if the value not only contains whitespaces, stripping them might result in a different behavior than how the AWS APIs behave.\r\n\r\n[1]: https://github.com/spulec/moto/blob/d01bd59ea933e8b72d74e57af25086aed7bd74e9/moto/s3/responses.py#L929", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4077/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4077/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4069", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4069/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4069/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4069/events", "html_url": "https://github.com/getmoto/moto/issues/4069", "id": 942253414, "node_id": "MDU6SXNzdWU5NDIyNTM0MTQ=", "number": 4069, "title": "Cognito-idp - Duplicate and/or empty data in Attributes", "user": {"login": "alastairmccormack", "id": 5137112, "node_id": "MDQ6VXNlcjUxMzcxMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5137112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alastairmccormack", "html_url": "https://github.com/alastairmccormack", "followers_url": "https://api.github.com/users/alastairmccormack/followers", "following_url": "https://api.github.com/users/alastairmccormack/following{/other_user}", "gists_url": "https://api.github.com/users/alastairmccormack/gists{/gist_id}", "starred_url": "https://api.github.com/users/alastairmccormack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alastairmccormack/subscriptions", "organizations_url": "https://api.github.com/users/alastairmccormack/orgs", "repos_url": "https://api.github.com/users/alastairmccormack/repos", "events_url": "https://api.github.com/users/alastairmccormack/events{/privacy}", "received_events_url": "https://api.github.com/users/alastairmccormack/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-07-12T16:55:04Z", "updated_at": "2021-07-14T14:37:29Z", "closed_at": "2021-07-14T14:37:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Issue\r\nWhen using `cognito-idp.admin_create_user` and subsequent `get-user` requests, the Attributes response object contains fields that were not specified during `admin_create_user`. Some of the fields duplicate the supplied attributes but with different values.\r\n\r\nThis issue seems to be caused by https://github.com/spulec/moto/pull/4038.\r\n\r\nIt seems that the contributor has assumed a number of attributes and also provides empty values even if the attribute was given during the create.\r\n\r\nWhen creating a user pool, there are no default attributes so should not be assumed.\r\n\r\n# Steps to reproduce\r\n\r\n- Create User: \r\n```\r\n    result = conn.admin_create_user(\r\n        UserPoolId=user_pool_id,\r\n        Username=username,\r\n        UserAttributes=[\r\n            {\"Name\": \"thing\", \"Value\": 'test1'},\r\n            {\"Name\": \"family_name\", \"Value\": 'test2'}\r\n        ],\r\n    )\r\n```\r\n\r\n# Expected result\r\n\r\n```\r\npprint.pprint(result['User']['Attributes'])\r\n[{'Name': 'thing', 'Value': 'test1'},\r\n {'Name': 'family_name', 'Value': 'test2'},\r\n {'Name': 'sub', 'Value': 'd7872c09-f6ff-4fae-a1f8-b56b740c8084'},\r\n```\r\n\r\n# Actual result\r\n\r\n```\r\npprint.pprint(result['User']['Attributes'])\r\n[{'Name': 'thing', 'Value': 'test1'},\r\n {'Name': 'family_name', 'Value': 'test2'},\r\n {'Name': 'sub', 'Value': 'd7872c09-f6ff-4fae-a1f8-b56b740c8084'},\r\n {'Name': 'email_verified', 'Value': True},\r\n {'Name': 'name', 'Value': ''},\r\n {'Name': 'family_name', 'Value': ''}]\r\n```\r\n# Version\r\n2.0.11\r\n\r\n# Last working version\r\n2.0.10\r\n\r\n# Impact\r\nBreaking existing tests", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4069/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4069/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4059", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4059/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4059/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4059/events", "html_url": "https://github.com/getmoto/moto/issues/4059", "id": 937960743, "node_id": "MDU6SXNzdWU5Mzc5NjA3NDM=", "number": 4059, "title": "S3 IAM: Head object for objects without permissions raises wrong error.", "user": {"login": "thesketh", "id": 22580030, "node_id": "MDQ6VXNlcjIyNTgwMDMw", "avatar_url": "https://avatars.githubusercontent.com/u/22580030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thesketh", "html_url": "https://github.com/thesketh", "followers_url": "https://api.github.com/users/thesketh/followers", "following_url": "https://api.github.com/users/thesketh/following{/other_user}", "gists_url": "https://api.github.com/users/thesketh/gists{/gist_id}", "starred_url": "https://api.github.com/users/thesketh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thesketh/subscriptions", "organizations_url": "https://api.github.com/users/thesketh/orgs", "repos_url": "https://api.github.com/users/thesketh/repos", "events_url": "https://api.github.com/users/thesketh/events{/privacy}", "received_events_url": "https://api.github.com/users/thesketh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-07-06T14:30:40Z", "updated_at": "2021-08-29T13:49:05Z", "closed_at": "2021-08-29T13:49:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there! Thanks for writing this library, it's been exceptionally useful for testing error handling of boto code under simulated real life conditions! I've been writing some tests which mock IAM perms for S3 and one of my fake accounts with zero permissions receives a 404 every time it tries to HEAD an object in S3. Against the live AWS endpoint these are 403 errors, regardless of whether or not the file exists.\r\n\r\nHere's a minimum working example:\r\n\r\n```python\r\nimport boto3\r\nfrom botocore.exceptions import ClientError\r\nfrom moto import mock_s3, mock_iam\r\nfrom moto.core import set_initial_no_auth_action_count\r\n\r\n\r\ndef head_fake_object():\r\n    \"\"\"Head an S3 object we should have no access to.\"\"\"\r\n    resource = boto3.resource(\r\n        \"s3\",\r\n        aws_access_key_id=\"fake_key\",\r\n        aws_secret_access_key=\"fake_pass\"\r\n    )\r\n\r\n    obj = resource.Object(\"myfakebucket\", \"myfakekey\")\r\n    try:\r\n        obj.load()\r\n    except ClientError as err:\r\n        response = err.response\r\n        status_code = response[\"ResponseMetadata\"][\"HTTPStatusCode\"]\r\n        assert status_code == 403\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Using AWS.\r\n    print(\"Trying to head object with no perms (against live AWS).\")\r\n    head_fake_object()\r\n    print(\"Successfully returns 403.\")\r\n\r\n    # Using moto.\r\n    print(\"Trying to head object with no perms (against moto endpoint).\")\r\n    mock_s3().start()\r\n    mock_iam().start()\r\n    decorator = set_initial_no_auth_action_count(0)\r\n    decorator(head_fake_object)()\r\n    # Assertion error here.\r\n    print(\"Successfully returns 403.\")\r\n```\r\n\r\nThis code outputs the following:\r\n\r\n```\r\nTrying to head object with no perms (against live AWS).\r\nSuccessfully returns 403.\r\nTrying to head object with no perms (against moto endpoint).\r\nTraceback (most recent call last):\r\n  File \"example.py\", line 17, in head_fake_object\r\n    obj.load()\r\n  File \"/home/thesketh/.anaconda/envs/blobject/lib/python3.8/site-packages/boto3/resources/factory.py\", line 505, in do_action\r\n    response = action(self, *args, **kwargs)\r\n  File \"/home/thesketh/.anaconda/envs/blobject/lib/python3.8/site-packages/boto3/resources/action.py\", line 83, in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\n  File \"/home/thesketh/.anaconda/envs/blobject/lib/python3.8/site-packages/botocore/client.py\", line 386, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/thesketh/.anaconda/envs/blobject/lib/python3.8/site-packages/botocore/client.py\", line 705, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.errorfactory.NoSuchBucket: An error occurred (NoSuchBucket) when calling the HeadObject operation: The specified bucket does not exist\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"example.py\", line 35, in <module>\r\n    decorator(head_fake_object)()\r\n  File \"/home/thesketh/.anaconda/envs/blobject/lib/python3.8/site-packages/moto/core/responses.py\", line 165, in wrapper\r\n    result = function(*args, **kwargs)\r\n  File \"example.py\", line 21, in head_fake_object\r\n    assert status_code == 403\r\nAssertionError\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4059/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4059/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4053", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4053/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4053/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4053/events", "html_url": "https://github.com/getmoto/moto/issues/4053", "id": 935833773, "node_id": "MDU6SXNzdWU5MzU4MzM3NzM=", "number": 4053, "title": "Unable to create StepScaling policies with mock_applicationautoscaling", "user": {"login": "rkstrickland", "id": 75338502, "node_id": "MDQ6VXNlcjc1MzM4NTAy", "avatar_url": "https://avatars.githubusercontent.com/u/75338502?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkstrickland", "html_url": "https://github.com/rkstrickland", "followers_url": "https://api.github.com/users/rkstrickland/followers", "following_url": "https://api.github.com/users/rkstrickland/following{/other_user}", "gists_url": "https://api.github.com/users/rkstrickland/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkstrickland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkstrickland/subscriptions", "organizations_url": "https://api.github.com/users/rkstrickland/orgs", "repos_url": "https://api.github.com/users/rkstrickland/repos", "events_url": "https://api.github.com/users/rkstrickland/events{/privacy}", "received_events_url": "https://api.github.com/users/rkstrickland/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-07-02T14:42:40Z", "updated_at": "2021-07-07T16:58:00Z", "closed_at": "2021-07-07T16:58:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sample code to re-produce:\r\n\r\n```\r\nfrom moto import mock_applicationautoscaling\r\nimport boto3\r\n\r\ndef show_problem_with_step_scaling():\r\n    with mock_applicationautoscaling():\r\n        conn = boto3.client(\"application-autoscaling\", region_name =\"us-east-1\")\r\n        conn.put_scaling_policy(**{\r\n            \"ServiceNamespace\": \"ecs\",\r\n            \"ScalableDimension\": \"ecs:DesiredCount\",\r\n            \"ResourceId\": \"service/clustername/servicename\",\r\n            \"StepScalingPolicyConfiguration\": {\r\n                \"AdjustmentType\": \"ChangeInCapacity\",\r\n                \"MetricAggregationType\": \"Maximum\",\r\n                \"StepAdjustments\": [\r\n                    {\r\n                        \"ScalingAdjustment\": 85,\r\n                    }\r\n                ],\r\n                \"Cooldown\": 8605,\r\n                \"MinAdjustmentMagnitude\": 1\r\n            },\r\n            \"PolicyType\": \"StepScaling\",\r\n            \"PolicyName\": \"film_fund_green\"\r\n        })\r\n\r\nshow_problem_with_step_scaling()\r\n```\r\n\r\nOutput from code:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/rossstrickland/repos/isc/problem.py\", line 26, in <module>\r\n    show_problem_with_step_scaling()\r\n  File \"/Users/rossstrickland/repos/isc/problem.py\", line 7, in show_problem_with_step_scaling\r\n    conn.put_scaling_policy(**{\r\n  File \"/Users/rossstrickland/repos/isc/isc.venv/lib/python3.9/site-packages/botocore/client.py\", line 357, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/rossstrickland/repos/isc/isc.venv/lib/python3.9/site-packages/botocore/client.py\", line 676, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.errorfactory.ValidationException: An error occurred (ValidationException) when calling the PutScalingPolicy operation: Unknown policy type StepScaling specified.\r\n```\r\n\r\nUsing v2.0.9, but looks like issue is still present in newer code.\r\n\r\nI've tracked the issue down to this line of code:\r\n\r\nhttps://github.com/spulec/moto/blob/2.0.10/moto/applicationautoscaling/models.py#L314\r\n\r\n`\"policy_type\"` should be `policy_type`\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4053/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4053/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4033", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4033/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4033/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4033/events", "html_url": "https://github.com/getmoto/moto/issues/4033", "id": 929548178, "node_id": "MDU6SXNzdWU5Mjk1NDgxNzg=", "number": 4033, "title": "Bad Regex Capture for Header Grants (S3)", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-06-24T19:27:32Z", "updated_at": "2021-10-12T17:56:34Z", "closed_at": "2021-10-12T17:55:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "`moto==2.0.9` (Python mocks)\r\n`boto3==1.15.18`\r\n`botocore==1.18.18`\r\n\r\nThe regular expression [here](https://github.com/spulec/moto/blob/master/moto/s3/responses.py#L1530) requires that each Header Grant  key value be wrapped in strings (i.e., `id=\"5431\"`). However, the AWS API does not require the key to be wrapped in strings (i.e., `id=5431`).", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4033/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4033/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4028", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4028/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4028/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4028/events", "html_url": "https://github.com/getmoto/moto/issues/4028", "id": 927752042, "node_id": "MDU6SXNzdWU5Mjc3NTIwNDI=", "number": 4028, "title": "Account ID is 10 instead of 12 digits?", "user": {"login": "michael-robbins", "id": 1548818, "node_id": "MDQ6VXNlcjE1NDg4MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1548818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michael-robbins", "html_url": "https://github.com/michael-robbins", "followers_url": "https://api.github.com/users/michael-robbins/followers", "following_url": "https://api.github.com/users/michael-robbins/following{/other_user}", "gists_url": "https://api.github.com/users/michael-robbins/gists{/gist_id}", "starred_url": "https://api.github.com/users/michael-robbins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michael-robbins/subscriptions", "organizations_url": "https://api.github.com/users/michael-robbins/orgs", "repos_url": "https://api.github.com/users/michael-robbins/repos", "events_url": "https://api.github.com/users/michael-robbins/events{/privacy}", "received_events_url": "https://api.github.com/users/michael-robbins/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-06-23T00:47:42Z", "updated_at": "2021-06-23T17:03:11Z", "closed_at": "2021-06-23T17:03:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Staring at examples like this: https://github.com/spulec/moto/blob/master/moto/ssm/utils.py\r\n\r\nI can see that we're using 10 digit account IDs, but AWS use 12 digit account IDs... which makes any ARN regex matching not work.\r\n\r\nAm I missing something obvious here? (like we do this for a good reason that isn't mentioned in the doco/anywhere)?", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4028/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4027", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4027/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4027/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4027/events", "html_url": "https://github.com/getmoto/moto/issues/4027", "id": 927453701, "node_id": "MDU6SXNzdWU5Mjc0NTM3MDE=", "number": 4027, "title": "Application Auto Scaling custom-resource's resource_id are incorrectly failed in validation.", "user": {"login": "psheets", "id": 4058236, "node_id": "MDQ6VXNlcjQwNTgyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/4058236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psheets", "html_url": "https://github.com/psheets", "followers_url": "https://api.github.com/users/psheets/followers", "following_url": "https://api.github.com/users/psheets/following{/other_user}", "gists_url": "https://api.github.com/users/psheets/gists{/gist_id}", "starred_url": "https://api.github.com/users/psheets/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psheets/subscriptions", "organizations_url": "https://api.github.com/users/psheets/orgs", "repos_url": "https://api.github.com/users/psheets/repos", "events_url": "https://api.github.com/users/psheets/events{/privacy}", "received_events_url": "https://api.github.com/users/psheets/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-06-22T17:02:36Z", "updated_at": "2021-06-23T15:57:40Z", "closed_at": "2021-06-23T15:57:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The resource_id's associated with a custom-resource do not need to conform to a pattern and thus fail when _get_resource_type_from_resource_id() tries to parse the id and compare it to resource_type.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4027/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4027/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/4018", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/4018/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/4018/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/4018/events", "html_url": "https://github.com/getmoto/moto/issues/4018", "id": 924476455, "node_id": "MDU6SXNzdWU5MjQ0NzY0NTU=", "number": 4018, "title": "KeyError from multipart_upload.parts.all", "user": {"login": "cdraper-CS", "id": 29266449, "node_id": "MDQ6VXNlcjI5MjY2NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/29266449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdraper-CS", "html_url": "https://github.com/cdraper-CS", "followers_url": "https://api.github.com/users/cdraper-CS/followers", "following_url": "https://api.github.com/users/cdraper-CS/following{/other_user}", "gists_url": "https://api.github.com/users/cdraper-CS/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdraper-CS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdraper-CS/subscriptions", "organizations_url": "https://api.github.com/users/cdraper-CS/orgs", "repos_url": "https://api.github.com/users/cdraper-CS/repos", "events_url": "https://api.github.com/users/cdraper-CS/events{/privacy}", "received_events_url": "https://api.github.com/users/cdraper-CS/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-06-18T02:10:47Z", "updated_at": "2021-06-24T07:14:28Z", "closed_at": "2021-06-24T07:14:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to mock some code that creates a multipart upload, then aborts it without writing any parts, then lists the parts. The expected error is 'NoSuchUpload' but instead I am getting a KeyError as shown in stacktrace below. \u200b\r\n\r\nI'm using moto 2.0.9,  boto3 1.17.97 and botocore 1.20.97.\r\n\r\nReproduce:\r\n```\r\nfrom moto import mock_s3\r\nimport boto3\r\nimport os\r\ns3 = boto3.client('s3')\r\n\r\nbucket_name='my-bucket'\r\n\r\n@mock_s3\r\ndef test_mocked():\r\n    os.environ['AWS_SECRET_ACCESS_KEY']='some-value'\r\n    os.environ['AWS_ACCESS_KEY_ID']='some-value'\r\n    os.environ['AWS_SHARED_CREDENTIALS_FILE']='random-234-test'\r\n    os.environ['AWS_CONFIG_FILE']='random324test'\r\n    bucket = boto3.resource('s3').Bucket(bucket_name)\r\n    bucket.create()\r\n    test_mpu()\r\n\r\ndef test_mpu():\r\n    bucket = boto3.resource('s3').Bucket(bucket_name)\r\n    s3_object = bucket.Object('my/test')\r\n    multipart_upload = s3_object.initiate_multipart_upload()\r\n    multipart_upload.abort()\r\n    list(multipart_upload.parts.all())\r\n```\r\n\r\n`python -c 'from testmpu import test_mpu; test_mpu()'` gives 'NoSuchUpload' as expected; `python -c 'from testmpu import test_mocked; test_mocked()'` gives a KeyError as in attached.\r\n[motoerror.txt](https://github.com/spulec/moto/files/6674148/motoerror.txt)\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/4018/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/4018/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3996", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3996/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3996/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3996/events", "html_url": "https://github.com/getmoto/moto/issues/3996", "id": 914833866, "node_id": "MDU6SXNzdWU5MTQ4MzM4NjY=", "number": 3996, "title": "delete_message_batch doesn't handle duplication correctly (incorrect exception raised)", "user": {"login": "geekingfrog", "id": 1531763, "node_id": "MDQ6VXNlcjE1MzE3NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1531763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geekingfrog", "html_url": "https://github.com/geekingfrog", "followers_url": "https://api.github.com/users/geekingfrog/followers", "following_url": "https://api.github.com/users/geekingfrog/following{/other_user}", "gists_url": "https://api.github.com/users/geekingfrog/gists{/gist_id}", "starred_url": "https://api.github.com/users/geekingfrog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geekingfrog/subscriptions", "organizations_url": "https://api.github.com/users/geekingfrog/orgs", "repos_url": "https://api.github.com/users/geekingfrog/repos", "events_url": "https://api.github.com/users/geekingfrog/events{/privacy}", "received_events_url": "https://api.github.com/users/geekingfrog/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-06-08T11:05:09Z", "updated_at": "2021-07-07T07:59:16Z", "closed_at": "2021-07-07T07:59:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Moto version: 2.0.8\r\nboto3 version: 1.17.88\r\nbotocore version: 1.20.88\r\n\r\n```python\r\n@mock_sqs\r\ndef test_duplicate_bug() -> None:\r\n    client = boto3.client(\"sqs\")\r\n    queue_url = client.create_queue(QueueName=\"test_inbound_queue\")[\"QueueUrl\"]\r\n    client.send_message(QueueUrl=queue_url, MessageBody=\"coucou\")\r\n\r\n    messages = client.receive_message(QueueUrl=queue_url, WaitTimeSeconds=0)[\"Messages\"]\r\n    assert messages, \"at least one msg\"\r\n    entries = [\r\n        {\"Id\": msg[\"MessageId\"], \"ReceiptHandle\": msg[\"ReceiptHandle\"]}\r\n        for msg in [messages[0], messages[0]]\r\n    ]\r\n\r\n    # with moto, this raises botocore.errorfactory.ReceiptHandleIsInvalid\r\n    # however, running this code against a real AWS queue would raise\r\n    # botocore.errorfactory.BatchEntryIdsNotDistinct\r\n    client.delete_message_batch(QueueUrl=queue_url, Entries=entries)\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3996/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3996/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3992", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3992/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3992/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3992/events", "html_url": "https://github.com/getmoto/moto/issues/3992", "id": 913006887, "node_id": "MDU6SXNzdWU5MTMwMDY4ODc=", "number": 3992, "title": "AWS Lambda error response is mixed up with docker container logs", "user": {"login": "dazza-codes", "id": 240623, "node_id": "MDQ6VXNlcjI0MDYyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/240623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dazza-codes", "html_url": "https://github.com/dazza-codes", "followers_url": "https://api.github.com/users/dazza-codes/followers", "following_url": "https://api.github.com/users/dazza-codes/following{/other_user}", "gists_url": "https://api.github.com/users/dazza-codes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dazza-codes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dazza-codes/subscriptions", "organizations_url": "https://api.github.com/users/dazza-codes/orgs", "repos_url": "https://api.github.com/users/dazza-codes/repos", "events_url": "https://api.github.com/users/dazza-codes/events{/privacy}", "received_events_url": "https://api.github.com/users/dazza-codes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-06-07T01:04:23Z", "updated_at": "2021-08-28T08:41:05Z", "closed_at": "2021-08-28T08:41:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Lambda function:\r\n\r\n```python\r\ndef lambda_handler(event, context):\r\n    raise RuntimeError(\"Oops\")\r\n```\r\n\r\nThe moto response is like:\r\n\r\n```python\r\n{'FunctionError': 'Handled',\r\n 'Payload': <StreamingBody at 0x7f2e5c60cd20 for ClientResponseContentProxy at 0x7f2e5c57adc0>,\r\n 'ResponseMetadata': {'HTTPHeaders': {'content-length': '748',\r\n                                      'content-type': 'text/html; '\r\n                                                      'charset=utf-8',\r\n                                      'date': 'Mon, 07 Jun 2021 01:07:15 GMT',\r\n                                      'server': 'Werkzeug/2.0.1 Python/3.7.10',\r\n                                      'x-amz-crc32': '1107850810',\r\n                                      'x-amz-function-error': 'Handled',\r\n                                      'x-amzn-requestid': 'W2G2JRHZK5PB3NC151UWZFBCV27KHMZDMR6BILHQEPDCY6BGLBSY'},\r\n                      'HTTPStatusCode': 200,\r\n                      'RequestId': 'W2G2JRHZK5PB3NC151UWZFBCV27KHMZDMR6BILHQEPDCY6BGLBSY',\r\n                      'RetryAttempts': 0},\r\n 'StatusCode': 200}\r\n```\r\n\r\nThat looks correct (i.e. a 200 response with a  'FunctionError').  But the data is a mixture of logging and the error:\r\n\r\n```\r\n('error running lambda: lambda invoke failed output: \\x1b[32mSTART RequestId: '\r\n 'a62e5f44-8555-1644-d467-365ce24ec49e Version: 1\\x1b[0m\\n'\r\n \"event: {'action': 'runtime-error'}\\n\"\r\n '[ERROR] RuntimeError: runtime-error\\n'\r\n 'Traceback (most recent call last):\\n'\r\n '\\xa0\\xa0File \"/var/task/lambda_function.py\", line 12, in lambda_handler\\n'\r\n '\\xa0\\xa0\\xa0\\xa0raise RuntimeError(action)\\n'\r\n '\\x1b[32mEND RequestId: a62e5f44-8555-1644-d467-365ce24ec49e\\x1b[0m\\n'\r\n '\\x1b[32mREPORT RequestId: a62e5f44-8555-1644-d467-365ce24ec49e\\tInit '\r\n 'Duration: 160.93 ms\\tDuration: 3.14 ms\\tBilled Duration: 4 ms\\tMemory Size: '\r\n '128 MB\\tMax Memory Used: 23 MB\\t\\x1b[0m\\n'\r\n '\\n'\r\n '{\"errorType\":\"RuntimeError\",\"errorMessage\":\"runtime-error\",\"stackTrace\":[\"  '\r\n 'File \\\\\"/var/task/lambda_function.py\\\\\", line 12, in lambda_handler\\\\n    '\r\n 'raise RuntimeError(action)\\\\n\"]}\\n')\r\n```\r\n\r\nThe moto error response is a string that cannot be parsed as JSON.\r\n\r\nThe actual AWS Lambda response for something like this is:\r\n\r\n```python\r\n{'ExecutedVersion': '$LATEST',\r\n 'FunctionError': 'Unhandled',\r\n 'Payload': <StreamingBody at 0x7faa8b9985f0 for ClientResponseContentProxy at 0x7faa8b9985a0>,\r\n 'ResponseMetadata': {'HTTPHeaders': {'connection': 'keep-alive',\r\n                                      'content-length': '178',\r\n                                      'content-type': 'application/json',\r\n                                      'date': 'Mon, 07 Jun 2021 01:00:50 GMT',\r\n                                      'x-amz-executed-version': '$LATEST',\r\n                                      'x-amz-function-error': 'Unhandled',\r\n                                      'x-amzn-remapped-content-length': '0',\r\n                                      'x-amzn-requestid': 'xxx-snipped',\r\n                                      'x-amzn-trace-id': 'xxx-snipped'},\r\n                      'HTTPStatusCode': 200,\r\n                      'RequestId': 'xxx-snipped',\r\n                      'RetryAttempts': 0},\r\n 'StatusCode': 200}\r\n```\r\n\r\nThe AWS Lambda response has `application/json` content type and the error in the response body is like:\r\n\r\n```python\r\n{'errorMessage': 'Oops',\r\n 'errorType': 'RuntimeError',\r\n 'stackTrace': ['  File \"/var/task/lambda_function.py\", line 23, in '\r\n                'lambda_handler\\n'\r\n                '    raise RuntimeError(\"Oops\")\\n']}\r\n```\r\n\r\n## versions\r\n\r\n```\r\n$ cat /etc/lsb-release \r\nDISTRIB_ID=Ubuntu\r\nDISTRIB_RELEASE=18.04\r\nDISTRIB_CODENAME=bionic\r\nDISTRIB_DESCRIPTION=\"Ubuntu 18.04.5 LTS\"\r\n\r\n$ docker --version\r\nDocker version 20.10.7, build f0df350\r\n\r\n$ python --version\r\nPython 3.7.10\r\n\r\n$ poetry show moto\r\nname         : moto\r\nversion      : 1.3.16\r\ndescription  : A library that allows your python tests to easily mock out the boto library\r\n\r\ndependencies\r\n - aws-xray-sdk >=0.93,<0.96 || >0.96\r\n - boto >=2.36.0\r\n - boto3 >=1.9.201\r\n - botocore >=1.12.201\r\n - cfn-lint >=0.4.0\r\n - cryptography >=2.3.0\r\n - docker >=2.5.1\r\n - ecdsa <0.15\r\n - flask *\r\n - idna >=2.5,<3\r\n - Jinja2 >=2.10.1\r\n - jsondiff >=1.1.2\r\n - MarkupSafe <2.0\r\n - mock *\r\n - more-itertools *\r\n - python-dateutil >=2.1,<3.0.0\r\n - python-jose >=3.1.0,<4.0.0\r\n - pytz *\r\n - PyYAML >=5.1\r\n - requests >=2.5\r\n - responses >=0.9.0\r\n - six >1.9\r\n - sshpubkeys >=3.1.0\r\n - werkzeug *\r\n - xmltodict *\r\n - zipp *\r\n\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3992/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3992/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3986", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3986/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3986/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3986/events", "html_url": "https://github.com/getmoto/moto/issues/3986", "id": 910953380, "node_id": "MDU6SXNzdWU5MTA5NTMzODA=", "number": 3986, "title": "AWS Config S3 ACLs missing owner", "user": {"login": "mikegrima", "id": 11035926, "node_id": "MDQ6VXNlcjExMDM1OTI2", "avatar_url": "https://avatars.githubusercontent.com/u/11035926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikegrima", "html_url": "https://github.com/mikegrima", "followers_url": "https://api.github.com/users/mikegrima/followers", "following_url": "https://api.github.com/users/mikegrima/following{/other_user}", "gists_url": "https://api.github.com/users/mikegrima/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikegrima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikegrima/subscriptions", "organizations_url": "https://api.github.com/users/mikegrima/orgs", "repos_url": "https://api.github.com/users/mikegrima/repos", "events_url": "https://api.github.com/users/mikegrima/events{/privacy}", "received_events_url": "https://api.github.com/users/mikegrima/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "bblommers", "id": 6058517, "node_id": "MDQ6VXNlcjYwNTg1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6058517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblommers", "html_url": "https://github.com/bblommers", "followers_url": "https://api.github.com/users/bblommers/followers", "following_url": "https://api.github.com/users/bblommers/following{/other_user}", "gists_url": "https://api.github.com/users/bblommers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblommers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblommers/subscriptions", "organizations_url": "https://api.github.com/users/bblommers/orgs", "repos_url": "https://api.github.com/users/bblommers/repos", "events_url": "https://api.github.com/users/bblommers/events{/privacy}", "received_events_url": "https://api.github.com/users/bblommers/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bblommers", "id": 6058517, "node_id": "MDQ6VXNlcjYwNTg1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6058517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblommers", "html_url": "https://github.com/bblommers", "followers_url": "https://api.github.com/users/bblommers/followers", "following_url": "https://api.github.com/users/bblommers/following{/other_user}", "gists_url": "https://api.github.com/users/bblommers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblommers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblommers/subscriptions", "organizations_url": "https://api.github.com/users/bblommers/orgs", "repos_url": "https://api.github.com/users/bblommers/repos", "events_url": "https://api.github.com/users/bblommers/events{/privacy}", "received_events_url": "https://api.github.com/users/bblommers/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2021-06-04T00:11:46Z", "updated_at": "2021-06-04T19:01:58Z", "closed_at": "2021-06-04T19:01:58Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "It looks like AWS Config for S3 has a slightly different behavior from when I initially wrote the capability a while back. AWS Config is now including the default account owner ACL in the grantees now.\r\n\r\nThe following lines need to be removed:\r\nhttps://github.com/spulec/moto/blob/master/moto/s3/models.py#L439-L441\r\n\r\nI will make a PR soon to fix.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3986/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3986/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3970", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3970/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3970/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3970/events", "html_url": "https://github.com/getmoto/moto/issues/3970", "id": 906154871, "node_id": "MDU6SXNzdWU5MDYxNTQ4NzE=", "number": 3970, "title": "Security Group revoke ingress rule fails if not revoking all IPs within an IpPermission object", "user": {"login": "will-schneble", "id": 61200984, "node_id": "MDQ6VXNlcjYxMjAwOTg0", "avatar_url": "https://avatars.githubusercontent.com/u/61200984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/will-schneble", "html_url": "https://github.com/will-schneble", "followers_url": "https://api.github.com/users/will-schneble/followers", "following_url": "https://api.github.com/users/will-schneble/following{/other_user}", "gists_url": "https://api.github.com/users/will-schneble/gists{/gist_id}", "starred_url": "https://api.github.com/users/will-schneble/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/will-schneble/subscriptions", "organizations_url": "https://api.github.com/users/will-schneble/orgs", "repos_url": "https://api.github.com/users/will-schneble/repos", "events_url": "https://api.github.com/users/will-schneble/events{/privacy}", "received_events_url": "https://api.github.com/users/will-schneble/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-05-28T22:29:43Z", "updated_at": "2021-10-26T10:18:42Z", "closed_at": "2021-10-26T10:18:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Community Note\r\n\r\n* Please vote on this issue by adding a \ud83d\udc4d [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request\r\n* Please do not leave \"+1\" or other comments that do not add relevant new information or questions, they generate extra noise for issue followers and do not help prioritize the request\r\n\r\n### Python and moto versions\r\n\r\n* Python 3.8.3\r\n* moto==2.0.8\r\n\r\n### Affected Resource(s)\r\n\r\n* ec2.revoke_security_group_ingress\r\n* ec2.SecurityRule\r\n\r\n### Expected Behavior\r\n\r\nTrying to authorize IP ingress rules for a security group and then revoke some of the applied rules. Expected moto to remove the ingress IP rule for 10.0.0.0/32 for port 22 and protocol tcp.\r\n\r\n### Actual Behavior\r\n\r\nAn exception is thrown for `InvalidPermission.NotFound` because moto [SecurityRule comparison compares the entire IpRanges collection](https://github.com/spulec/moto/blob/7947b1e00133985775add3dd62b20d4fe9b2e652/moto/ec2/models.py#L2005) and not if each IP in the `ec2.revoke_security_group_ingress` request's IpPermission object is in the SG's IpPermission objects. This means when using moto a user can only revoke entire IpPermission objects in the SG (and not a single IP within an object) which is not the same behavior as boto3.\r\n\r\n### Steps to Reproduce\r\n\r\n```python\r\nimport boto3\r\nimport moto\r\n\r\nisMocking = True\r\nips = [\r\n  '10.0.0.0/32',\r\n  '10.0.0.1/32',\r\n  '10.0.0.2/32',\r\n]\r\n\r\nif isMocking:\r\n  mock = moto.mock_ec2()\r\n  mock.start()\r\nprint('isMocking=%s' % isMocking)\r\n\r\ns = boto3.Session(profile_name='default')\r\nc = s.client('ec2')\r\n\r\ngroupId = c.create_security_group(\r\n  Description=\"TEST\",\r\n  GroupName=\"TEST\"\r\n)['GroupId']\r\nprint('Created Security Group with ID: %s' % groupId)\r\ntry:\r\n  c.authorize_security_group_ingress(\r\n    GroupId=groupId,\r\n    IpPermissions=[\r\n      {\r\n        'FromPort': 22,\r\n        'ToPort': 22,\r\n        'IpProtocol': 'tcp',\r\n        'IpRanges': [\r\n          {\r\n            'CidrIp': x\r\n          } for x in ips\r\n        ]\r\n      }\r\n    ]\r\n  )\r\n\r\n  sg = c.describe_security_groups(GroupIds=[groupId])['SecurityGroups'][0]\r\n  tmp = [x['CidrIp'] for y in sg['IpPermissions'] for x in y['IpRanges'] if y['ToPort'] == 22 and y['FromPort'] == 22 and y['IpProtocol'] == 'tcp']\r\n  assert set(ips) == set(tmp), \"Expected permission set tcp:22 to contain %s but got %s\" % (ips, tmp)\r\n  print('Security Group rules added')\r\n\r\n  c.revoke_security_group_ingress(\r\n    GroupId=groupId,\r\n    IpPermissions=[\r\n      {\r\n        'FromPort': 22,\r\n        'ToPort': 22,\r\n        'IpProtocol': 'tcp',\r\n        'IpRanges': [\r\n          {\r\n            'CidrIp': x\r\n          } for x in ips[:1]\r\n        ]\r\n      }\r\n    ]\r\n  )\r\n\r\n  sg = c.describe_security_groups(GroupIds=[groupId])['SecurityGroups'][0]\r\n  tmp = [x['CidrIp'] for y in sg['IpPermissions'] for x in y['IpRanges'] if y['ToPort'] == 22 and y['FromPort'] == 22 and y['IpProtocol'] == 'tcp']\r\n  assert set(ips[1:]) == set(tmp), \"Expected permission set tcp:22 to contain %s but got %s\" % (ips[1:], tmp)\r\n  print('Security Group rule revoked')\r\nfinally:\r\n  c.delete_security_group(GroupId=groupId)\r\n  print('Security Group deleted')\r\n  if isMocking:\r\n    mock.stop()\r\n```\r\n\r\n1. Run the above script with `isMocking=True`.\r\n2. Get an authenticated session in ~/.aws/credentials for the default profile (or if you have long term creds in the default profile then skip this step).\r\n3. Run the above script with `isMocking=False`\r\n\r\n### Debug Output\r\n\r\n```\r\nrunfile('C:/Users/will/Downloads/moto_sg_example.py', wdir='C:/Users/will/Downloads')\r\nisMocking=True\r\nCreated Security Group with ID: sg-81d77cdb\r\nSecurity Group rules added\r\nSecurity Group deleted\r\nTraceback (most recent call last):\r\n\r\n  File \"C:\\Users\\will\\Downloads\\moto_sg_example.py\", line 52, in <module>\r\n    c.revoke_security_group_ingress(\r\n\r\n  File \"C:\\Users\\will\\Anaconda3\\lib\\site-packages\\botocore\\client.py\", line 357, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n\r\n  File \"C:\\Users\\will\\Anaconda3\\lib\\site-packages\\botocore\\client.py\", line 676, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\n\r\nClientError: An error occurred (InvalidPermission.NotFound) when calling the RevokeSecurityGroupIngress operation: The specified rule does not exist in this security group\r\n\r\n# New python run with isMocking=False\r\nrunfile('C:/Users/will/Downloads/moto_sg_example.py', wdir='C:/Users/will/Downloads')\r\nisMocking=False\r\nCreated Security Group with ID: sg-0501bd1cc0854929f\r\nSecurity Group rules added\r\nSecurity Group rule revoked\r\nSecurity Group deleted\r\n```\r\n\r\n### Important Factoids\r\n\r\nAdditionally, moto stores SecurityRules with the same protocol, fromPort, and toPort in different IpPermission objects which is not the behavior of AWS boto3 where AWS will merge similar IpPermission objects together. For example, moto will have\r\n```json\r\n{\r\n  \"IpPermissions\": [\r\n    {\r\n      \"FromPort\": 22,\r\n      \"ToPort\": 22,\r\n      \"Protocol\": \"tcp\",\r\n      \"IpRanges\": [\r\n        {\r\n          \"CidrIp\": \"10.0.0.0/32\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"FromPort\": 22,\r\n      \"ToPort\": 22,\r\n      \"Protocol\": \"tcp\",\r\n      \"IpRanges\": [\r\n        {\r\n          \"CidrIp\": \"10.0.0.1/32\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\nif each IP was added in a different ec2.authorize_security_group_ingress request. Here is some code to reproduce this:\r\n```python\r\nimport boto3\r\nimport moto\r\n\r\nmock = moto.mock_ec2()\r\nmock.start()\r\n\r\nc = boto3.client('ec2')\r\ngroupId = c.create_security_group(\r\n  Description=\"TEST\",\r\n  GroupName=\"TEST\"\r\n)['GroupId']\r\nfor x in ['10.0.0.0/32', '10.0.0.1/32']:\r\n  c.authorize_security_group_ingress(\r\n    GroupId=groupId,\r\n    IpPermissions=[\r\n      {\r\n        'FromPort': 22,\r\n        'ToPort': 22,\r\n        'IpProtocol': 'tcp',\r\n        'IpRanges': [\r\n          {\r\n            'CidrIp': x\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  )\r\nprint(c.describe_security_groups(GroupIds=[groupId])['SecurityGroups'][0]['IpPermissions'])\r\nc.delete_security_group(GroupId=groupId)\r\nmock.stop()\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3970/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3970/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3968", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3968/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3968/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3968/events", "html_url": "https://github.com/getmoto/moto/issues/3968", "id": 905450757, "node_id": "MDU6SXNzdWU5MDU0NTA3NTc=", "number": 3968, "title": "Incomplete \"LastEvaluatedKey\" in response from dynamodb2 query() when using Global Secondary Index.", "user": {"login": "questsul", "id": 29305461, "node_id": "MDQ6VXNlcjI5MzA1NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/29305461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/questsul", "html_url": "https://github.com/questsul", "followers_url": "https://api.github.com/users/questsul/followers", "following_url": "https://api.github.com/users/questsul/following{/other_user}", "gists_url": "https://api.github.com/users/questsul/gists{/gist_id}", "starred_url": "https://api.github.com/users/questsul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/questsul/subscriptions", "organizations_url": "https://api.github.com/users/questsul/orgs", "repos_url": "https://api.github.com/users/questsul/repos", "events_url": "https://api.github.com/users/questsul/events{/privacy}", "received_events_url": "https://api.github.com/users/questsul/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-05-28T13:52:41Z", "updated_at": "2021-10-28T10:10:11Z", "closed_at": "2021-10-28T10:10:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nTrying to create a pagination over dynamodb by using `LastEvaluatedKey` and `ExclusiveStartKey` with `qury()` [documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.Pagination.html).\r\nQuerying is performed over GSI of the table. When running the tests using `mock_dynamodb2` returned `LastEvaluatedKey` does not contain attributes from global secondary index.\r\n\r\nActual behavior should be that response's `LastEvaluatedKey` should contain index partition and sort key . Tested with live dynamodb table.\r\n\r\nBelow script reproduces the issue:\r\n\r\n```python\r\nimport boto3\r\nfrom moto import mock_dynamodb2\r\nfrom boto3.dynamodb.conditions import Key\r\n\r\n@mock_dynamodb2\r\ndef index_test():\r\n    dynamo_db_resource = boto3.resource(\"dynamodb\", region_name=\"eu-west-1\")\r\n    dynamo_db_resource.create_table(\r\n        TableName=\"TestTable\",\r\n        KeySchema=[\r\n            {\"AttributeName\": \"TestPartitionKey\", \"KeyType\": \"HASH\"},\r\n            {\"AttributeName\": \"TestSortKey\", \"KeyType\": \"RANGE\"},\r\n        ],\r\n        AttributeDefinitions=[\r\n            {\"AttributeName\": \"TestPartitionKey\", \"AttributeType\": \"S\"},\r\n            {\"AttributeName\": \"TestSortKey\", \"AttributeType\": \"N\"},\r\n            {\"AttributeName\": \"IndexPartitionKey\", \"AttributeType\": \"S\"},\r\n            {\"AttributeName\": \"IndexSortKey\", \"AttributeType\": \"S\"},\r\n        ],\r\n        GlobalSecondaryIndexes=[\r\n            {\r\n                \"IndexName\": \"TestGlobalSecondaryIndex\",\r\n                \"KeySchema\": [\r\n                    {\"AttributeName\": \"IndexPartitionKey\", \"KeyType\": \"HASH\"},\r\n                    {\"AttributeName\": \"IndexSortKey\", \"KeyType\": \"RANGE\"},\r\n                ],\r\n                \"Projection\": {\r\n                    \"ProjectionType\": \"INCLUDE\",\r\n                    \"NonKeyAttributes\": [\"TestSortKey, TestPartitionKey\", \"SomeKey\"],\r\n                },\r\n            }\r\n        ],\r\n    )\r\n    table = dynamo_db_resource.Table(\"TestTable\")\r\n\r\n    itmes = [\r\n        {\"TestPartitionKey\": \"TEST\",\"TestSortKey\": 1,\"IndexPartitionKey\": \"PART_A\",\"IndexSortKey\": \"A\", \"SomeKey\": \"XYZ\"},\r\n        {\"TestPartitionKey\": \"TEST\",\"TestSortKey\": 2,\"IndexPartitionKey\": \"PART_A\",\"IndexSortKey\": \"A\",\"SomeKey\": \"XYZ\"},\r\n        {\"TestPartitionKey\": \"TEST\",\"TestSortKey\": 3,\"IndexPartitionKey\": \"PART_B\",\"IndexSortKey\": \"A\", \"SomeKey\": \"XYZ\"},\r\n        {\"TestPartitionKey\": \"TEST\",\"TestSortKey\": 4,\"IndexPartitionKey\": \"PART_B\",\"IndexSortKey\": \"A\", \"SomeKey\": \"XYZ\"},\r\n        {\"TestPartitionKey\": \"TEST\",\"TestSortKey\": 5,\"IndexPartitionKey\": \"PART_B\",\"IndexSortKey\": \"A\", \"SomeKey\": \"XYZ\"}\r\n    ]\r\n\r\n    for item in itmes:\r\n        table.put_item(\r\n            Item=item\r\n        )\r\n    query_args = {\r\n        \"Limit\": 1,\r\n        \"IndexName\": \"TestGlobalSecondaryIndex\",\r\n        \"KeyConditionExpression\": Key(\"TestGlobalSecondaryIndex\").eq(\"PART_B\"),\r\n    }\r\n\r\n    query_result = table.query(**query_args)\r\n    print(query_result)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    index_test()\r\n```\r\n\r\nmoto == 2.0.7\r\nboto3 == 1.17.75\r\nbotocore == 1.20.75\r\n\r\nPossible fix: after adding `index_name` in call to `_trim_results` the issue seems to be resolved:\r\nhttps://github.com/spulec/moto/blob/7947b1e00133985775add3dd62b20d4fe9b2e652/moto/dynamodb2/models/__init__.py#L824-L826", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3968/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3968/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3947", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3947/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3947/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3947/events", "html_url": "https://github.com/getmoto/moto/issues/3947", "id": 897586860, "node_id": "MDU6SXNzdWU4OTc1ODY4NjA=", "number": 3947, "title": "SES get_dkim_tokens creates duplicate domain", "user": {"login": "mdavis-xyz", "id": 7035647, "node_id": "MDQ6VXNlcjcwMzU2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7035647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdavis-xyz", "html_url": "https://github.com/mdavis-xyz", "followers_url": "https://api.github.com/users/mdavis-xyz/followers", "following_url": "https://api.github.com/users/mdavis-xyz/following{/other_user}", "gists_url": "https://api.github.com/users/mdavis-xyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdavis-xyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdavis-xyz/subscriptions", "organizations_url": "https://api.github.com/users/mdavis-xyz/orgs", "repos_url": "https://api.github.com/users/mdavis-xyz/repos", "events_url": "https://api.github.com/users/mdavis-xyz/events{/privacy}", "received_events_url": "https://api.github.com/users/mdavis-xyz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-05-21T00:59:51Z", "updated_at": "2021-07-02T04:28:41Z", "closed_at": "2021-07-02T04:28:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Steps to reproduce:\r\n\r\n```\r\nfrom moto import mock_ses\r\nimport boto3\r\nimport unittest\r\n\r\nclass TestMoto(unittest.TestCase):\r\n    def test_moto(self):\r\n        domain = 'example.com'\r\n        with mock_ses():\r\n            client = boto3.client('ses')\r\n        \r\n            response = client.list_identities(IdentityType='Domain')\r\n            self.assertEqual(sum([(domain == i) for i in response.get('Identities', [])]), 0)\r\n        \r\n            ret = client.verify_domain_identity(Domain=domain)\r\n            response = client.list_identities(IdentityType='Domain')\r\n            self.assertEqual(sum([(domain == i) for i in response.get('Identities', [])]), 1)\r\n        \r\n            response = client.verify_domain_dkim(Domain=domain)\r\n            response = client.list_identities(IdentityType='Domain')\r\n            self.assertEqual(sum([(domain == i) for i in response.get('Identities', [])]), 1)\r\n                \r\n```\r\n\r\nSave as `test.py` and run with `python3 -m unittest test.py`\r\n\r\n# Expected behavior\r\n\r\nThe test passes.\r\n\r\ni.e. when `verify_domain_dkim` is called, it checks whether the domain already exists in the list,\r\nand doesn't re-add it as a duplicate.\r\n\r\nTo confirm the expected behavior, comment out `with mock_ses()` and run against real AWS.\r\n\r\n# Actual behavior\r\n\r\nThe script fails. The final assertion fails.\r\n\r\n`verify_domain_dkim` seems to have created a second domain, without checking whether it's already added.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3947/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3947/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3910", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3910/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3910/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3910/events", "html_url": "https://github.com/getmoto/moto/issues/3910", "id": 878583548, "node_id": "MDU6SXNzdWU4Nzg1ODM1NDg=", "number": 3910, "title": "modify_network_interface_attribute should support setting more than one security group", "user": {"login": "MVJosh", "id": 46718985, "node_id": "MDQ6VXNlcjQ2NzE4OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/46718985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MVJosh", "html_url": "https://github.com/MVJosh", "followers_url": "https://api.github.com/users/MVJosh/followers", "following_url": "https://api.github.com/users/MVJosh/following{/other_user}", "gists_url": "https://api.github.com/users/MVJosh/gists{/gist_id}", "starred_url": "https://api.github.com/users/MVJosh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MVJosh/subscriptions", "organizations_url": "https://api.github.com/users/MVJosh/orgs", "repos_url": "https://api.github.com/users/MVJosh/repos", "events_url": "https://api.github.com/users/MVJosh/events{/privacy}", "received_events_url": "https://api.github.com/users/MVJosh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-05-07T08:05:22Z", "updated_at": "2021-05-07T12:50:47Z", "closed_at": "2021-05-07T12:50:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`modify_network_interface_attribute`  (EC2 client) should support setting more than one security group via the `Groups` parameter, but currently it just selects the first security group.\r\n\r\nExample to reproduce:\r\n```python\r\nfrom moto import mock_ec2\r\nimport boto3\r\n\r\n@mock_ec2\r\ndef test_example():\r\n\tclient = boto3.client(\"ec2\")\r\n\r\n\tvpcResponse = client.describe_vpcs(\r\n\t\tFilters=[{'Name': 'isDefault', 'Values': ['true']}]\r\n\t)\r\n\tvpc = vpcResponse['Vpcs'][0]\r\n\r\n\tsubnetResponse = client.describe_subnets(\r\n\t\tFilters=[{'Name': 'vpc-id', 'Values': [vpc['VpcId']]}]\r\n\t)\r\n\tsubnet = subnetResponse['Subnets'][0]\r\n\r\n\tinterfaceResponse = client.create_network_interface(\r\n\t\tSubnetId=subnet['SubnetId']\r\n\t)\r\n\tinterface = interfaceResponse['NetworkInterface']\r\n\r\n\tsg1 = client.create_security_group(\r\n\t\tDescription=\"testing\",\r\n\t\tGroupName=\"test-group-1\",\r\n\t\tVpcId=vpc['VpcId']\r\n\t)\r\n\tsg2 = client.create_security_group(\r\n\t\tDescription=\"testing\",\r\n\t\tGroupName=\"test-group-2\",\r\n\t\tVpcId=vpc['VpcId']\r\n\t)\r\n\r\n\texpectedGroups = [\r\n\t\t{\r\n\t\t\t'GroupName': 'test-group-1',\r\n\t\t\t'GroupId': sg1['GroupId']\r\n\t\t},\r\n\t\t{\r\n\t\t\t'GroupName': 'test-group-2',\r\n\t\t\t'GroupId': sg2['GroupId']\r\n\t\t}\r\n\t]\r\n\r\n\tmodifyResponse = client.modify_network_interface_attribute(\r\n\t\tNetworkInterfaceId=interface['NetworkInterfaceId'],\r\n\t\tGroups=[\r\n\t\t\tsg1['GroupId'],\r\n\t\t\tsg2['GroupId']\r\n\t\t]\r\n\t)\r\n\r\n\tdescribeInterfaceResponse = client.describe_network_interfaces(\r\n\t\tNetworkInterfaceIds=[interface['NetworkInterfaceId']]\r\n\t)\r\n\tupdatedInterface = describeInterfaceResponse['NetworkInterfaces'][0]\r\n\tassert updatedInterface['NetworkInterfaceId'] == interface['NetworkInterfaceId']\r\n\r\n\tassert len(updatedInterface['Groups']) == 2\r\n\tassert updatedInterface['Groups'] == expectedGroups\r\n```\r\n\r\n\r\nExpected:\r\nThe updated interface should have 2 security groups, which should match the 2 groups created.\r\n\r\nObserved:\r\nThe updated interface has a single security group, matching whichever was passed in first in the `Groups` parameter.\r\n\r\n\r\nMoto version: 2.0.6\r\nUsing python mocks, boto3 version 1.17.64, botocore version 1.20.64\r\nPython: 3.8.9\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3910/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3910/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3909", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3909/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3909/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3909/events", "html_url": "https://github.com/getmoto/moto/issues/3909", "id": 878015479, "node_id": "MDU6SXNzdWU4NzgwMTU0Nzk=", "number": 3909, "title": "mock_dynamodb2 - Inconsistent query result between the mock and dynamodb in terms of missing LastEvaluatedKey", "user": {"login": "nivmorabin", "id": 4501996, "node_id": "MDQ6VXNlcjQ1MDE5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4501996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivmorabin", "html_url": "https://github.com/nivmorabin", "followers_url": "https://api.github.com/users/nivmorabin/followers", "following_url": "https://api.github.com/users/nivmorabin/following{/other_user}", "gists_url": "https://api.github.com/users/nivmorabin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivmorabin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivmorabin/subscriptions", "organizations_url": "https://api.github.com/users/nivmorabin/orgs", "repos_url": "https://api.github.com/users/nivmorabin/repos", "events_url": "https://api.github.com/users/nivmorabin/events{/privacy}", "received_events_url": "https://api.github.com/users/nivmorabin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-05-06T20:47:26Z", "updated_at": "2022-01-29T11:08:19Z", "closed_at": "2022-01-29T11:08:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI experience an inconsistent query result between the mock_dynamodb2 and the actual live dynamodb query result returned from dynamodb in terms of missing LastEvaluatedKey.\r\n\r\nI suspect that the limit doesn't apply before the FilterExpression as mentioned in the [documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html)\r\n\r\nPlease run the following code sample, the query result indeed return 0 items but when I'm running this same query against the actual live dynamodb I receive 0 items with LastEvaluatedKey containing the first item scanned (notice the Limit 1).\r\n\r\nExpected result (the first Item I've added in table.put_item in the sample below)\r\n```\r\n{ Items:[], LastEvaluatedKey: {\"pk\": \"TEST\", \"sk\": \"ENV#TEST_ENV#FILE#file1\", \"depth\": 4, \"file_path\": \"D/dir1/dir2/dir3/file1\", \"driveId\": \"D\", \"myId\": \"file1\"} }\r\n```\r\nActual result - the result is correct, but I expect to query with the LastEvaluatedKey a few iterations until I receive LastEvaluatedKey: None due to the Limit 1 (and that's also what returned from dynamodb).\r\n```\r\n{ Items:[], LastEvaluatedKey: None } \r\n```\r\n\r\nmoto version 2.0.4\r\n\r\n```\r\nimport boto3\r\nfrom moto import mock_dynamodb2\r\nfrom boto3.dynamodb.conditions import Attr, And, Key\r\n@mock_dynamodb2\r\ndef test():\r\n    dynamo_db_resource = boto3.resource(\"dynamodb\", region_name=\"us-west-2\")\r\n    dynamo_db_resource.create_table(TableName=\"TestTable\", KeySchema=[{\"AttributeName\": \"pk\", \"KeyType\": \"HASH\"},\r\n                                                               {\"AttributeName\": \"sk\", \"KeyType\": \"RANGE\"}],\r\n                                    AttributeDefinitions=[{\"AttributeName\": \"pk\", \"AttributeType\": \"S\"},\r\n                                                          {\"AttributeName\": \"sk\", \"AttributeType\": \"S\"}],\r\n                                    ProvisionedThroughput={\"ReadCapacityUnits\": 5, \"WriteCapacityUnits\": 5},\r\n                                    )\r\n    table = dynamo_db_resource.Table(\"TestTable\")\r\n\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#FILE#file1\", \"depth\": 4, \"file_path\": \"D/dir1/dir2/dir3/file1\", \"driveId\": \"D\", \"myId\": \"file1\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#FILE#file2\", \"depth\": 1, \"file_path\": \"C/file2\", \"driveId\": \"C\", \"myId\": \"file2\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#FILE#file3\", \"depth\": 2, \"file_path\": \"D/dir1/file3\", \"driveId\": \"D\", \"myId\": \"file3\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#FILE#file4\", \"depth\": 5, \"file_path\": \"D/dir1/dir4/dir5/dir6/file4\", \"driveId\": \"D\", \"myId\": \"file4\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#FILE#file5\", \"depth\": 1, \"file_path\": \"C/file5\", \"driveId\": \"C\", \"myId\": \"file5\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#FILE#file6\", \"depth\": 1, \"file_path\": \"C/file6\", \"driveId\": \"C\", \"myId\": \"file6\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#DIR#dir4\", \"depth\": 2, \"file_path\": \"D/dir1/dir4\", \"driveId\": \"D\", \"myId\": \"dir4\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#DIR#dir5\", \"depth\": 3, \"file_path\": \"D/dir1/dir4/dir5\", \"driveId\": \"D\", \"myId\": \"dir5\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#DIR#dir6\", \"depth\": 4, \"file_path\": \"D/dir1/dir4/dir5/dir6\", \"driveId\": \"D\", \"myId\": \"dir6\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#DIR#dir2\", \"depth\": 2, \"file_path\": \"D/dir1/dir2\", \"driveId\": \"D\", \"myId\": \"dir2\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#DIR#dir3\", \"depth\": 3, \"file_path\": \"D/dir1/dir2/dir3\", \"driveId\": \"D\", \"myId\": \"dir3\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#DIR#dir1\", \"depth\": 1, \"file_path\": \"D/dir1\", \"driveId\": \"D\", \"myId\": \"dir1\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#DRIVE#D\", \"depth\": 0, \"file_path\": \"D\", \"driveId\": \"D\", \"myId\": \"D\"})\r\n    table.put_item(Item={\"pk\": \"TEST\", \"sk\": \"ENV#T_E#DRIVE#C\", \"depth\": 0, \"file_path\": \"C\", \"driveId\": \"C\", \"myId\": \"C\"})\r\n\r\n    query_args = {\r\n        \"KeyConditionExpression\": Key(\"pk\").eq(\"TEST\") & (Key(\"sk\").begins_with(\"ENV#T_E#FILE\")),\r\n        \"FilterExpression\": And(Attr(\"depth\").eq(1), Attr(\"file_path\").begins_with(\"D\")),\r\n        \"Limit\": 1\r\n    }\r\n\r\n    query_result = table.query(**query_args)\r\n    print(query_result)\r\n\r\nif __name__ == \"__main__\":\r\n    test()\r\n```\r\n\r\nThanks a lot ahead,\r\nNiv", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3909/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3909/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3894", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3894/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3894/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3894/events", "html_url": "https://github.com/getmoto/moto/issues/3894", "id": 874755564, "node_id": "MDU6SXNzdWU4NzQ3NTU1NjQ=", "number": 3894, "title": "cn-north-1 rds and autoscaling describe_instances get stuck", "user": {"login": "lyz-code", "id": 24810987, "node_id": "MDQ6VXNlcjI0ODEwOTg3", "avatar_url": "https://avatars.githubusercontent.com/u/24810987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lyz-code", "html_url": "https://github.com/lyz-code", "followers_url": "https://api.github.com/users/lyz-code/followers", "following_url": "https://api.github.com/users/lyz-code/following{/other_user}", "gists_url": "https://api.github.com/users/lyz-code/gists{/gist_id}", "starred_url": "https://api.github.com/users/lyz-code/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lyz-code/subscriptions", "organizations_url": "https://api.github.com/users/lyz-code/orgs", "repos_url": "https://api.github.com/users/lyz-code/repos", "events_url": "https://api.github.com/users/lyz-code/events{/privacy}", "received_events_url": "https://api.github.com/users/lyz-code/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-05-03T17:18:53Z", "updated_at": "2021-10-18T16:13:08Z", "closed_at": "2021-10-18T16:13:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "`rds.describe_db_instances()` and `autoscaling.describe_auto_scaling_groups()` don't ever return in the region `cn-north-1` with `moto==2.0.5`.\r\n\r\nI need to run those two commands on all the regions discovered by `ec2.describe_regions()`. But whenever the code reaches the `cn-north-1` region it get's stuck forever, preventing any further testing to happen.\r\n\r\nI've mitigated it applying a `timeout` to the boto3 client, but it's slowing down a lot the test suite.\r\n\r\nI expect moto to answer as quick as in the other regions.\r\n\r\n# Example code\r\n\r\n```python\r\nimport boto3\r\nfrom moto import mock_autoscaling, mock_rds2\r\n\r\n\r\n@mock_rds2\r\ndef test_rds_describe_instances():\r\n    rds = boto3.client(\"rds\", region_name=\"cn-north-1\")\r\n    rds.describe_db_instances()\r\n\r\n\r\n@mock_autoscaling\r\ndef test_autoscaling_describe_instances():\r\n    autoscaling = boto3.client(\"autoscaling\", region_name=\"cn-north-1\")\r\n    autoscaling.describe_auto_scaling_groups()\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3894/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3894/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3877", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3877/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3877/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3877/events", "html_url": "https://github.com/getmoto/moto/issues/3877", "id": 866726401, "node_id": "MDU6SXNzdWU4NjY3MjY0MDE=", "number": 3877, "title": "Wrong error message when trying to update hashkey or range key in dynamodb", "user": {"login": "mdavis-xyz", "id": 7035647, "node_id": "MDQ6VXNlcjcwMzU2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7035647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdavis-xyz", "html_url": "https://github.com/mdavis-xyz", "followers_url": "https://api.github.com/users/mdavis-xyz/followers", "following_url": "https://api.github.com/users/mdavis-xyz/following{/other_user}", "gists_url": "https://api.github.com/users/mdavis-xyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdavis-xyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdavis-xyz/subscriptions", "organizations_url": "https://api.github.com/users/mdavis-xyz/orgs", "repos_url": "https://api.github.com/users/mdavis-xyz/repos", "events_url": "https://api.github.com/users/mdavis-xyz/events{/privacy}", "received_events_url": "https://api.github.com/users/mdavis-xyz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-04-24T11:39:14Z", "updated_at": "2021-10-09T21:02:53Z", "closed_at": "2021-10-09T21:02:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Steps to Reproduce\r\n\r\n## With moto\r\n\r\n```\r\nimport boto3\r\nfrom moto import mock_dynamodb2\r\ntable_name = 'test-key-update'\r\n\r\nwith mock_dynamodb2():\r\n\r\n    client = boto3.client('dynamodb')\r\n\r\n    client.create_table(\r\n        TableName=table_name,\r\n        KeySchema=[{\"AttributeName\": \"forum_name\", \"KeyType\": \"HASH\"}],\r\n        AttributeDefinitions=[{\"AttributeName\": \"forum_name\", \"AttributeType\": \"S\"}],\r\n        )\r\n\r\n\r\n    client.update_item(\r\n        TableName=table_name,\r\n        Key={\r\n            'forum_name': {\r\n                'S': \"x\"\r\n            },\r\n        },\r\n        UpdateExpression=\"set forum_name=:New\",\r\n        ExpressionAttributeValues={\":New\": {\"S\": \"x\"}},\r\n    )\r\n```\r\n\r\nRun this, and then run the same thing again, but without `mock_dynamodb2()`.\r\n\r\n# Expected Behavior\r\n\r\nThe two exceptions are the same\r\n\r\n# Actual behavior\r\n\r\nMoto error:\r\n\r\n> botocore.exceptions.ClientError: An error occurred (ValidationException) when calling the UpdateItem operation: One or more parameter values were invalid: An AttributeValue may not contain an empty string\r\n\r\nBoto error:\r\n\r\n> botocore.exceptions.ClientError: An error occurred (ValidationException) when calling the UpdateItem operation: One or more parameter values were invalid: Cannot update attribute forum_name. This attribute is part of the key\r\n\r\n(Exact same error for range key update in boto by the way.)\r\n\r\n# Consequence\r\n\r\nThe purpose of moto is to test code that uses boto. In this case, if the code under test is faulty, moto gives a very misleading error.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3877/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3867", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3867/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3867/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3867/events", "html_url": "https://github.com/getmoto/moto/issues/3867", "id": 860918338, "node_id": "MDU6SXNzdWU4NjA5MTgzMzg=", "number": 3867, "title": "IoT list_principal_things should be return list of thingnames.", "user": {"login": "cm-iwata", "id": 38879253, "node_id": "MDQ6VXNlcjM4ODc5MjUz", "avatar_url": "https://avatars.githubusercontent.com/u/38879253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cm-iwata", "html_url": "https://github.com/cm-iwata", "followers_url": "https://api.github.com/users/cm-iwata/followers", "following_url": "https://api.github.com/users/cm-iwata/following{/other_user}", "gists_url": "https://api.github.com/users/cm-iwata/gists{/gist_id}", "starred_url": "https://api.github.com/users/cm-iwata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cm-iwata/subscriptions", "organizations_url": "https://api.github.com/users/cm-iwata/orgs", "repos_url": "https://api.github.com/users/cm-iwata/repos", "events_url": "https://api.github.com/users/cm-iwata/events{/privacy}", "received_events_url": "https://api.github.com/users/cm-iwata/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-04-19T05:42:40Z", "updated_at": "2021-04-19T12:35:09Z", "closed_at": "2021-04-19T12:35:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Summary\r\n\r\nIoT `list_principal_things` should be return list of thingnames.\r\n\r\nBut, moto will returns list of certification arn\r\n\r\n\r\n\r\n## Reproduction procedure\r\n\r\n### Use boto3\r\n\r\n\r\n\r\n```\r\n>>> import boto3\r\n>>> client = boto3.client('iot')\r\n>>> my_certification_arn = 'arn:aws:iot:ap-northeast-1:123456789012:cert/xxxxx'\r\n>>> res = client.list_principal_things(principal=my_certification_arn)\r\n>>> print(res['things'])\r\n['my-thing-name']\r\n```\r\n\r\n\r\n\r\n### Use moto\r\n\r\n```\r\n>>> import boto3\r\n>>> import moto\r\n>>> moto.mock_iot().start()\r\n>>> client = boto3.client('iot')\r\n>>> client.create_thing(thingName='my-thing-name')\r\n>>> res = client.create_keys_and_certificate()\r\n>>> my_certification_arn = res['certificateArn']\r\n>>> client.attach_thing_principal(thingName='my-thing-name',principal=my_certification_arn)\r\n>>> res = client.list_principal_things(principal=my_certification_arn)\r\n>>> print(res['things'])\r\n['arn:aws:iot:ap-northeast-1:1:cert/78a910bb69eae8d99bdd5e104a136a37576ab202871194f35a902e9033e6aab9']\r\n```\r\n\r\n\r\n\r\n## moto and boto version\r\n\r\n```\r\nboto3              1.17.53\r\nbotocore         1.20.53\r\nmoto                2.0.5\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3867/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3857", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3857/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3857/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3857/events", "html_url": "https://github.com/getmoto/moto/issues/3857", "id": 856394439, "node_id": "MDU6SXNzdWU4NTYzOTQ0Mzk=", "number": 3857, "title": "nextToken Pagination does not work for Iot list_job_executions_for_thing", "user": {"login": "rohit-dua", "id": 6825447, "node_id": "MDQ6VXNlcjY4MjU0NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6825447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohit-dua", "html_url": "https://github.com/rohit-dua", "followers_url": "https://api.github.com/users/rohit-dua/followers", "following_url": "https://api.github.com/users/rohit-dua/following{/other_user}", "gists_url": "https://api.github.com/users/rohit-dua/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohit-dua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohit-dua/subscriptions", "organizations_url": "https://api.github.com/users/rohit-dua/orgs", "repos_url": "https://api.github.com/users/rohit-dua/repos", "events_url": "https://api.github.com/users/rohit-dua/events{/privacy}", "received_events_url": "https://api.github.com/users/rohit-dua/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-04-12T22:03:19Z", "updated_at": "2021-11-07T12:00:00Z", "closed_at": "2021-11-07T12:00:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Issue\r\n\r\nThe nextToken param does not work for the function `list_job_executions_for_thing` in the iot service.\r\n\r\n### The Bug\r\n[This boolean condition](https://github.com/spulec/moto/blob/c9dd9cc7f9ffe6de600a39fbf028db805ed4a0c2/moto/iot/models.py#L1320) will always return True since the same variable `job_executions` is being overwritten in the line above. Hence the pagination will never work.\r\n\r\n### Solution\r\nChange the var `job_executions` to something like `job_executions_filtered` for the return value\r\n```\r\n        token = next_token\r\n        if token is None:\r\n            job_executions_filtered = job_executions[0:max_results]\r\n            next_token = str(max_results) if len(job_executions) > max_results else None\r\n        else:\r\n            token = int(token)\r\n            job_executions_filtered = job_executions[token : token + max_results]\r\n            next_token = (\r\n                str(token + max_results)\r\n                if len(job_executions) > token + max_results\r\n                else None\r\n            )\r\n\r\n        return job_executions_filtered, next_token\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3857/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3857/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3816", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3816/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3816/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3816/events", "html_url": "https://github.com/getmoto/moto/issues/3816", "id": 845701374, "node_id": "MDU6SXNzdWU4NDU3MDEzNzQ=", "number": 3816, "title": "Support service API call \"describe_cases\" requires caseIdList argument", "user": {"login": "kbalk", "id": 7536198, "node_id": "MDQ6VXNlcjc1MzYxOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7536198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbalk", "html_url": "https://github.com/kbalk", "followers_url": "https://api.github.com/users/kbalk/followers", "following_url": "https://api.github.com/users/kbalk/following{/other_user}", "gists_url": "https://api.github.com/users/kbalk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbalk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbalk/subscriptions", "organizations_url": "https://api.github.com/users/kbalk/orgs", "repos_url": "https://api.github.com/users/kbalk/repos", "events_url": "https://api.github.com/users/kbalk/events{/privacy}", "received_events_url": "https://api.github.com/users/kbalk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-03-31T02:41:51Z", "updated_at": "2021-03-31T12:23:28Z", "closed_at": "2021-03-31T12:18:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Description\r\n\r\nThe moto support service `describe_cases` requires a `caseIdList` argument, but this is actually an optional argument per the AWS CLI.  This \"requirement\" means there isn't a good way to get a list of the case IDs.\r\n\r\nPer the AWS CLI:  https://awscli.amazonaws.com/v2/documentation/api/latest/reference/support/describe-cases.html\r\n\r\n## Environment\r\n\r\nmoto version 2.0.3 (released today)\r\n\r\n## To Reproduce\r\n\r\nIn Window 1:\r\n```\r\npython -m pip install moto[server]\r\nmoto_server support\r\n```\r\n\r\nIn Window 2:\r\n```\r\n# Create a case:\r\nexport AWS_ACCESS_KEY_ID=test; export AWS_SECRET_ACCESS_KEY=test; aws --endpoint-url=\"http://localhost:5000\" support create-case --subject \"Moto test\" --communication-body \"This is a test, this is a test ...\"\r\n\r\n# List the case:\r\nexport AWS_ACCESS_KEY_ID=test; export AWS_SECRET_ACCESS_KEY=test; aws --endpoint-url=\"http://localhost:5000\" support describe-cases --after-time \"2021-03-29-T01:00:00.001Z\"\r\n```\r\n\r\nNote:  instead of `after-time`,  one of the other arguments (other than case-id-list) could be used, e.g. `language`.\r\n\r\n## Expected to happen\r\n\r\nExpected to see a list of cases that were created after the given `after-time`.\r\n\r\n## Actually happened\r\n\r\n```\r\nAn error occurred (500) when calling the DescribeCases operation (reached max retries: 2): <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\r\n<title>500 Internal Server Error</title>\r\n<h1>Internal Server Error</h1>\r\n<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>\r\n```\r\n\r\n## Notes\r\n\r\nThe problem can be seen here in `moto/support/models.py(202)describe_cases()`:\r\n```\r\ndef describe_cases(\r\n       self,\r\n       case_id_list,\r\n       display_id,\r\n       after_time,\r\n       before_time,\r\n       language,\r\n      include_communications,\r\n):\r\n      cases = []\r\n\t\r\n      for case in case_id_list:     <-----------------------------------\r\n            self.advance_case_status(case)\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3816/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3799", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3799/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3799/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3799/events", "html_url": "https://github.com/getmoto/moto/issues/3799", "id": 841169508, "node_id": "MDU6SXNzdWU4NDExNjk1MDg=", "number": 3799, "title": "Dynamo query case sensitivity doesn't behave as expected", "user": {"login": "davidpedrosa", "id": 12276969, "node_id": "MDQ6VXNlcjEyMjc2OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/12276969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidpedrosa", "html_url": "https://github.com/davidpedrosa", "followers_url": "https://api.github.com/users/davidpedrosa/followers", "following_url": "https://api.github.com/users/davidpedrosa/following{/other_user}", "gists_url": "https://api.github.com/users/davidpedrosa/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidpedrosa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidpedrosa/subscriptions", "organizations_url": "https://api.github.com/users/davidpedrosa/orgs", "repos_url": "https://api.github.com/users/davidpedrosa/repos", "events_url": "https://api.github.com/users/davidpedrosa/events{/privacy}", "received_events_url": "https://api.github.com/users/davidpedrosa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-03-25T17:49:57Z", "updated_at": "2021-03-25T20:23:12Z", "closed_at": "2021-03-25T20:23:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Dynamo query case sensitivity doesn't behave as expected\r\n\r\n**HINT:** I've been working on a fix. A PR will be coming soon.\r\n\r\nIn *KeyConditionExpression*  section in https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.query I don't see clearly stated that the comparison using BETWEEN keyword is not case sensitive, but it happens not to be. As for begins_with, it clearly establishes it is case-sensitive and lower-case must be used.\r\n\r\n## Testing it with Dynamo\r\n\r\nConsider the following example:\r\n\r\n```\r\nimport boto3\r\n\r\ndynamodb = boto3.client('dynamodb')\r\nTABLE_NAME = 'test_ignorecase'\r\ndynamodb.create_table(\r\n    TableName=TABLE_NAME,\r\n    KeySchema=[\r\n        {\"AttributeName\": \"forum_name\", \"KeyType\": \"HASH\"},\r\n        {\"AttributeName\": \"subject\", \"KeyType\": \"RANGE\"},\r\n    ],\r\n    AttributeDefinitions=[\r\n        {\"AttributeName\": \"forum_name\", \"AttributeType\": \"S\"},\r\n        {\"AttributeName\": \"subject\", \"AttributeType\": \"S\"},\r\n    ],\r\n    ProvisionedThroughput={\"ReadCapacityUnits\": 5, \"WriteCapacityUnits\": 5},\r\n)\r\nprint(\"Table {table} was created\".format(table=TABLE_NAME))\r\n\r\ndynamodb.put_item(TableName=TABLE_NAME, Item={\"forum_name\": {\"S\": \"the-key\"}, \"subject\": {\"S\": \"100\"}})\r\ndynamodb.put_item(TableName=TABLE_NAME, Item={\"forum_name\": {\"S\": \"the-key\"}, \"subject\": {\"S\": \"199\"}})\r\ndynamodb.put_item(TableName=TABLE_NAME, Item={\"forum_name\": {\"S\": \"the-key\"}, \"subject\": {\"S\": \"250\"}})\r\nprint(\"Some sample data was inserted\")\r\n\r\nresults = dynamodb.query(\r\n        TableName=TABLE_NAME,\r\n        KeyConditionExpression=\"forum_name = :forum_name and subject between :start  and  :end\",\r\n        ExpressionAttributeValues={\r\n            \":forum_name\": {\"S\": \"the-key\"},\r\n            \":start\": {\"S\": \"100\"},\r\n            \":end\": {\"S\": \"200\"},\r\n        }\r\n    )\r\nprint(\"between\", results[\"Count\"])\r\nresults = dynamodb.query(\r\n        TableName=TABLE_NAME,\r\n        KeyConditionExpression=\"forum_name = :forum_name and subject BETWEEN :start  AnD  :end\",\r\n        ExpressionAttributeValues={\r\n            \":forum_name\": {\"S\": \"the-key\"},\r\n            \":start\": {\"S\": \"100\"},\r\n            \":end\": {\"S\": \"200\"},\r\n        }\r\n    )\r\nprint(\"BETWEEN\", results[\"Count\"])\r\n\r\nresults = dynamodb.query(\r\n        TableName=TABLE_NAME,\r\n        KeyConditionExpression=\"forum_name = :forum_name AND begins_with(subject, :s)\",\r\n        ExpressionAttributeValues={\r\n            \":forum_name\": {\"S\": \"the-key\"},\r\n            \":s\": {\"S\": \"1\"},\r\n        }\r\n    )\r\nprint(\"begins_with\", results[\"Count\"])\r\n\r\nresults = dynamodb.query(\r\n        TableName=TABLE_NAME,\r\n        KeyConditionExpression=\"forum_name = :forum_name and BEGINS_WITH(subject, :subject )\",\r\n        ExpressionAttributeValues={\r\n            \":forum_name\": {\"S\": \"the-key\"},\r\n            \":subject\": {\"S\": \"10\"}\r\n        }\r\n    )\r\nprint(results[\"Count\"])\r\n```\r\nIt would print the following output:\r\n```\r\nTable test_ignorecase was created\r\nSome sample data was inserted\r\nbetween 2\r\nBETWEEN 2\r\nbegins_with 2\r\nTraceback (most recent call last):\r\n  File \"test-ignore-case.py\", line 65, in <module>\r\n    \":subject\": {\"S\": \"10\"}\r\n  File \"/home/david/dev/moto/venv/lib/python3.6/site-packages/botocore-1.20.2-py3.6.egg/botocore/client.py\", line 357, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/david/dev/moto/venv/lib/python3.6/site-packages/botocore-1.20.2-py3.6.egg/botocore/client.py\", line 676, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (ValidationException) when calling the Query operation: Invalid KeyConditionExpression: Invalid function name; function: BEGINS_WITH\r\n```\r\n\r\n## Testing it with moto\r\n\r\nIf I try this with moto (master branch, v1.3.4), this is what happens:\r\n\r\n- BETWEEN (upper-case): It works ok.\r\n- between clause (lower-case): It fails. I get 'NoneType' object is not callable\r\n- begins_with (lower-case): It works ok.\r\n- BEGINS_WITH (upper-case). It fails. I get IndexError: list index out of range\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3799/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3799/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3797", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3797/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3797/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3797/events", "html_url": "https://github.com/getmoto/moto/issues/3797", "id": 839939170, "node_id": "MDU6SXNzdWU4Mzk5MzkxNzA=", "number": 3797, "title": "mock_dynamodb2 cannot delete attribute as part of `update_item`", "user": {"login": "stpierre", "id": 632407, "node_id": "MDQ6VXNlcjYzMjQwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/632407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stpierre", "html_url": "https://github.com/stpierre", "followers_url": "https://api.github.com/users/stpierre/followers", "following_url": "https://api.github.com/users/stpierre/following{/other_user}", "gists_url": "https://api.github.com/users/stpierre/gists{/gist_id}", "starred_url": "https://api.github.com/users/stpierre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stpierre/subscriptions", "organizations_url": "https://api.github.com/users/stpierre/orgs", "repos_url": "https://api.github.com/users/stpierre/repos", "events_url": "https://api.github.com/users/stpierre/events{/privacy}", "received_events_url": "https://api.github.com/users/stpierre/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-03-24T17:06:12Z", "updated_at": "2021-06-24T05:02:25Z", "closed_at": "2021-06-23T15:53:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\nIn moto 2.0.2, it's no longer possible to delete an attribute with `AttributeUpdates` as part of an `update_item()` call. For instance:\r\n\r\n```python\r\nimport boto3\r\nimport moto\r\n\r\nwith moto.mock_dynamodb2():\r\n    name = \"TestTable\"\r\n    conn = boto3.client(\r\n        \"dynamodb\",\r\n        region_name=\"eu-west-2\",\r\n        aws_access_key_id=\"ak\",\r\n        aws_secret_access_key=\"sk\")\r\n    conn.create_table(\r\n        TableName=name,\r\n        AttributeDefinitions=[{\r\n            'AttributeName': 'name',\r\n            'AttributeType': 'S'\r\n        }],\r\n        KeySchema=[{\r\n            'AttributeName': 'name',\r\n            'KeyType': 'HASH'\r\n        }],\r\n    )\r\n\r\n    item_name = 'foo'\r\n    conn.put_item(\r\n        TableName=name, Item={\r\n            'name': {\r\n                'S': item_name\r\n            },\r\n            'extra': {\r\n                'S': 'bar'\r\n            }\r\n        })\r\n\r\n    conn.update_item(\r\n        TableName=name,\r\n        Key={'name': {\r\n            'S': item_name\r\n        }},\r\n        AttributeUpdates={'extra': {\r\n            'Action': 'DELETE'\r\n        }})\r\n```\r\n\r\nThis fails with:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"./test.py\", line 34, in <module>\r\n    conn.update_item(\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/client.py\", line 357, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/client.py\", line 662, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/client.py\", line 682, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/endpoint.py\", line 136, in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/endpoint.py\", line 253, in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/retryhandler.py\", line 183, in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/retryhandler.py\", line 250, in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/retryhandler.py\", line 269, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/retryhandler.py\", line 316, in __call__\r\n    checker_response = checker(attempt_number, response,\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/retryhandler.py\", line 222, in __call__\r\n    return self._check_caught_exception(\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/retryhandler.py\", line 359, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/endpoint.py\", line 197, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/moto/core/models.py\", line 363, in __call__\r\n    status, headers, body = response_callback(\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/moto/core/responses.py\", line 202, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/moto/core/responses.py\", line 312, in _dispatch\r\n    return self.call_action()\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/moto/core/utils.py\", line 259, in _wrapper\r\n    response = f(*args, **kwargs)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/moto/core/utils.py\", line 291, in _wrapper\r\n    response = f(*args, **kwargs)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/moto/dynamodb2/responses.py\", line 90, in call_action\r\n    response = getattr(self, endpoint)()\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/moto/dynamodb2/responses.py\", line 776, in update_item\r\n    item = self.dynamodb_backend.update_item(\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/moto/dynamodb2/models/__init__.py\", line 1309, in update_item\r\n    item.validate_no_empty_key_values(attribute_updates, table.key_attributes)\r\n  File \"/home/stpierre/moto-bug-demo/lib/python3.8/site-packages/moto/dynamodb2/models/__init__.py\", line 114, in validate_no_empty_key_values\r\n    new_value = next(iter(update_action[\"Value\"].values()))\r\nKeyError: 'Value'\r\n```\r\n\r\nSupplying a bogus placeholder `Value` key doesn't work, either; if you supply any value other than a set (`SS`) you get an error that you can't ADD a value; if you supply a set, it thinks it's supposed to delete the supplied values from the existing set, or failing that, set the value to a set. For instance, if you do:\r\n\r\n```python\r\n    conn.update_item(\r\n        TableName=name,\r\n        Key={'name': {\r\n            'S': item_name\r\n        }},\r\n        AttributeUpdates={'extra': {\r\n            'Value': {'SS': []},\r\n            'Action': 'DELETE'\r\n        }})\r\n```\r\n\r\n...then after the update, the value of the `extra` key will be the empty set.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3797/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3790", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3790/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3790/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3790/events", "html_url": "https://github.com/getmoto/moto/issues/3790", "id": 836353927, "node_id": "MDU6SXNzdWU4MzYzNTM5Mjc=", "number": 3790, "title": "Unable to request for a presigned URL", "user": {"login": "amarjandu", "id": 1947534, "node_id": "MDQ6VXNlcjE5NDc1MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1947534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amarjandu", "html_url": "https://github.com/amarjandu", "followers_url": "https://api.github.com/users/amarjandu/followers", "following_url": "https://api.github.com/users/amarjandu/following{/other_user}", "gists_url": "https://api.github.com/users/amarjandu/gists{/gist_id}", "starred_url": "https://api.github.com/users/amarjandu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amarjandu/subscriptions", "organizations_url": "https://api.github.com/users/amarjandu/orgs", "repos_url": "https://api.github.com/users/amarjandu/repos", "events_url": "https://api.github.com/users/amarjandu/events{/privacy}", "received_events_url": "https://api.github.com/users/amarjandu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-03-19T20:56:23Z", "updated_at": "2021-08-28T12:34:32Z", "closed_at": "2021-08-28T12:34:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am unable to perform a GET request on a presigned URL for a file that has been uploaded.\r\nI've attached a reproduction here: https://gist.github.com/amarjandu/77a7d8e33623bae1e4e5ba40dc043cb9\r\nThe py file that was executed in the reproduction is attached within the gist as well.\r\n\r\n\r\nMy expectation is that the file should be accessible from the presigned URL, this functionality was working on 1.3.13\r\nhttps://gist.github.com/amarjandu/fb4454e90924d3814772eca68d10dace\r\n\r\nThis seems like it has to do with the `self._matches` attribute that is used around the `_find_match` functionality in `moto/core/models.py` def https://github.com/spulec/moto/blob/74272ae51cd26397c5f8453ea85a5aeb09f40cdb/moto/core/models.py#L279\r\n\r\nThe ordering of the object when its enumerated looks off, the CallbackResponse that should be returned is not the first match that is found, its one of the `The method is not implemented` responses, seems like these should only be used as a last resort.\r\n\r\n<img width=\"1786\" alt=\"Screen Shot 2021-03-19 at 1 51 16 PM\" src=\"https://user-images.githubusercontent.com/1947534/111840775-2f12fc00-88ba-11eb-8d85-11887eaa12f6.png\">\r\n\r\nMoto Version: \r\n```\r\n(.venv) CBSEspecter:azul amar$ pip list | grep oto\r\nboto3              1.17.33\r\nbotocore           1.20.33\r\nmoto               2.0.2\r\n```\r\nI started a clean virtualenv and ran `pip install moto[all]==2.0.2`\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3790/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3790/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3787", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3787/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3787/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3787/events", "html_url": "https://github.com/getmoto/moto/issues/3787", "id": 835943503, "node_id": "MDU6SXNzdWU4MzU5NDM1MDM=", "number": 3787, "title": "Route53: creating a health check with type of CALCULATED fails", "user": {"login": "newtondev", "id": 2195600, "node_id": "MDQ6VXNlcjIxOTU2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/2195600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newtondev", "html_url": "https://github.com/newtondev", "followers_url": "https://api.github.com/users/newtondev/followers", "following_url": "https://api.github.com/users/newtondev/following{/other_user}", "gists_url": "https://api.github.com/users/newtondev/gists{/gist_id}", "starred_url": "https://api.github.com/users/newtondev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newtondev/subscriptions", "organizations_url": "https://api.github.com/users/newtondev/orgs", "repos_url": "https://api.github.com/users/newtondev/repos", "events_url": "https://api.github.com/users/newtondev/events{/privacy}", "received_events_url": "https://api.github.com/users/newtondev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-03-19T12:37:29Z", "updated_at": "2021-08-22T09:51:21Z", "closed_at": "2021-08-22T09:51:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to create a CALCULATED health check for aggregating health check alarms, the response from the moto library fails to parse. However when executing the same request to an AWS account it succeeds with the creation.\r\n\r\nVersions:\r\n- Python @ 3.8\r\n- Moto @ 2.0.2\r\n- Botocore @ 1.20.30\r\n\r\nExample test code:\r\n```\r\n@mock_route53\r\ndef test_create_calculated_health_check(self):\r\n    client = boto3.client('route53')\r\n\r\n    response = client.create_health_check(\r\n        CallerReference='test-route53-health-HealthCheck-ZHV123',\r\n        HealthCheckConfig={\r\n            'Type':             'CALCULATED',\r\n            'Inverted':         False,\r\n            'Disabled':         False,\r\n            'HealthThreshold':  1,\r\n            'ChildHealthChecks': [\r\n                '96f93979-70e9-4d55-b299-fab4db2931e6'\r\n            ]\r\n        },\r\n    )\r\n\r\n    self.assertIsNotNone(response)\r\n```\r\n\r\nStacktrace:\r\n```\r\n======================================================================\r\nERROR: test_create_calculated_health_check (__main__.HealthChecksTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/moto/core/models.py\", line 106, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"test_health_checks.py\", line 43, in test_create_calculated_health_check\r\n    response = client.create_health_check(\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/client.py\", line 357, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/client.py\", line 662, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/client.py\", line 682, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/endpoint.py\", line 134, in _send_request\r\n    success_response, exception = self._get_response(\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/endpoint.py\", line 166, in _get_response\r\n    success_response, exception = self._do_get_response(\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/endpoint.py\", line 217, in _do_get_response\r\n    parsed_response = parser.parse(\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 245, in parse\r\n    parsed = self._do_parse(response, shape)\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 809, in _do_parse\r\n    self._add_modeled_parse(response, shape, final_parsed)\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 818, in _add_modeled_parse\r\n    self._parse_payload(response, shape, member_shapes, final_parsed)\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 859, in _parse_payload\r\n    body_parsed = self._parse_shape(shape, original_parsed)\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 312, in _parse_shape\r\n    return handler(shape, node)\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 388, in _handle_structure\r\n    parsed[member_name] = self._parse_shape(\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 312, in _parse_shape\r\n    return handler(shape, node)\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 388, in _handle_structure\r\n    parsed[member_name] = self._parse_shape(\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 312, in _parse_shape\r\n    return handler(shape, node)\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 388, in _handle_structure\r\n    parsed[member_name] = self._parse_shape(\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 312, in _parse_shape\r\n    return handler(shape, node)\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 174, in _get_text_content\r\n    return func(self, shape, text)\r\n  File \"/Users/craignewton/insided/ops-10/insided/community-setup/venv/lib/python3.8/site-packages/botocore/parsers.py\", line 486, in _handle_integer\r\n    return int(text)\r\nValueError: invalid literal for int() with base 10: 'None'\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3787/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3787/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3780", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3780/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3780/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3780/events", "html_url": "https://github.com/getmoto/moto/issues/3780", "id": 834620273, "node_id": "MDU6SXNzdWU4MzQ2MjAyNzM=", "number": 3780, "title": "Moto fails when event bridge client with list_rules invoked", "user": {"login": "dashsatish", "id": 65226700, "node_id": "MDQ6VXNlcjY1MjI2NzAw", "avatar_url": "https://avatars.githubusercontent.com/u/65226700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dashsatish", "html_url": "https://github.com/dashsatish", "followers_url": "https://api.github.com/users/dashsatish/followers", "following_url": "https://api.github.com/users/dashsatish/following{/other_user}", "gists_url": "https://api.github.com/users/dashsatish/gists{/gist_id}", "starred_url": "https://api.github.com/users/dashsatish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dashsatish/subscriptions", "organizations_url": "https://api.github.com/users/dashsatish/orgs", "repos_url": "https://api.github.com/users/dashsatish/repos", "events_url": "https://api.github.com/users/dashsatish/events{/privacy}", "received_events_url": "https://api.github.com/users/dashsatish/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-03-18T10:22:29Z", "updated_at": "2021-10-11T19:16:35Z", "closed_at": "2021-10-11T19:16:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nMoto fails when event bridge client's `list_rules` invoked with `Limit` parameter\r\n\r\n**Failure:**\r\n```\r\nself = <moto.events.models.EventsBackend object at 0x10cfd3df0>, index = 1\r\n\r\n    def _gen_next_token(self, index):\r\n>       token = os.urandom(128).encode(\"base64\")\r\nE       AttributeError: 'bytes' object has no attribute 'encode'\r\n```\r\n\r\n**How to reproduce:**\r\n```\r\nfrom moto import mock_events\r\nimport boto3\r\nwith mock_events():\r\n    ev = boto3.client(\"events\")\r\n    ev.put_rule(Name=\"foo\", ScheduleExpression=\"rate(1 day)\")\r\n    for i in range(5):\r\n        ev.put_rule(Name=f\"local-rule{i}\", ScheduleExpression=\"rate(1 day)\")\r\n    res = ev.list_rules(NamePrefix=\"foo\", Limit=2)\r\n    print(res)\r\n\r\n\r\n{\"message\": \"Found credentials in environment variables.\", \"name\": \"botocore.credentials\", \"pathname\": \"***********/lib/python3.8/site-packages/botocore/credentials.py\", \"filename\": \"credentials.py\", \"module\": \"credentials\", \"exc_text\": null, \"stack_info\": null, \"created\": 1616062235.3130748, \"thread\": 4477029824, \"process\": 57015, \"timestamp\": \"2021-03-18T10:10:35.313075+00:00\", \"thread_name\": \"MainThread\", \"process_name\": \"MainProcess\", \"level_name\": \"INFO\", \"level_no\": 20, \"func_name\": \"load\"}\r\n\r\n{'RuleArn': 'arn:aws:events:us-east-1:111111111111:rule/foo', 'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n\r\nTraceback (most recent call last):\r\nFile \"<stdin>\", line 5, in <module>\r\nFile \"***********/lib/python3.8/site-packages/botocore/client.py\", line 357, in _api_call\r\nreturn self._make_api_call(operation_name, kwargs)\r\nFile \"***********/lib/python3.8/site-packages/botocore/client.py\", line 662, in _make_api_call\r\nhttp, parsed_response = self._make_request(\r\n    File \"***********/lib/python3.8/site-packages/botocore/client.py\", line 682, in _make_request\r\nreturn self._endpoint.make_request(operation_model, request_dict)\r\nFile \"***********/lib/python3.8/site-packages/botocore/endpoint.py\", line 102, in make_request\r\nreturn self._send_request(request_dict, operation_model)\r\nFile \"***********/lib/python3.8/site-packages/botocore/endpoint.py\", line 136, in _send_request\r\nwhile self._needs_retry(attempts, operation_model, request_dict,\r\n                        File \"***********/lib/python3.8/site-packages/botocore/endpoint.py\", line 253, in _needs_retry\r\nresponses = self._event_emitter.emit(\r\nFile \"***********/lib/python3.8/site-packages/botocore/hooks.py\", line 356, in emit\r\nreturn self._emitter.emit(aliased_event_name, **kwargs)\r\nFile \"***********/lib/python3.8/site-packages/botocore/hooks.py\", line 228, in emit\r\nreturn self._emit(event_name, kwargs)\r\nFile \"***********/lib/python3.8/site-packages/botocore/hooks.py\", line 211, in _emit\r\nresponse = handler(**kwargs)\r\nFile \"***********/lib/python3.8/site-packages/botocore/retryhandler.py\", line 183, in __call__\r\nif self._checker(attempts, response, caught_exception):\r\nFile \"***********/lib/python3.8/site-packages/botocore/retryhandler.py\", line 250, in __call__\r\nshould_retry = self._should_retry(attempt_number, response,\r\n                                  File \"***********/lib/python3.8/site-packages/botocore/retryhandler.py\", line 269, in _should_retry\r\nreturn self._checker(attempt_number, response, caught_exception)\r\nFile \"***********/lib/python3.8/site-packages/botocore/retryhandler.py\", line 316, in __call__\r\nchecker_response = checker(attempt_number, response,\r\n                           File \"***********/lib/python3.8/site-packages/botocore/retryhandler.py\", line 222, in __call__\r\nreturn self._check_caught_exception(\r\n    File \"***********/lib/python3.8/site-packages/botocore/retryhandler.py\", line 359, in _check_caught_exception\r\nraise caught_exception\r\nFile \"***********/lib/python3.8/site-packages/botocore/endpoint.py\", line 197, in _do_get_response\r\nresponses = self._event_emitter.emit(event_name, request=request)\r\nFile \"***********/lib/python3.8/site-packages/botocore/hooks.py\", line 356, in emit\r\nreturn self._emitter.emit(aliased_event_name, **kwargs)\r\nFile \"***********/lib/python3.8/site-packages/botocore/hooks.py\", line 228, in emit\r\nreturn self._emit(event_name, kwargs)\r\nFile \"***********/lib/python3.8/site-packages/botocore/hooks.py\", line 211, in _emit\r\nresponse = handler(**kwargs)\r\nFile \"***********/lib/python3.8/site-packages/moto/core/models.py\", line 363, in __call__\r\nstatus, headers, body = response_callback(\r\n    File \"***********/lib/python3.8/site-packages/moto/core/responses.py\", line 202, in dispatch\r\nreturn cls()._dispatch(*args, **kwargs)\r\nFile \"***********/lib/python3.8/site-packages/moto/core/responses.py\", line 312, in _dispatch\r\nreturn self.call_action()\r\nFile \"***********/lib/python3.8/site-packages/moto/core/responses.py\", line 402, in call_action\r\nresponse = method()\r\nFile \"***********/lib/python3.8/site-packages/moto/events/responses.py\", line 121, in list_rules\r\nrules = self.events_backend.list_rules(prefix, next_token, limit)\r\nFile \"***********/lib/python3.8/site-packages/moto/events/models.py\", line 639, in list_rules\r\nstart_index, end_index, new_next_token = self._process_token_and_limits(\r\n    File \"***********/lib/python3.8/site-packages/moto/events/models.py\", line 563, in _process_token_and_limits\r\nnew_next_token = self._gen_next_token(end_index)\r\nFile \"***********/lib/python3.8/site-packages/moto/events/models.py\", line 547, in _gen_next_token\r\ntoken = os.urandom(128).encode(\"base64\")\r\nAttributeError: 'bytes' object has no attribute 'encode'\r\n```\r\n\r\nWithout the `Limit` parameter it works properly.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3780/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3780/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3772", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3772/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3772/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3772/events", "html_url": "https://github.com/getmoto/moto/issues/3772", "id": 831304291, "node_id": "MDU6SXNzdWU4MzEzMDQyOTE=", "number": 3772, "title": "Moto reset API fails with an UnicodeDecodeError in moto 2.x ", "user": {"login": "garribas", "id": 290662, "node_id": "MDQ6VXNlcjI5MDY2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/290662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garribas", "html_url": "https://github.com/garribas", "followers_url": "https://api.github.com/users/garribas/followers", "following_url": "https://api.github.com/users/garribas/following{/other_user}", "gists_url": "https://api.github.com/users/garribas/gists{/gist_id}", "starred_url": "https://api.github.com/users/garribas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garribas/subscriptions", "organizations_url": "https://api.github.com/users/garribas/orgs", "repos_url": "https://api.github.com/users/garribas/repos", "events_url": "https://api.github.com/users/garribas/events{/privacy}", "received_events_url": "https://api.github.com/users/garribas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-03-15T00:24:21Z", "updated_at": "2021-04-01T16:39:47Z", "closed_at": "2021-04-01T08:02:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Reset API is documented here: http://docs.getmoto.org/en/latest/docs/moto_apis.html\r\n\r\nIn the 2.x releases it fails with an UnicodeDecodeError, works fine in `1.3.16` and previous versions.\r\n\r\nTest case:\r\n```\r\nimport requests\r\n\r\n@mock_s3\r\nclass TestMotoReset(unittest.TestCase):\r\n\r\n    def test_reset(self):\r\n        requests.post(\"http://motoapi.amazonaws.com/moto-api/reset\")\r\n...\r\n```\r\n\r\nStack trace:\r\n```\r\n================================================================================= test session starts =================================================================================\r\nplatform linux -- Python 3.6.9, pytest-5.4.2, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python\r\ncollected 1 item                                                                                                                                                                      \r\n\r\nsrc/test_moto_reset.py::TestMotoReset::test_reset FAILED                                                                                                                        [100%]\r\n\r\n====================================================================================== FAILURES =======================================================================================\r\n______________________________________________________________________________ TestMotoReset.test_reset _______________________________________________________________________________\r\n\r\nself = <src.test_moto_reset.TestMotoReset testMethod=test_reset>\r\n\r\n    def test_reset(self):\r\n>       requests.post(\"http://motoapi.amazonaws.com/moto-api/reset\")\r\n\r\nsrc/test_moto_reset.py:26: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/local/lib/python3.6/dist-packages/requests/api.py:119: in post\r\n    return request('post', url, data=data, json=json, **kwargs)\r\n/usr/local/lib/python3.6/dist-packages/requests/api.py:61: in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n/usr/local/lib/python3.6/dist-packages/requests/sessions.py:542: in request\r\n    resp = self.send(prep, **send_kwargs)\r\n/usr/local/lib/python3.6/dist-packages/requests/sessions.py:655: in send\r\n    r = adapter.send(request, **kwargs)\r\n/usr/local/lib/python3.6/dist-packages/responses.py:733: in unbound_on_send\r\n    return self._on_request(adapter, request, *a, **kwargs)\r\n/usr/local/lib/python3.6/dist-packages/responses.py:716: in _on_request\r\n    response = adapter.build_response(request, match.get_response(request))\r\n/usr/local/lib/python3.6/dist-packages/moto/core/models.py:231: in get_response\r\n    result = self.callback(request)\r\n/usr/local/lib/python3.6/dist-packages/moto/core/utils.py:190: in __call__\r\n    result = self.callback(request, request.url, request.headers)\r\n/usr/local/lib/python3.6/dist-packages/moto/core/responses.py:705: in reset_response\r\n    moto_api_backend.reset()\r\n/usr/local/lib/python3.6/dist-packages/moto/core/models.py:842: in reset\r\n    for name, backends_ in backends.named_backends():\r\n/usr/local/lib/python3.6/dist-packages/moto/backends.py:98: in named_backends\r\n    yield name, _import_backend(module_name, backends_name)\r\n/usr/local/lib/python3.6/dist-packages/moto/backends.py:87: in _import_backend\r\n    module = importlib.import_module(\"moto.\" + module_name)\r\n/usr/lib/python3.6/importlib/__init__.py:126: in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n<frozen importlib._bootstrap>:994: in _gcd_import\r\n    ???\r\n<frozen importlib._bootstrap>:971: in _find_and_load\r\n    ???\r\n<frozen importlib._bootstrap>:955: in _find_and_load_unlocked\r\n    ???\r\n<frozen importlib._bootstrap>:665: in _load_unlocked\r\n    ???\r\n<frozen importlib._bootstrap_external>:678: in exec_module\r\n    ???\r\n<frozen importlib._bootstrap>:219: in _call_with_frames_removed\r\n    ???\r\n/usr/local/lib/python3.6/dist-packages/moto/support/__init__.py:2: in <module>\r\n    from .models import support_backends\r\n/usr/local/lib/python3.6/dist-packages/moto/support/models.py:9: in <module>\r\n    ADVISOR_CHECKS = load_resource(resource_filename(__name__, checks_json))\r\n/usr/local/lib/python3.6/dist-packages/moto/utilities/utils.py:22: in load_resource\r\n    return json.load(f)\r\n/usr/lib/python3.6/json/__init__.py:296: in load\r\n    return loads(fp.read(),\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <encodings.ascii.IncrementalDecoder object at 0x7f8cac461cf8>\r\ninput = b'{\\n  \"checks\": [\\n    {\\n      \"id\": \"Qch7DwouX1\",\\n      \"name\": \"Low Utilization Amazon EC2 Instances\",\\n      \"de...\\n        \"Limit Name\",\\n        \"Limit Amount\",\\n        \"Current Usage\",\\n        \"Status\"\\n      ]\\n    }\\n  ]\\n}\\n'\r\nfinal = True\r\n\r\n    def decode(self, input, final=False):\r\n>       return codecs.ascii_decode(input, self.errors)[0]\r\nE       UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 13950: ordinal not in range(128)\r\n\r\n/usr/lib/python3.6/encodings/ascii.py:26: UnicodeDecodeError\r\n------------------------------------------------------------ generated xml file: /opt/service/test-output/test_results.xml ------------------------------------------------------------\r\n=============================================================================== short test summary info ===============================================================================\r\nFAILED src/test_moto_reset.py::TestMotoReset::test_reset - UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 13950: ordinal not in range(128)\r\n================================================================================= 1 failed in 10.10s ==================================================================================\r\n\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3772/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3772/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3760", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3760/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3760/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3760/events", "html_url": "https://github.com/getmoto/moto/issues/3760", "id": 826140045, "node_id": "MDU6SXNzdWU4MjYxNDAwNDU=", "number": 3760, "title": "mock_dynamodb2 fails to update field that is used in a Global Secondary Index", "user": {"login": "h0wser", "id": 3480407, "node_id": "MDQ6VXNlcjM0ODA0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3480407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h0wser", "html_url": "https://github.com/h0wser", "followers_url": "https://api.github.com/users/h0wser/followers", "following_url": "https://api.github.com/users/h0wser/following{/other_user}", "gists_url": "https://api.github.com/users/h0wser/gists{/gist_id}", "starred_url": "https://api.github.com/users/h0wser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h0wser/subscriptions", "organizations_url": "https://api.github.com/users/h0wser/orgs", "repos_url": "https://api.github.com/users/h0wser/repos", "events_url": "https://api.github.com/users/h0wser/events{/privacy}", "received_events_url": "https://api.github.com/users/h0wser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2021-03-09T15:51:37Z", "updated_at": "2021-06-23T15:41:54Z", "closed_at": "2021-06-17T13:07:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the newest version of moto 2.0.1, when calling update_item on a field that is used as a key in a GSI, the operation triggers a ValidationException saying that an AttributeValue may not contain an empty string.\r\n\r\n\r\n**how to reproduce the issue**\r\n\r\nSave the following code to .py file and run.\r\n\r\n``` python\r\nfrom moto import mock_dynamodb2\r\nimport boto3\r\n\r\nwith mock_dynamodb2():\r\n    name = \"TestTable\"\r\n    conn = boto3.client(\"dynamodb\", region_name=\"eu-west-2\", aws_access_key_id=\"ak\", aws_secret_access_key=\"sk\")\r\n    conn.create_table(\r\n        TableName=name,\r\n        KeySchema=[{\"AttributeName\": \"main_key\", \"KeyType\": \"HASH\"}],\r\n        AttributeDefinitions=[{\"AttributeName\": \"main_key\", \"AttributeType\": \"S\"},\r\n            {\"AttributeName\": \"index_key\", \"AttributeType\": \"S\"}],\r\n        ProvisionedThroughput={\"ReadCapacityUnits\": 5, \"WriteCapacityUnits\": 5},\r\n        GlobalSecondaryIndexes=[\r\n            {\r\n                \"IndexName\": \"test_index\",\r\n                \"KeySchema\": [\r\n                    {\r\n                        \"AttributeName\": \"index_key\",\r\n                        \"KeyType\": \"HASH\"\r\n                    }\r\n                ],\r\n                \"Projection\": {\r\n                    \"ProjectionType\": \"ALL\",\r\n                },\r\n                \"ProvisionedThroughput\": {\"ReadCapacityUnits\": 1, \"WriteCapacityUnits\": 1}\r\n            }\r\n        ]\r\n    )\r\n\r\n    conn.put_item(\r\n        TableName=name,\r\n        Item={\r\n            \"main_key\": {\"S\": \"testkey1\"},\r\n            \"extra_data\": {\"S\": \"testdata\"},\r\n            \"index_key\": {\"S\": \"indexkey1\"}\r\n        },\r\n    )\r\n\r\n    resp = conn.update_item(\r\n        TableName=name,\r\n        Key={\"main_key\": {\"S\": \"testkey1\"}},\r\n        UpdateExpression=\"set index_key=:new_index_key\",\r\n        ExpressionAttributeValues={\":new_index_key\": {\"S\": \"new_value\"}}\r\n    )\r\n\r\n    print(resp)\r\n```\r\n\r\n**what you expected to happen**\r\nThat the attribute index_key updates successfully.\r\n\r\nI have validated that this code runs correctly against dynamodb proper without issues. It also works under the 1.3.6 version of moto.\r\n\r\n**what actually happens**\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 41, in <module>\r\n    resp = conn.update_item(\r\n  File \"/home/h0wser/.local/lib/python3.8/site-packages/botocore/client.py\", line 357, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/h0wser/.local/lib/python3.8/site-packages/botocore/client.py\", line 676, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (ValidationException) when calling the UpdateItem operation: One or more parameter values were invalid: An AttributeValue may not contain an empty string\r\n```\r\n\r\n**what version of Moto you're using**\r\n```\r\nboto==2.49.0\r\nboto3==1.17.22\r\nbotocore==1.20.22\r\nmoto==2.0.1\r\n```\r\nInstalled via pip.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3760/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3760/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3749", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3749/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3749/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3749/events", "html_url": "https://github.com/getmoto/moto/issues/3749", "id": 822479697, "node_id": "MDU6SXNzdWU4MjI0Nzk2OTc=", "number": 3749, "title": "Kinesis: NumberFormatException when unmarshall ApproximateArrivalTimestamp in response", "user": {"login": "jbielak", "id": 36383582, "node_id": "MDQ6VXNlcjM2MzgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/36383582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbielak", "html_url": "https://github.com/jbielak", "followers_url": "https://api.github.com/users/jbielak/followers", "following_url": "https://api.github.com/users/jbielak/following{/other_user}", "gists_url": "https://api.github.com/users/jbielak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbielak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbielak/subscriptions", "organizations_url": "https://api.github.com/users/jbielak/orgs", "repos_url": "https://api.github.com/users/jbielak/repos", "events_url": "https://api.github.com/users/jbielak/events{/privacy}", "received_events_url": "https://api.github.com/users/jbielak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2021-03-04T20:26:53Z", "updated_at": "2021-03-11T09:40:46Z", "closed_at": "2021-03-11T08:54:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Context\r\nI use moto server running in Docker to mock kinesis in Java integration tests, however I'm not able to get records from Kinesis mock in my tests.\r\n\r\nI get following error:\r\n- `software.amazon.awssdk.core.exception.SdkClientException: Unable to unmarshall response (Unable to parse date : 2021-03-04T19:57:14.948064). Response Code: 200, Response Text: OK`\r\n- `Caused by: java.lang.NumberFormatException: Character array is missing \"e\" notation exponential mark`\r\n\r\n## Expected Behavior\r\nI would like to have `software.amazon.awssdk.services.kinesis.model.GetRecordsResponse` returned by AWS Java SDK v2 from Kinesis client.\r\n\r\nGet records worked for me when I tried to use boto3 in Python and when I use AWS CLI  I get below result:\r\n```\r\n{\r\n    \"Records\": [\r\n        {\r\n            \"SequenceNumber\": \"1\",\r\n            \"ApproximateArrivalTimestamp\": \"2021-03-04T19:57:14.948064\",\r\n            \"Data\": \"c29tZV9kYXRh\",\r\n            \"PartitionKey\": \"548f6933-5dd3-4652-8743-1014ec361279%\"\r\n        }\r\n    ],\r\n    \"NextShardIterator\": \"dGVzdC10b3lvdGEtaW5nZXN0aW9uLXN0cmVhbTpzaGFyZElkLTAwMDAwMDAwMDAwMDoy\\n\",\r\n    \"MillisBehindLatest\": 0\r\n}\r\n```\r\n\r\nBelow you can see example get records response described in [Kinesis docs](https://docs.aws.amazon.com/streams/latest/dev/fundamental-stream.html), you can see that `ApproximateArrivalTimestamp` has different format.\r\n\r\n```\r\n{\r\n  \"Records\":[ {\r\n    \"Data\":\"dGVzdGRhdGE=\",\r\n    \"PartitionKey\":\"123\u201d,\r\n    \"ApproximateArrivalTimestamp\": 1.441215410867E9,\r\n    \"SequenceNumber\":\"49544985256907370027570885864065577703022652638596431874\"\r\n  } ],\r\n  \"MillisBehindLatest\":24000,\r\n  \"NextShardIterator\":\"AAAAAAAAAAEDOW3ugseWPE4503kqN1yN1UaodY8unE0sYslMUmC6lX9hlig5+t4RtZM0/tALfiI4QGjunVgJvQsjxjh2aLyxaAaPr+LaoENQ7eVs4EdYXgKyThTZGPcca2fVXYJWL3yafv9dsDwsYVedI66dbMZFC8rPMWc797zxQkv4pSKvPOZvrUIudb8UkH3VMzx58Is=\"\r\n}\r\n```\r\n\r\n## Current behavior:\r\nFull stack trace:\r\n```\r\nsoftware.amazon.awssdk.core.exception.SdkClientException: Unable to unmarshall response (Unable to parse date : 2021-03-04T19:57:14.948064). Response Code: 200, Response Text: OK\r\n\r\n\tat software.amazon.awssdk.core.exception.SdkClientException$BuilderImpl.build(SdkClientException.java:98)\r\n\tat software.amazon.awssdk.core.internal.http.CombinedResponseHandler.handleSuccessResponse(CombinedResponseHandler.java:108)\r\n\tat software.amazon.awssdk.core.internal.http.CombinedResponseHandler.handleResponse(CombinedResponseHandler.java:72)\r\n\tat software.amazon.awssdk.core.internal.http.CombinedResponseHandler.handle(CombinedResponseHandler.java:59)\r\n\tat software.amazon.awssdk.core.internal.http.CombinedResponseHandler.handle(CombinedResponseHandler.java:40)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.HandleResponseStage.execute(HandleResponseStage.java:40)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.HandleResponseStage.execute(HandleResponseStage.java:30)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptTimeoutTrackingStage.execute(ApiCallAttemptTimeoutTrackingStage.java:73)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptTimeoutTrackingStage.execute(ApiCallAttemptTimeoutTrackingStage.java:42)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.TimeoutExceptionHandlingStage.execute(TimeoutExceptionHandlingStage.java:78)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.TimeoutExceptionHandlingStage.execute(TimeoutExceptionHandlingStage.java:40)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptMetricCollectionStage.execute(ApiCallAttemptMetricCollectionStage.java:50)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptMetricCollectionStage.execute(ApiCallAttemptMetricCollectionStage.java:36)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:64)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:34)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)\r\n\tat software.amazon.awssdk.core.internal.http.StreamManagingStage.execute(StreamManagingStage.java:56)\r\n\tat software.amazon.awssdk.core.internal.http.StreamManagingStage.execute(StreamManagingStage.java:36)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.executeWithTimer(ApiCallTimeoutTrackingStage.java:80)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(ApiCallTimeoutTrackingStage.java:60)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(ApiCallTimeoutTrackingStage.java:42)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallMetricCollectionStage.execute(ApiCallMetricCollectionStage.java:48)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallMetricCollectionStage.execute(ApiCallMetricCollectionStage.java:31)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(ExecutionFailureExceptionReportingStage.java:37)\r\n\tat software.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(ExecutionFailureExceptionReportingStage.java:26)\r\n\tat software.amazon.awssdk.core.internal.http.AmazonSyncHttpClient$RequestExecutionBuilderImpl.execute(AmazonSyncHttpClient.java:193)\r\n\tat software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.invoke(BaseSyncClientHandler.java:133)\r\n\tat software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.doExecute(BaseSyncClientHandler.java:159)\r\n\tat software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.lambda$execute$1(BaseSyncClientHandler.java:112)\r\n\tat software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.measureApiCallSuccess(BaseSyncClientHandler.java:167)\r\n\tat software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.execute(BaseSyncClientHandler.java:94)\r\n\tat software.amazon.awssdk.core.client.handler.SdkSyncClientHandler.execute(SdkSyncClientHandler.java:45)\r\n\tat software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler.execute(AwsSyncClientHandler.java:55)\r\n\tat software.amazon.awssdk.services.kinesis.DefaultKinesisClient.getRecords(DefaultKinesisClient.java:1051)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:675)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:125)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:132)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:124)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:74)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:104)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:62)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:43)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:35)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:202)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:198)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)\r\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\r\nCaused by: software.amazon.awssdk.core.exception.SdkClientException: Unable to parse date : 2021-03-04T19:57:14.948064\r\n\tat software.amazon.awssdk.core.exception.SdkClientException$BuilderImpl.build(SdkClientException.java:98)\r\n\tat software.amazon.awssdk.protocols.core.StringToInstant.lambda$safeParseDate$0(StringToInstant.java:77)\r\n\tat software.amazon.awssdk.protocols.core.StringToInstant.convert(StringToInstant.java:54)\r\n\tat software.amazon.awssdk.protocols.core.StringToInstant.convert(StringToInstant.java:32)\r\n\tat software.amazon.awssdk.protocols.json.internal.unmarshall.JsonProtocolUnmarshaller$SimpleTypeJsonUnmarshaller.unmarshall(JsonProtocolUnmarshaller.java:161)\r\n\tat software.amazon.awssdk.protocols.json.internal.unmarshall.JsonProtocolUnmarshaller.unmarshallStructured(JsonProtocolUnmarshaller.java:213)\r\n\tat software.amazon.awssdk.protocols.json.internal.unmarshall.JsonProtocolUnmarshaller.unmarshallStructured(JsonProtocolUnmarshaller.java:115)\r\n\tat software.amazon.awssdk.protocols.json.internal.unmarshall.JsonProtocolUnmarshaller.lambda$unmarshallList$2(JsonProtocolUnmarshaller.java:144)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)\r\n\tat software.amazon.awssdk.protocols.json.internal.unmarshall.JsonProtocolUnmarshaller.unmarshallList(JsonProtocolUnmarshaller.java:146)\r\n\tat software.amazon.awssdk.protocols.json.internal.unmarshall.JsonProtocolUnmarshaller.unmarshallStructured(JsonProtocolUnmarshaller.java:213)\r\n\tat software.amazon.awssdk.protocols.json.internal.unmarshall.JsonProtocolUnmarshaller.unmarshall(JsonProtocolUnmarshaller.java:199)\r\n\tat software.amazon.awssdk.protocols.json.internal.unmarshall.JsonProtocolUnmarshaller.unmarshall(JsonProtocolUnmarshaller.java:169)\r\n\tat software.amazon.awssdk.protocols.json.internal.unmarshall.JsonResponseHandler.handle(JsonResponseHandler.java:82)\r\n\tat software.amazon.awssdk.protocols.json.internal.unmarshall.JsonResponseHandler.handle(JsonResponseHandler.java:36)\r\n\tat software.amazon.awssdk.protocols.json.internal.unmarshall.AwsJsonResponseHandler.handle(AwsJsonResponseHandler.java:44)\r\n\tat software.amazon.awssdk.core.http.MetricCollectingHttpResponseHandler.lambda$handle$0(MetricCollectingHttpResponseHandler.java:52)\r\n\tat software.amazon.awssdk.core.internal.util.MetricUtils.measureDurationUnsafe(MetricUtils.java:64)\r\n\tat software.amazon.awssdk.core.http.MetricCollectingHttpResponseHandler.handle(MetricCollectingHttpResponseHandler.java:52)\r\n\tat software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler$Crc32ValidationResponseHandler.handle(AwsSyncClientHandler.java:94)\r\n\tat software.amazon.awssdk.core.internal.handler.BaseClientHandler.lambda$resultTransformationResponseHandler$7(BaseClientHandler.java:269)\r\n\tat software.amazon.awssdk.core.internal.http.CombinedResponseHandler.handleSuccessResponse(CombinedResponseHandler.java:97)\r\n\t... 100 more\r\nCaused by: java.lang.NumberFormatException: Character array is missing \"e\" notation exponential mark.\r\n\tat java.base/java.math.BigDecimal.<init>(BigDecimal.java:577)\r\n\tat java.base/java.math.BigDecimal.<init>(BigDecimal.java:401)\r\n\tat java.base/java.math.BigDecimal.<init>(BigDecimal.java:834)\r\n\tat software.amazon.awssdk.utils.DateUtils.parseUnixTimestampInstant(DateUtils.java:135)\r\n\tat software.amazon.awssdk.protocols.core.StringToInstant.lambda$safeParseDate$0(StringToInstant.java:72)\r\n\t... 126 more\r\n\r\nProcess finished with exit code 255\r\n```\r\n## Environment\r\n- moto  2.0.1 running as server in Docker container\r\n- AWS Java SDK 2.16.11\r\n- Java 8\r\n- macOS Catalina 10.15.3\r\n\r\n## Reproduce\r\n1. Run moto Kinesis in Docker\r\n2. Create stream\r\n3. Put record to stream\r\n4. In Java App invoke `getRecords()` on Kinesis Client - [example code](https://docs.aws.amazon.com/code-samples/latest/catalog/javav2-kinesis-src-main-java-com-example-kinesis-GetRecords.java.html)\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3749/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3749/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3748", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3748/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3748/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3748/events", "html_url": "https://github.com/getmoto/moto/issues/3748", "id": 822337712, "node_id": "MDU6SXNzdWU4MjIzMzc3MTI=", "number": 3748, "title": "Creating an auto scaling group removes  the previously existing instances from the load balancer", "user": {"login": "gipi", "id": 1107413, "node_id": "MDQ6VXNlcjExMDc0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1107413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gipi", "html_url": "https://github.com/gipi", "followers_url": "https://api.github.com/users/gipi/followers", "following_url": "https://api.github.com/users/gipi/following{/other_user}", "gists_url": "https://api.github.com/users/gipi/gists{/gist_id}", "starred_url": "https://api.github.com/users/gipi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gipi/subscriptions", "organizations_url": "https://api.github.com/users/gipi/orgs", "repos_url": "https://api.github.com/users/gipi/repos", "events_url": "https://api.github.com/users/gipi/events{/privacy}", "received_events_url": "https://api.github.com/users/gipi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-03-04T17:18:54Z", "updated_at": "2021-04-30T15:25:38Z", "closed_at": "2021-04-30T15:25:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm experiencing a weird behaviour with ``moto`` trying to unit test some fabric scripts used to manage code on machines under a load balancer: for the real setup I'm using ``ansible`` and i'm creating a couple of machines, registering them when the load balancer is created; at this point I'm also associating an autoscaling group to the same load balancer. On the real AWS, querying with ``describe_load_balancers()`` the same load balancer I obtain two sets of machines, each one associated with a \"Reservation\".\r\n\r\nWith ``moto`` instead the ``create_auto_scaling_group()`` removes the previous instances and I obtain only one set of machines, i.e. the machines associated with the autoscaling group.\r\n\r\nIt's not clear to me if it's really a bug of ``moto`` but since this is something that happens with the **real** services I thought was worthy a shot and someone can help me.\r\n\r\nBy the way this is the code used for ansible\r\n\r\n```yaml\r\n- name: Provision a set of instances for web\r\n  ec2:\r\n    region: eu-west-1\r\n    key_name: ssh_xxx\r\n    group:\r\n      - \"{{ security_group_webapp.group_name }}\"\r\n      - \"{{ security_group_ssh.group_name }}\"\r\n    instance_type: t2.micro\r\n    image: \"ami-xxx\"\r\n    vpc_subnet_id: \"{{ subnet.subnet.id }}\"\r\n    assign_public_ip: true\r\n    wait: true\r\n    exact_count: 1\r\n    instance_tags:\r\n      Name: xxx\r\n  register: ec2\r\n\r\n- name: Extract EC2 instances ids\r\n  set_fact:\r\n    ec2_ids: \"{{ ec2_ids | default([]) |  union([item.id]) }}\"\r\n  with_items: \"{{ ec2.tagged_instances }}\"\r\n\r\n- name: Setup ELB\r\n  ec2_elb_lb:\r\n    name: \"xxx-elb\"\r\n    state: present\r\n    region: \"eu-west-1\"\r\n    subnets: \"{{ subnet.subnet.id }}\"\r\n    instance_ids: \"{{ ec2_ids }}\"\r\n    security_group_ids:\r\n      - \"{{ security_group_webapp.group_id }}\"\r\n    # validate_certs: no\r\n    listeners:\r\n      - protocol: https # options are http, https, ssl, tcp\r\n        load_balancer_port: 443\r\n        instance_port: 443\r\n        ssl_certificate_id: \"arn:aws:iam::027188111508:server-certificate/xxx\"\r\n    health_check:\r\n      ping_protocol: https\r\n      ping_port: 443\r\n      ping_path: \"/\"\r\n      response_timeout: 5 # seconds\r\n      interval: 30 # seconds\r\n      unhealthy_threshold: 2\r\n      healthy_threshold: 2\r\n    wait: yes\r\n    tags:\r\n      Environment: test\r\n      Application: xxx\r\n\r\n - name: Create launch config\r\n   community.aws.ec2_lc:\r\n     name: \"xxx-launch-configuration\"\r\n     image_id: \"ami-xxx\"\r\n     key_name: ssh_xxx\r\n     region: \"eu-west-1\"\r\n     # security_groups:\r\n     instance_type: t2.micro\r\n     assign_public_ip: yes\r\n\r\n - name: Setup Auto Scaling Group for load balancer\r\n   community.aws.ec2_asg:\r\n     name: \"xxx-autoscaling-group\"\r\n     load_balancers: [ 'xxx-elb',]\r\n     availability_zones: [ 'eu-west-1a',]\r\n     launch_config_name: \"xxx-launch-configuration\"\r\n     min_size: 4\r\n     max_size: 10\r\n     desired_capacity: 2\r\n     vpc_zone_identifier: [ \"{{ subnet.subnet.id }}\" ]\r\n     tags:\r\n       - Environment: test\r\n         Application: xxx\r\n```\r\n\r\nInstead the python code is the following\r\n\r\n```python\r\n    ec2_resource = boto3.resource('ec2')\r\n    instances = ec2_resource.create_instances(ImageId=ami_id, MinCount=3, MaxCount=5)\r\n    # random name for the elb\r\n    prefix = ''.join([chr(random.randint(ord('a'), ord('z'))) for _ in range(16)])\r\n    elb_name = \"%s-elb\" % prefix\r\n    # create a load balancer with such name\r\n    elb_instance = elb_client.create_load_balancer(\r\n        LoadBalancerName=elb_name,\r\n        Listeners=[\r\n            {\r\n                'Protocol': 'string',\r\n                'LoadBalancerPort': 123,\r\n                'InstanceProtocol': 'string',\r\n                'InstancePort': 123,\r\n                'SSLCertificateId': 'string'\r\n            },\r\n    ])\r\n    instance_ids = [_.id for _ in instances]\r\n    # attach the instances to the load balancer\r\n    r_registering = elb_client.register_instances_with_load_balancer(\r\n        LoadBalancerName=elb_name,\r\n        Instances=[{'InstanceId': _} for _ in instance_ids[1:]],\r\n    )\r\n\r\n    asg_name = 'kebab-asg'\r\n    lc_name = 'kebab-lc'\r\n    response = asg_client.create_launch_configuration(\r\n        LaunchConfigurationName=lc_name,\r\n        ImageId=ami_id,\r\n        InstanceType=\"t1.micro\",\r\n    )\r\n\r\n    # create an autoscaling group for such ELB\r\n    response = asg_client.create_auto_scaling_group(\r\n        AutoScalingGroupName=asg_name,\r\n        LoadBalancerNames=[elb_name],\r\n        LaunchConfigurationName=lc_name,\r\n        AvailabilityZones=['eu-west-1a'],\r\n        MinSize=10,\r\n        MaxSize=100,\r\n    )\r\n\r\n```\r\n\r\nLooking in the code I found that the lines in ``moto/autoscaling/models.py`` are responsible for this behaviour, in particular line 946 for the class ``AutoScalingBackend``\r\n\r\n```python\r\n        for elb in elbs:\r\n            elb_instace_ids = set(elb.instance_ids)\r\n            self.elb_backend.register_instances(\r\n                elb.name, group_instance_ids - elb_instace_ids\r\n            )\r\n            self.elb_backend.deregister_instances(\r\n                elb.name, elb_instace_ids - group_instance_ids\r\n            )\r\n```\r\n\r\nto me seems that it's adding the instances in the auto scaling group that are not already associated with the load balancer, but **it's removing all the instances that are not in the group**.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3748/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3748/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3729", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3729/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3729/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3729/events", "html_url": "https://github.com/getmoto/moto/issues/3729", "id": 816685421, "node_id": "MDU6SXNzdWU4MTY2ODU0MjE=", "number": 3729, "title": "dynamodb2 update_item error occurring on non existing items creates item", "user": {"login": "janluak", "id": 12571346, "node_id": "MDQ6VXNlcjEyNTcxMzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/12571346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janluak", "html_url": "https://github.com/janluak", "followers_url": "https://api.github.com/users/janluak/followers", "following_url": "https://api.github.com/users/janluak/following{/other_user}", "gists_url": "https://api.github.com/users/janluak/gists{/gist_id}", "starred_url": "https://api.github.com/users/janluak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janluak/subscriptions", "organizations_url": "https://api.github.com/users/janluak/orgs", "repos_url": "https://api.github.com/users/janluak/repos", "events_url": "https://api.github.com/users/janluak/events{/privacy}", "received_events_url": "https://api.github.com/users/janluak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-02-25T18:27:52Z", "updated_at": "2021-08-28T08:38:12Z", "closed_at": "2021-08-28T08:38:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "## item should not get created\r\n\r\n**how to reproduce the issue**\r\nHave a non existing item and try to update it with the condition of an attribute not being existent.\r\nTry to retrieve the item.\r\n\r\nExample data:\r\ntable with primary: `primary_partition_key`\r\nupdate expression:\r\n```\r\n{'Key': {'primary_partition_key': 'some_identification_string'}, 'UpdateExpression': 'set #AA.#AB = :aa', 'ExpressionAttributeValues': {':aa': 'abc'}, 'ExpressionAttributeNames': {'#AA': 'some_dict', '#AB': 'key1'}, 'ConditionExpression': 'attribute_not_exists(#AA.#AB)'}\r\n```\r\n\r\n\r\ncode:\r\n```\r\ntable = resource(\"dynamodb\").Table(\"table_name\")\r\ntable.update_item(**update_expression)\r\nitem = table.get_item(Key=\"primary_partition_key\")\r\n```\r\n\r\n**expected behavior**\r\nthe get_item operation should not contain any items\r\n\r\n**actual behavior**\r\nan item get's returned with only the primary_key as value\r\n\r\n\r\n**Versions**\r\nused as decorator mock\r\nmoto: 2.0.0 (installation already by version 1.2.x, clean installed before raising issue)\r\nboto3: 1.17.15\r\nbotocore: 1.20.15\r\nMaybe related to issue #3635 \r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3729/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3729/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3681", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3681/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3681/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3681/events", "html_url": "https://github.com/getmoto/moto/issues/3681", "id": 807126385, "node_id": "MDU6SXNzdWU4MDcxMjYzODU=", "number": 3681, "title": "Lambda \"add_permission\" fails when specified function name is \"function_arn\"", "user": {"login": "pedro-dlfa", "id": 17906400, "node_id": "MDQ6VXNlcjE3OTA2NDAw", "avatar_url": "https://avatars.githubusercontent.com/u/17906400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pedro-dlfa", "html_url": "https://github.com/pedro-dlfa", "followers_url": "https://api.github.com/users/pedro-dlfa/followers", "following_url": "https://api.github.com/users/pedro-dlfa/following{/other_user}", "gists_url": "https://api.github.com/users/pedro-dlfa/gists{/gist_id}", "starred_url": "https://api.github.com/users/pedro-dlfa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pedro-dlfa/subscriptions", "organizations_url": "https://api.github.com/users/pedro-dlfa/orgs", "repos_url": "https://api.github.com/users/pedro-dlfa/repos", "events_url": "https://api.github.com/users/pedro-dlfa/events{/privacy}", "received_events_url": "https://api.github.com/users/pedro-dlfa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-02-12T10:37:20Z", "updated_at": "2021-08-28T06:23:44Z", "closed_at": "2021-08-28T06:23:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "### how to reproduce the issue\r\n* Start moto server: `moto_server`\r\n* Then execute the following code in a python console\r\n```python\r\n    iam_client = boto3.client(\"iam\", region_name=\"eu-west-1\", endpoint_url=\"http://localhost:5000\")\r\n    role = iam_client.create_role(\r\n        RoleName=faker.word(), AssumeRolePolicyDocument=POLICY_DOCUMENT\r\n    )\r\n\r\n    lambda_client = boto3.client(\"lambda\", region_name=\"eu-west-1\", endpoint_url=\"http://localhost:5000\")\r\n    caller_arn = lambda_client.create_function(\r\n        FunctionName=f\"CALLER\",\r\n        Code={\"ZipFile\": \"Hello\".encode(\"utf-8\")},\r\n        Role=role.get(\"Role\").get(\"Arn\"),\r\n        Runtime=\"python3.8\",\r\n        Handler=\"HandlerFunction\",\r\n    )[\"FunctionArn\"]\r\n\r\n    called_arn = lambda_client.create_function(\r\n        FunctionName=f\"CALLED\",\r\n        Code={\"ZipFile\": \"World\".encode(\"utf-8\")},\r\n        Role=role.get(\"Role\").get(\"Arn\"),\r\n        Runtime=\"python3.8\",\r\n        Handler=\"HandlerFunction\",\r\n    )[\"FunctionArn\"]\r\n\r\n    lambda_client.add_permission(\r\n        Action=\"lambda:InvokeFunction\",\r\n        FunctionName=called_arn,\r\n        Principal=\"lambda.amazonaws.com\",\r\n        SourceAccount=\"123456789012\",\r\n        SourceArn=caller_arn,\r\n        StatementId=\"1\"\r\n    )\r\n```\r\n\r\n### what you expected to happen\r\nFollowing [boto3 documentation](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lambda.html#Lambda.Client.add_permission), `FunctionName` argument can contain the function ARN (used for cross-account). Thus, the operation should succeed.\r\n\r\n### what actually happens\r\n* `add_permission` invocation returns the following error:\r\n```python\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../../../venv/lib/python3.8/site-packages/botocore/client.py:316: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n        args       = ()\r\n        kwargs     = {'Action': 'lambda:InvokeFunction',\r\n 'FunctionName': 'arn:aws:lambda:eu-west-1:123456789012:function:CALLED',\r\n 'Principal': 'lambda.amazonaws.com',\r\n 'SourceAccount': '123456789012',\r\n 'SourceArn': 'arn:aws:lambda:eu-west-1:123456789012:function:CALLER',\r\n 'StatementId': '1'}\r\n        operation_name = 'AddPermission'\r\n        py_operation_name = 'add_permission'\r\n        self       = <botocore.client.Lambda object at 0x10c21b460>\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.Lambda object at 0x10c21b460>\r\noperation_name = 'AddPermission'\r\napi_params = {'Action': 'lambda:InvokeFunction', 'FunctionName': 'arn:aws:lambda:eu-west-1:123456789012:function:CALLED', 'Principal': 'lambda.amazonaws.com', 'SourceAccount': '123456789012', ...}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record('API_CALL', {\r\n            'service': service_name,\r\n            'operation': operation_name,\r\n            'params': api_params,\r\n        })\r\n        if operation_model.deprecated:\r\n            logger.debug('Warning: %s.%s() is deprecated',\r\n                         service_name, operation_name)\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            model=operation_model, params=request_dict,\r\n            request_signer=self._request_signer, context=request_context)\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context)\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            http_response=http, parsed=parsed_response,\r\n            model=operation_model, context=request_context\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.exceptions.ClientError: An error occurred (404) when calling the AddPermission operation: <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\r\nE           <title>404 Not Found</title>\r\nE           <h1>Not Found</h1>\r\nE           <p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\r\n\r\napi_params = {'Action': 'lambda:InvokeFunction',\r\n 'FunctionName': 'arn:aws:lambda:eu-west-1:123456789012:function:CALLED',\r\n 'Principal': 'lambda.amazonaws.com',\r\n 'SourceAccount': '123456789012',\r\n 'SourceArn': 'arn:aws:lambda:eu-west-1:123456789012:function:CALLER',\r\n 'StatementId': '1'}\r\nerror_class = <class 'botocore.exceptions.ClientError'>\r\nerror_code = '404'\r\nevent_response = None\r\nhandler    = <function inject_api_version_header_if_needed at 0x107d79940>\r\nhttp       = <botocore.awsrequest.AWSResponse object at 0x10c544ee0>\r\noperation_model = OperationModel(name=AddPermission)\r\noperation_name = 'AddPermission'\r\nparsed_response = {'Error': {'Code': '404',\r\n           'Message': '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 '\r\n                      'Final//EN\">\\n'\r\n                      '<title>404 Not Found</title>\\n'\r\n                      '<h1>Not Found</h1>\\n'\r\n                      '<p>The requested URL was not found on the server. If '\r\n                      'you entered the URL manually please check your spelling '\r\n                      'and try again.</p>\\n'},\r\n 'ResponseMetadata': {'HTTPHeaders': {'access-control-allow-origin': '*',\r\n                                      'content-length': '232',\r\n                                      'content-type': 'text/html; '\r\n                                                      'charset=utf-8',\r\n                                      'date': 'Fri, 12 Feb 2021 10:31:58 GMT',\r\n                                      'server': 'Werkzeug/1.0.1 Python/3.8.2'},\r\n                      'HTTPStatusCode': 404,\r\n                      'RetryAttempts': 0}}\r\nrequest_context = {'auth_type': None,\r\n 'client_config': <botocore.config.Config object at 0x10c5259a0>,\r\n 'client_region': 'eu-west-1',\r\n 'has_streaming_input': False,\r\n 'timestamp': '20210212T103158Z'}\r\nrequest_dict = {'body': b'{\"Action\": \"lambda:InvokeFunction\", \"Principal\": \"lambda.amazonaws.c'\r\n         b'om\", \"SourceAccount\": \"123456789012\", \"SourceArn\": \"arn:aws:lambda:e'\r\n         b'u-west-1:123456789012:function:CALLER\", \"StatementId\": \"1\"}',\r\n 'context': {'auth_type': None,\r\n             'client_config': <botocore.config.Config object at 0x10c5259a0>,\r\n             'client_region': 'eu-west-1',\r\n             'has_streaming_input': False,\r\n             'timestamp': '20210212T103158Z'},\r\n 'headers': {'User-Agent': 'Boto3/1.14.40 Python/3.8.2 Darwin/18.7.0 '\r\n                           'Botocore/1.17.40'},\r\n 'method': 'POST',\r\n 'query_string': {},\r\n 'url': 'http://localhost:5000/2015-03-31/functions/arn%3Aaws%3Alambda%3Aeu-west-1%3A123456789012%3Afunction%3ACALLED/policy',\r\n 'url_path': '/2015-03-31/functions/arn%3Aaws%3Alambda%3Aeu-west-1%3A123456789012%3Afunction%3ACALLED/policy'}\r\nself       = <botocore.client.Lambda object at 0x10c21b460>\r\nservice_id = 'lambda'\r\nservice_name = 'lambda'\r\n\r\n../../../venv/lib/python3.8/site-packages/botocore/client.py:635: ClientError\r\n```\r\n\r\n* `moto_server` reports the following output:\r\n```\r\n127.0.0.1 - - [12/Feb/2021 11:31:54] \"POST / HTTP/1.1\" 200 -\r\n127.0.0.1 - - [12/Feb/2021 11:31:54] \"POST / HTTP/1.1\" 200 -\r\n127.0.0.1 - - [12/Feb/2021 11:31:58] \"POST / HTTP/1.1\" 200 -\r\n127.0.0.1 - - [12/Feb/2021 11:31:58] \"POST /2015-03-31/functions HTTP/1.1\" 201 -\r\n127.0.0.1 - - [12/Feb/2021 11:31:58] \"POST /2015-03-31/functions HTTP/1.1\" 201 -\r\n127.0.0.1 - - [12/Feb/2021 11:31:58] \"POST /2015-03-31/functions/arn%3Aaws%3Alambda%3Aeu-west-1%3A123456789012%3Afunction%3ACALLED/policy HTTP/1.1\" 404 -\r\n```\r\n\r\n**what version of Moto you're using**\r\nVersion: 1.3.17.dev256, with standalone server", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3681/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3648", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3648/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3648/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3648/events", "html_url": "https://github.com/getmoto/moto/issues/3648", "id": 798616353, "node_id": "MDU6SXNzdWU3OTg2MTYzNTM=", "number": 3648, "title": "elbv2 create_rule only works for one existing ALB", "user": {"login": "bclodius", "id": 590724, "node_id": "MDQ6VXNlcjU5MDcyNA==", "avatar_url": "https://avatars.githubusercontent.com/u/590724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bclodius", "html_url": "https://github.com/bclodius", "followers_url": "https://api.github.com/users/bclodius/followers", "following_url": "https://api.github.com/users/bclodius/following{/other_user}", "gists_url": "https://api.github.com/users/bclodius/gists{/gist_id}", "starred_url": "https://api.github.com/users/bclodius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bclodius/subscriptions", "organizations_url": "https://api.github.com/users/bclodius/orgs", "repos_url": "https://api.github.com/users/bclodius/repos", "events_url": "https://api.github.com/users/bclodius/events{/privacy}", "received_events_url": "https://api.github.com/users/bclodius/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-02-01T18:48:13Z", "updated_at": "2021-02-02T15:21:18Z", "closed_at": "2021-02-02T15:21:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello!\r\n\r\nThis is an issue I am reporting that I hope to create my own PR to fix.\r\n\r\n## Exception\r\n\r\n```\r\nbotocore.errorfactory.ListenerNotFoundException: An error occurred (ListenerNotFound) when calling the CreateRule operation: The specified listener does not exist.\r\n```\r\n\r\n## Root Cause\r\n\r\nIn https://github.com/spulec/moto/blob/master/moto/elbv2/models.py#L549-#L551 we reuse the build in `describe_listeners`\r\n\r\n```\r\n     def create_rule(self, listener_arn, conditions, priority, actions):\r\n         actions = [FakeAction(action) for action in actions]\r\n         listeners = self.describe_listeners(None, [listener_arn])\r\n```\r\n\r\nUnfortunately in https://github.com/spulec/moto/blob/master/moto/elbv2/models.py#L826-#L833 we raise Exception when we encounter a different listener on an unrelated ALB.  Making it \"impossible\" to create a rule once two ALB's exist.\r\n\r\n```\r\n        matched = []\r\n        for load_balancer in self.load_balancers.values():\r\n            for listener_arn in listener_arns:\r\n                listener = load_balancer.listeners.get(listener_arn)\r\n                if not listener:\r\n                    raise ListenerNotFoundError() # This is a problem due to aformentioned\r\n                matched.append(listener)\r\n        return matched\r\n```\r\n\r\n## Suggested Fix\r\n\r\n```\r\n    def describe_listeners(self, load_balancer_arn, listener_arns):\r\n        if load_balancer_arn:\r\n            if load_balancer_arn not in self.load_balancers:\r\n                raise LoadBalancerNotFoundError()\r\n            return self.load_balancers.get(load_balancer_arn).listeners.values()\r\n\r\n        matched = []\r\n        for load_balancer in self.load_balancers.values():\r\n            for listener_arn in listener_arns:\r\n                listener = load_balancer.listeners.get(listener_arn)\r\n                if listener:\r\n                    matched.append(listener)\r\n        if len(matched) == 0:\r\n            raise ListenerNotFoundError()\r\n        return matched\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3648/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3645", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3645/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3645/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3645/events", "html_url": "https://github.com/getmoto/moto/issues/3645", "id": 798108992, "node_id": "MDU6SXNzdWU3OTgxMDg5OTI=", "number": 3645, "title": "GetMetricData incompatible with JAVA SDK v2", "user": {"login": "jakobbraun", "id": 18247545, "node_id": "MDQ6VXNlcjE4MjQ3NTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/18247545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakobbraun", "html_url": "https://github.com/jakobbraun", "followers_url": "https://api.github.com/users/jakobbraun/followers", "following_url": "https://api.github.com/users/jakobbraun/following{/other_user}", "gists_url": "https://api.github.com/users/jakobbraun/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakobbraun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakobbraun/subscriptions", "organizations_url": "https://api.github.com/users/jakobbraun/orgs", "repos_url": "https://api.github.com/users/jakobbraun/repos", "events_url": "https://api.github.com/users/jakobbraun/events{/privacy}", "received_events_url": "https://api.github.com/users/jakobbraun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-02-01T08:33:31Z", "updated_at": "2021-02-11T16:21:08Z", "closed_at": "2021-02-11T15:04:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm experiencing the issue that queries to a moto cloudwatch (v 1.3.16) return no points from the AWS Java SDK v2.\r\nThe strange thing is, however, that in the raw-response (seen from the logs of the Java SDK) the data is present.\r\n\r\nI tried to debug this a bit more and found out that the Responses have some deviations:\r\n\r\n## Moto CloudWatch response:\r\n\r\n```xml\r\n<GetMetricDataResponse xmlns=\"http://monitoring.amazonaws.com/doc/2010-08-01/\"><ResponseMetadata><RequestId>C90CEILPMV40F7STZZO49Y1N80L3KS82NGX163E91N925OKWA2TT</RequestId></ResponseMetadata><GetMetricDataResult><MetricDataResults><member><Id>myQuery</Id><Label>USERS Average</Label><StatusCode>Complete</StatusCode><Timestamps><member>2021-01-29 12:38:13.408389</member></Timestamps><Values><member>1.0</member></Values></member></MetricDataResults></GetMetricDataResult></GetMetricDataResponse>\r\n```\r\n\r\n**Formatted:**\r\n```xml\r\n<GetMetricDataResponse xmlns=\"http://monitoring.amazonaws.com/doc/2010-08-01/\">\r\n   <ResponseMetadata>\r\n      <RequestId>C90CEILPMV40F7STZZO49Y1N80L3KS82NGX163E91N925OKWA2TT</RequestId>\r\n   </ResponseMetadata>\r\n   <GetMetricDataResult>\r\n      <MetricDataResults>\r\n         <member>\r\n            <Id>myQuery</Id>\r\n            <Label>USERS Average</Label>\r\n            <StatusCode>Complete</StatusCode>\r\n            <Timestamps>\r\n               <member>2021-01-29 12:38:13.408389</member>\r\n            </Timestamps>\r\n            <Values>\r\n               <member>1.0</member>\r\n            </Values>\r\n         </member>\r\n      </MetricDataResults>\r\n   </GetMetricDataResult>\r\n</GetMetricDataResponse>\r\n```\r\n\r\n## AWS Response:\r\n```xml\r\n<GetMetricDataResponse xmlns=\"http://monitoring.amazonaws.com/doc/2010-08-01/\">\r\n  <GetMetricDataResult>\r\n    <MetricDataResults>\r\n      <member>\r\n        <Timestamps>\r\n          <member>2021-01-29T16:44:00Z</member>\r\n        </Timestamps>\r\n        <Values>\r\n          <member>1.0</member>\r\n        </Values>\r\n        <Label>USERS</Label>\r\n        <Id>myQuery</Id>\r\n        <StatusCode>Complete</StatusCode>\r\n      </member>\r\n    </MetricDataResults>\r\n    <Messages/>\r\n  </GetMetricDataResult>\r\n  <ResponseMetadata>\r\n    <RequestId>d5ffe654-2796-4391-97f1-6979b9d78f11</RequestId>\r\n  </ResponseMetadata>\r\n</GetMetricDataResponse>\r\n```\r\n\r\nThe most significant difference seems to be the date format to me (`2021-01-29 12:38:13.408389` vs. `2021-01-29T16:44:00Z`). \r\n\r\nI ran both queries in the same hour. While AWS sends the query in UTC moto seems to use my local timezone `Atlantic/Bermuda.\r\n\r\nApart from that, the labels are different (`USERS` vs. `USERS Average`). \r\n\r\nI could not yet find out what makes the AWS SDK to simply ignore the results.\r\n\r\nI would be glad about help!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3645/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3645/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3594", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3594/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3594/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3594/events", "html_url": "https://github.com/getmoto/moto/issues/3594", "id": 788566524, "node_id": "MDU6SXNzdWU3ODg1NjY1MjQ=", "number": 3594, "title": "unittest.TestCase class decorators broken in moto 1.3.16 (worked in 1.3.14)", "user": {"login": "xinxinw1", "id": 5077372, "node_id": "MDQ6VXNlcjUwNzczNzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5077372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xinxinw1", "html_url": "https://github.com/xinxinw1", "followers_url": "https://api.github.com/users/xinxinw1/followers", "following_url": "https://api.github.com/users/xinxinw1/following{/other_user}", "gists_url": "https://api.github.com/users/xinxinw1/gists{/gist_id}", "starred_url": "https://api.github.com/users/xinxinw1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xinxinw1/subscriptions", "organizations_url": "https://api.github.com/users/xinxinw1/orgs", "repos_url": "https://api.github.com/users/xinxinw1/repos", "events_url": "https://api.github.com/users/xinxinw1/events{/privacy}", "received_events_url": "https://api.github.com/users/xinxinw1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2021-01-18T21:52:05Z", "updated_at": "2021-01-20T09:33:17Z", "closed_at": "2021-01-20T09:33:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using a class decorator seems to be trying to stop an internal `mock.patch` twice, causing errors like `AttributeError: '_patch' object has no attribute 'is_local'` with mock==4.0.3 and the more clearer `RuntimeError: stop called on unstarted patcher` with mock==2.0.0.\r\n\r\nI believe the cause is https://github.com/spulec/moto/pull/2578 which adds a `mock.patch(\"boto3.DEFAULT_SESSION\", None)` which gets started twice and stopped twice when running tests with a class mock on a unittest.TestCase\r\n\r\n## Steps to reproduce\r\n\r\nRun `pip install boto moto pytest sure` in a clean python3 virtualenv, and run pytest with the following test file:\r\n\r\n(This is actually the same code that's in moto's own decorator tests so I'm surprised this passes there but fails in an outside environment: https://github.com/spulec/moto/blob/master/tests/test_core/test_decorator_calls.py#L79)\r\n\r\n```python\r\nimport unittest\r\nimport pytest\r\nfrom moto import mock_s3_deprecated\r\nimport boto\r\nimport sure\r\n\r\n@mock_s3_deprecated\r\nclass TesterWithSetup(unittest.TestCase):\r\n    def setUp(self):\r\n        self.conn = boto.connect_s3()\r\n        self.conn.create_bucket(\"mybucket\")\r\n\r\n    def test_still_the_same(self):\r\n        bucket = self.conn.get_bucket(\"mybucket\")\r\n        bucket.name.should.equal(\"mybucket\")\r\n```\r\n\r\nHere are the relevant package versions as of the creation time of this issue:\r\n\r\n```\r\nboto==2.49.0\r\nboto3==1.16.56\r\nbotocore==1.19.56\r\nmock==4.0.3\r\nmoto==1.3.16\r\npytest==6.2.1\r\nsure==1.4.11\r\n```\r\n\r\n## Traceback\r\n\r\n```\r\n(vendor3) st-xinxin1:test-virtualenv xinxin$ pytest test_moto.py\r\n==================================================================================================================== test session starts =====================================================================================================================\r\nplatform darwin -- Python 3.7.3, pytest-6.2.1, py-1.10.0, pluggy-0.13.1\r\nrootdir: /Users/xinxin/stripe/test-virtualenv\r\ncollected 1 item\r\n\r\ntest_moto.py F                                                                                                                                                                                                                                         [100%]\r\n\r\n========================================================================================================================== FAILURES ==========================================================================================================================\r\n____________________________________________________________________________________________________________ TesterWithSetup.test_still_the_same _____________________________________________________________________________________________________________\r\nvendor3/lib/python3.7/site-packages/moto/core/models.py:102: in wrapper\r\n    self.stop()\r\nvendor3/lib/python3.7/site-packages/moto/core/models.py:86: in stop\r\n    self.default_session_mock.stop()\r\nvendor3/lib/python3.7/site-packages/mock/mock.py:1563: in stop\r\n    return self.__exit__(None, None, None)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <mock.mock._patch object at 0x1055191d0>, exc_info = (None, None, None)\r\n\r\n    def __exit__(self, *exc_info):\r\n        \"\"\"Undo the patch.\"\"\"\r\n>       if self.is_local and self.temp_original is not DEFAULT:\r\nE       AttributeError: '_patch' object has no attribute 'is_local'\r\n\r\nvendor3/lib/python3.7/site-packages/mock/mock.py:1529: AttributeError\r\n====================================================================================================================== warnings summary ======================================================================================================================\r\nvendor3/lib/python3.7/site-packages/boto/plugin.py:40\r\n  /Users/xinxin/stripe/test-virtualenv/vendor3/lib/python3.7/site-packages/boto/plugin.py:40: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n    import imp\r\n\r\nvendor3/lib/python3.7/site-packages/sure/old.py:26\r\n  /Users/xinxin/stripe/test-virtualenv/vendor3/lib/python3.7/site-packages/sure/old.py:26: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import Iterable\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/warnings.html\r\n================================================================================================================== short test summary info ===================================================================================================================\r\nFAILED test_moto.py::TesterWithSetup::test_still_the_same - AttributeError: '_patch' object has no attribute 'is_local'\r\n=============================================================================================================== 1 failed, 2 warnings in 0.66s ================================================================================================================\r\n```\r\n\r\nA project I'm seeing this in uses mock==2.0.0 which gives this error instead:\r\n\r\n```\r\n(vendor3) st-xinxin1:test-virtualenv xinxin$ pip install mock==2.0.0\r\n[...]\r\nSuccessfully installed mock-2.0.0 pbr-5.5.1\r\n(vendor3) st-xinxin1:test-virtualenv xinxin$ pytest test_moto.py\r\n==================================================================================================================== test session starts =====================================================================================================================\r\nplatform darwin -- Python 3.7.3, pytest-6.2.1, py-1.10.0, pluggy-0.13.1\r\nrootdir: /Users/xinxin/stripe/test-virtualenv\r\ncollected 1 item\r\n\r\ntest_moto.py F                                                                                                                                                                                                                                         [100%]\r\n\r\n========================================================================================================================== FAILURES ==========================================================================================================================\r\n____________________________________________________________________________________________________________ TesterWithSetup.test_still_the_same _____________________________________________________________________________________________________________\r\nvendor3/lib/python3.7/site-packages/moto/core/models.py:102: in wrapper\r\n    self.stop()\r\nvendor3/lib/python3.7/site-packages/moto/core/models.py:86: in stop\r\n    self.default_session_mock.stop()\r\nvendor3/lib/python3.7/site-packages/mock/mock.py:1513: in stop\r\n    return self.__exit__()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <mock.mock._patch object at 0x1031a6828>, exc_info = ()\r\n\r\n    def __exit__(self, *exc_info):\r\n        \"\"\"Undo the patch.\"\"\"\r\n        if not _is_started(self):\r\n>           raise RuntimeError('stop called on unstarted patcher')\r\nE           RuntimeError: stop called on unstarted patcher\r\n\r\nvendor3/lib/python3.7/site-packages/mock/mock.py:1477: RuntimeError\r\n====================================================================================================================== warnings summary ======================================================================================================================vendor3/lib/python3.7/site-packages/boto/plugin.py:40\r\n  /Users/xinxin/stripe/test-virtualenv/vendor3/lib/python3.7/site-packages/boto/plugin.py:40: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n    import imp\r\n\r\nvendor3/lib/python3.7/site-packages/sure/old.py:26\r\n  /Users/xinxin/stripe/test-virtualenv/vendor3/lib/python3.7/site-packages/sure/old.py:26: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import Iterable\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/warnings.html\r\n================================================================================================================== short test summary info ===================================================================================================================\r\nFAILED test_moto.py::TesterWithSetup::test_still_the_same - RuntimeError: stop called on unstarted patcher\r\n=============================================================================================================== 1 failed, 2 warnings in 0.77s ================================================================================================================\r\n```\r\n\r\nUsing moto 1.3.14 works:\r\n\r\n```\r\n(vendor3) st-xinxin1:test-virtualenv xinxin$ pip install moto==1.3.14\r\n[...]\r\nSuccessfully installed idna-2.8 jsondiff-1.1.2 moto-1.3.14\r\n(vendor3) st-xinxin1:test-virtualenv xinxin$ pytest test_moto.py\r\n==================================================================================================================== test session starts =====================================================================================================================\r\nplatform darwin -- Python 3.7.3, pytest-6.2.1, py-1.10.0, pluggy-0.13.1\r\nrootdir: /Users/xinxin/stripe/test-virtualenv\r\ncollected 1 item\r\n\r\ntest_moto.py .                                                                                                                                                                                                                                         [100%]\r\n\r\n====================================================================================================================== warnings summary ======================================================================================================================\r\nvendor3/lib/python3.7/site-packages/boto/plugin.py:40\r\n  /Users/xinxin/stripe/test-virtualenv/vendor3/lib/python3.7/site-packages/boto/plugin.py:40: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n    import imp\r\n\r\nvendor3/lib/python3.7/site-packages/moto/cloudformation/parsing.py:407\r\n  /Users/xinxin/stripe/test-virtualenv/vendor3/lib/python3.7/site-packages/moto/cloudformation/parsing.py:407: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    class ResourceMap(collections.Mapping):\r\n\r\nvendor3/lib/python3.7/site-packages/sure/old.py:26\r\n  /Users/xinxin/stripe/test-virtualenv/vendor3/lib/python3.7/site-packages/sure/old.py:26: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    from collections import Iterable\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/warnings.html\r\n=============================================================================================================== 1 passed, 3 warnings in 2.52s ================================================================================================================\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3594/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3594/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3570", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3570/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3570/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3570/events", "html_url": "https://github.com/getmoto/moto/issues/3570", "id": 776394149, "node_id": "MDU6SXNzdWU3NzYzOTQxNDk=", "number": 3570, "title": "The security token included in the request is invalid on cn-northwest-1", "user": {"login": "nirLumigo", "id": 49228804, "node_id": "MDQ6VXNlcjQ5MjI4ODA0", "avatar_url": "https://avatars.githubusercontent.com/u/49228804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirLumigo", "html_url": "https://github.com/nirLumigo", "followers_url": "https://api.github.com/users/nirLumigo/followers", "following_url": "https://api.github.com/users/nirLumigo/following{/other_user}", "gists_url": "https://api.github.com/users/nirLumigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirLumigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirLumigo/subscriptions", "organizations_url": "https://api.github.com/users/nirLumigo/orgs", "repos_url": "https://api.github.com/users/nirLumigo/repos", "events_url": "https://api.github.com/users/nirLumigo/events{/privacy}", "received_events_url": "https://api.github.com/users/nirLumigo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-12-30T10:51:06Z", "updated_at": "2022-01-16T19:59:49Z", "closed_at": "2021-10-18T16:13:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to reproduce the issue?\r\n```\r\nfrom moto import mock_lambda\r\nimport boto3\r\n\r\n@mock_lambda\r\ndef test_china():\r\n    client = boto3.client(\"lambda\", region_name=\"cn-northwest-1\")\r\n    client.list_functions()\r\n```\r\nWill raise an exception:\r\n```\r\n@mock_lambda\r\n    def test_china():\r\n        client = boto3.client(\"lambda\", region_name=\"cn-northwest-1\")\r\n>       client.list_functions()\r\n\r\ntest_sts_service.py:20: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../../../venv/lib/python3.7/site-packages/botocore/client.py:357: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.client.Lambda object at 0x111731490>\r\noperation_name = 'ListFunctions', api_params = {}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record('API_CALL', {\r\n            'service': service_name,\r\n            'operation': operation_name,\r\n            'params': api_params,\r\n        })\r\n        if operation_model.deprecated:\r\n            logger.debug('Warning: %s.%s() is deprecated',\r\n                         service_name, operation_name)\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            model=operation_model, params=request_dict,\r\n            request_signer=self._request_signer, context=request_context)\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context)\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            http_response=http, parsed=parsed_response,\r\n            model=operation_model, context=request_context\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.exceptions.ClientError: An error occurred (UnrecognizedClientException) when calling the ListFunctions operation: The security token included in the request is invalid.\r\n\r\n../../../venv/lib/python3.7/site-packages/botocore/client.py:661: ClientError\r\n```\r\n\r\nOn the other hand, when running in a different region, no exception is raised:\r\n```\r\n@mock_lambda\r\ndef test_us():\r\n    client = boto3.client(\"lambda\", region_name=\"us-west-1\")\r\n    client.list_functions()\r\n```\r\n\r\nThis error happens in other services as well (e.g \"sts\") and not only in the lambda service.\r\n\r\nVersions:\r\npython==3.7\r\nmoto== 1.3.16\r\npytest==5.2.2\r\nboto==2.49.0\r\nbotocore==1.12.189\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3570/reactions", "total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3570/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3558", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3558/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3558/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3558/events", "html_url": "https://github.com/getmoto/moto/issues/3558", "id": 771428272, "node_id": "MDU6SXNzdWU3NzE0MjgyNzI=", "number": 3558, "title": "jinja2.exceptions.UndefinedError: 'None' has no attribute 'events' When mocking cloudformation DescribeStackEvents operation", "user": {"login": "modamod", "id": 4106586, "node_id": "MDQ6VXNlcjQxMDY1ODY=", "avatar_url": "https://avatars.githubusercontent.com/u/4106586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/modamod", "html_url": "https://github.com/modamod", "followers_url": "https://api.github.com/users/modamod/followers", "following_url": "https://api.github.com/users/modamod/following{/other_user}", "gists_url": "https://api.github.com/users/modamod/gists{/gist_id}", "starred_url": "https://api.github.com/users/modamod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/modamod/subscriptions", "organizations_url": "https://api.github.com/users/modamod/orgs", "repos_url": "https://api.github.com/users/modamod/repos", "events_url": "https://api.github.com/users/modamod/events{/privacy}", "received_events_url": "https://api.github.com/users/modamod/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-12-19T18:14:39Z", "updated_at": "2021-01-16T16:17:25Z", "closed_at": "2021-01-16T14:42:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\n- **How to reproduce the issue:**\r\nTo reproduce the issue decorate any function that calls **describe_stack_events** operation on non existing stack.\r\n- **What you expected to happen:**\r\nOn actual code botocore  raises a **ValidattionError** exception with the following message\r\n```\r\nbotocore.exceptions.ClientError: An error occurred (ValidationError) when calling the DescribeStackEvents operation: Stack [test] does not exist\r\n```\r\n- **What actually happens**:\r\nMoto raises the following exception:\r\n```\r\njinja2.exceptions.UndefinedError: 'None' has no attribute 'events' \r\n```\r\n- **What version of Moto/boto I am  using and How I installed it:**\r\n```\r\nboto==2.49.0\r\nboto3==1.16.40\r\nbotocore==1.19.40\r\nmoto==1.3.16.dev0\r\n```\r\nI installed Moto using the latest code on master because I wanted to get the fix for the following issue #3411 \r\n\r\n<details><summary> Full Code Exception</summary>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/bin/inv\", line 33, in <module>\r\n    sys.exit(load_entry_point('invoke==1.4.1', 'console_scripts', 'inv')())\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/invoke-1.4.1-py3.8.egg/invoke/program.py\", line 384, in run\r\n    self.execute()\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/invoke-1.4.1-py3.8.egg/invoke/program.py\", line 566, in execute\r\n    executor.execute(*self.tasks)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/invoke-1.4.1-py3.8.egg/invoke/executor.py\", line 129, in execute\r\n    result = call.task(*args, **call.kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/invoke-1.4.1-py3.8.egg/invoke/tasks.py\", line 127, in __call__\r\n    result = self.body(*args, **kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/tasks.py\", line 69, in wait\r\n    wait4cf(session(), 'test', 1, 10)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/moto/core/models.py\", line 102, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/inspiring_murdock/aws/cloudformation.py\", line 86, in wait4cf\r\n    events = get_cf_events(session, stack_name, logger=logger)\r\n  File \"/home/user/git/modamod/inspiring-murdock/inspiring_murdock/aws/cloudformation.py\", line 76, in get_cf_events\r\n    events = itertools.chain(*map(lambda x: x.get(\"StackEvents\"), pages)) if pages else iter(())\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/paginate.py\", line 255, in __iter__\r\n    response = self._make_request(current_kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/paginate.py\", line 332, in _make_request\r\n    return self._method(**current_kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/client.py\", line 357, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/client.py\", line 662, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/client.py\", line 682, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/endpoint.py\", line 136, in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/endpoint.py\", line 253, in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/retryhandler.py\", line 183, in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/retryhandler.py\", line 250, in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/retryhandler.py\", line 269, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/retryhandler.py\", line 316, in __call__\r\n    checker_response = checker(attempt_number, response,\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/retryhandler.py\", line 222, in __call__\r\n    return self._check_caught_exception(\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/retryhandler.py\", line 359, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/endpoint.py\", line 197, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/botocore-1.19.40-py3.8.egg/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/moto/core/models.py\", line 341, in __call__\r\n    status, headers, body = response_callback(\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/moto/core/responses.py\", line 202, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/moto/core/responses.py\", line 312, in _dispatch\r\n    return self.call_action()\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/moto/core/responses.py\", line 397, in call_action\r\n    response = method()\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/moto/cloudformation/responses.py\", line 254, in describe_stack_events\r\n    return template.render(stack=stack)\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/Jinja2-3.0.0a1-py3.8.egg/jinja2/environment.py\", line 1045, in render\r\n    self.environment.handle_exception()\r\n  File \"/home/user/git/modamod/inspiring-murdock/.venv/lib/python3.8/site-packages/Jinja2-3.0.0a1-py3.8.egg/jinja2/environment.py\", line 787, in handle_exception\r\n    raise rewrite_traceback_stack(source=source)\r\n  File \"<template>\", line 1, in top-level template code\r\njinja2.exceptions.UndefinedError: 'None' has no attribute 'events'\r\n\r\n```\r\n</details>", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3558/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3558/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3557", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3557/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3557/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3557/events", "html_url": "https://github.com/getmoto/moto/issues/3557", "id": 770743524, "node_id": "MDU6SXNzdWU3NzA3NDM1MjQ=", "number": 3557, "title": "BaseResponse method `uri_to_regexp` leaves dashes in the final string", "user": {"login": "VictorHiroshi", "id": 17966485, "node_id": "MDQ6VXNlcjE3OTY2NDg1", "avatar_url": "https://avatars.githubusercontent.com/u/17966485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VictorHiroshi", "html_url": "https://github.com/VictorHiroshi", "followers_url": "https://api.github.com/users/VictorHiroshi/followers", "following_url": "https://api.github.com/users/VictorHiroshi/following{/other_user}", "gists_url": "https://api.github.com/users/VictorHiroshi/gists{/gist_id}", "starred_url": "https://api.github.com/users/VictorHiroshi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VictorHiroshi/subscriptions", "organizations_url": "https://api.github.com/users/VictorHiroshi/orgs", "repos_url": "https://api.github.com/users/VictorHiroshi/repos", "events_url": "https://api.github.com/users/VictorHiroshi/events{/privacy}", "received_events_url": "https://api.github.com/users/VictorHiroshi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-12-18T09:47:34Z", "updated_at": "2021-01-20T08:57:36Z", "closed_at": "2021-01-20T08:57:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Context\r\n\r\nHi. I'm using moto to mock aws pinpoint client in a similar way to the solution described [here](https://stackoverflow.com/a/61317378)\r\n\r\nThe main issue is that botocore specifies some uris with dashes in named groups, like `application-id` here: https://github.com/boto/botocore/blob/d479a37ce2c9d1832b578c627e92886e8219c1de/botocore/data/pinpoint/2016-12-01/service-2.json#L65\r\n\r\nThis ends up with and re.error exception later on when a regex match is attempted using this string.\r\n\r\n## Process\r\n\r\n[ordered list the process to finding and recreating the issue, example below]\r\n\r\n1. Create the package structure as described in [here](https://stackoverflow.com/a/61429768)\r\n2. replace url_bases and url_paths in pinpoint_urls.py by the following:\r\n```\r\nurl_bases = ['https?://pinpoint.(.+).amazonaws.com']\r\nurl_paths = {r'{0}/v1/apps/(.+)/messages$': PinPointResponse.dispatch,}\r\n```\r\n3. Add a `send_message` method to pinpoint_responses.py:\r\n```\r\ndef send_messages(self):\r\n  return 200, {}, {}\r\n```\r\n4. Instantiate a pinpoint client and call send_message fromit in test.py:\r\n```\r\nclass TestMyModule:\r\n@mock_pinpoint\r\ndef test(self):\r\n  client = boto3.client('pinpoint', region_name='eu-central-1')\r\n  client.send_messages(\r\n    ApplicationId='asdqwe1234',\r\n    MessageRequest={\r\n      'Addresses': {\r\n        'some_address': {\r\n          'ChannelType': 'EMAIL'\r\n        }\r\n      },\r\n      'MessageConfiguration': {\r\n        'EmailMessage': {\r\n          'FromAddress': 'my_address',\r\n          'RawEmail': {\r\n            'Data\": \"string\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  )\r\n```\r\n\r\n## Expected result\r\n\r\nWhen running the tests you should get a re.error with the message `re.error: bad character in group name 'application-id' at position 14`\r\nThe full traceback:\r\n```\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/client.py:357: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/client.py:663: in _make_api_call\r\n    operation_model, request_dict, request_context)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/client.py:682: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/endpoint.py:102: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/endpoint.py:137: in _send_request\r\n    success_response, exception):\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/endpoint.py:256: in _needs_retry\r\n    caught_exception=caught_exception, request_dict=request_dict)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/retryhandler.py:183: in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/retryhandler.py:251: in __call__\r\n    caught_exception)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/retryhandler.py:269: in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/retryhandler.py:317: in __call__\r\n    caught_exception)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/retryhandler.py:223: in __call__\r\n    attempt_number, caught_exception)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/retryhandler.py:359: in _check_caught_exception\r\n    raise caught_exception\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/endpoint.py:197: in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/moto/core/models.py:323: in __call__\r\n    request, request.url, request.headers\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/moto/core/responses.py:202: in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/moto/core/responses.py:312: in _dispatch\r\n    return self.call_action()\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/moto/core/responses.py:392: in call_action\r\n    action = camelcase_to_underscores(self._get_action())\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/moto/core/responses.py:380: in _get_action\r\n    return self._get_action_from_method_and_request_uri(self.method, self.path)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/site-packages/moto/core/responses.py:365: in _get_action_from_method_and_request_uri\r\n    match = re.match(regexp, request_uri)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/re.py:175: in match\r\n    return _compile(pattern, flags).match(string)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/re.py:288: in _compile\r\n    p = sre_compile.compile(pattern, flags)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/sre_compile.py:764: in compile\r\n    p = sre_parse.parse(p, flags)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/sre_parse.py:924: in parse\r\n    p = _parse_sub(source, pattern, flags & SRE_FLAG_VERBOSE, 0)\r\n../../.local/share/virtualenvs/my_project/lib/python3.7/sre_parse.py:420: in _parse_sub\r\n    not nested and not items))\r\n\r\n```\r\n\r\n## Current result\r\n\r\nMy current workaround this issue is to simply define the method_urls from my Response object manually as following:\r\n```\r\nmethod_urls = {\r\n  'POST': {\r\n    '^/v1/apps/(?P<application_id>.*)/messages$': 'SendMessages',\r\n  },\r\n}\r\n```\r\n\r\n## Possible Fix\r\n\r\nI tried changing the `uri_to_regexp` method from BaseResponse class in `moto/core/responses.py` and it seems to work in my case, but I'm not sure if this is a definitive solution or if this could cause issues somewhere else. Anyways, the change I tested was simply to add one more replace call in line 327:\r\n`replace('-', '_')`.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3557/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3557/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3554", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3554/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3554/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3554/events", "html_url": "https://github.com/getmoto/moto/issues/3554", "id": 768963084, "node_id": "MDU6SXNzdWU3Njg5NjMwODQ=", "number": 3554, "title": "mock_elbv2: ResourceInUseException after trying to delete a target group that was a listener DefaultAction", "user": {"login": "npellegrin", "id": 875560, "node_id": "MDQ6VXNlcjg3NTU2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/875560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npellegrin", "html_url": "https://github.com/npellegrin", "followers_url": "https://api.github.com/users/npellegrin/followers", "following_url": "https://api.github.com/users/npellegrin/following{/other_user}", "gists_url": "https://api.github.com/users/npellegrin/gists{/gist_id}", "starred_url": "https://api.github.com/users/npellegrin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npellegrin/subscriptions", "organizations_url": "https://api.github.com/users/npellegrin/orgs", "repos_url": "https://api.github.com/users/npellegrin/repos", "events_url": "https://api.github.com/users/npellegrin/events{/privacy}", "received_events_url": "https://api.github.com/users/npellegrin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-12-16T14:48:18Z", "updated_at": "2021-11-17T21:36:20Z", "closed_at": "2021-11-17T21:36:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "**how to reproduce the issue**\r\n\r\nWhen changing the DefaultAction of a loadbalancer's listener, the old TargetGroup cannot be deleted.\r\n\r\n**code sample (simplified)**\r\n```\r\ntarget_group_arn_1 = client.create_target_group(...)[\"TargetGroups\"][0][\"TargetGroupArn\"]\r\ntarget_group_arn_2 = client.create_target_group(...)[\"TargetGroups\"][0][\"TargetGroupArn\"]\r\nlistener_arn = client.create_listener(\r\n        LoadBalancerArn=load_balancer_arn,\r\n        Protocol='HTTP',\r\n        Port=80,\r\n        DefaultActions=[{'Type': 'forward', 'TargetGroupArn': target_group_arn_1}])[\"Listeners\"][0][\"LoadBalancerArn\"]\r\nclient.modify_listener(\r\n                            ListenerArn=listener_arn,\r\n                            DefaultActions=[{\r\n                                'Type': 'forward',\r\n                                'TargetGroupArn': target_group_arn_2,\r\n                            }])\r\nclient.delete_target_group(TargetGroupArn=target_group_arn_1)\r\n```\r\n\r\n**what you expected to happen**.\r\n\r\nI would expect to delete the target group, because it is not attached to the listener anymore.\r\n\r\n**what actually happens**\r\n\r\nThe following error is raised:\r\n\r\n`botocore.errorfactory.ResourceInUseException: An error occurred (ResourceInUse) when calling the DeleteTargetGroup operation: The target group 'arn:aws:elasticloadbalancing:eu-west-3:1:targetgroup/TEST/50dc6c495c0c9188' is currently in use by a listener or a rule`\r\n\r\n**analysis**\r\n\r\nI've walked throught the moto's source code and I believe to have found rootcause (but feel free to tell me if not !)\r\nIn the file `moto/moto/elbv2/models.py` the ResourceInUseError is thrown because moto detects that the target group is in use in any of the `rules`:\r\n\r\n```\r\n    def _any_listener_using(self, target_group_arn):\r\n        for load_balancer in self.load_balancers.values():\r\n            for listener in load_balancer.listeners.values():\r\n                for rule in listener.rules:\r\n                    for action in rule.actions:\r\n                        if action.data.get(\"target_group_arn\") == target_group_arn:\r\n                            return True\r\n        return False\r\n```\r\n\r\n\r\nThe `listener.rules` object is build like that:\r\n```\r\n    @property\r\n    def rules(self):\r\n        return self._non_default_rules + [self._default_rule]\r\n```\r\n\r\nThe `self._default_rule` is created only when the listener is created:\r\n```\r\n        self._default_rule = FakeRule(\r\n            listener_arn=self.arn,\r\n            conditions=[],\r\n            priority=\"default\",\r\n            actions=default_actions,\r\n            is_default=True,\r\n        )\r\n```\r\n\r\nBut, when updating default actions, the object reference is replaced, without updating _default_rule:\r\n```\r\n        if default_actions is not None and default_actions != []:\r\n            # Is currently not validated\r\n            listener.default_actions = default_actions\r\n```\r\n\r\nConsequently, the `_default_rule` is never updated, the `rules` property still return a stale reference, and moto believes that the TargetGroup is still attached to the listener.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3554/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3554/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3542", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3542/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3542/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3542/events", "html_url": "https://github.com/getmoto/moto/issues/3542", "id": 762272729, "node_id": "MDU6SXNzdWU3NjIyNzI3Mjk=", "number": 3542, "title": "TypeError when creating security group ingress rule via CloudFormation", "user": {"login": "yasuder", "id": 15175177, "node_id": "MDQ6VXNlcjE1MTc1MTc3", "avatar_url": "https://avatars.githubusercontent.com/u/15175177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yasuder", "html_url": "https://github.com/yasuder", "followers_url": "https://api.github.com/users/yasuder/followers", "following_url": "https://api.github.com/users/yasuder/following{/other_user}", "gists_url": "https://api.github.com/users/yasuder/gists{/gist_id}", "starred_url": "https://api.github.com/users/yasuder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yasuder/subscriptions", "organizations_url": "https://api.github.com/users/yasuder/orgs", "repos_url": "https://api.github.com/users/yasuder/repos", "events_url": "https://api.github.com/users/yasuder/events{/privacy}", "received_events_url": "https://api.github.com/users/yasuder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-12-11T11:49:21Z", "updated_at": "2021-01-13T16:05:36Z", "closed_at": "2021-01-13T13:36:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "   - **How to reproduce the issue**\r\nUsing a CFT like this:\r\n```\r\n{\r\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n    \"Description\": \"AWS CloudFormation Template to create an EC2 instance\",\r\n    \"Parameters\": {\r\n        \"SubnetId\": {\r\n            \"Type\": \"String\",\r\n            \"Description\": \"An internal subnet ID of a subnet to deploy in\",\r\n            \"AllowedPattern\": \"^subnet-[a-zA-Z0-9]*\"\r\n        },\r\n        \"VPCId\": {\r\n            \"Type\": \"String\",\r\n            \"Description\": \"The VPC ID\",\r\n            \"AllowedPattern\": \"^vpc-[a-zA-Z0-9]*\"\r\n        },\r\n        \"EC2KeyName\": {\r\n            \"Type\": \"String\",\r\n            \"Description\": \"The key name assigned to the EC2 instance\",\r\n            \"Default\": \"My-Key-Pair\"\r\n        },\r\n        \"InstanceRoleName\": {\r\n            \"Type\": \"String\",\r\n            \"Description\": \"The name of the IAM role used by the instance\",\r\n            \"Default\": \"My-IAM-Role\"\r\n        }\r\n    },\r\n    \"Resources\": {\r\n        \"EC2Instance\": {\r\n            \"Type\": \"AWS::EC2::Instance\",\r\n            \"Properties\": {\r\n                \"IamInstanceProfile\": {\r\n                    \"Ref\": \"IAMInstanceProfile\"\r\n                },\r\n                \"ImageId\": \"ami-03657b56516ab7912\",\r\n                \"InstanceType\": \"t2.micro\",\r\n                \"KeyName\": {\r\n                    \"Ref\": \"EC2KeyName\"\r\n                },\r\n                \"SecurityGroupIds\": [\r\n                    {\r\n                        \"Fn::GetAtt\": [\r\n                            \"SecurityGroup\",\r\n                            \"GroupId\"\r\n                        ]\r\n                    }\r\n                ],\r\n                \"SubnetId\": {\r\n                    \"Ref\": \"SubnetId\"\r\n                },\r\n                \"Tags\": [\r\n                    {\r\n                        \"Key\": \"Name\",\r\n                        \"Value\": \"My-EC2-Instance\"\r\n                    }\r\n                ],\r\n                \"Tenancy\": \"default\"\r\n            }\r\n        },\r\n        \"SecurityGroup\": {\r\n            \"Type\": \"AWS::EC2::SecurityGroup\",\r\n            \"Properties\": {\r\n                \"GroupDescription\": \"Default VPC security group for the instance\",\r\n                \"GroupName\": \"My-SG\",\r\n                \"VpcId\": {\r\n                    \"Ref\": \"VPCId\"\r\n                }\r\n            }\r\n        },\r\n        \"SSHIngressRule\": {\r\n            \"Type\": \"AWS::EC2::SecurityGroupIngress\",\r\n            \"Properties\": {\r\n                \"CidrIp\": \"10.0.0.0/8\",\r\n                \"Description\": \"Allow SSH traffic from 10.0.0.0/8\",\r\n                \"FromPort\": 22,\r\n                \"ToPort\": 22,\r\n                \"GroupId\": {\r\n                    \"Fn::GetAtt\": [\r\n                        \"SecurityGroup\",\r\n                        \"GroupId\"\r\n                    ]\r\n                },\r\n                \"IpProtocol\": \"tcp\"\r\n            }\r\n        },\r\n        \"IAMInstanceProfile\": {\r\n            \"Type\": \"AWS::IAM::InstanceProfile\",\r\n            \"Properties\": {\r\n                \"InstanceProfileName\": \"My-Instance-Profile\",\r\n                \"Roles\": [\r\n                    {\r\n                        \"Ref\": \"InstanceRoleName\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nIf I have this snippet in a `create_stack.py` file and run this in main (where TEMPLATE is the above JSON file that I've run a `json.load` and `json.dumps` on):\r\n```\r\nimport boto3\r\n\r\ndef create_my_stack(subnet_id, vpc_id):\r\n    cf_client.create_stack(\r\n        StackName=self.stack_name,\r\n        TemplateBody=TEMPLATE,\r\n        Parameters=[\r\n            {\r\n                \"ParameterKey\": \"SubnetId\",\r\n                \"ParameterValue\": subnet_id\r\n            },\r\n            {\r\n                \"ParameterKey\": \"VPCId\",\r\n                \"ParameterValue\": vpc_id\r\n            }\r\n        ],\r\n        Capabilities=['CAPABILITY_NAMED_IAM'],\r\n        OnFailure='DELETE'\r\n    )\r\n```\r\nI have no issues. However if I try to use moto and pytest to assert that I get a response back, I get the following error:\r\n```\r\nself = <moto.ec2.models.EC2Backend object at 0x109fe8890>, group_name_or_id = 'sg-7463a68f', ip_protocol = 'tcp'\r\nfrom_port = 22, to_port = 22, ip_ranges = ['10.0.0.0/8'], source_group_names = None, source_group_ids = None\r\nvpc_id = None\r\n\r\n    def authorize_security_group_ingress(\r\n        self,\r\n        group_name_or_id,\r\n        ip_protocol,\r\n        from_port,\r\n        to_port,\r\n        ip_ranges,\r\n        source_group_names=None,\r\n        source_group_ids=None,\r\n        vpc_id=None,\r\n    ):\r\n        group = self.get_security_group_by_name_or_id(group_name_or_id, vpc_id)\r\n        if ip_ranges:\r\n            if isinstance(ip_ranges, str) or (\r\n                six.PY2 and isinstance(ip_ranges, unicode)  # noqa\r\n            ):\r\n                ip_ranges = [{\"CidrIp\": str(ip_ranges)}]\r\n            elif not isinstance(ip_ranges, list):\r\n                ip_ranges = [json.loads(ip_ranges)]\r\n        if ip_ranges:\r\n            for cidr in ip_ranges:\r\n>               if not is_valid_cidr(cidr[\"CidrIp\"]):\r\nE               TypeError: string indices must be integers\r\n```\r\n   - **What you expected to happen**\r\nI expected there to be a response, similar to what I get when I actually run the method outside of pytest.\r\n\r\n   - **What actually happens**\r\nI get the TypeError from above. It looks like it's looking for a `CidrIp` field in a [dict](https://github.com/spulec/moto/blob/master/moto/ec2/models.py#L2234), rather than the actual CIDR value itself from a list (which is what's being provided). \r\n\r\n   - **What version of Moto you're using** and **How you installed it**\r\nmoto==1.3.16\r\nboto3==1.16.34\r\nbotocore==1.19.34\r\n\r\nI am using the `mock_cloudformation` and `mock_ec2` (to create my fake VPC and subnet to deploy in) and setting them as a pytest fixture to pass into my test case.\r\nIn my `test_create_stack.py`\r\n```\r\ndef test_create_stack_success(cloudformation, ec2):\r\n    subnet = ec2.describe_subnets()['Subnets'][0]\r\n    subnet_id = subnet['SubnetId']\r\n    vpc_id = subnet['VpcId']\r\n    assert \"StackId\" in create_stack(subnet_id, vpc_id)\r\n```\r\n\r\nIn my `conftest.py`:\r\n```\r\n...\r\n@pytest.fixture\r\ndef ec2():\r\n    \"\"\"\r\n    Pytest fixture that creates the test VPC and subnet in the\r\n    fake moto AWS account\r\n\r\n    Yields a fake boto3 ec2 client\r\n    \"\"\"\r\n    with mock_ec2():\r\n        ec2 = boto3.client(\"ec2\", region_name=\"us-west-2\")\r\n        vpc = ec2.create_vpc(\r\n            CidrBlock=\"172.16.0.0/16\",\r\n            AmazonProvidedIpv6CidrBlock=False,\r\n            InstanceTenancy=\"default\"\r\n        )\r\n        vpc_id = vpc['Vpc']['VpcId']\r\n        ec2.create_subnet(\r\n            CidrBlock=\"172.16.0.0/17\",\r\n            VpcId=vpc_id,\r\n\r\n        )\r\n        yield ec2\r\n...\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3542/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3542/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3540", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3540/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3540/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3540/events", "html_url": "https://github.com/getmoto/moto/issues/3540", "id": 761756530, "node_id": "MDU6SXNzdWU3NjE3NTY1MzA=", "number": 3540, "title": "More VPC endpoint issues", "user": {"login": "sworisbreathing", "id": 1486524, "node_id": "MDQ6VXNlcjE0ODY1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1486524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sworisbreathing", "html_url": "https://github.com/sworisbreathing", "followers_url": "https://api.github.com/users/sworisbreathing/followers", "following_url": "https://api.github.com/users/sworisbreathing/following{/other_user}", "gists_url": "https://api.github.com/users/sworisbreathing/gists{/gist_id}", "starred_url": "https://api.github.com/users/sworisbreathing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sworisbreathing/subscriptions", "organizations_url": "https://api.github.com/users/sworisbreathing/orgs", "repos_url": "https://api.github.com/users/sworisbreathing/repos", "events_url": "https://api.github.com/users/sworisbreathing/events{/privacy}", "received_events_url": "https://api.github.com/users/sworisbreathing/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-12-11T00:57:57Z", "updated_at": "2021-08-22T09:48:10Z", "closed_at": "2021-08-22T09:48:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Piggybacking off of #3524 and localstack/localstack#3310 I've had another attempt at managing VPC endpoints in localstack with terraform, and here are the issues I'm finding (as of moto 1.3.16 or whatever version localstack uses)\r\n\r\n* When a VPC endpoint is created and `privateDnsEnabled` was not specified, it defaults to `None` if not specified. This breaks terraform because when it goes to describe the VPC endpoint, `None` is returned for a boolean field, and aws-sdk-go doesn't coerce `None` to `false`.\r\n* I can't fix the VPC endpoint by recreating with `privateDnsEnabled` set explicitly to `false`, because `delete-vpc-endpoints` isn't implemented in moto.\r\n\r\nMinimal terraform templates to reproduce (terraform version is 0.14 and localstack is latest version spun up using their sample docker-compose.yml):\r\n\r\n```hcl\r\nterraform {\r\n  required_version = \"= 0.14.0\"\r\n  required_providers {\r\n    aws = \"= 3.20\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_endpoint\" \"s3\" {\r\n  service_name = \"com.amazonaws.ap-southeast-2.s3\"\r\n  vpc_id = aws_vpc.main.id\r\n  auto_accept = true\r\n  security_group_ids = [aws_security_group.vpc_endpoints.id]\r\n}\r\n\r\nresource \"aws_vpc\" \"main\" {\r\n  cidr_block = \"192.168.0.0/22\"\r\n  instance_tenancy = \"default\"\r\n  enable_dns_support = true\r\n  enable_dns_hostnames = true\r\n  assign_generated_ipv6_cidr_block = false\r\n}\r\n\r\nresource \"aws_security_group\" \"vpc_endpoints\" {\r\n  name = \"vpc-endpoints\"\r\n  vpc_id = aws_vpc.main.id\r\n  ingress {\r\n    protocol = \"-1\"\r\n    from_port = 0\r\n    to_port = 0\r\n    cidr_blocks = [aws_vpc.main.cidr_block]\r\n  }\r\n  egress {\r\n    protocol = \"-1\"\r\n    from_port = 0\r\n    to_port = 0\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\nprovider \"aws\" {\r\n  region  = \"ap-southeast-2\"\r\n  access_key = \"test\"\r\n  secret_key = \"test\"\r\n  skip_credentials_validation = true\r\n  skip_metadata_api_check = true\r\n  skip_requesting_account_id = true\r\n  s3_force_path_style = true\r\n  endpoints {\r\n    ec2 = \"http://localhost:4566\"\r\n    # ... all endpoints pointing to http://localhost:4566\r\n  }\r\n}\r\n````", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3540/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3540/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3535", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3535/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3535/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3535/events", "html_url": "https://github.com/getmoto/moto/issues/3535", "id": 761222951, "node_id": "MDU6SXNzdWU3NjEyMjI5NTE=", "number": 3535, "title": "moto not compatible with mock 4.0.3", "user": {"login": "etiennechabert", "id": 1692632, "node_id": "MDQ6VXNlcjE2OTI2MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1692632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etiennechabert", "html_url": "https://github.com/etiennechabert", "followers_url": "https://api.github.com/users/etiennechabert/followers", "following_url": "https://api.github.com/users/etiennechabert/following{/other_user}", "gists_url": "https://api.github.com/users/etiennechabert/gists{/gist_id}", "starred_url": "https://api.github.com/users/etiennechabert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etiennechabert/subscriptions", "organizations_url": "https://api.github.com/users/etiennechabert/orgs", "repos_url": "https://api.github.com/users/etiennechabert/repos", "events_url": "https://api.github.com/users/etiennechabert/events{/privacy}", "received_events_url": "https://api.github.com/users/etiennechabert/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2020-12-10T13:02:57Z", "updated_at": "2021-03-27T13:52:50Z", "closed_at": "2021-02-15T08:42:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Versions**\r\nUsing `moto-1.3.16` (boto-2.49.0 boto3-1.16.20 botocore-1.19.33)\r\n\r\n**Problem**\r\nMock has released 5h ago a new version: 4.0.3\r\nSince then our tests are failing with the exception below.\r\n\r\n**Fix**\r\nForcing the version of mock to `4.0.2` is solving our issue\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/runpy.py\", line 197, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/__main__.py\", line 18, in <module>\r\n    main(module=None)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/main.py\", line 101, in __init__\r\n    self.runTests()\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/main.py\", line 271, in runTests\r\n    self.result = testRunner.run(self.test)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/runner.py\", line 176, in run\r\n    test(result)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/suite.py\", line 84, in __call__\r\n    return self.run(*args, **kwds)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/suite.py\", line 122, in run\r\n    test(result)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/suite.py\", line 84, in __call__\r\n    return self.run(*args, **kwds)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/suite.py\", line 122, in run\r\n    test(result)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/suite.py\", line 84, in __call__\r\n    return self.run(*args, **kwds)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/suite.py\", line 122, in run\r\n    test(result)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.0_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/unittest/case.py\", line 653, in __call__\r\n    return self.run(*args, **kwds)\r\n  File \"../.venv/lib/python3.9/site-packages/moto/core/models.py\", line 102, in wrapper\r\n    self.stop()\r\n  File \"../.venv/lib/python3.9/site-packages/moto/core/models.py\", line 86, in stop\r\n    self.default_session_mock.stop()\r\n  File \"../.venv/lib/python3.9/site-packages/mock/mock.py\", line 1563, in stop\r\n    return self.__exit__(None, None, None)\r\n  File \"../.venv/lib/python3.9/site-packages/mock/mock.py\", line 1529, in __exit__\r\n    if self.is_local and self.temp_original is not DEFAULT:\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3535/reactions", "total_count": 38, "+1": 27, "-1": 0, "laugh": 0, "hooray": 3, "confused": 0, "heart": 4, "rocket": 0, "eyes": 4}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3535/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3517", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3517/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3517/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3517/events", "html_url": "https://github.com/getmoto/moto/issues/3517", "id": 756726102, "node_id": "MDU6SXNzdWU3NTY3MjYxMDI=", "number": 3517, "title": "DockerException in batch model - Error while fetching server API version", "user": {"login": "dazza-codes", "id": 240623, "node_id": "MDQ6VXNlcjI0MDYyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/240623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dazza-codes", "html_url": "https://github.com/dazza-codes", "followers_url": "https://api.github.com/users/dazza-codes/followers", "following_url": "https://api.github.com/users/dazza-codes/following{/other_user}", "gists_url": "https://api.github.com/users/dazza-codes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dazza-codes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dazza-codes/subscriptions", "organizations_url": "https://api.github.com/users/dazza-codes/orgs", "repos_url": "https://api.github.com/users/dazza-codes/repos", "events_url": "https://api.github.com/users/dazza-codes/events{/privacy}", "received_events_url": "https://api.github.com/users/dazza-codes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2020-12-04T01:41:34Z", "updated_at": "2021-10-16T22:26:57Z", "closed_at": "2021-10-16T22:26:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "This might be a bug somewhere in the python docker package or it might be fixed upstream but moto[server] could use an update to any pinned dependency?\r\n\r\n- https://github.com/docker/docker-py/issues/2717\r\n\r\n```\r\n    \r\n>       self.docker_client = docker.from_env()\r\n\r\n/opt/conda/envs/project/lib/python3.7/site-packages/moto/batch/models.py:345: \r\n\r\n...\r\n\r\nself = <docker.api.client.APIClient object at 0x7f8b52ceec90>\r\n\r\n    def _retrieve_server_version(self):\r\n        try:\r\n            return self.version(api_version=False)[\"ApiVersion\"]\r\n        except KeyError:\r\n            raise DockerException(\r\n                'Invalid response from docker daemon: key \"ApiVersion\"'\r\n                ' is missing.'\r\n            )\r\n        except Exception as e:\r\n            raise DockerException(\r\n>               'Error while fetching server API version: {0}'.format(e)\r\n            )\r\nE           docker.errors.DockerException: Error while fetching server API version: cannot unpack non-iterable CallbackResponse object\r\n\r\n/opt/conda/envs/project/lib/python3.7/site-packages/docker/api/client.py:222: DockerException\r\n\r\n```\r\n\r\n### versions\r\n\r\n```\r\n$ cat /etc/lsb-release \r\nDISTRIB_ID=Ubuntu\r\nDISTRIB_RELEASE=18.04\r\nDISTRIB_CODENAME=bionic\r\nDISTRIB_DESCRIPTION=\"Ubuntu 18.04.5 LTS\"\r\n\r\n$ docker --version\r\nDocker version 19.03.14, build 5eb3275d40\r\n\r\n$ service docker status\r\n\u25cf docker.service - Docker Application Container Engine\r\n   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\r\n   Active: active (running) since Thu 2020-12-03 16:13:07 PST; 1h 26min ago\r\n     Docs: https://docs.docker.com\r\n Main PID: 1844 (dockerd)\r\n    Tasks: 10\r\n   CGroup: /system.slice/docker.service\r\n           \u2514\u25001844 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\r\n\r\n$ python --version\r\nPython 3.7.8\r\n\r\n$ poetry --version\r\nPoetry version 1.1.4\r\n\r\n$ poetry show docker\r\nname         : docker\r\nversion      : 4.4.0\r\ndescription  : A Python library for the Docker Engine API.\r\n\r\ndependencies\r\n - pywin32 227\r\n - requests >=2.14.2,<2.18.0 || >2.18.0\r\n - six >=1.4.0\r\n - websocket-client >=0.32.0\r\n\r\n$ poetry show moto\r\nname         : moto\r\nversion      : 1.3.16\r\ndescription  : A library that allows your python tests to easily mock out the boto library\r\n\r\ndependencies\r\n - aws-xray-sdk >=0.93,<0.96 || >0.96\r\n - boto >=2.36.0\r\n - boto3 >=1.9.201\r\n - botocore >=1.12.201\r\n - cfn-lint >=0.4.0\r\n - cryptography >=2.3.0\r\n - docker >=2.5.1\r\n - ecdsa <0.15\r\n - flask *\r\n - idna >=2.5,<3\r\n - Jinja2 >=2.10.1\r\n - jsondiff >=1.1.2\r\n - MarkupSafe <2.0\r\n - mock *\r\n - more-itertools *\r\n - python-dateutil >=2.1,<3.0.0\r\n - python-jose >=3.1.0,<4.0.0\r\n - pytz *\r\n - PyYAML >=5.1\r\n - requests >=2.5\r\n - responses >=0.9.0\r\n - six >1.9\r\n - werkzeug *\r\n - xmltodict *\r\n - zipp *\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3517/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3517/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3516", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3516/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3516/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3516/events", "html_url": "https://github.com/getmoto/moto/issues/3516", "id": 756706312, "node_id": "MDU6SXNzdWU3NTY3MDYzMTI=", "number": 3516, "title": "motoserver return 400 status with golang elbv2.CreateLoadBalancer ", "user": {"login": "gainings", "id": 6904396, "node_id": "MDQ6VXNlcjY5MDQzOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/6904396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gainings", "html_url": "https://github.com/gainings", "followers_url": "https://api.github.com/users/gainings/followers", "following_url": "https://api.github.com/users/gainings/following{/other_user}", "gists_url": "https://api.github.com/users/gainings/gists{/gist_id}", "starred_url": "https://api.github.com/users/gainings/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gainings/subscriptions", "organizations_url": "https://api.github.com/users/gainings/orgs", "repos_url": "https://api.github.com/users/gainings/repos", "events_url": "https://api.github.com/users/gainings/events{/privacy}", "received_events_url": "https://api.github.com/users/gainings/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-12-04T00:52:55Z", "updated_at": "2021-01-31T12:20:22Z", "closed_at": "2021-01-31T11:39:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\n### environment\r\n\r\nversion: motoserver/moto1.3.16 standalone mode in docker\r\nlanguage: go:1.15\r\nsdk-version: github.com/aws/aws-sdk-go v1.36.1\r\n\r\ncode repository: https://github.com/gainings/moto_server_issue_report\r\n\r\n### description\r\n\r\nI want create loadbalancer use golang.\r\n\r\nRun code in docker, then moto_server return 400 without error message.\r\n\r\n```\r\nstatus code: 400, request id:\r\n```\r\n\r\nmoto_server log\r\n```\r\nmoto_1  | 172.29.0.4 - - [04/Dec/2020 03:13:58] \"POST / HTTP/1.1\" 400 -\r\n```\r\n\r\nBut check the moto_server by awscli, loadbalancer created.\r\n\r\n```bash\r\n$ aws elbv2 --endpoint-url http://localhost:5000 --region ap-northeast-1 describe-load-balancer\r\n\r\n{\r\n    \"LoadBalancers\": [\r\n        {\r\n            \"LoadBalancerArn\": \"arn:aws:elasticloadbalancing:ap-northeast-1:1:loadbalancer/test-lb/50dc6c495c0c9188\",\r\n            \"DNSName\": \"test-lb-1.ap-northeast-1.elb.amazonaws.com\",\r\n            \"CanonicalHostedZoneId\": \"Z2P70J7EXAMPLE\",\r\n            \"CreatedTime\": \"2020-12-04T03:13:58.301200\",\r\n            \"LoadBalancerName\": \"test-lb\",\r\n            \"Scheme\": \"None\",\r\n            \"VpcId\": \"vpc-5db936a3\",\r\n            \"State\": {\r\n                \"Code\": \"provisioning\"\r\n            },\r\n            \"Type\": \"application\",\r\n            \"AvailabilityZones\": [\r\n                {\r\n                    \"ZoneName\": \"ap-northeast-1a\",\r\n                    \"SubnetId\": \"subnet-aec6a925\"\r\n                },\r\n                {\r\n                    \"ZoneName\": \"ap-northeast-1c\",\r\n                    \"SubnetId\": \"subnet-3696d4f8\"\r\n                }\r\n            ],\r\n            \"SecurityGroups\": [],\r\n            \"IpAddressType\": \"ipv4\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nExecute the same code again, code show serializationError\r\n\r\n```\r\n2020/12/04 03:17:47 SerializationError: failed decoding Query response\r\n\tstatus code: 200, request id: 8P1USF14J6AKOAQ3AJ0PANRN1RHOX3YZXAPB9PG1SOXPO3O5MH12\r\ncaused by: parsing time \"2020-12-04 03:13:58.301200\" as \"2006-01-02T15:04:05.999999999Z\": cannot parse \" 03:13:58.301200\" as \"T\"\r\nexit status 1\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3516/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3516/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3510", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3510/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3510/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3510/events", "html_url": "https://github.com/getmoto/moto/issues/3510", "id": 755739688, "node_id": "MDU6SXNzdWU3NTU3Mzk2ODg=", "number": 3510, "title": "elasticbeanstalk ApplicationArn does not contain ApplicationName", "user": {"login": "bpandola", "id": 11675295, "node_id": "MDQ6VXNlcjExNjc1Mjk1", "avatar_url": "https://avatars.githubusercontent.com/u/11675295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpandola", "html_url": "https://github.com/bpandola", "followers_url": "https://api.github.com/users/bpandola/followers", "following_url": "https://api.github.com/users/bpandola/following{/other_user}", "gists_url": "https://api.github.com/users/bpandola/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpandola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpandola/subscriptions", "organizations_url": "https://api.github.com/users/bpandola/orgs", "repos_url": "https://api.github.com/users/bpandola/repos", "events_url": "https://api.github.com/users/bpandola/events{/privacy}", "received_events_url": "https://api.github.com/users/bpandola/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-12-03T01:35:08Z", "updated_at": "2020-12-04T11:33:32Z", "closed_at": "2020-12-04T10:31:29Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "\r\n```    \r\n@mock_elasticbeanstalk\r\n    def test_application_arn():\r\n        client = boto3.client(\"elasticbeanstalk\", region_name=\"us-east-1\")\r\n        app = client.create_application(ApplicationName=\"My App\",)\r\n>       assert \"My App\" in app[\"Application\"][\"ApplicationArn\"]\r\nE       AssertionError: assert 'My App' in 'arn:aws:elasticbeanstalk:us-east-1:111122223333:application/'\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3510/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3510/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3506", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3506/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3506/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3506/events", "html_url": "https://github.com/getmoto/moto/issues/3506", "id": 753609362, "node_id": "MDU6SXNzdWU3NTM2MDkzNjI=", "number": 3506, "title": "DynamoDB: DynamoDB.Client.update_item() Doesn't Work with String Set", "user": {"login": "sqy117", "id": 9316253, "node_id": "MDQ6VXNlcjkzMTYyNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/9316253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sqy117", "html_url": "https://github.com/sqy117", "followers_url": "https://api.github.com/users/sqy117/followers", "following_url": "https://api.github.com/users/sqy117/following{/other_user}", "gists_url": "https://api.github.com/users/sqy117/gists{/gist_id}", "starred_url": "https://api.github.com/users/sqy117/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sqy117/subscriptions", "organizations_url": "https://api.github.com/users/sqy117/orgs", "repos_url": "https://api.github.com/users/sqy117/repos", "events_url": "https://api.github.com/users/sqy117/events{/privacy}", "received_events_url": "https://api.github.com/users/sqy117/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-11-30T16:13:21Z", "updated_at": "2020-12-07T13:00:27Z", "closed_at": "2020-12-07T09:31:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Summary**\r\n`DynamoDB.Client.update_item()` expects `list` as input for String Set according to the [documentation](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.update_item):\r\n```\r\nSS (list) --\r\nAn attribute of type String Set. For example:\r\n\r\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\r\n```\r\nHowever **moto** accepts `set` only for `SS` since this [commit](https://github.com/spulec/moto/commit/a2aefc49b486f8191541f033007b6b3cf81ed723). And the logic is not reachable as **boto3** would fire `ParamValidationError` before reaching **moto**.\r\n\r\n**Details**\r\nI tested with the following code snippet.\r\n```\r\n    @mock_dynamodb2\r\n    def test_dynamodb_update_item(self):\r\n        dynamodb = boto3.resource('dynamodb', region_name='eu-west-1')\r\n\r\n        table = dynamodb.create_table(\r\n            TableName='test',\r\n            KeySchema=[\r\n                {'AttributeName': 'record_id', 'KeyType': 'HASH'},\r\n            ],\r\n            AttributeDefinitions=[\r\n                {'AttributeName': 'record_id', 'AttributeType': 'S'},\r\n            ],\r\n        )\r\n        table.meta.client.get_waiter('table_exists').wait(TableName='test')\r\n        attribute = {\r\n            'test_field': {\r\n                'Value': {\r\n                    'SS': ['test1', 'test2'],\r\n                },\r\n                'Action': 'PUT'\r\n            }\r\n        }\r\n\r\n        boto3.client('dynamodb').update_item(\r\n            TableName='test',\r\n            Key={'record_id': {'S': 'testrecord'}},\r\n            AttributeUpdates=attribute,\r\n        )\r\n```\r\n\r\n**Expected Behavior**\r\nTest to proceed without error.\r\n\r\n**Actual Behavior**\r\n```\r\nself = <[AttributeError(\"'DynamoType' object has no attribute 'value'\") raised in repr()] DynamoType object at 0x7faa6958da50>\r\ntype_as_dict = 'test'\r\n\r\n    def __init__(self, type_as_dict):\r\n        if type(type_as_dict) == DynamoType:\r\n            self.type = type_as_dict.type\r\n            self.value = type_as_dict.value\r\n        else:\r\n            self.type = list(type_as_dict)[0]\r\n>           self.value = list(type_as_dict.values())[0]\r\nE           AttributeError: 'str' object has no attribute 'values'\r\n```\r\nCall stack:\r\n```\r\nmoto/core/models.py:323: in __call__\r\n    request, request.url, request.headers\r\nmoto/core/responses.py:202: in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\nmoto/core/responses.py:312: in _dispatch\r\n    return self.call_action()\r\nmoto/core/utils.py:277: in _wrapper\r\n    response = f(*args, **kwargs)\r\nmoto/dynamodb2/responses.py:86: in call_action\r\n    response = getattr(self, endpoint)()\r\nmoto/dynamodb2/responses.py:777: in update_item\r\n    condition_expression=condition_expression,\r\nmoto/dynamodb2/models/__init__.py:1287: in update_item\r\n    item.update_with_attribute_updates(attribute_updates)\r\nmoto/dynamodb2/models/__init__.py:121: in update_with_attribute_updates\r\n    self.attrs[attribute_name] = DynamoType({\"L\": new_value})\r\nmoto/dynamodb2/models/dynamo_type.py:64: in __init__\r\n    self.value = [DynamoType(val) for val in self.value]\r\nmoto/dynamodb2/models/dynamo_type.py:64: in <listcomp>\r\n    self.value = [DynamoType(val) for val in self.value]\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3506/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3506/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3477", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3477/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3477/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3477/events", "html_url": "https://github.com/getmoto/moto/issues/3477", "id": 744928819, "node_id": "MDU6SXNzdWU3NDQ5Mjg4MTk=", "number": 3477, "title": "SNS errors do not match what AWS actually returns", "user": {"login": "neoascetic", "id": 725836, "node_id": "MDQ6VXNlcjcyNTgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/725836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neoascetic", "html_url": "https://github.com/neoascetic", "followers_url": "https://api.github.com/users/neoascetic/followers", "following_url": "https://api.github.com/users/neoascetic/following{/other_user}", "gists_url": "https://api.github.com/users/neoascetic/gists{/gist_id}", "starred_url": "https://api.github.com/users/neoascetic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neoascetic/subscriptions", "organizations_url": "https://api.github.com/users/neoascetic/orgs", "repos_url": "https://api.github.com/users/neoascetic/repos", "events_url": "https://api.github.com/users/neoascetic/events{/privacy}", "received_events_url": "https://api.github.com/users/neoascetic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-11-17T17:16:51Z", "updated_at": "2021-01-31T13:10:18Z", "closed_at": "2021-01-31T13:10:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For example, when I am trying to fetch the attributes of not existing platform endpoint, moto gives me the following response:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ErrorResponse>\r\n      <Errors>\r\n        <Error>  \r\n          <Code>NotFound</Code>\r\n          <Message>Endpoint with arn arn:aws:sns:us-east-1:000000000000:endpoint/Bar/Foo/8c20d50c-82d5-4d39-93c8-100cc64fa512 not found</Message>\r\n        </Error>\r\n     </Errors>\r\n     <RequestID>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</RequestID>\r\n</ErrorResponse>\r\n```\r\n\r\nwhile AWS returns something like this:\r\n\r\n```\r\n<ErrorResponse xmlns=\"http://sns.amazonaws.com/doc/2010-03-31/\">\r\n  <Error>\r\n    <Type>Sender</Type>\r\n    <Code>NotFound</Code>\r\n    <Message>Endpoint does not exist</Message>\r\n  </Error>\r\n  <RequestId>ac6c2567-45f5-5295-a271-7d49406cbe7c</RequestId>\r\n</ErrorResponse>\r\n```\r\n\r\nI guess exceptions defined in https://github.com/spulec/moto/blob/master/moto/sns/exceptions.py must use [this template](https://github.com/spulec/moto/blob/19fc76f4669d545b56cfd79c55377f46379d546d/moto/sns/responses.py#L1095-L1102) to render themselves instead?", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3477/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3477/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3475", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3475/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3475/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3475/events", "html_url": "https://github.com/getmoto/moto/issues/3475", "id": 744470419, "node_id": "MDU6SXNzdWU3NDQ0NzA0MTk=", "number": 3475, "title": "Travis CI jobs failing intermittently", "user": {"login": "bpandola", "id": 11675295, "node_id": "MDQ6VXNlcjExNjc1Mjk1", "avatar_url": "https://avatars.githubusercontent.com/u/11675295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpandola", "html_url": "https://github.com/bpandola", "followers_url": "https://api.github.com/users/bpandola/followers", "following_url": "https://api.github.com/users/bpandola/following{/other_user}", "gists_url": "https://api.github.com/users/bpandola/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpandola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpandola/subscriptions", "organizations_url": "https://api.github.com/users/bpandola/orgs", "repos_url": "https://api.github.com/users/bpandola/repos", "events_url": "https://api.github.com/users/bpandola/events{/privacy}", "received_events_url": "https://api.github.com/users/bpandola/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-11-17T06:59:49Z", "updated_at": "2020-11-18T10:49:26Z", "closed_at": "2020-11-18T10:49:26Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "`test_batch.test_submit_job` fails intermittently across all Python versions and regardless of whether `TEST_SERVER_MODE=false` or `TEST_SERVER_MODE=true`.\r\n\r\n<details>\r\n<summary>Nose Failure</summary>\r\n<p>\r\n\r\n```\r\n======================================================================\r\nFAIL: test_batch.test_submit_job\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/travis/virtualenv/python3.7.6/lib/python3.7/site-packages/nose/case.py\", line 198, in runTest\r\n    self.test(*self.arg)\r\n  File \"/home/travis/build/spulec/moto/moto/core/models.py\", line 99, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/home/travis/build/spulec/moto/moto/core/models.py\", line 99, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/home/travis/build/spulec/moto/moto/core/models.py\", line 99, in wrapper\r\n    result = func(*args, **kwargs)\r\n  [Previous line repeated 2 more times]\r\n  File \"/home/travis/build/spulec/moto/tests/test_batch/test_batch.py\", line 750, in test_submit_job\r\n    [event[\"message\"] for event in resp[\"events\"]].should.equal([\"hello\"])\r\n  File \"/home/travis/virtualenv/python3.7.6/lib/python3.7/site-packages/sure/__init__.py\", line 387, in wrapper\r\n    raise AssertionError(e)\r\nAssertionError: given\r\nX = []\r\n    and\r\nY = ['hello']\r\nY has 1 items whereas X has only 0\r\n>>  raise AssertionError(e)\r\n```\r\n\r\n</p>\r\n</details>  \r\n\r\nThe test is still failing occasionally after the recent switch from nose to pytest.\r\n\r\n<details>\r\n<summary>Pytest Failure</summary>\r\n<p>\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n_______________________________ test_submit_job ________________________________\r\n\r\nself = <sure.AssertionBuilder object at 0x7fd94262df60>, args = (['hello'],)\r\nkw = {}\r\n\r\n    @wraps(func)\r\n    def wrapper(self, *args, **kw):\r\n        try:\r\n>           value = func(self, *args, **kw)\r\n\r\n../../../virtualenv/python3.6.10/lib/python3.6/site-packages/sure/__init__.py:385: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <sure.AssertionBuilder object at 0x7fd94262df60>, what = ['hello']\r\nepsilon = None\r\n\r\n    @assertionmethod\r\n    def equal(self, what, epsilon=None):\r\n        \"\"\"compares given object ``X``  with an expected ``Y`` object.\r\n    \r\n        It primarily assures that the compared objects are absolute equal ``==``.\r\n    \r\n        :param what: the expected value\r\n        :param epsilon: a delta to leverage upper-bound floating point permissiveness\r\n        \"\"\"\r\n    \r\n        try:\r\n            comparison = DeepComparison(self.obj, what, epsilon).compare()\r\n            error = False\r\n        except AssertionError as e:\r\n            error = e\r\n            comparison = None\r\n    \r\n        if isinstance(comparison, DeepExplanation):\r\n            error = comparison.get_assertion(self.obj, what)\r\n    \r\n        if self.negative:\r\n            if error:\r\n                return True\r\n    \r\n            msg = '%s should differ from %s, but is the same thing'\r\n            raise AssertionError(msg % (safe_repr(self.obj), safe_repr(what)))\r\n    \r\n        else:\r\n            if not error:\r\n                return True\r\n>           raise error\r\nE           AssertionError: given\r\nE           X = []\r\nE               and\r\nE           Y = ['hello']\r\nE           Y has 1 items whereas X has only 0\r\n\r\n../../../virtualenv/python3.6.10/lib/python3.6/site-packages/sure/__init__.py:673: AssertionError\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nThis \"flipper test\" was mentioned and acknowledged as a problem in #3161, but I wasn't able to find an existing issue tracking it.  I will investigate.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3475/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3475/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3474", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3474/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3474/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3474/events", "html_url": "https://github.com/getmoto/moto/issues/3474", "id": 744203850, "node_id": "MDU6SXNzdWU3NDQyMDM4NTA=", "number": 3474, "title": "Using CustomAmiId when calling run_job_flow incorrectly throws ValidationException for all EMR versions between 5.10.0 & 5.31.0", "user": {"login": "PanJoseph", "id": 13185823, "node_id": "MDQ6VXNlcjEzMTg1ODIz", "avatar_url": "https://avatars.githubusercontent.com/u/13185823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PanJoseph", "html_url": "https://github.com/PanJoseph", "followers_url": "https://api.github.com/users/PanJoseph/followers", "following_url": "https://api.github.com/users/PanJoseph/following{/other_user}", "gists_url": "https://api.github.com/users/PanJoseph/gists{/gist_id}", "starred_url": "https://api.github.com/users/PanJoseph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PanJoseph/subscriptions", "organizations_url": "https://api.github.com/users/PanJoseph/orgs", "repos_url": "https://api.github.com/users/PanJoseph/repos", "events_url": "https://api.github.com/users/PanJoseph/events{/privacy}", "received_events_url": "https://api.github.com/users/PanJoseph/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-11-16T21:29:52Z", "updated_at": "2020-11-22T19:33:14Z", "closed_at": "2020-11-22T18:55:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now the check in `run_job_flow` to see if a CustomAmiId is [valid](https://github.com/spulec/moto/blob/master/moto/emr/responses.py#L311) is done with default python string comparison instead of in a manner which would respect semantic versioning.\r\nSo `\"emr-5.7.0\"` is always considered greater than any value between `\"5.1...\"`(like 5.10.0) & `\"5.6...\"`(like 5.60.0) which is incorrect behavior\r\n\r\nReproducible like such:\r\n```python\r\nimport boto3\r\nfrom moto import mock_emr\r\n\r\nrun_job_flow_args = dict(\r\n    Instances={\r\n        \"InstanceCount\": 3,\r\n        \"KeepJobFlowAliveWhenNoSteps\": True,\r\n        \"MasterInstanceType\": \"c3.medium\",\r\n        \"Placement\": {\"AvailabilityZone\": \"us-east-1a\"},\r\n        \"SlaveInstanceType\": \"c3.xlarge\",\r\n    },\r\n    JobFlowRole=\"EMR_EC2_DefaultRole\",\r\n    LogUri=\"s3://mybucket/log\",\r\n    Name=\"cluster\",\r\n    ServiceRole=\"EMR_DefaultRole\",\r\n    VisibleToAllUsers=True,\r\n    ReleaseLabel=\"emr-5.31.0\", # Semantically greater than 5.7.0 and EMR actually supports CustomAmiId\r\n    CustomAmiId=\"ami-1234567\"\r\n)\r\n\r\n@mock_emr\r\ndef reproduce_issue():\r\n    client = boto3.client(\"emr\", region_name=\"us-east-1\")\r\n    client.run_job_flow(**run_job_flow_args)\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3474/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3474/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3469", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3469/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3469/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3469/events", "html_url": "https://github.com/getmoto/moto/issues/3469", "id": 742677498, "node_id": "MDU6SXNzdWU3NDI2Nzc0OTg=", "number": 3469, "title": "XML encoding is missing", "user": {"login": "ayushghosh", "id": 1011990, "node_id": "MDQ6VXNlcjEwMTE5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1011990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayushghosh", "html_url": "https://github.com/ayushghosh", "followers_url": "https://api.github.com/users/ayushghosh/followers", "following_url": "https://api.github.com/users/ayushghosh/following{/other_user}", "gists_url": "https://api.github.com/users/ayushghosh/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayushghosh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayushghosh/subscriptions", "organizations_url": "https://api.github.com/users/ayushghosh/orgs", "repos_url": "https://api.github.com/users/ayushghosh/repos", "events_url": "https://api.github.com/users/ayushghosh/events{/privacy}", "received_events_url": "https://api.github.com/users/ayushghosh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-11-13T18:17:15Z", "updated_at": "2020-11-18T07:52:43Z", "closed_at": "2020-11-18T07:52:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When generating XML for the responses the values/attributes are not escaped. Thus it breaks when the payload contains characters that need to be escaped to be compliant.\r\nEx: I was using though https://github.com/localstack/localstack\r\nWhen creating route53 record with escaped character &\r\n`{\r\n            \"Comment\": \"CREATE/DELETE/UPSERT a record \",\r\n            \"Changes\": [{\r\n            \"Action\": \"UPSERT\",\r\n                        \"ResourceRecordSet\": {\r\n                                    \"Name\": \"b.example.com\",\r\n                                    \"Type\": \"TXT\",\r\n                                    \"TTL\": 300,\r\n                                 \"ResourceRecords\": [{ \"Value\": \"MyValue&NewValue\"}]\r\n}}]\r\n}`\r\n\r\nResponse:\r\n`\r\n<ListResourceRecordSetsResponse xmlns=\"https://route53.amazonaws.com/doc/2012-12-12/\">\r\n   <ResourceRecordSets>\r\n      <ResourceRecordSet>\r\n                <Name>b.example.com.</Name>\r\n                <Type>TXT</Type>\r\n                    <TTL>300</TTL>\r\n                <ResourceRecords>\r\n                    <ResourceRecord>\r\n                        <Value>MyValue&NewValue</Value>\r\n                    </ResourceRecord>\r\n                </ResourceRecords>\r\n            </ResourceRecordSet>\r\n   </ResourceRecordSets>\r\n   <IsTruncated>false</IsTruncated>\r\n</ListResourceRecordSetsResponse>\r\n`\r\n\r\nThis generates error: Unable to parse response (not well-formed (invalid token): line 19, column 47), invalid XML received. Further retries may succeed:\r\n\r\nI was able to make the jinja templates to work by escaping the attribute with \"escape\" filter", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3469/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3469/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3464", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3464/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3464/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3464/events", "html_url": "https://github.com/getmoto/moto/issues/3464", "id": 742090607, "node_id": "MDU6SXNzdWU3NDIwOTA2MDc=", "number": 3464, "title": "BUG: update_configuration for lambda is trying to set a property", "user": {"login": "SophieMJ", "id": 8552339, "node_id": "MDQ6VXNlcjg1NTIzMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8552339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SophieMJ", "html_url": "https://github.com/SophieMJ", "followers_url": "https://api.github.com/users/SophieMJ/followers", "following_url": "https://api.github.com/users/SophieMJ/following{/other_user}", "gists_url": "https://api.github.com/users/SophieMJ/gists{/gist_id}", "starred_url": "https://api.github.com/users/SophieMJ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SophieMJ/subscriptions", "organizations_url": "https://api.github.com/users/SophieMJ/orgs", "repos_url": "https://api.github.com/users/SophieMJ/repos", "events_url": "https://api.github.com/users/SophieMJ/events{/privacy}", "received_events_url": "https://api.github.com/users/SophieMJ/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-11-13T03:09:55Z", "updated_at": "2020-11-18T09:54:06Z", "closed_at": "2020-11-18T09:54:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\nWhen using moto for testing `update_function_configuration`, this block of code is being called: https://github.com/spulec/moto/blob/47dbad291e717059a93f5cf795a9be08cfc872cc/moto/awslambda/models.py#L293-L310\r\n\r\nHowever, this is giving an error provided below:\r\n```\r\nelif key == \u201cVpcConfig\u201d:\r\n       self.vpc_config = value\r\n              AttributeError: can\u2019t set attribute\r\n\r\n../../.virtualenvs/lambda-zvljBF5N/lib/python3.8/site-packages/moto/awslambda/models.py:323: AttributeError\r\n```\r\n\r\nThis is because on L308 it's trying to set a value to `vpc_config` which is a property (not an attribute) that doesn't have a setter. I think changing it to `self._vpc_config = value` should fix the problem, but any suggestions/comments are welcome.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3464/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3464/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3460", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3460/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3460/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3460/events", "html_url": "https://github.com/getmoto/moto/issues/3460", "id": 741388363, "node_id": "MDU6SXNzdWU3NDEzODgzNjM=", "number": 3460, "title": "Does not work with latest `responses`", "user": {"login": "rossmacarthur", "id": 17109887, "node_id": "MDQ6VXNlcjE3MTA5ODg3", "avatar_url": "https://avatars.githubusercontent.com/u/17109887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmacarthur", "html_url": "https://github.com/rossmacarthur", "followers_url": "https://api.github.com/users/rossmacarthur/followers", "following_url": "https://api.github.com/users/rossmacarthur/following{/other_user}", "gists_url": "https://api.github.com/users/rossmacarthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmacarthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmacarthur/subscriptions", "organizations_url": "https://api.github.com/users/rossmacarthur/orgs", "repos_url": "https://api.github.com/users/rossmacarthur/repos", "events_url": "https://api.github.com/users/rossmacarthur/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmacarthur/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2174001772, "node_id": "MDU6TGFiZWwyMTc0MDAxNzcy", "url": "https://api.github.com/repos/getmoto/moto/labels/dependency-management", "name": "dependency-management", "color": "b8c9fc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-11-12T08:24:49Z", "updated_at": "2021-02-08T19:06:44Z", "closed_at": "2020-11-16T07:20:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Moto has a hack where it sets the default responses mock's `_find_match` method to a custom one. The latest changes in `responses` have changed the return type of this method.\r\n\r\nhttps://github.com/spulec/moto/blob/47dbad291e717059a93f5cf795a9be08cfc872cc/moto/core/models.py#L248-L267\r\n\r\nSee the [`responses`](https://github.com/getsentry/responses) change here https://github.com/getsentry/responses/commit/cf3c5a685ae95bee1a714fd36cfb77d448a4b5ec\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3460/reactions", "total_count": 7, "+1": 7, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3460/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3448", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3448/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3448/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3448/events", "html_url": "https://github.com/getmoto/moto/issues/3448", "id": 739116187, "node_id": "MDU6SXNzdWU3MzkxMTYxODc=", "number": 3448, "title": "DynamoDB update_item using ReturnValues='UPDATED_NEW' fails with \"Value must be a nonempty dictionary whose key is a valid dynamodb type\"", "user": {"login": "pstDnb", "id": 74196298, "node_id": "MDQ6VXNlcjc0MTk2Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/74196298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pstDnb", "html_url": "https://github.com/pstDnb", "followers_url": "https://api.github.com/users/pstDnb/followers", "following_url": "https://api.github.com/users/pstDnb/following{/other_user}", "gists_url": "https://api.github.com/users/pstDnb/gists{/gist_id}", "starred_url": "https://api.github.com/users/pstDnb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pstDnb/subscriptions", "organizations_url": "https://api.github.com/users/pstDnb/orgs", "repos_url": "https://api.github.com/users/pstDnb/repos", "events_url": "https://api.github.com/users/pstDnb/events{/privacy}", "received_events_url": "https://api.github.com/users/pstDnb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-11-09T15:17:44Z", "updated_at": "2020-11-17T08:44:53Z", "closed_at": "2020-11-17T08:44:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code runs fine towards DynamoDB, but fails with moto:\r\n```\r\nimport time\r\n\r\nimport boto3\r\nimport moto\r\n\r\n\r\n@moto.mock_dynamodb2()\r\ndef test_update_does_not_work():\r\n    dynamo_client = boto3.resource(\"dynamodb\", region_name=\"eu-west-1\")\r\n    dynamo_client.create_table(TableName=\"ZzTable3\",\r\n                               KeySchema=[{'AttributeName': 'HashKey1', 'KeyType': 'HASH'}],\r\n                               AttributeDefinitions=[{'AttributeName': 'HashKey1', 'AttributeType': 'S'}],\r\n                               ProvisionedThroughput={'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5})\r\n\r\n    time.sleep(5)\r\n\r\n    table_data = [{\r\n        \"HashKey1\": \"HashKeyValue1\",\r\n        \"listValuedAttribute1\": [\r\n            \"a\",\r\n            \"b\"\r\n        ]}]\r\n\r\n    dynamodb_table = dynamo_client.Table(\"ZzTable3\")\r\n    for record in table_data:\r\n        dynamodb_table.put_item(Item=record)\r\n\r\n    table_data[0][\"listValuedAttribute1\"][1] = \"c\"\r\n\r\n    dynamodb_table.update_item(\r\n        Key={\"HashKey1\": \"HashKeyValue1\"},\r\n        UpdateExpression=f\"SET listValuedAttribute1=:a\",\r\n        ExpressionAttributeValues={':a': table_data[0][\"listValuedAttribute1\"]},\r\n        ReturnValues='UPDATED_NEW')\r\n```\r\nThe following error is shown in the output:\r\n```\r\nself = <boto3.dynamodb.types.TypeDeserializer object at 0x000002D3CD64DB70>\r\nvalue = None\r\n\r\n    def deserialize(self, value):\r\n        \"\"\"The method to deserialize the DynamoDB data types.\r\n    \r\n        :param value: A DynamoDB value to be deserialized to a pythonic value.\r\n            Here are the various conversions:\r\n    \r\n            DynamoDB                                Python\r\n            --------                                ------\r\n            {'NULL': True}                          None\r\n            {'BOOL': True/False}                    True/False\r\n            {'N': str(value)}                       Decimal(str(value))\r\n            {'S': string}                           string\r\n            {'B': bytes}                            Binary(bytes)\r\n            {'NS': [str(value)]}                    set([Decimal(str(value))])\r\n            {'SS': [string]}                        set([string])\r\n            {'BS': [bytes]}                         set([bytes])\r\n            {'L': list}                             list\r\n            {'M': dict}                             dict\r\n    \r\n        :returns: The pythonic value of the DynamoDB type.\r\n        \"\"\"\r\n    \r\n        if not value:\r\n>           raise TypeError('Value must be a nonempty dictionary whose key '\r\n                            'is a valid dynamodb type.')\r\nE           TypeError: Value must be a nonempty dictionary whose key is a valid dynamodb type.\r\n```\r\nDebugging the issue showed that there might be a bug in moto/dynamodb2/responses.py, possibly in the method _build_updated_new_attributes(). This causes None elements to be included in the list at indexes where the updated value equals the original value.\r\n\r\nWe've currently worked around the issue by omitting ```ReturnValues='UPDATED_NEW'```, since we didn't need the returned values after all.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3448/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3448/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3441", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3441/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3441/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3441/events", "html_url": "https://github.com/getmoto/moto/issues/3441", "id": 738003284, "node_id": "MDU6SXNzdWU3MzgwMDMyODQ=", "number": 3441, "title": "DynamoDB#update_item() - AttributeUpdates should have action=PUT by default", "user": {"login": "gsamaras", "id": 12050610, "node_id": "MDQ6VXNlcjEyMDUwNjEw", "avatar_url": "https://avatars.githubusercontent.com/u/12050610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gsamaras", "html_url": "https://github.com/gsamaras", "followers_url": "https://api.github.com/users/gsamaras/followers", "following_url": "https://api.github.com/users/gsamaras/following{/other_user}", "gists_url": "https://api.github.com/users/gsamaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/gsamaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gsamaras/subscriptions", "organizations_url": "https://api.github.com/users/gsamaras/orgs", "repos_url": "https://api.github.com/users/gsamaras/repos", "events_url": "https://api.github.com/users/gsamaras/events{/privacy}", "received_events_url": "https://api.github.com/users/gsamaras/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-11-06T19:50:27Z", "updated_at": "2020-11-14T11:42:35Z", "closed_at": "2020-11-14T11:42:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Boto provides a parameter with a default, but moto doesn't seem to follow this, which lead to an error when trying to mock DynamoDB in a Unit Test.\r\n\r\nQuoting `boto3.DynamoDB.Client.update_item()` [documentation](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.update_item)(emphasis mine):\r\n\r\n>Action (string) --Specifies how to perform the update. Valid values are PUT (**default**), ...\r\n\r\nSo in my code to-be-tested I was doing:\r\n```\r\ndef my_upload_record_to_dynamodb(...):\r\n    ...\r\n    dataclass_attributes[current_field.name] = {'Value': attribute_value}\r\n    record_key = {'record_id': {'S': record_id}}\r\n    self._dynamodb_client.update_item(TableName=table_name, Key=record_key, AttributeUpdates=dataclass_attributes)\r\n```\r\n\r\nand my unit test looked like this:\r\n```\r\nimport unittest\r\nimport boto3\r\n\r\nfrom moto import mock_dynamodb2\r\nfrom unittest.mock import MagicMock, patch\r\n\r\nclass TestElasticSearch(unittest.TestCase):\r\n    def setUp(self):\r\n        self.es_record = ...\r\n\r\n    @mock_dynamodb2\r\n    @patch('boto3.client')\r\n    def test_upload_record_to_dynamodb(self, mock_boto3_sts_client):\r\n        table_name = 'my_table'\r\n        dynamodb = boto3.resource('dynamodb', region_name='eu-west-1')\r\n\r\n        table = dynamodb.create_table(\r\n            TableName=table_name,\r\n            KeySchema=[\r\n                {\r\n                    'AttributeName': 'record_id',\r\n                    'KeyType': 'HASH'\r\n                },\r\n            ],\r\n            AttributeDefinitions=[\r\n                {\r\n                    'AttributeName': 'record_id',\r\n                    'AttributeType': 'S'\r\n                },\r\n\r\n            ]\r\n        )\r\n        # Wait until the table exists.\r\n        table.meta.client.get_waiter('table_exists').wait(TableName=table_name)\r\n\r\n        my_upload_record_to_dynamodb(table_name, self.es_record)\r\n```\r\n\r\nwhich was failing with:\r\n```\r\n[CPython37-test:stdout]         es_reporter = ElasticSearchReporter(self.role_arn, None)\r\n[CPython37-test:stdout]         es_reporter.my_upload_record_to_dynamodb(\r\n[CPython37-test:stdout]             ElasticsearchIndices.ANALYSIS_BACKEND_SESSIONS_ALPHA,\r\n[CPython37-test:stdout] >           self.es_record\r\n[CPython37-test:stdout]         )\r\n[CPython37-test:stdout] \r\n...\r\n[CPython37-test:stdout] self = Item: {'Attributes': {'record_id': {'S': '6266046e-95c5-4448-aa2d-8d4959b6e306'}}}\r\n[CPython37-test:stdout] attribute_updates = {'aggregator_results_s3_path': {'Value': {'S': 's3:/my_bucket/2020-11-06T110210251207_81_my_session/inference-results/...:02:10.390290'}}, 'audio_s3_path': {'Value': {'S': 's3:/my_bucket/2020-11-06T110210251207_81_my_session/audio/'}}, ...}\r\n[CPython37-test:stdout] \r\n[CPython37-test:stdout]     def update_with_attribute_updates(self, attribute_updates):\r\n[CPython37-test:stdout]         for attribute_name, update_action in attribute_updates.items():\r\n[CPython37-test:stdout] >           action = update_action['Action']\r\n[CPython37-test:stdout] E           KeyError: 'Action'\r\n[CPython37-test:stdout] \r\n[CPython37-test:stdout] /home/gsamaras/pkg-cache/packages/Python-moto/Python-moto-1.x.67811.0/AL2012/DEV.STD.PTHREAD/build/lib/python3.7/site-packages/moto/dynamodb2/models.py:293: KeyError\r\n[CPython37-test:stdout] ----------------------------- Captured stderr call -----------------------------\r\n[CPython37-test:stdout] 2020-11-06 15:55:29,175 INFO [botocore.credentials] Found credentials in environment variables.\r\n[CPython37-test:stdout] 2020-11-06 15:55:29 INFO [elastic_search] Record about to be sent to DynamoDB (record ID: 6266046e-95c5-4448-aa2d-8d4959b6e306): {'stage': {<and so on..>\r\n```\r\n\r\nbecause there was no `Action` specified explicitly by me.\r\n\r\nIn [github.com/spulec/moto/blob/master/moto/dynamodb2/models/__init__.py#L112](https://github.com/spulec/moto/blob/master/moto/dynamodb2/models/__init__.py#L112) one can see the code that caused the error:\r\n```\r\ndef update_with_attribute_updates(self, attribute_updates):\r\n    for attribute_name, update_action in attribute_updates.items():\r\n        action = update_action[\"Action\"]\r\n```\r\n\r\nSo, I propose to change it to:\r\n```\r\ndef update_with_attribute_updates(self, attribute_updates):\r\n    for attribute_name, update_action in attribute_updates.items():\r\n        # If no explicit \"Action\" passed, then use default value as in Boto3 documentation:\r\n        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.update_item\r\n        action = update_action[\"Action\"] if \"Action\" in update_action else \"PUT\"\r\n```\r\n\r\nI would be more than happy to do a PR with this change (or a better one if you can suggest), so let me know please about your opinion and if should go for the code change, so that the future user won't have the same (customer) experience as me. :)", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3441/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3441/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3435", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3435/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3435/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3435/events", "html_url": "https://github.com/getmoto/moto/issues/3435", "id": 735567585, "node_id": "MDU6SXNzdWU3MzU1Njc1ODU=", "number": 3435, "title": "botocore.parsers.ResponseParserError changing visibility on message not in flight", "user": {"login": "wallowa", "id": 29257374, "node_id": "MDQ6VXNlcjI5MjU3Mzc0", "avatar_url": "https://avatars.githubusercontent.com/u/29257374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wallowa", "html_url": "https://github.com/wallowa", "followers_url": "https://api.github.com/users/wallowa/followers", "following_url": "https://api.github.com/users/wallowa/following{/other_user}", "gists_url": "https://api.github.com/users/wallowa/gists{/gist_id}", "starred_url": "https://api.github.com/users/wallowa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wallowa/subscriptions", "organizations_url": "https://api.github.com/users/wallowa/orgs", "repos_url": "https://api.github.com/users/wallowa/repos", "events_url": "https://api.github.com/users/wallowa/events{/privacy}", "received_events_url": "https://api.github.com/users/wallowa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-11-03T19:06:33Z", "updated_at": "2021-12-04T22:51:52Z", "closed_at": "2021-12-04T22:51:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to reproduce the bug:\r\n\r\nRun moto docker in server mode (I used the latest image at https://hub.docker.com/r/motoserver/moto)\r\n\r\nCreate a queue, send a message, receive the message, and try to set the visibility on the (now no longer valid) message:\r\n\r\n`queue = boto3.resource('sqs', endpoint_url='http://moto:5000').create_queue(QueueName='test')`\r\n`msg = base64.b64encode(json.dumps({'test': 'test'}).encode('utf-8')).decode('utf-8')`\r\n`queue.send_message(MessageBody=msg)`\r\n`sqs_msg = queue.receive_messages()[0]`\r\n`sqs_msg.change_visibility(VisibilityTimeout=1)`\r\n\r\nExpected:\r\n`botocore.exceptions.ClientError`\r\n\r\nWhat happens:\r\n`*** botocore.parsers.ResponseParserError: Unable to parse response (syntax error: line 1, column 0), invalid XML received. Further retries may succeed:\r\nb'Invalid request: The message referred to is not in flight.'`\r\n\r\nPossible cause:\r\nMessageNotInflight is the only exception in sqs/exceptions.py that does not inherit from RESTError. If I do make it inherit from RESTError, the issue goes away.\r\n\r\nVersion: Server mode using https://hub.docker.com/r/motoserver/moto latest (digest ef4e4172daf2) using docker-compose on the default port (5000).", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3435/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3435/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3425", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3425/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3425/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3425/events", "html_url": "https://github.com/getmoto/moto/issues/3425", "id": 732278004, "node_id": "MDU6SXNzdWU3MzIyNzgwMDQ=", "number": 3425, "title": "CloudFormation: create_stack_instances returns a hardcoded OperationId", "user": {"login": "jbpratt", "id": 29494941, "node_id": "MDQ6VXNlcjI5NDk0OTQx", "avatar_url": "https://avatars.githubusercontent.com/u/29494941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbpratt", "html_url": "https://github.com/jbpratt", "followers_url": "https://api.github.com/users/jbpratt/followers", "following_url": "https://api.github.com/users/jbpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jbpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbpratt/subscriptions", "organizations_url": "https://api.github.com/users/jbpratt/orgs", "repos_url": "https://api.github.com/users/jbpratt/repos", "events_url": "https://api.github.com/users/jbpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jbpratt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-10-29T12:37:55Z", "updated_at": "2022-12-03T17:07:05Z", "closed_at": "2022-12-03T17:07:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "`create_stack_instances` is giving me some issues, I am not sure yet if I am just doing something wrong. Note, I don't care at all about the template, that is just one of the shorter ones I had on hand. \r\n\r\n`moto==1.3.16`\r\n\r\nHere is a reproduction of the bug I am facing and below is pdb output during execution\r\nhttps://gist.github.com/jbpratt/63c83744990645f59961641b23636903\r\n```\r\n-> assert accounts == list_stack_instances(client=cfn, stack_set_name=stack_set_name)\r\n(Pdb) ll\r\n107  \t@mock_organizations\r\n108  \t@mock_cloudformation\r\n109  \tdef test_list_stack_instances() -> None:\r\n110  \t    cfn = boto3.client(\"cloudformation\")\r\n111  \t    org = boto3.client(\"organizations\")\r\n112  \t    stack_set_name = \"test\"\r\n113  \t    cfn.create_stack_set(\r\n114  \t        StackSetName=stack_set_name,\r\n115  \t        TemplateBody=json.dumps(\r\n116  \t            {\r\n117  \t                \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n118  \t                \"Description\": \"Only creates detector. Invitation from Master and additional CLI scripts required.\",\r\n119  \t                \"Resources\": {\r\n120  \t                    \"Detector\": {\r\n121  \t                        \"Type\": \"AWS::GuardDuty::Detector\",\r\n122  \t                        \"Properties\": {\"Enable\": True},\r\n123  \t                    }\r\n124  \t                },\r\n125  \t            }\r\n126  \t        ),\r\n127  \t    )\r\n128  \t    org.create_organization(FeatureSet=\"ALL\")\r\n129  \t    _create_accounts(client=org, N=3)\r\n130  \t    accounts = [acct[\"Id\"] for acct in get_all_accounts(client=org)]\r\n131  \t    try:\r\n132  \t        resp = cfn.create_stack_instances(\r\n133  \t            StackSetName=stack_set_name,\r\n134  \t            DeploymentTargets={\"Accounts\": accounts},\r\n135  \t            Regions=[\"us-east-1\"],\r\n136  \t        )\r\n137  \t    except Exception:\r\n138  \t        raise\r\n139  \t    print(resp)\r\n140  \t    breakpoint()\r\n141  ->\t    assert accounts == list_stack_instances(client=cfn, stack_set_name=stack_set_name)\r\n(Pdb) p resp\r\n{'OperationId': '1459ad6d-63cc-4c96-a73e-example', 'ResponseMetadata': {'RequestId': '6b29f7e3-69be-4d32-b374-example', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n(Pdb) cfn.describe_stack_set(StackSetName=\"test\")\r\n{'StackSet': {'StackSetName': 'test', 'StackSetId': 'test:2080a906-73f2-4c87-af5d-154ee1547878', 'Status': 'ACTIVE', 'TemplateBody': '{\"AWSTemplateFormatVersion\": \"2010-09-09\", \"Description\": \"Only creates detector. Invitation from Master and additional CLI scripts required.\", \"Resources\": {\"Detector\": {\"Type\": \"AWS::GuardDuty::Detector\", \"Properties\": {\"Enable\": true}}}}', 'Parameters': [], 'Capabilities': [], 'Tags': [], 'StackSetARN': 'arn:aws:cloudformation:us-east-1:123456789012:stackset/test:2080a906-73f2-4c87-af5d-154ee1547878', 'AdministrationRoleARN': 'arn:aws:iam::123456789012:role/AWSCloudFormationStackSetAdministrationRole', 'ExecutionRoleName': 'AWSCloudFormationStackSetExecutionRole'}, 'ResponseMetadata': {'RequestId': 'd8b64e11-5332-46e1-9603-example', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n(Pdb) cfn.list_stack_instances(StackSetName=stack_set_name)\r\n{'Summaries': [], 'ResponseMetadata': {'RequestId': '83c27e73-b498-410f-993c-example', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n(Pdb) p accounts\r\n['123456789012', '731034068356', '473056327620', '874197003545', '870908744837', '623185905447', '381540499107', '293016917175', '064148477009', '012002850464']\r\n(Pdb) resp = cfn.create_stack_instances(StackSetName=stack_set_name, DeploymentTargets={\"Accounts\": accounts}, Regions=[\"us-east-1\"])\r\n(Pdb) p resp\r\n{'OperationId': '1459ad6d-63cc-4c96-a73e-example', 'ResponseMetadata': {'RequestId': '6b29f7e3-69be-4d32-b374-example', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n(Pdb) cfn.describe_stack_set_operation(StackSetName=\"test\", OperationId=resp[\"OperationId\"])\r\n*** botocore.exceptions.ClientError: An error occurred (ValidationError) when calling the DescribeStackSetOperation operation: Stack with id 1459ad6d-63cc-4c96-a73e-example does not exist\r\n```\r\n`AssertionError: assert ['123456789012',\\n '239450475000',\\n '792369820791',\\n '330718638503',\\n '163840266738',\\n '808357287212',\\n '780660574366',\\n '845947027914',\\n '618630734701',\\n '626459698234'] == []`\r\n\r\nSorry if this isn't enough, I can try to provide more after work.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3425/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3425/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3411", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3411/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3411/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3411/events", "html_url": "https://github.com/getmoto/moto/issues/3411", "id": 728756856, "node_id": "MDU6SXNzdWU3Mjg3NTY4NTY=", "number": 3411, "title": "CF error during template validation: TypeError: decode() takes 1 positional argument but 2 were given", "user": {"login": "bblommers", "id": 6058517, "node_id": "MDQ6VXNlcjYwNTg1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6058517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblommers", "html_url": "https://github.com/bblommers", "followers_url": "https://api.github.com/users/bblommers/followers", "following_url": "https://api.github.com/users/bblommers/following{/other_user}", "gists_url": "https://api.github.com/users/bblommers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblommers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblommers/subscriptions", "organizations_url": "https://api.github.com/users/bblommers/orgs", "repos_url": "https://api.github.com/users/bblommers/repos", "events_url": "https://api.github.com/users/bblommers/events{/privacy}", "received_events_url": "https://api.github.com/users/bblommers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 2174001772, "node_id": "MDU6TGFiZWwyMTc0MDAxNzcy", "url": "https://api.github.com/repos/getmoto/moto/labels/dependency-management", "name": "dependency-management", "color": "b8c9fc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-10-24T10:09:43Z", "updated_at": "2020-12-15T00:22:02Z", "closed_at": "2020-10-27T00:25:18Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Full error:\r\n```\r\nFile \"/home/travis/build/spulec/moto/moto/cloudformation/responses.py\", line 399, in validate_template\r\n    cfn_lint = self.cloudformation_backend.validate_template(template_body)\r\n  File \"/home/travis/build/spulec/moto/moto/cloudformation/models.py\", line 748, in validate_template\r\n    return validate_template_cfn_lint(template)\r\n  File \"/home/travis/build/spulec/moto/moto/cloudformation/utils.py\", line 74, in validate_template_cfn_lint\r\n    template, matches = decode.decode(abs_filename, False)\r\nTypeError: decode() takes 1 positional argument but 2 were given\r\n```\r\n\r\nError occurs after `cfn-lint` 0.39.0 was released. \r\n\r\nTravis build that highlights the errors: https://travis-ci.org/github/spulec/moto/jobs/738443110\r\n\r\nSpecific PR that changed the method-signature: https://github.com/aws-cloudformation/cfn-python-lint/pull/1580/files\r\n\r\nPR incoming to fix this", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3411/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3411/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3406", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3406/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3406/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3406/events", "html_url": "https://github.com/getmoto/moto/issues/3406", "id": 728332869, "node_id": "MDU6SXNzdWU3MjgzMzI4Njk=", "number": 3406, "title": "list secretsManager returns \"VersionIdsToStages\" field but the aws apis call it \"SecretVersionsToStages\"", "user": {"login": "DuaneKrause", "id": 11393236, "node_id": "MDQ6VXNlcjExMzkzMjM2", "avatar_url": "https://avatars.githubusercontent.com/u/11393236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DuaneKrause", "html_url": "https://github.com/DuaneKrause", "followers_url": "https://api.github.com/users/DuaneKrause/followers", "following_url": "https://api.github.com/users/DuaneKrause/following{/other_user}", "gists_url": "https://api.github.com/users/DuaneKrause/gists{/gist_id}", "starred_url": "https://api.github.com/users/DuaneKrause/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DuaneKrause/subscriptions", "organizations_url": "https://api.github.com/users/DuaneKrause/orgs", "repos_url": "https://api.github.com/users/DuaneKrause/repos", "events_url": "https://api.github.com/users/DuaneKrause/events{/privacy}", "received_events_url": "https://api.github.com/users/DuaneKrause/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-10-23T15:55:22Z", "updated_at": "2020-11-03T17:56:42Z", "closed_at": "2020-11-03T14:18:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "The response to list_secrets from aws secretsmanager, has a field in the secret_list_entry that is misnamed. I discovered this when making a call to list_secrets via the latest localstack/localstack docker container 0.12.0 (which includes this library).\r\n\r\n\"VersionIdsToStages\" should instead be \"SecretVersionsToStages\"\r\n\r\nI think all that needs changing is the response model here:\r\nhttps://github.com/spulec/moto/blob/14980371d796ef849b1ea401ce2c028911b537d1/moto/secretsmanager/models.py#L138\r\n\r\nYou can see the \"SecretVersionsToStages\" field in the \"ResponseSyntax\" example, in the aws api docs here:\r\nhttps://docs.aws.amazon.com/secretsmanager/latest/apireference/API_ListSecrets.html\r\n\r\nAnd in the java sdk here:\r\nhttps://github.com/aws/aws-sdk-java/blob/83f1a7c1bef7bab8f809f5123275848678fb807b/aws-java-sdk-secretsmanager/src/main/java/com/amazonaws/services/secretsmanager/model/transform/SecretListEntryJsonUnmarshaller.java#L101\r\n\r\nlocalstack is including moto.secretsmanager here:\r\nhttps://github.com/localstack/localstack/blob/d43a58d563a5a912de64d4e9c8bcac28a96d3857/localstack/services/secretsmanager/secretsmanager_starter.py#L2", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3406/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3406/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3404", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3404/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3404/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3404/events", "html_url": "https://github.com/getmoto/moto/issues/3404", "id": 727999497, "node_id": "MDU6SXNzdWU3Mjc5OTk0OTc=", "number": 3404, "title": "bug: dynamodb2 transact_get_items should return empty Map for item, if item not found", "user": {"login": "palleromk", "id": 34053588, "node_id": "MDQ6VXNlcjM0MDUzNTg4", "avatar_url": "https://avatars.githubusercontent.com/u/34053588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palleromk", "html_url": "https://github.com/palleromk", "followers_url": "https://api.github.com/users/palleromk/followers", "following_url": "https://api.github.com/users/palleromk/following{/other_user}", "gists_url": "https://api.github.com/users/palleromk/gists{/gist_id}", "starred_url": "https://api.github.com/users/palleromk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palleromk/subscriptions", "organizations_url": "https://api.github.com/users/palleromk/orgs", "repos_url": "https://api.github.com/users/palleromk/repos", "events_url": "https://api.github.com/users/palleromk/events{/privacy}", "received_events_url": "https://api.github.com/users/palleromk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-10-23T07:54:59Z", "updated_at": "2020-10-29T12:44:29Z", "closed_at": "2020-10-29T11:50:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "AWS documentation https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html\r\n\"If a requested item could not be retrieved, the corresponding ItemResponse object is Null, or if the requested item has no projected attributes, the corresponding ItemResponse object is an empty Map.\"\r\n\r\nShort example:\r\nPut into some table only one value\r\n    \"Get\": {\r\n      \"Key\": {\r\n        \"primaryKey\": {\r\n          \"S\": \"primarykey1\"\r\n        }\r\n      },\r\n      \"TableName\": \"TestTable\"\r\n    }\r\nThen transact_get_items, from both AWS and moto dynomodb2\r\n[\r\n  {\r\n    \"Get\": {\r\n      \"Key\": {\r\n        \"primaryKey\": {\r\n          \"S\": \"primarykey1\"\r\n        }\r\n      },\r\n      \"TableName\": \"TestTable\"\r\n    }\r\n  }\r\n  {\r\n    \"Get\": {\r\n      \"Key\": {\r\n        \"primaryKey\": {\r\n          \"S\": \"primarykey2\"\r\n        }\r\n      },\r\n      \"TableName\": \"TestTable\"\r\n    }\r\n  }\r\n]\r\n\r\nAWS response: [\r\n  {\r\n    \"Get\": {\r\n      \"Key\": {\r\n        \"primaryKey\": {\r\n          \"S\": \"primarykey1\"\r\n        }\r\n      },\r\n      \"TableName\": \"TestTable\"\r\n    }\r\n  },\r\n  {}\r\n]\r\n\r\nMoto dynamodb2 response\r\n[\r\n  {\r\n    \"Get\": {\r\n      \"Key\": {\r\n        \"primaryKey\": {\r\n          \"S\": \"primarykey1\"\r\n        }\r\n      },\r\n      \"TableName\": \"TestTable\"\r\n    }\r\n  }    # HERE THE SECOND EMPTY ITEM IS MISSING\r\n]\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3404/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3404/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3400", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3400/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3400/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3400/events", "html_url": "https://github.com/getmoto/moto/issues/3400", "id": 726742505, "node_id": "MDU6SXNzdWU3MjY3NDI1MDU=", "number": 3400, "title": "eventName for a deleted record should be REMOVE instead of DELETE", "user": {"login": "wenjiezhou-rl", "id": 53796460, "node_id": "MDQ6VXNlcjUzNzk2NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/53796460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wenjiezhou-rl", "html_url": "https://github.com/wenjiezhou-rl", "followers_url": "https://api.github.com/users/wenjiezhou-rl/followers", "following_url": "https://api.github.com/users/wenjiezhou-rl/following{/other_user}", "gists_url": "https://api.github.com/users/wenjiezhou-rl/gists{/gist_id}", "starred_url": "https://api.github.com/users/wenjiezhou-rl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wenjiezhou-rl/subscriptions", "organizations_url": "https://api.github.com/users/wenjiezhou-rl/orgs", "repos_url": "https://api.github.com/users/wenjiezhou-rl/repos", "events_url": "https://api.github.com/users/wenjiezhou-rl/events{/privacy}", "received_events_url": "https://api.github.com/users/wenjiezhou-rl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-10-21T18:04:43Z", "updated_at": "2020-11-03T07:18:15Z", "closed_at": "2020-11-02T17:21:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using Moto to mock DynamoDB streams, a deleted record has the eventName = \"DELETE\" right now:\r\nhttps://github.com/spulec/moto/blob/9eb58eea411214ded617ea45ce9a4407a8f95194/moto/dynamodb2/models/__init__.py#L243-L250\r\n\r\nAWS's DynanoDB Stream specification states that this should actually be `\"REMOVE\"`:\r\nhttps://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_Record.html#DDB-Type-streams_Record-eventName\r\n\r\nI am on Moto version 1.3.16 and using the dynamodb2.start() and stop() methods\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3400/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3400/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3397", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3397/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3397/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3397/events", "html_url": "https://github.com/getmoto/moto/issues/3397", "id": 725629134, "node_id": "MDU6SXNzdWU3MjU2MjkxMzQ=", "number": 3397, "title": "EC2 VPNGatewayId Param Casing", "user": {"login": "joshah-moors", "id": 61207077, "node_id": "MDQ6VXNlcjYxMjA3MDc3", "avatar_url": "https://avatars.githubusercontent.com/u/61207077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshah-moors", "html_url": "https://github.com/joshah-moors", "followers_url": "https://api.github.com/users/joshah-moors/followers", "following_url": "https://api.github.com/users/joshah-moors/following{/other_user}", "gists_url": "https://api.github.com/users/joshah-moors/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshah-moors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshah-moors/subscriptions", "organizations_url": "https://api.github.com/users/joshah-moors/orgs", "repos_url": "https://api.github.com/users/joshah-moors/repos", "events_url": "https://api.github.com/users/joshah-moors/events{/privacy}", "received_events_url": "https://api.github.com/users/joshah-moors/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-10-20T14:07:04Z", "updated_at": "2020-10-27T12:13:18Z", "closed_at": "2020-10-27T07:41:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Param casing of \"VPNGatewayId\" is not consistent with boto3 casing and user is unable to set this attribute while testing.\r\n\r\nUpdate to be made in this file: moto/ec2/responses/vpn_connections.py\r\nLine 10: \"VPNGatewayId\" -> \"VpnGatewayId\"\r\n\r\nBoto3 docs of the same functionality to see the correct option is \"VpnGatewayId\":\r\nhttps://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.create_vpn_gateway", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3397/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3397/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3395", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3395/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3395/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3395/events", "html_url": "https://github.com/getmoto/moto/issues/3395", "id": 724685087, "node_id": "MDU6SXNzdWU3MjQ2ODUwODc=", "number": 3395, "title": "logs client describe_log_groups nextToken is int instead of str", "user": {"login": "teotwaki", "id": 1420434, "node_id": "MDQ6VXNlcjE0MjA0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1420434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teotwaki", "html_url": "https://github.com/teotwaki", "followers_url": "https://api.github.com/users/teotwaki/followers", "following_url": "https://api.github.com/users/teotwaki/following{/other_user}", "gists_url": "https://api.github.com/users/teotwaki/gists{/gist_id}", "starred_url": "https://api.github.com/users/teotwaki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teotwaki/subscriptions", "organizations_url": "https://api.github.com/users/teotwaki/orgs", "repos_url": "https://api.github.com/users/teotwaki/repos", "events_url": "https://api.github.com/users/teotwaki/events{/privacy}", "received_events_url": "https://api.github.com/users/teotwaki/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-10-19T14:31:43Z", "updated_at": "2020-10-21T08:47:10Z", "closed_at": "2020-10-21T08:47:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI was mocking some code of mine when I realised that the value returned for nextToken when calling `logs.describe_log_groups` is an int, however `logs.describe_log_groups` expects an str. Here's a minimal reproduction case:\r\n\r\n```python\r\nimport boto3\r\nfrom moto import mock_logs\r\n\r\nwith mock_logs():\r\n    client = boto3.client('logs')\r\n\r\n    for i in range(55):\r\n        client.create_log_group(logGroupName=f'my-log-group-{i}')\r\n\r\n    result = client.describe_log_groups()\r\n    groups = result['logGroups']\r\n\r\n    result = client.describe_log_groups(nextToken=result['nextToken'])\r\n```\r\n\r\nThis throws:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"foo.py\", line 13, in <module>\r\n    client.describe_log_groups(nextToken=result['nextToken'])\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/client.py\", line 357, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/client.py\", line 648, in _make_api_call\r\n    request_dict = self._convert_to_request_dict(\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/client.py\", line 696, in _convert_to_request_dict\r\n    request_dict = self._serializer.serialize_to_request(\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/validate.py\", line 297, in serialize_to_request\r\n    raise ParamValidationError(report=report.generate_report())\r\nbotocore.exceptions.ParamValidationError: Parameter validation failed:\r\nInvalid type for parameter nextToken, value: 50, type: <class 'int'>, valid types: <class 'str'>\r\n```\r\n\r\nI tried casting the nextToken value to an `str` in the hopes of working aroud this issue, however this generates another error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"foo.py\", line 13, in <module>\r\n    client.describe_log_groups(nextToken=str(result['nextToken']))\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/client.py\", line 357, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/client.py\", line 662, in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/client.py\", line 682, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/endpoint.py\", line 136, in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/endpoint.py\", line 253, in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/retryhandler.py\", line 183, in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/retryhandler.py\", line 250, in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/retryhandler.py\", line 269, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/retryhandler.py\", line 316, in __call__\r\n    checker_response = checker(attempt_number, response,\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/retryhandler.py\", line 222, in __call__\r\n    return self._check_caught_exception(\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/retryhandler.py\", line 359, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/endpoint.py\", line 197, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/moto/core/models.py\", line 322, in __call__\r\n    status, headers, body = response_callback(\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/moto/core/responses.py\", line 202, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/moto/core/responses.py\", line 312, in _dispatch\r\n    return self.call_action()\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/moto/core/responses.py\", line 397, in call_action\r\n    response = method()\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/moto/logs/responses.py\", line 42, in describe_log_groups\r\n    groups, next_token = self.logs_backend.describe_log_groups(\r\n  File \"/home/ubuntu/.venvs/moto-test-case/lib/python3.8/site-packages/moto/logs/models.py\", line 497, in describe_log_groups\r\n    groups_page = groups[next_token : next_token + limit]\r\nTypeError: can only concatenate str (not \"int\") to str\r\n```\r\n\r\nThis occurs with Python 3.8 on moto 1.3.16. I'll provide a PR if I get around to it, just wanted to log the issue to keep track of it.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3395/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3385", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3385/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3385/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3385/events", "html_url": "https://github.com/getmoto/moto/issues/3385", "id": 721005035, "node_id": "MDU6SXNzdWU3MjEwMDUwMzU=", "number": 3385, "title": "Unable to create a subnet from a secondary VPC CIDR", "user": {"login": "davidaah", "id": 17261662, "node_id": "MDQ6VXNlcjE3MjYxNjYy", "avatar_url": "https://avatars.githubusercontent.com/u/17261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidaah", "html_url": "https://github.com/davidaah", "followers_url": "https://api.github.com/users/davidaah/followers", "following_url": "https://api.github.com/users/davidaah/following{/other_user}", "gists_url": "https://api.github.com/users/davidaah/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidaah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidaah/subscriptions", "organizations_url": "https://api.github.com/users/davidaah/orgs", "repos_url": "https://api.github.com/users/davidaah/repos", "events_url": "https://api.github.com/users/davidaah/events{/privacy}", "received_events_url": "https://api.github.com/users/davidaah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-10-13T23:52:25Z", "updated_at": "2020-10-16T15:56:46Z", "closed_at": "2020-10-16T15:02:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Background\r\n\r\nI was attempting to create a Subnet from a secondary VPC CIDR and was getting a subnet validation error.\r\n\r\nIt appears that this is because `create_subnet` only validates the CIDR is a subset of the VPC primary CIDR (https://github.com/spulec/moto/blob/master/moto/ec2/models.py#L3433-L3435). Instead I believe this should be validated against all CIDRs in the VPC `cidr block association sets`\r\n\r\n## Observed Behavior\r\n\r\nTo reproduce you can run the below code (I tested with moto@1.3.16 and boto3@1.14.40 in python3.7):\r\n\r\n```python\r\nimport boto3\r\nfrom moto import mock_sts, mock_ec2\r\n\r\n@mock_sts\r\n@mock_ec2\r\ndef main():\r\n    client = boto3.client(\"ec2\", region_name=\"us-west-2\")\r\n\r\n    vpc = client.create_vpc(CidrBlock=\"10.0.0.0/16\")\r\n\r\n    # Succeeds\r\n    subnet1 = client.create_subnet(\r\n        AvailabilityZone=\"us-west-2a\",\r\n        CidrBlock=\"10.0.0.0/24\",\r\n        VpcId=vpc[\"Vpc\"][\"VpcId\"],\r\n    )\r\n\r\n   print(subnet1)\r\n\r\n   client.associate_vpc_cidr_block(\r\n        CidrBlock=\"10.1.0.0/16\",\r\n        VpcId=vpc[\"Vpc\"][\"VpcId\"],\r\n    )\r\n\r\n    # Fails\r\n    subnet2 = client.create_subnet(\r\n        AvailabilityZone=\"us-west-2a\",\r\n        CidrBlock=\"10.1.0.0/24\",\r\n        VpcId=vpc[\"Vpc\"][\"VpcId\"],\r\n    )\r\n\r\n    print(subnet2)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n## Output / Traceback\r\n\r\n```\r\n{'Subnet': {'AvailabilityZone': 'us-west-2a', 'AvailabilityZoneId': 'usw2-az2', 'AvailableIpAddressCount': 251, 'CidrBlock': '10.0.0.0/24', 'DefaultForAz': False, 'MapPublicIpOnLaunch': False, 'State': 'pending', 'SubnetId': 'subnet-89f4d757', 'VpcId': 'vpc-5c9431df', 'OwnerId': '111122223333', 'AssignIpv6AddressOnCreation': False, 'Ipv6CidrBlockAssociationSet': [], 'SubnetArn': 'arn:aws:ec2:us-west-2:111122223333:subnet/subnet-89f4d757'}, 'ResponseMetadata': {'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 35, in <module>\r\n    main()\r\n  File \"/path/to/.venv/lib/python3.7/site-packages/moto/core/models.py\", line 100, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/path/to/.venv/lib/python3.7/site-packages/moto/core/models.py\", line 100, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"test.py\", line 29, in main\r\n    VpcId=vpc[\"Vpc\"][\"VpcId\"],\r\n  File \"/path/to/.venv/lib/python3.7/site-packages/botocore/client.py\", line 316, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/path/to/.venv/lib/python3.7/site-packages/botocore/client.py\", line 635, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (InvalidSubnet.Range) when calling the CreateSubnet operation: The CIDR '10.1.0.0/24' is invalid.\r\n```\r\n\r\n\r\n## Expected Behavior\r\n\r\nResource `subnet2` should pass validation and be successfully created in the backend.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3385/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3385/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3368", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3368/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3368/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3368/events", "html_url": "https://github.com/getmoto/moto/issues/3368", "id": 717760692, "node_id": "MDU6SXNzdWU3MTc3NjA2OTI=", "number": 3368, "title": "Failed lambda execution payloads are improperly encoded", "user": {"login": "ascotan", "id": 1023195, "node_id": "MDQ6VXNlcjEwMjMxOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1023195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ascotan", "html_url": "https://github.com/ascotan", "followers_url": "https://api.github.com/users/ascotan/followers", "following_url": "https://api.github.com/users/ascotan/following{/other_user}", "gists_url": "https://api.github.com/users/ascotan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ascotan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ascotan/subscriptions", "organizations_url": "https://api.github.com/users/ascotan/orgs", "repos_url": "https://api.github.com/users/ascotan/repos", "events_url": "https://api.github.com/users/ascotan/events{/privacy}", "received_events_url": "https://api.github.com/users/ascotan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-10-09T00:30:04Z", "updated_at": "2021-10-09T12:08:57Z", "closed_at": "2021-10-09T12:08:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/spulec/moto/blob/c26bef6f797c3f894ff929e0e36901a3c7a97156/moto/awslambda/models.py#L504\r\n\r\nWhen an asynchronous lambda call fails, the response from the lambda is not encoded properly and as a result the content-length header doesn't match the number of bytes read from the payload.  The resulting mismatch results in an IncompleteReadError.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3368/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3368/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3363", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3363/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3363/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3363/events", "html_url": "https://github.com/getmoto/moto/issues/3363", "id": 716707085, "node_id": "MDU6SXNzdWU3MTY3MDcwODU=", "number": 3363, "title": "moto_server S3 HTTP PUT/GET", "user": {"login": "notmeta", "id": 13108849, "node_id": "MDQ6VXNlcjEzMTA4ODQ5", "avatar_url": "https://avatars.githubusercontent.com/u/13108849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notmeta", "html_url": "https://github.com/notmeta", "followers_url": "https://api.github.com/users/notmeta/followers", "following_url": "https://api.github.com/users/notmeta/following{/other_user}", "gists_url": "https://api.github.com/users/notmeta/gists{/gist_id}", "starred_url": "https://api.github.com/users/notmeta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notmeta/subscriptions", "organizations_url": "https://api.github.com/users/notmeta/orgs", "repos_url": "https://api.github.com/users/notmeta/repos", "events_url": "https://api.github.com/users/notmeta/events{/privacy}", "received_events_url": "https://api.github.com/users/notmeta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-10-07T17:09:28Z", "updated_at": "2021-08-28T05:10:16Z", "closed_at": "2021-08-28T05:10:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "using moto 1.3.16\r\n\r\nNot sure if moto actually supports this and I'm just being daft, or if this isn't supported to begin with.\r\nI've tried searching through documentation and other issues/PRs with no luck.\r\n\r\nI am running a standalone `moto_server s3` as I need to proxy NGINX HTTP GET/PUT requests to it, but for the purposes of getting-it-working I have cut out the NGINX middleman for now.\r\nI also have some pytests which use `@mock_s3` for creating a test bucket.\r\n\r\nI have a couple of issues:\r\n- My pytest tests *seem* to work, successfully creating a bucket and `PUT`ing a file in the correct bucket, however with no contents according to `http://localhost:5000/moto-api`, failing the last stage of one of my tests:\r\n```python\r\n    data_input = b'some data 123 321'\r\n    req = urllib.request.Request(url='localhost:5000/mybucket/test.txt', data=data_input, method='PUT')\r\n\r\n    with urllib.request.urlopen(req) as f:\r\n        assert f.status == 200  # PASSED\r\n    \r\n    req = urllib.request.Request(url='localhost:5000/mybucket/test.txt', method='GET')\r\n    with urllib.request.urlopen(req) as f:\r\n        assert f.status == 200   # PASSED\r\n\r\n        data_response = f.read()\r\n        assert data_response == data_input  # <- FAILURE: b'' != b'some data 123 321'\r\n```\r\n- If I manually PUT a file using `curl` I again get no contents when using `curl -X PUT localhost:5000/mybucket/test.txt -d 'test123'`, however when using `curl -X PUT localhost:5000/mybucket/test.txt --upload-file ./test.txt` it works, creating a file with *actual* contents for a change. The problem is if I try to access the file via HTTP GET (either through `curl` or my browser) I get a 403 error. As part of the bucket creation (using `@mock_s3`) I have tried attaching a bucket policy allowing [read-only permission for anonymous users](https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-2), however this has not made any difference.\r\n\r\n\r\nTL;DR: I want to be able to PUT and GET files (and their contents) unauthenticated with REST/without boto3.\r\nJust to clarify, all my tests **work** when proxying NGINX to an actual live S3 bucket (with v4 authentication).\r\n\r\nApologies if I haven't been too clear, I'm writing this after a day of tinkering not having achieved much.\r\n\r\nOn a completely unrelated note, I thought I'd use this opportunity to ask if `moto_server` has a daemon/background mode.\r\n\r\n\r\n## Update\r\nTurns out adding `req.add_header(\"Content-Type\", \"text/plain\")` to the PUT request makes it all work.\r\n\r\nIn which case, this issue could now be a question about whether or not `moto_server` should accept/store data without a content-type. S3 REST allows it therefore I believe (granted, as a new user of moto in general) moto_server should accommodate this.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3363/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3363/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3359", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3359/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3359/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3359/events", "html_url": "https://github.com/getmoto/moto/issues/3359", "id": 714272718, "node_id": "MDU6SXNzdWU3MTQyNzI3MTg=", "number": 3359, "title": "Breaking changes in docker", "user": {"login": "saartochner", "id": 47108628, "node_id": "MDQ6VXNlcjQ3MTA4NjI4", "avatar_url": "https://avatars.githubusercontent.com/u/47108628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saartochner", "html_url": "https://github.com/saartochner", "followers_url": "https://api.github.com/users/saartochner/followers", "following_url": "https://api.github.com/users/saartochner/following{/other_user}", "gists_url": "https://api.github.com/users/saartochner/gists{/gist_id}", "starred_url": "https://api.github.com/users/saartochner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saartochner/subscriptions", "organizations_url": "https://api.github.com/users/saartochner/orgs", "repos_url": "https://api.github.com/users/saartochner/repos", "events_url": "https://api.github.com/users/saartochner/events{/privacy}", "received_events_url": "https://api.github.com/users/saartochner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-10-04T09:21:19Z", "updated_at": "2020-11-21T11:06:15Z", "closed_at": "2020-11-10T01:53:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\nHey, \r\nIf there is no docker deamon running, then using `mock_lambda` with the newest version of docker-py (4.3.1) yields the following error:\r\n\r\n```\r\ndocker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', ConnectionRefusedError(61, 'Connection refused'))\r\n```\r\nVersion 4.3.0 does not have this problem.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3359/reactions", "total_count": 4, "+1": 4, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3359/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3336", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3336/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3336/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3336/events", "html_url": "https://github.com/getmoto/moto/issues/3336", "id": 709100778, "node_id": "MDU6SXNzdWU3MDkxMDA3Nzg=", "number": 3336, "title": "update_item does not work correctly with SET update expressions", "user": {"login": "ndamclean", "id": 20464623, "node_id": "MDQ6VXNlcjIwNDY0NjIz", "avatar_url": "https://avatars.githubusercontent.com/u/20464623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndamclean", "html_url": "https://github.com/ndamclean", "followers_url": "https://api.github.com/users/ndamclean/followers", "following_url": "https://api.github.com/users/ndamclean/following{/other_user}", "gists_url": "https://api.github.com/users/ndamclean/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndamclean/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndamclean/subscriptions", "organizations_url": "https://api.github.com/users/ndamclean/orgs", "repos_url": "https://api.github.com/users/ndamclean/repos", "events_url": "https://api.github.com/users/ndamclean/events{/privacy}", "received_events_url": "https://api.github.com/users/ndamclean/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-09-25T16:47:00Z", "updated_at": "2022-02-22T13:28:11Z", "closed_at": "2020-12-05T13:43:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "**moto version:**\r\n\\>=1.3.15\r\n\r\n**Issue**\r\nThe `update_item` function does not work as expected. You should be able to use `SET` in an \"update expression\" to add an attribute to an item if the attribute does not already exist. This was working correctly in `moto` version `1.3.14`.\r\n\r\n> An expression that defines one or more attributes to be updated, the action to be performed on them, and new values for them.\r\n> \r\n> The following action values are available for UpdateExpression.\r\n> \r\n>     SET - Adds one or more attributes and values to an item.\r\n>           If any of these attributes already exist, they are replaced by the new values.\r\n>           You can also use SET to add or subtract from an attribute that is of type Number.\r\n>           For example: SET myNum = myNum + :val \r\nhttps://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html#API_UpdateItem_RequestSyntax\r\n\r\n**Code to reproduce error:**\r\n```\r\nimport boto3\r\nimport moto\r\nimport os\r\nfrom mock import patch\r\n\r\n\r\n@moto.mock_dynamodb2\r\ndef test_update_item():\r\n    with patch.dict(os.environ, {\r\n        'AWS_DEFAULT_REGION': 'us-west-2',\r\n        'AWS_ACCESS_KEY_ID': 'AKIA0000000000000000',\r\n        'AWS_SECRET_ACCESS_KEY': '0000000000000000000000000000000000000000,'\r\n    }):\r\n        dynamodb = boto3.resource('dynamodb')\r\n\r\n        dynamodb.create_table(\r\n            TableName='test',\r\n            AttributeDefinitions=[\r\n                {\r\n                    'AttributeName': 'key',\r\n                    'AttributeType': 'S'\r\n                },\r\n            ],\r\n            KeySchema=[\r\n                {\r\n                    'AttributeName': 'key',\r\n                    'KeyType': 'HASH'\r\n                }\r\n            ],\r\n            BillingMode='PAY_PER_REQUEST',\r\n        )\r\n\r\n        table = dynamodb.Table('test')\r\n\r\n        table.put_item(Item={'key': 'key1'})\r\n\r\n        table.update_item(\r\n            Key={'key': 'key1'},\r\n            UpdateExpression='SET other_attribute = other_value',\r\n        )\r\n```\r\n\r\n**Error traceback:**\r\n```\r\nTraceback (most recent call last):\r\n  File \"tmp.py\", line 43, in <module>\r\n    test_update_item()\r\n  File \"/home/nmclean/.virtualenvs/tmp/lib/python3.6/site-packages/moto/core/models.py\", line 100, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"tmp.py\", line 39, in test_update_item\r\n    UpdateExpression='SET other_attribute = other_value',\r\n  File \"/home/nmclean/.virtualenvs/tmp/lib/python3.6/site-packages/boto3/resources/factory.py\", line 520, in do_action\r\n    response = action(self, *args, **kwargs)\r\n  File \"/home/nmclean/.virtualenvs/tmp/lib/python3.6/site-packages/boto3/resources/action.py\", line 83, in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\n  File \"/home/nmclean/.virtualenvs/tmp/lib/python3.6/site-packages/botocore/client.py\", line 337, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/nmclean/.virtualenvs/tmp/lib/python3.6/site-packages/botocore/client.py\", line 656, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (ValidationException) when calling the UpdateItem operation: The provided expression refers to an attribute that does not exist in the item\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3336/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3336/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3306", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3306/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3306/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3306/events", "html_url": "https://github.com/getmoto/moto/issues/3306", "id": 698544751, "node_id": "MDU6SXNzdWU2OTg1NDQ3NTE=", "number": 3306, "title": "moto_server returning unparsable dates to v2 Java SDK", "user": {"login": "rwygand", "id": 186374, "node_id": "MDQ6VXNlcjE4NjM3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/186374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rwygand", "html_url": "https://github.com/rwygand", "followers_url": "https://api.github.com/users/rwygand/followers", "following_url": "https://api.github.com/users/rwygand/following{/other_user}", "gists_url": "https://api.github.com/users/rwygand/gists{/gist_id}", "starred_url": "https://api.github.com/users/rwygand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rwygand/subscriptions", "organizations_url": "https://api.github.com/users/rwygand/orgs", "repos_url": "https://api.github.com/users/rwygand/repos", "events_url": "https://api.github.com/users/rwygand/events{/privacy}", "received_events_url": "https://api.github.com/users/rwygand/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-09-10T22:04:20Z", "updated_at": "2020-09-22T21:44:56Z", "closed_at": "2020-09-22T21:44:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Unable to unmarshall response (Text '2020-09-10T21:41:37.256457+00:00' could not be parsed at index 19)\r\n\r\nIt looks like the v2 AWS SDK is unable to parse the datetime strings being returned by moto_server. The full exception message is \r\n\r\nUnable to unmarshall response (Text '2020-09-10T21:41:37.256457+00:00' could not be parsed at index 19). Response Code: 200, Response Text: OK (Java::SoftwareAmazonAwssdkCoreException::SdkClientException)\r\n\r\nThis is being called from JRuby, so the stacktrace is going to look a bit odd:\r\n\r\nsoftware.amazon.awssdk.core.exception.SdkClientException$BuilderImpl.build(software/amazon/awssdk/core/exception/SdkClientException.java:98)\r\nsoftware.amazon.awssdk.protocols.xml.internal.unmarshall.AwsXmlPredicatedResponseHandler.handleSuccessResponse(software/amazon/awssdk/protocols/xml/internal/unmarshall/AwsXmlPredicatedResponseHandler.java:145)\r\nsoftware.amazon.awssdk.protocols.xml.internal.unmarshall.AwsXmlPredicatedResponseHandler.handleResponse(software/amazon/awssdk/protocols/xml/internal/unmarshall/AwsXmlPredicatedResponseHandler.java:99)\r\nsoftware.amazon.awssdk.protocols.xml.internal.unmarshall.AwsXmlPredicatedResponseHandler.handle(software/amazon/awssdk/protocols/xml/internal/unmarshall/AwsXmlPredicatedResponseHandler.java:84)\r\nsoftware.amazon.awssdk.protocols.xml.internal.unmarshall.AwsXmlPredicatedResponseHandler.handle(software/amazon/awssdk/protocols/xml/internal/unmarshall/AwsXmlPredicatedResponseHandler.java:42)\r\nsoftware.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler$Crc32ValidationResponseHandler.handle(software/amazon/awssdk/awscore/client/handler/AwsSyncClientHandler.java:94)\r\nsoftware.amazon.awssdk.core.internal.handler.BaseClientHandler.lambda$successTransformationResponseHandler$5(software/amazon/awssdk/core/internal/handler/BaseClientHandler.java:229)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.HandleResponseStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/HandleResponseStage.java:40)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.HandleResponseStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/HandleResponseStage.java:30)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(software/amazon/awssdk/core/internal/http/pipeline/RequestPipelineBuilder.java:206)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptTimeoutTrackingStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/ApiCallAttemptTimeoutTrackingStage.java:73)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptTimeoutTrackingStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/ApiCallAttemptTimeoutTrackingStage.java:42)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.TimeoutExceptionHandlingStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/TimeoutExceptionHandlingStage.java:77)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.TimeoutExceptionHandlingStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/TimeoutExceptionHandlingStage.java:39)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptMetricCollectionStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/ApiCallAttemptMetricCollectionStage.java:50)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptMetricCollectionStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/ApiCallAttemptMetricCollectionStage.java:36)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/RetryableStage.java:64)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/RetryableStage.java:34)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(software/amazon/awssdk/core/internal/http/pipeline/RequestPipelineBuilder.java:206)\r\nsoftware.amazon.awssdk.core.internal.http.StreamManagingStage.execute(software/amazon/awssdk/core/internal/http/StreamManagingStage.java:56)\r\nsoftware.amazon.awssdk.core.internal.http.StreamManagingStage.execute(software/amazon/awssdk/core/internal/http/StreamManagingStage.java:36)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.executeWithTimer(software/amazon/awssdk/core/internal/http/pipeline/stages/ApiCallTimeoutTrackingStage.java:80)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/ApiCallTimeoutTrackingStage.java:60)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/ApiCallTimeoutTrackingStage.java:42)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallMetricCollectionStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/ApiCallMetricCollectionStage.java:48)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallMetricCollectionStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/ApiCallMetricCollectionStage.java:31)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(software/amazon/awssdk/core/internal/http/pipeline/RequestPipelineBuilder.java:206)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(software/amazon/awssdk/core/internal/http/pipeline/RequestPipelineBuilder.java:206)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/ExecutionFailureExceptionReportingStage.java:37)\r\nsoftware.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(software/amazon/awssdk/core/internal/http/pipeline/stages/ExecutionFailureExceptionReportingStage.java:26)\r\nsoftware.amazon.awssdk.core.internal.http.AmazonSyncHttpClient$RequestExecutionBuilderImpl.execute(software/amazon/awssdk/core/internal/http/AmazonSyncHttpClient.java:193)\r\nsoftware.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.invoke(software/amazon/awssdk/core/internal/handler/BaseSyncClientHandler.java:128)\r\nsoftware.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.doExecute(software/amazon/awssdk/core/internal/handler/BaseSyncClientHandler.java:154)\r\nsoftware.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.lambda$execute$1(software/amazon/awssdk/core/internal/handler/BaseSyncClientHandler.java:107)\r\nsoftware.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.measureApiCallSuccess(software/amazon/awssdk/core/internal/handler/BaseSyncClientHandler.java:162)\r\nsoftware.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.execute(software/amazon/awssdk/core/internal/handler/BaseSyncClientHandler.java:91)\r\nsoftware.amazon.awssdk.core.client.handler.SdkSyncClientHandler.execute(software/amazon/awssdk/core/client/handler/SdkSyncClientHandler.java:45)\r\nsoftware.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler.execute(software/amazon/awssdk/awscore/client/handler/AwsSyncClientHandler.java:55)\r\nsoftware.amazon.awssdk.services.s3.DefaultS3Client.listBuckets(software/amazon/awssdk/services/s3/DefaultS3Client.java:4940)\r\nsoftware.amazon.awssdk.services.s3.S3Client.listBuckets(software/amazon/awssdk/services/s3/S3Client.java:9406)\r\njava.lang.reflect.Method.invoke(java/lang/reflect/Method.java:498)\r\norg.jruby.javasupport.JavaMethod.invokeDirectWithExceptionHandling(org/jruby/javasupport/JavaMethod.java:438)\r\norg.jruby.javasupport.JavaMethod.invokeDirect(org/jruby/javasupport/JavaMethod.java:302)\r\nRUBY.store(/Users/rwygand/source/majority_report_topologies/scripts/functional_tests/s3_helper.rb:31)\r\nRUBY.build_telemetry_from_metron_file(/Users/rwygand/source/majority_report_topologies/scripts/functional_tests/telemetry_builder.rb:118)\r\nRUBY.build(/Users/rwygand/source/majority_report_topologies/scripts/functional_tests/telemetry_builder.rb:37)\r\nRUBY.run(/Users/rwygand/source/majority_report_topologies/scripts/functional_tests/functional_test_case.rb:36)\r\nRUBY.block in run_test_case(/Users/rwygand/source/majority_report_topologies/scripts/functional_tests/functional_test_harness.rb:108)\r\norg.jruby.RubyEnumerable$EachWithIndex.call(org/jruby/RubyEnumerable.java:1003)\r\norg.jruby.RubyArray.each(org/jruby/RubyArray.java:1735)\r\norg.jruby.RubyArray$INVOKER$i$0$0$each.call(org/jruby/RubyArray$INVOKER$i$0$0$each.gen)\r\norg.jruby.RubyClass.finvoke(org/jruby/RubyClass.java:523)\r\norg.jruby.RubyEnumerable.callEach(org/jruby/RubyEnumerable.java:140)\r\norg.jruby.RubyEnumerable.each_with_indexCommon(org/jruby/RubyEnumerable.java:1037)\r\norg.jruby.RubyEnumerable.each_with_index(org/jruby/RubyEnumerable.java:1067)\r\norg.jruby.RubyEnumerable$INVOKER$s$0$0$each_with_index.call(org/jruby/RubyEnumerable$INVOKER$s$0$0$each_with_index.gen)\r\nRUBY.run_test_case(/Users/rwygand/source/majority_report_topologies/scripts/functional_tests/functional_test_harness.rb:95)\r\nRUBY.block in run_test_cases(/Users/rwygand/source/majority_report_topologies/scripts/functional_tests/functional_test_harness.rb:75)\r\norg.jruby.RubyArray.each(org/jruby/RubyArray.java:1735)\r\norg.jruby.RubyArray$INVOKER$i$0$0$each.call(org/jruby/RubyArray$INVOKER$i$0$0$each.gen)\r\nRUBY.run_test_cases(/Users/rwygand/source/majority_report_topologies/scripts/functional_tests/functional_test_harness.rb:71)\r\nRUBY.start(/Users/rwygand/source/majority_report_topologies/scripts/functional_tests/functional_test_harness.rb:60)\r\n$_dot_.scripts.functional_tests.main.invokeOther123:start($_dot_/scripts/functional_tests/./scripts/functional_tests/main.rb:88)\r\n$_dot_.scripts.functional_tests.main.<main>(./scripts/functional_tests/main.rb:88)\r\njava.lang.invoke.MethodHandle.invokeWithArguments(java/lang/invoke/MethodHandle.java:627)\r\norg.jruby.Ruby.runScript(org/jruby/Ruby.java:830)\r\norg.jruby.Ruby.runNormally(org/jruby/Ruby.java:749)\r\norg.jruby.Ruby.runNormally(org/jruby/Ruby.java:767)\r\norg.jruby.Ruby.runFromMain(org/jruby/Ruby.java:580)\r\norg.jruby.Main.doRunFromMain(org/jruby/Main.java:417)\r\norg.jruby.Main.internalRun(org/jruby/Main.java:305)\r\norg.jruby.Main.run(org/jruby/Main.java:232)\r\norg.jruby.Main.main(org/jruby/Main.java:204)\r\n\r\nThe output of moto_server:\r\n127.0.0.1 - - [10/Sep/2020 14:41:37] \"GET / HTTP/1.1\" 200 -\r\n\r\n\r\nI'm running a standalone moto_server with the following version: moto-1.3.16.\r\nI'm using the AWS SDK for Java v2\r\nI'm just calling S3Client.listBuckets() and the SDK is unable to parse the response, per above.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3306/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3306/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3302", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3302/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3302/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3302/events", "html_url": "https://github.com/getmoto/moto/issues/3302", "id": 697491720, "node_id": "MDU6SXNzdWU2OTc0OTE3MjA=", "number": 3302, "title": "Secrets Manager ARN not persistent", "user": {"login": "Dunedan", "id": 1735355, "node_id": "MDQ6VXNlcjE3MzUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1735355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dunedan", "html_url": "https://github.com/Dunedan", "followers_url": "https://api.github.com/users/Dunedan/followers", "following_url": "https://api.github.com/users/Dunedan/following{/other_user}", "gists_url": "https://api.github.com/users/Dunedan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dunedan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dunedan/subscriptions", "organizations_url": "https://api.github.com/users/Dunedan/orgs", "repos_url": "https://api.github.com/users/Dunedan/repos", "events_url": "https://api.github.com/users/Dunedan/events{/privacy}", "received_events_url": "https://api.github.com/users/Dunedan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-09-10T06:21:36Z", "updated_at": "2020-09-30T21:02:32Z", "closed_at": "2020-09-30T21:02:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When using `mock_secretsmanager()` with `moto` 1.3.16 to create a secret, the returned ARN isn't available for querying afterwards. Instead `list_secrets()` shows that it changes with every call. See the following code for an example:\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n\r\nimport boto3\r\nfrom moto import mock_secretsmanager\r\n\r\n@mock_secretsmanager\r\ndef test():\r\n    client = boto3.client(\"secretsmanager\")\r\n    print(client.list_secrets())\r\n    response = client.create_secret(Name=\"foo\", SecretString=\"\")\r\n    print(response[\"ARN\"])\r\n    print(client.list_secrets())\r\n    print(client.list_secrets())\r\n\r\ntest()\r\n```\r\n\r\nThat code produces output like the following. Note the changing ARN:\r\n```\r\n{'SecretList': [], 'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\narn:aws:secretsmanager:eu-central-1:1234567890:secret:foo-pIWpA\r\n{'SecretList': [{'ARN': 'arn:aws:secretsmanager:eu-central-1:1234567890:secret:foo-EMilo', 'Name': 'foo', 'Description': '', 'KmsKeyId': '', 'RotationEnabled': False, 'RotationLambdaARN': '', 'RotationRules': {'AutomaticallyAfterDays': 0}, 'Tags': [], 'SecretVersionsToStages': {'f3f2841e-04d9-4f9e-ae50-1d3a23d167b6': ['AWSCURRENT']}}], 'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n{'SecretList': [{'ARN': 'arn:aws:secretsmanager:eu-central-1:1234567890:secret:foo-ndMFJ', 'Name': 'foo', 'Description': '', 'KmsKeyId': '', 'RotationEnabled': False, 'RotationLambdaARN': '', 'RotationRules': {'AutomaticallyAfterDays': 0}, 'Tags': [], 'SecretVersionsToStages': {'f3f2841e-04d9-4f9e-ae50-1d3a23d167b6': ['AWSCURRENT']}}], 'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}}\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3302/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3302/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3290", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3290/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3290/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3290/events", "html_url": "https://github.com/getmoto/moto/issues/3290", "id": 695244742, "node_id": "MDU6SXNzdWU2OTUyNDQ3NDI=", "number": 3290, "title": "Fails to install cryptography for `moto-1.3.15`", "user": {"login": "jamesgunnfiveai", "id": 35992673, "node_id": "MDQ6VXNlcjM1OTkyNjcz", "avatar_url": "https://avatars.githubusercontent.com/u/35992673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesgunnfiveai", "html_url": "https://github.com/jamesgunnfiveai", "followers_url": "https://api.github.com/users/jamesgunnfiveai/followers", "following_url": "https://api.github.com/users/jamesgunnfiveai/following{/other_user}", "gists_url": "https://api.github.com/users/jamesgunnfiveai/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesgunnfiveai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesgunnfiveai/subscriptions", "organizations_url": "https://api.github.com/users/jamesgunnfiveai/orgs", "repos_url": "https://api.github.com/users/jamesgunnfiveai/repos", "events_url": "https://api.github.com/users/jamesgunnfiveai/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesgunnfiveai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-09-07T16:07:54Z", "updated_at": "2020-09-09T08:28:32Z", "closed_at": "2020-09-09T01:29:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Inside a python:3.8-slim docker container, `pip install moto` does not install `cryptography` on the latest moto release (moto-1.3.15). This causes subsequent commands to fail with `ModuleNotFoundError: No module named 'cryptography'` when invoking `moto` mocks.\r\n\r\nTo see this, jump into a fresh docker:\r\n`docker run --rm -it python:3.8-slim /bin/bash`\r\n\r\nThen inside run:\r\n```\r\npip install moto\r\npip list\r\n```\r\nAnd note that `cryptography` is not installed.\r\n\r\nNow run:\r\n```\r\npip install moto==1.3.14\r\npip list\r\n```\r\n\r\nAnd note that `cryptography` is now installed.\r\n\r\nAn example of the failures seen when using the new release (ie. having only run `pip install moto`):\r\n```\r\n/usr/local/lib/python3.8/site-packages/moto/iam/__init__.py:2: in <module>\r\n    from .models import iam_backend\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n    from __future__ import unicode_literals\r\n    import base64\r\n    import hashlib\r\n    import os\r\n    import random\r\n    import string\r\n    import sys\r\n    from datetime import datetime\r\n    import json\r\n    import re\r\n    \r\n>   from cryptography import x509\r\nE   ModuleNotFoundError: No module named 'cryptography'\r\n\r\n/usr/local/lib/python3.8/site-packages/moto/iam/models.py:12: ModuleNotFoundError\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3290/reactions", "total_count": 10, "+1": 10, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3290/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3233", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3233/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3233/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3233/events", "html_url": "https://github.com/getmoto/moto/issues/3233", "id": 677682266, "node_id": "MDU6SXNzdWU2Nzc2ODIyNjY=", "number": 3233, "title": "Pytest-cov with list_stacks() when stack is deleted", "user": {"login": "wblech", "id": 8575320, "node_id": "MDQ6VXNlcjg1NzUzMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/8575320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wblech", "html_url": "https://github.com/wblech", "followers_url": "https://api.github.com/users/wblech/followers", "following_url": "https://api.github.com/users/wblech/following{/other_user}", "gists_url": "https://api.github.com/users/wblech/gists{/gist_id}", "starred_url": "https://api.github.com/users/wblech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wblech/subscriptions", "organizations_url": "https://api.github.com/users/wblech/orgs", "repos_url": "https://api.github.com/users/wblech/repos", "events_url": "https://api.github.com/users/wblech/events{/privacy}", "received_events_url": "https://api.github.com/users/wblech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-12T13:11:20Z", "updated_at": "2021-01-26T14:29:49Z", "closed_at": "2021-01-26T14:29:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to create a test with pytest and moto  that check if the `StackStatus` from the dictionary returned from the function `list_stacks()` (https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudformation.html#CloudFormation.Client.list_stacks) is `DELETE_COMPLETE`. \r\n\r\nI create a pytest.fixture for the client connection:\r\n\r\n    @pytest.fixture(scope='function')\r\n    def cf(aws_credentials):\r\n        with mock_cloudformation():\r\n            yield boto3.client('cloudformation')\r\n\r\nAnd I created a dummie template:\r\n\r\n    @pytest.fixture(scope='function')\r\n    def template_body_data():\r\n        'The Cloud Formation template'\r\n        template_data = {\r\n            'Resources': {'MyS3Bucket': {'Type': 'AWS::S3::Bucket', 'Properties': {}}}\r\n        }\r\n        return template_data\r\n\r\nAnd in my test function I create the stack and after I deleted:\r\n\r\n    @mock_cloudformation\r\n    def test_deleted_stack(cf, template_body_data):\r\n        params = {'StackName': 'teste', 'TemplateBody': yaml.dump(template_body_data)}\r\n        cf.create_stack(**params)\r\n        cf.delete_stack('teste')\r\n        assert check_stack_exists('teste') is False\r\n\r\nThe function that is being testes is this one:\r\n\r\n    def check_stack_exists(stack_name):\r\n        cf = get_client()\r\n        list_stack = cf.list_stacks()['StackSummaries']\r\n        for stack in list_stack:\r\n            if stack['StackStatus'] == 'DELETE_COMPLETE':\r\n                continue\r\n            if stack['StackName'] == stack_name:\r\n                return True\r\n        return False\r\n\r\nI'm facing a issue:\r\n\r\nIt complains that my template doesn't have a BucketName:\r\n\r\n```\r\n\r\n___________________ test_check_stack_exists_deleted_stack ___________________\r\n\r\ncf = <botocore.client.CloudFormation object at 0x7f59ca68f580>\r\ntemplate_body_data = {'Resources': {'MyS3Bucket': {'Properties': {}, 'Type': 'AWS::S3::Bucket'}}}\r\n\r\n    @mock_cloudformation\r\n    def test_check_stack_exists_deleted_stack(cf, template_body_data):\r\n        'Test the stack search if the stack exists'\r\n        params = {'StackName': 'teste', 'TemplateBody': yaml.dump(template_body_data)}\r\n        cf.create_stack(**params)\r\n>       cf.delete_stack(StackName='teste')\r\n\r\ntests/test_cl_uploader.py:87: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/client.py:316: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/client.py:621: in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/client.py:641: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/endpoint.py:102: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/endpoint.py:136: in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/endpoint.py:253: in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/retryhandler.py:183: in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/retryhandler.py:250: in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/retryhandler.py:269: in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/retryhandler.py:316: in __call__\r\n    checker_response = checker(attempt_number, response,\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/retryhandler.py:222: in __call__\r\n    return self._check_caught_exception(\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/retryhandler.py:359: in _check_caught_exception\r\n    raise caught_exception\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/endpoint.py:197: in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/moto/core/models.py:322: in __call__\r\n    status, headers, body = response_callback(\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/moto/core/responses.py:202: in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/moto/core/responses.py:312: in _dispatch\r\n    return self.call_action()\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/moto/core/responses.py:397: in call_action\r\n    response = method()\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/moto/cloudformation/responses.py:380: in delete_stack\r\n    self.cloudformation_backend.delete_stack(name_or_stack_id)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/moto/cloudformation/models.py:734: in delete_stack\r\n    self.delete_stack(stack.stack_id)\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/moto/cloudformation/models.py:726: in delete_stack\r\n    stack.delete()\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/moto/cloudformation/models.py:363: in delete\r\n    self.resource_map.delete()\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/moto/cloudformation/parsing.py:677: in delete\r\n    raise last_exception\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <moto.cloudformation.parsing.ResourceMap object at 0x7f59cabd3940>\r\n\r\n    def delete(self):\r\n        remaining_resources = set(self.resources)\r\n        tries = 1\r\n        while remaining_resources and tries < 5:\r\n            for resource in remaining_resources.copy():\r\n                parsed_resource = self._parsed_resources.get(resource)\r\n                try:\r\n                    if parsed_resource and hasattr(parsed_resource, \"delete\"):\r\n                        parsed_resource.delete(self._region_name)\r\n                    else:\r\n                        resource_name_attribute = (\r\n                            parsed_resource.cloudformation_name_type()\r\n                            if hasattr(parsed_resource, \"cloudformation_name_type\")\r\n                            else resource_name_property_from_type(parsed_resource.type)\r\n                        )\r\n                        if resource_name_attribute:\r\n                            resource_json = self._resource_json_map[\r\n                                parsed_resource.logical_resource_id\r\n                            ]\r\n>                           resource_name = resource_json[\"Properties\"][\r\n                                resource_name_attribute\r\n                            ]\r\nE                           KeyError: 'BucketName'\r\n\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/moto/cloudformation/parsing.py:662: KeyError\r\n```\r\n\r\nBut when I add one, it giver another error:\r\n\r\n```\r\n================================= FAILURES ==================================\r\n___________________ test_check_stack_exists_deleted_stack ___________________\r\n\r\ncf = <botocore.client.CloudFormation object at 0x7f7a02ca4ee0>\r\ntemplate_body_data = {'Resources': {'MyS3Bucket': {'Properties': {'BucketName': 'teste'}, 'Type': 'AWS::S3::Bucket'}}}\r\n\r\n    @mock_cloudformation\r\n    def test_check_stack_exists_deleted_stack(cf, template_body_data):\r\n        'Test the stack search if the stack exists'\r\n        params = {'StackName': 'teste', 'TemplateBody': yaml.dump(template_body_data)}\r\n>       cf.create_stack(**params)\r\n\r\ntests/test_cl_uploader.py:86: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/client.py:316: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <botocore.client.CloudFormation object at 0x7f7a02ca4ee0>\r\noperation_name = 'CreateStack'\r\napi_params = {'StackName': 'teste', 'TemplateBody': 'Resources:\\n  MyS3Bucket:\\n    Properties:\\n      BucketName: teste\\n    Type: AWS::S3::Bucket\\n'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record('API_CALL', {\r\n            'service': service_name,\r\n            'operation': operation_name,\r\n            'params': api_params,\r\n        })\r\n        if operation_model.deprecated:\r\n            logger.debug('Warning: %s.%s() is deprecated',\r\n                         service_name, operation_name)\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context)\r\n    \r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            model=operation_model, params=request_dict,\r\n            request_signer=self._request_signer, context=request_context)\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context)\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            http_response=http, parsed=parsed_response,\r\n            model=operation_model, context=request_context\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.exceptions.ClientError: An error occurred (Unknown) when calling the CreateStack operation: Unknown\r\n\r\n../../.cache/pypoetry/virtualenvs/cl-uploader-12nYBdPj-py3.8/lib/python3.8/site-packages/botocore/client.py:635: ClientError\r\n\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3233/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3233/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3225", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3225/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3225/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3225/events", "html_url": "https://github.com/getmoto/moto/issues/3225", "id": 676612093, "node_id": "MDU6SXNzdWU2NzY2MTIwOTM=", "number": 3225, "title": "Meta: Build on master failing", "user": {"login": "bblommers", "id": 6058517, "node_id": "MDQ6VXNlcjYwNTg1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6058517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblommers", "html_url": "https://github.com/bblommers", "followers_url": "https://api.github.com/users/bblommers/followers", "following_url": "https://api.github.com/users/bblommers/following{/other_user}", "gists_url": "https://api.github.com/users/bblommers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblommers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblommers/subscriptions", "organizations_url": "https://api.github.com/users/bblommers/orgs", "repos_url": "https://api.github.com/users/bblommers/repos", "events_url": "https://api.github.com/users/bblommers/events{/privacy}", "received_events_url": "https://api.github.com/users/bblommers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-11T06:11:55Z", "updated_at": "2020-08-25T02:36:34Z", "closed_at": "2020-08-25T02:36:34Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "`test_invoke_function_get_ec2_volume` is failing with the following error:\r\n\r\n```\r\nerror running lambda: lambda invoke failed output: START RequestId: c8528c6e-1b8f-1ac6-d527-46cbabb1f09e Version: 1\r\n[ERROR] NoCredentialsError: Unable to locate credentials\r\n```\r\n\r\n## Background\r\nThis test executes a Lambda, and tries to retrieve some EC2 Volume-details from within the Docker-container.  \r\nThis now fails, since a few days, because of the above error.\r\n\r\nHaven't had time to do proper research yet into the why or how, unfortunately.\r\n\r\n## Cause\r\n**TBD**\r\n\r\n## Debug Logs\r\nhttps://travis-ci.org/github/spulec/moto/jobs/715826076\r\n\r\n## Potential solution\r\n - [ ] Add os.environ['AWS_SECRET_ACCESS_KEY'] to the test case\r\n - [ ] ...\r\n\r\n\r\nFYI @spulec ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3225/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3225/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3171", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3171/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3171/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3171/events", "html_url": "https://github.com/getmoto/moto/issues/3171", "id": 664819836, "node_id": "MDU6SXNzdWU2NjQ4MTk4MzY=", "number": 3171, "title": "Different ECS behaviors for task-definition with boto3 versus cloudformation", "user": {"login": "pinkjosh", "id": 28514605, "node_id": "MDQ6VXNlcjI4NTE0NjA1", "avatar_url": "https://avatars.githubusercontent.com/u/28514605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pinkjosh", "html_url": "https://github.com/pinkjosh", "followers_url": "https://api.github.com/users/pinkjosh/followers", "following_url": "https://api.github.com/users/pinkjosh/following{/other_user}", "gists_url": "https://api.github.com/users/pinkjosh/gists{/gist_id}", "starred_url": "https://api.github.com/users/pinkjosh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pinkjosh/subscriptions", "organizations_url": "https://api.github.com/users/pinkjosh/orgs", "repos_url": "https://api.github.com/users/pinkjosh/repos", "events_url": "https://api.github.com/users/pinkjosh/events{/privacy}", "received_events_url": "https://api.github.com/users/pinkjosh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-23T23:14:43Z", "updated_at": "2020-10-14T16:57:01Z", "closed_at": "2020-10-12T19:53:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Fetching an cloudformation created ECS taskDefinition using moto ecs client includes empty ContainerDefinition.\r\n\r\n\r\nI have one ECS TaskDefinition created through cloudformation that completes successfully. However, when I use moto ecs client to fetch this task definition, I see empty body for \"ContainerDefinition\" that I did set in my cloudformation template. I see that internal moto ECS models script does have a proper list retrieved for \"ContainerDefinition\" but the list is lost somewhere during parsing json response inside this models.py script of ecs. ( I noticed that parser expected camelCase property name in the ContainerDefinition json body whereas it finds PascalCase attributes naming and hence move forward without preparing ContainerDefinition list)\r\n\r\nI digged deeper and found out that the ContainerDefinition resource properties has PascalCase namings whereas the parser models.py expected camelCase and hence ends up  pushing empty list for an earlier available ContainerDefinition. \r\n\r\nI then used an actual boto3 call to fetch a physically available TaskDefinition in my account (this TaskDefinition was created through boto3 cloudformation). \r\n\r\nThe details of ContainerDefinition json retrieved using moto ecs client and actual boto3 client are provided below:\r\n\r\nContainerDefinition list below when fetching ECS TaskDefinition through actual boto3 ecs client: (camelCase attribute names)\r\n\r\n    [{\r\n\t    'essential': True,\r\n\t    'image': '123456789012.dkr.ecr.us-east-1.amazonaws.com/domain/my-image',\r\n\t    'environment': [{\r\n\t\t'name': 'MyEnvironment',\r\n\t\t'value': 'Devl'\r\n\t    }, {\r\n\t\t'name': 'serverport',\r\n\t\t'value': '80'\r\n\t    }],\r\n\t    'healthCheck': {\r\n\t\t'command': ['CMD-SHELL', 'curl -f http://localhost/health || exit 1'],\r\n\t\t'interval': 30,\r\n\t\t'retries': 3,\r\n\t\t'startPeriod': 300\r\n\t    },\r\n\t    'logConfiguration': {\r\n\t\t'logDriver': 'awslogs',\r\n\t\t'options': {\r\n\t\t\t'awslogs-group': 'myapp-log-devl',\r\n\t\t\t'awslogs-stream-prefix': 'Service',\r\n\t\t\t'awslogs-region': 'us-west-1'\r\n\t\t}\r\n\t    },\r\n\t    'name': 'myapp-task-def-devl',\r\n\t    'portMappings': [{\r\n\t\t'containerPort': '80',\r\n\t\t'protocol': 'tcp'\r\n\t    }]\r\n    }] \r\n\r\n\r\n\r\nContainerDefinition list below when fetching ECS TaskDefinition through moto ecs client: (PascalCase attribute names)\r\n\r\n        [{\r\n\t        'Essential': True,\r\n\t        'Image': '123456789012.dkr.ecr.us-east-1.amazonaws.com/domain/my-image',\r\n\t        'Environment': [{\r\n\t\t    'Name': 'MyEnvironment',\r\n\t\t    'Value': 'Devl'\r\n\t        }, {\r\n\t\t    'Name': 'serverport',\r\n\t\t    'Value': '80'\r\n\t        }],\r\n\t        'HealthCheck': {\r\n\t\t    'Command': ['CMD-SHELL', 'curl -f http://localhost/health || exit 1'],\r\n\t\t    'Interval': 30,\r\n\t\t    'Retries': 3,\r\n\t\t    'StartPeriod': 300\r\n\t        },\r\n\t        'LogConfiguration': {\r\n\t\t    'LogDriver': 'awslogs',\r\n\t\t    'Options': {\r\n\t\t  \t  'awslogs-group': 'myapp-log-devl',\r\n\t\t\t  'awslogs-stream-prefix': 'Service',\r\n\t\t\t  'awslogs-region': 'us-west-1'\r\n\t\t    }\r\n\t        },\r\n\t        'Name': 'myapp-task-def-devl',\r\n\t        'PortMappings': [{\r\n\t\t    'ContainerPort': '80',\r\n\t\t    'Protocol': 'tcp'\r\n\t        }]\r\n    }] \r\n\r\n\r\nFinally, I ran another test and created an ECS TaskDefinition through moto ecs client (no cloudformation) and verified that fetching TaskDefinition created that way returns me ContainerDefinition as expected and attributes have camelCase namings. \r\n\r\nDoes moto cloudformation not support ECS TaskDefinition? Do I need to create TaskDefinition using explicit moto ECS client. \r\n\r\nP.S.: I am already using ECS moto client for creation of TaskSets as its not currently supported through moto cloudformation.\r\n\r\nMy environment:\r\n      \r\n    boto3 Version: 1.14.22\r\n    botocore Version: 1.17.27\r\n    moto Version: 1.3.15.dev979.   ( I am using this version in order to be able to run ecs.create_task_set()\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3171/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3171/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3168", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3168/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3168/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3168/events", "html_url": "https://github.com/getmoto/moto/issues/3168", "id": 664133178, "node_id": "MDU6SXNzdWU2NjQxMzMxNzg=", "number": 3168, "title": "CloudFormation create_stack Fails with Long Stack Name and S3 Bucket in Template", "user": {"login": "jweite", "id": 8495212, "node_id": "MDQ6VXNlcjg0OTUyMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8495212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jweite", "html_url": "https://github.com/jweite", "followers_url": "https://api.github.com/users/jweite/followers", "following_url": "https://api.github.com/users/jweite/following{/other_user}", "gists_url": "https://api.github.com/users/jweite/gists{/gist_id}", "starred_url": "https://api.github.com/users/jweite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jweite/subscriptions", "organizations_url": "https://api.github.com/users/jweite/orgs", "repos_url": "https://api.github.com/users/jweite/repos", "events_url": "https://api.github.com/users/jweite/events{/privacy}", "received_events_url": "https://api.github.com/users/jweite/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-23T00:49:34Z", "updated_at": "2020-11-21T14:12:21Z", "closed_at": "2020-11-21T14:12:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following unit test fails:\r\n\r\n`\r\n@mock_cloudformation\r\ndef test_boto3_create_stack_s3_long_name():\r\n    cf_conn = boto3.client(\"cloudformation\", region_name=\"us-east-1\")\r\n\r\n    stack_name = \"MyLongStackName01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012\"\r\n\r\n    template = '{\"Resources\":{\"HelloBucket\":{\"Type\":\"AWS::S3::Bucket\"}}}'\r\n\r\n    cf_conn.create_stack(StackName=stack_name, TemplateBody=template)\r\n\r\n    cf_conn.get_template(StackName=stack_name)[\"TemplateBody\"].should.equal(\r\n        json.loads(template, object_pairs_hook=OrderedDict)\r\n    )\r\n`\r\n\r\nMoto tries to use a bucket name that's longer than the 63 char max.  CloudFormation truncates the StackName portion of the bucket name such that it doesn't exceed the limit.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3168/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3168/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3150", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3150/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3150/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3150/events", "html_url": "https://github.com/getmoto/moto/issues/3150", "id": 660640887, "node_id": "MDU6SXNzdWU2NjA2NDA4ODc=", "number": 3150, "title": "AttributeError exception in _invoke_lambda", "user": {"login": "tomers", "id": 83443, "node_id": "MDQ6VXNlcjgzNDQz", "avatar_url": "https://avatars.githubusercontent.com/u/83443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomers", "html_url": "https://github.com/tomers", "followers_url": "https://api.github.com/users/tomers/followers", "following_url": "https://api.github.com/users/tomers/following{/other_user}", "gists_url": "https://api.github.com/users/tomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomers/subscriptions", "organizations_url": "https://api.github.com/users/tomers/orgs", "repos_url": "https://api.github.com/users/tomers/repos", "events_url": "https://api.github.com/users/tomers/events{/privacy}", "received_events_url": "https://api.github.com/users/tomers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-07-19T06:39:52Z", "updated_at": "2020-07-26T20:32:12Z", "closed_at": "2020-07-26T20:32:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Moto version: https://github.com/spulec/moto/commit/80b64f9b3ff57515db1fc07329bf8e5f519597aa (but from looking at the code the issue exists even on today's HEAD https://github.com/spulec/moto/commit/09b764148cea354c790443a318dabc976a2b59df)\r\n\r\nStack track of the issue:\r\n```\r\nFile \"/usr/lib/python3.6/site-packages/flask/app.py\", line 1936, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/usr/lib/python3.6/site-packages/moto/core/utils.py\", line 146, in __call__\r\n    result = self.callback(request, request.url, {})\r\n  File \"/usr/lib/python3.6/site-packages/moto/core/utils.py\", line 239, in _wrapper\r\n    response = f(*args, **kwargs)\r\n  File \"/usr/lib/python3.6/site-packages/moto/core/utils.py\", line 271, in _wrapper\r\n    response = f(*args, **kwargs)\r\n  File \"/usr/lib/python3.6/site-packages/moto/awslambda/responses.py\", line 95, in invoke\r\n    return self._invoke(request, full_url)\r\n  File \"/usr/lib/python3.6/site-packages/moto/awslambda/responses.py\", line 182, in _invoke\r\n    function_name, qualifier, self.body, self.headers, response_headers\r\n  File \"/usr/lib/python3.6/site-packages/moto/awslambda/models.py\", line 1074, in invoke\r\n    payload = fn.invoke(body, headers, response_headers)\r\n  File \"/usr/lib/python3.6/site-packages/moto/awslambda/models.py\", line 479, in invoke\r\n    res, errored, logs = self._invoke_lambda(code=self.code, event=body)\r\n  File \"/usr/lib/python3.6/site-packages/moto/awslambda/models.py\", line 469, in _invoke_lambda\r\n    [line for line in self.convert(output).splitlines()[:-1]]\r\nAttributeError: 'NoneType' object has no attribute 'splitlines'\r\n```\r\n\r\nCode (awslambda/models.py):\r\n```\r\n    def _invoke_lambda(self, code, event=None, context=None):\r\n        ...\r\n        output = None\r\n\r\n        try:\r\n            ...\r\n            with _DockerDataVolumeContext(self) as data_vol:\r\n                try:\r\n                    ...\r\n                    container = self.docker_client.containers.run(...)  # <-- something raises, probably here\r\n                finally:\r\n                    if container:  # <-- container is probably None here\r\n                        try:\r\n                            exit_code = container.wait(timeout=300)\r\n                        except requests.exceptions.ReadTimeout:\r\n                            exit_code = -1\r\n                            container.stop()\r\n                            container.kill()\r\n                        else:\r\n                            if docker_3:\r\n                                exit_code = exit_code[\"StatusCode\"]\r\n\r\n                        output = container.logs(stdout=False, stderr=True)\r\n                        output += container.logs(stdout=True, stderr=False)\r\n                        container.remove()\r\n\r\n            output = output.decode(\"utf-8\")  # <-- this probably raises an exception since output is None\r\n            ...\r\n        except BaseException as e:\r\n            traceback.print_exc()\r\n            logs = os.linesep.join(\r\n                [line for line in self.convert(output).splitlines()[:-1]]  # <-- now output is None and throws exception\r\n            )\r\n            ...\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3150/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3150/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3131", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3131/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3131/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3131/events", "html_url": "https://github.com/getmoto/moto/issues/3131", "id": 657096501, "node_id": "MDU6SXNzdWU2NTcwOTY1MDE=", "number": 3131, "title": "API Gateway:delete_api_key return wrong status code", "user": {"login": "cm-iwata", "id": 38879253, "node_id": "MDQ6VXNlcjM4ODc5MjUz", "avatar_url": "https://avatars.githubusercontent.com/u/38879253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cm-iwata", "html_url": "https://github.com/cm-iwata", "followers_url": "https://api.github.com/users/cm-iwata/followers", "following_url": "https://api.github.com/users/cm-iwata/following{/other_user}", "gists_url": "https://api.github.com/users/cm-iwata/gists{/gist_id}", "starred_url": "https://api.github.com/users/cm-iwata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cm-iwata/subscriptions", "organizations_url": "https://api.github.com/users/cm-iwata/orgs", "repos_url": "https://api.github.com/users/cm-iwata/repos", "events_url": "https://api.github.com/users/cm-iwata/events{/privacy}", "received_events_url": "https://api.github.com/users/cm-iwata/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-15T06:28:18Z", "updated_at": "2020-07-15T13:04:53Z", "closed_at": "2020-07-15T08:41:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "API Gateway delete_api_key should return 202 for http status code.\r\nBut moto will return 200 ok.\r\n\r\n### Use boto3\r\n\r\n```\r\n>>> import moto\r\n>>> import boto3\r\n>>> from pprint import pprint\r\n>>> client = boto3.client('apigateway')\r\n>>> res = client.delete_api_key(name='xxx')\r\n>>> pprint(res)\r\n{'ResponseMetadata': {'HTTPHeaders': {'connection': 'keep-alive',\r\n                                      'content-length': '0',\r\n                                      'content-type': 'application/json',\r\n                                      'date': 'Wed, 15 Jul 2020 06:26:19 GMT',\r\n                                      'x-amz-apigw-id': 'Ps4tyJ5ANjMEbow=',\r\n                                      'x-amzn-requestid': '07ec4590-54b4-4dad-8ec5-b986a991446d'},\r\n                      'HTTPStatusCode': 202,\r\n                      'RequestId': '07ec4590-54b4-4dad-8ec5-b986a991446d',\r\n                      'RetryAttempts': 0}}\r\n```\r\n\r\n\r\n\r\n### Use moto\r\n\r\n```\r\n>>> import moto\r\n>>> import boto3\r\n>>> from pprint import pprint\r\n>>> client = boto3.client('apigateway')\r\n>>> moto.mock_apigateway().start()\r\n>>> res = client.create_api_key(apiKey='xxx')\r\n>>> pprint(res)\r\n{'ResponseMetadata': {'HTTPHeaders': {},\r\n                      'HTTPStatusCode': 200,\r\n                      'RetryAttempts': 0}}\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3131/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3131/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3129", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3129/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3129/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3129/events", "html_url": "https://github.com/getmoto/moto/issues/3129", "id": 657008765, "node_id": "MDU6SXNzdWU2NTcwMDg3NjU=", "number": 3129, "title": "API Gateway create_api_key default value is wrong", "user": {"login": "cm-iwata", "id": 38879253, "node_id": "MDQ6VXNlcjM4ODc5MjUz", "avatar_url": "https://avatars.githubusercontent.com/u/38879253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cm-iwata", "html_url": "https://github.com/cm-iwata", "followers_url": "https://api.github.com/users/cm-iwata/followers", "following_url": "https://api.github.com/users/cm-iwata/following{/other_user}", "gists_url": "https://api.github.com/users/cm-iwata/gists{/gist_id}", "starred_url": "https://api.github.com/users/cm-iwata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cm-iwata/subscriptions", "organizations_url": "https://api.github.com/users/cm-iwata/orgs", "repos_url": "https://api.github.com/users/cm-iwata/repos", "events_url": "https://api.github.com/users/cm-iwata/events{/privacy}", "received_events_url": "https://api.github.com/users/cm-iwata/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-15T02:15:04Z", "updated_at": "2020-07-15T13:04:45Z", "closed_at": "2020-07-15T06:00:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "API Gateway create_api_key wiill generate some  wrong default value.\r\nFor example, `enabled` should be False, but moto will return True.\r\n\r\n\r\n\r\n### Use boto3\r\n\r\n```\r\n>>> import moto\r\n>>> import boto3\r\n>>> from pprint import pprint\r\n>>> client = boto3.client('apigateway')\r\n>>> res = client.create_api_key(name='test')\r\n>>> pprint(res)\r\n{'ResponseMetadata': {'HTTPHeaders': {'connection': 'keep-alive',\r\n                                      'content-length': '170',\r\n                                      'content-type': 'application/json',\r\n                                      'date': 'Wed, 15 Jul 2020 02:09:07 GMT',\r\n                                      'x-amz-apigw-id': 'PsTCmK_etjMEbCQ=',\r\n                                      'x-amzn-requestid': '2743161b-503f-40ce-8f3d-b7f9d94ffc11'},\r\n                      'HTTPStatusCode': 201,\r\n                      'RequestId': '2743161b-503f-40ce-8f3d-b7f9d94ffc11',\r\n                      'RetryAttempts': 0},\r\n 'createdDate': datetime.datetime(2020, 7, 15, 11, 9, 7, tzinfo=tzlocal()),\r\n 'enabled': False,\r\n 'id': 'xxxxxxxxxx',\r\n 'lastUpdatedDate': datetime.datetime(2020, 7, 15, 11, 9, 7, tzinfo=tzlocal()),\r\n 'name': 'test',\r\n 'stageKeys': [],\r\n 'value': 'xxxxxxxxxx'}\r\n```\r\n\r\n\r\n\r\n### Use moto\r\n\r\n```\r\n>>> import moto\r\n>>> import boto3\r\n>>> from pprint import pprint\r\n>>> client = boto3.client('apigateway')\r\n>>> moto.mock_apigateway().start()\r\n>>> res = client.create_api_key(name='test')\r\n>>> pprint(res)\r\n{'ResponseMetadata': {'HTTPHeaders': {},\r\n                      'HTTPStatusCode': 200,\r\n                      'RetryAttempts': 0},\r\n 'createdDate': datetime.datetime(2020, 7, 15, 11, 9, 43, tzinfo=tzlocal()),\r\n 'enabled': True,\r\n 'id': 'xxxxxxxxxx',\r\n 'lastUpdatedDate': datetime.datetime(2020, 7, 15, 11, 9, 43, tzinfo=tzlocal()),\r\n 'name': 'test',\r\n 'value': 'xxxxxxxxxx'}\r\n```\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3129/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3129/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3123", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3123/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3123/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3123/events", "html_url": "https://github.com/getmoto/moto/issues/3123", "id": 656171043, "node_id": "MDU6SXNzdWU2NTYxNzEwNDM=", "number": 3123, "title": "`batch.utils.lowercase_first_key()` should be recursive", "user": {"login": "richford", "id": 7978135, "node_id": "MDQ6VXNlcjc5NzgxMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7978135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richford", "html_url": "https://github.com/richford", "followers_url": "https://api.github.com/users/richford/followers", "following_url": "https://api.github.com/users/richford/following{/other_user}", "gists_url": "https://api.github.com/users/richford/gists{/gist_id}", "starred_url": "https://api.github.com/users/richford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richford/subscriptions", "organizations_url": "https://api.github.com/users/richford/orgs", "repos_url": "https://api.github.com/users/richford/repos", "events_url": "https://api.github.com/users/richford/events{/privacy}", "received_events_url": "https://api.github.com/users/richford/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-13T21:55:38Z", "updated_at": "2020-07-14T12:41:18Z", "closed_at": "2020-07-14T10:29:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When creating a job definition using cloudformation, I noticed that the `batch.utils.lowercase_first_key()` function does not recurse into nested dictionaries or lists of dictionaries. This is required, for example, by the \"environment,\" \"mountPoints,\" and \"linuxParameters\" values passed to the `containerProperties` parameter of boto's [register_job_definition](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/batch.html#Batch.Client.register_job_definition) function. This in turn leads to empty environment variables in the container properties when creating a job definition using CloudFormation.\r\n\r\n## How to reproduce this issue\r\n\r\nUse the following CloudFormation json template\r\n```json\r\n{\r\n    \"AWSTemplateFormatVersion\" : \"2010-09-09\",\r\n        \"Description\" : \"Test template for bug reproduction\",\r\n        \"Parameters\" : {\r\n            \"JdName\" : {\r\n                \"Type\" : \"String\",\r\n                \"Description\" : \"Name of the job definition.\",\r\n                \"MinLength\" : \"1\",\r\n                \"MaxLength\" : \"100\",\r\n                \"ConstraintDescription\" : \"The job definition name must be between 1 and 50 characters\"\r\n            },\r\n            \"JdvCpus\" : {\r\n                \"Type\" : \"Number\",\r\n                \"Default\" : \"1\",\r\n                \"Description\" : \"Number of virtual CPUs required for the job definition. Default=1\",\r\n                \"MinValue\" : \"0\",\r\n                \"ConstraintDescription\" : \"vCpus must be greater than zero.\"\r\n            },\r\n            \"JdMemory\" : {\r\n                \"Type\" : \"Number\",\r\n                \"Default\" : \"8000\",\r\n                \"Description\" : \"Memory (MiB) required for the job definition. Default=8000\",\r\n                \"MinValue\" : \"0\",\r\n                \"ConstraintDescription\" : \"Memory must be greater than zero.\"\r\n            },\r\n            \"JdRetries\" : {\r\n                \"Type\" : \"Number\",\r\n                \"Default\" : \"1\",\r\n                \"Description\" : \"Number of times a job can be moved back to 'RUNNABLE' status. Default=1\",\r\n                \"MinValue\" : \"1\",\r\n                \"MaxValue\" : \"10\",\r\n                \"ConstraintDescription\" : \"The number of retries must be between 1 and 10.\"\r\n            }\r\n        },\r\n        \"Resources\" : {\r\n            \"JobDefinition\" : {\r\n                \"Type\" : \"AWS::Batch::JobDefinition\",\r\n                \"Properties\" : {\r\n                    \"JobDefinitionName\" : { \"Ref\" : \"JdName\" },\r\n                    \"Type\" : \"container\",\r\n                    \"ContainerProperties\" : {\r\n                        \"Image\" : \"ubuntu\",\r\n                        \"Vcpus\" : { \"Ref\" : \"JdvCpus\" },\r\n                        \"Memory\" : { \"Ref\" : \"JdMemory\" },\r\n                        \"Environment\" : [\r\n                            {\r\n                                \"Name\" : \"ENV_VAR_1\",\r\n                                \"Value\" : \"ENV_VAL_1\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"RetryStrategy\" : {\r\n                        \"Attempts\" : { \"Ref\" : \"JdRetries\" }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"Outputs\" : {\r\n            \"JobDefinition\": {\r\n                \"Value\" : { \"Ref\" : \"JobDefinition\" }\r\n            }\r\n        }\r\n}\r\n```\r\nand the following MWE python code\r\n```python\r\nimport boto3\r\n\r\nfrom moto import mock_batch, mock_cloudformation\r\n\r\n@mock_cloudformation\r\n@mock_batch\r\ndef test_job_def_environment_with_cloudformation():\r\n    cf = boto3.client('cloudformation')\r\n\r\n    with open(\"mwe.template\", \"r\") as fp:\r\n        template_body = fp.read()\r\n\r\n    params = [\r\n        {\r\n            \"ParameterKey\": \"JdName\",\r\n            \"ParameterValue\": \"test_job_def\"\r\n        },\r\n        {\r\n            \"ParameterKey\": \"JdvCpus\",\r\n            \"ParameterValue\": str(123)\r\n        },\r\n        {\r\n            \"ParameterKey\": \"JdMemory\",\r\n            \"ParameterValue\": str(123)\r\n        },\r\n        {\r\n            \"ParameterKey\": \"JdRetries\",\r\n            \"ParameterValue\": str(3)\r\n        },\r\n    ]\r\n\r\n    response = cf.create_stack(\r\n        StackName='job_definition_stack',\r\n        TemplateBody=template_body,\r\n        Parameters=params,\r\n        Capabilities=[\"CAPABILITY_NAMED_IAM\"],\r\n    )\r\n\r\n    stack_id = response.get('StackId')\r\n    \r\n    response = cf.describe_stacks(\r\n        StackName=stack_id\r\n    )\r\n\r\n    stack_out = response.get('Stacks')[0]['Outputs']\r\n\r\n    jd_arn = stack_out[0].get('OutputValue')\r\n\r\n    batch = boto3.client('batch')\r\n    response = batch.describe_job_definitions(\r\n        jobDefinitions=[jd_arn]\r\n    )\r\n    job_def = response.get(\"jobDefinitions\")[0]\r\n    job_def_env = job_def[\"containerProperties\"][\"environment\"]\r\n\r\n    assert all([env for env in job_def_env]), \"Environment variables are empty.\"\r\n    assert('ENV_VAR_1' in [e['name'] for e in job_def_env])\r\n    assert('ENV_VAR_2' in [e['name'] for e in job_def_env])\r\n    assert('ENV_VAL_1' in [e['value'] for e in job_def_env])\r\n    assert('ENV_VAL_2' in [e['value'] for e in job_def_env])\r\n```\r\n\r\n## Expected behavior\r\nTests should pass. No assertion errors should be raised.\r\n\r\n## What happens instead\r\nI get this traceback:\r\n```bash\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-3-82b538f9bd9c> in <module>\r\n----> 1 mwe.test_job_def_environment_with_cloudformation()\r\n\r\n~/projects/oss_third_party/moto/moto/core/models.py in wrapper(*args, **kwargs)\r\n     97             self.start(reset=reset)\r\n     98             try:\r\n---> 99                 result = func(*args, **kwargs)\r\n    100             finally:\r\n    101                 self.stop()\r\n\r\n~/projects/oss_third_party/moto/moto/core/models.py in wrapper(*args, **kwargs)\r\n     97             self.start(reset=reset)\r\n     98             try:\r\n---> 99                 result = func(*args, **kwargs)\r\n    100             finally:\r\n    101                 self.stop()\r\n\r\n~/projects/oss_third_party/moto/mwe.py in test_job_def_environment_with_cloudformation()\r\n     55     print(job_def_env)\r\n     56\r\n---> 57     assert all([env for env in job_def_env]), \"Environment variables are empty.\"\r\n     58     assert('ENV_VAR_1' in [e['name'] for e in job_def_env])\r\n     59     assert('ENV_VAL_1' in [e['value'] for e in job_def_env])\r\n\r\nAssertionError: Environment variables are empty.\r\n```\r\n\r\n## What version of moto am I using\r\n\r\nThe command `pip list | grep oto` yields\r\n```bash\r\nboto               2.49.0\r\nboto3              1.14.20\r\nbotocore           1.17.20\r\nmoto               1.3.15.dev959\r\n```\r\n\r\nI will submit a PR that fixes this.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3123/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3123/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3114", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3114/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3114/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3114/events", "html_url": "https://github.com/getmoto/moto/issues/3114", "id": 653115883, "node_id": "MDU6SXNzdWU2NTMxMTU4ODM=", "number": 3114, "title": "CloudFormation output for DynamoDB table", "user": {"login": "tigermonkey", "id": 2547803, "node_id": "MDQ6VXNlcjI1NDc4MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2547803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tigermonkey", "html_url": "https://github.com/tigermonkey", "followers_url": "https://api.github.com/users/tigermonkey/followers", "following_url": "https://api.github.com/users/tigermonkey/following{/other_user}", "gists_url": "https://api.github.com/users/tigermonkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tigermonkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tigermonkey/subscriptions", "organizations_url": "https://api.github.com/users/tigermonkey/orgs", "repos_url": "https://api.github.com/users/tigermonkey/repos", "events_url": "https://api.github.com/users/tigermonkey/events{/privacy}", "received_events_url": "https://api.github.com/users/tigermonkey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-08T08:54:03Z", "updated_at": "2020-07-26T20:30:29Z", "closed_at": "2020-07-26T20:30:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "## **how to reproduce the issue**\r\n\r\n```python\r\nimport json\r\nimport os\r\n\r\nimport boto3\r\nimport pytest\r\nfrom moto import mock_cloudformation\r\n\r\nCFN_TEMPLATE = {\r\n    \"Outputs\": {\r\n        \"MyTableName\": {\r\n            \"Value\": {\r\n                \"Ref\": \"MyTable\"\r\n            }\r\n        },\r\n    },\r\n    \"Resources\": {\r\n        \"MyTable\": {\r\n            \"Type\": \"AWS::DynamoDB::Table\",\r\n            \"Properties\": {\r\n                \"KeySchema\": [{\"AttributeName\": \"id\", \"KeyType\": \"HASH\"}],\r\n                \"AttributeDefinitions\": [\r\n                    {\"AttributeName\": \"id\", \"AttributeType\": \"S\"}\r\n                ],\r\n            },\r\n        },\r\n    },\r\n}\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef aws_credentials():\r\n    \"\"\"Mocked AWS Credentials for moto.\"\"\"\r\n    os.environ[\"AWS_ACCESS_KEY_ID\"] = \"testing\"\r\n    os.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"testing\"\r\n    os.environ[\"AWS_SECURITY_TOKEN\"] = \"testing\"\r\n    os.environ[\"AWS_SESSION_TOKEN\"] = \"testing\"\r\n\r\n\r\n@mock_cloudformation\r\ndef test_get_stack(aws_credentials):\r\n    stack_name = \"foobar\"\r\n    cfn = boto3.client(\"cloudformation\")\r\n    cfn.create_stack(StackName=stack_name, TemplateBody=json.dumps(CFN_TEMPLATE))\r\n    # Wait until moto creates the stack\r\n    waiter = cfn.get_waiter(\"stack_create_complete\")\r\n    waiter.wait(StackName=stack_name)\r\n    assert True\r\n\r\n```\r\n\r\n## **what you expected to happen**\r\n\r\nI have a template like that and it creates a valid stack, with the name of the table in the MyTablename CfnOutput \"MyTableName\".\r\n\r\n## **what actually happens**\r\n\r\n```\r\n======================================== FAILURES ========================================\r\n_____________________________________ test_get_stack _____________________________________\r\n\r\nself = <botocore.parsers.QueryParser object at 0x7f5ce7c3e828>\r\nxml_string = b'<DescribeStacksResponse><DescribeStacksResult><Stacks><member><StackName>foobar</StackName><StackId>arn:aws:cloudfor...ber></Outputs><Parameters></Parameters><Tags></T\r\nags></member></Stacks></DescribeStacksResult></DescribeStacksResponse>'\r\n\r\n    def _parse_xml_string_to_dom(self, xml_string):\r\n        try:\r\n            parser = xml.etree.cElementTree.XMLParser(\r\n                target=xml.etree.cElementTree.TreeBuilder(),\r\n                encoding=self.DEFAULT_ENCODING)\r\n>           parser.feed(xml_string)\r\nE             File \"<string>\", line None\r\nE           xml.etree.ElementTree.ParseError: not well-formed (invalid token): line 1, column 452\r\n\r\n../../../../.local/lib/python3.6/site-packages/botocore/parsers.py:452: ParseError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\naws_credentials = None\r\n\r\n    @mock_cloudformation\r\n    def test_get_stack(aws_credentials):\r\n        stack_name = \"foobar\"\r\n        cfn = boto3.client(\"cloudformation\")\r\n        cfn.create_stack(StackName=stack_name, TemplateBody=json.dumps(CFN_TEMPLATE))\r\n        # Wait until moto creates the stack\r\n        waiter = cfn.get_waiter(\"stack_create_complete\")\r\n>       waiter.wait(StackName=stack_name)\r\n\r\n../../../../min-test-case.py:46:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../../../../.local/lib/python3.6/site-packages/botocore/waiter.py:53: in wait\r\n    Waiter.wait(self, **kwargs)\r\n../../../../.local/lib/python3.6/site-packages/botocore/waiter.py:297: in wait\r\n    response = self._operation_method(**kwargs)\r\n../../../../.local/lib/python3.6/site-packages/botocore/waiter.py:84: in __call__\r\n    return self._client_method(**kwargs)     \r\n../../../../.local/lib/python3.6/site-packages/botocore/client.py:316: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)              \r\n../../../../.local/lib/python3.6/site-packages/botocore/client.py:622: in _make_api_call\r\n    operation_model, request_dict, request_context)\r\n../../../../.local/lib/python3.6/site-packages/botocore/client.py:641: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n../../../../.local/lib/python3.6/site-packages/botocore/endpoint.py:102: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n../../../../.local/lib/python3.6/site-packages/botocore/endpoint.py:135: in _send_request\r\n    request, operation_model, context)\r\n../../../../.local/lib/python3.6/site-packages/botocore/endpoint.py:167: in _get_response\r\n    request, operation_model)\r\n../../../../.local/lib/python3.6/site-packages/botocore/endpoint.py:218: in _do_get_response\r\n    response_dict, operation_model.output_shape)\r\n../../../../.local/lib/python3.6/site-packages/botocore/parsers.py:246: in parse\r\n    parsed = self._do_parse(response, shape)\r\n../../../../.local/lib/python3.6/site-packages/botocore/parsers.py:524: in _do_parse\r\n    return self._parse_body_as_xml(response, shape, inject_metadata=True)\r\n../../../../.local/lib/python3.6/site-packages/botocore/parsers.py:528: in _parse_body_as_xml\r\n    root = self._parse_xml_string_to_dom(xml_contents)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <botocore.parsers.QueryParser object at 0x7f5ce7c3e828>\r\nxml_string = b'<DescribeStacksResponse><DescribeStacksResult><Stacks><member><StackName>foobar</StackName><StackId>arn:aws:cloudfor...ber></Outputs><Parameters></Parameters><Tags></T\r\nags></member></Stacks></DescribeStacksResult></DescribeStacksResponse>'\r\n\r\n    def _parse_xml_string_to_dom(self, xml_string):\r\n        try:\r\n            parser = xml.etree.cElementTree.XMLParser(\r\n                target=xml.etree.cElementTree.TreeBuilder(),\r\n                encoding=self.DEFAULT_ENCODING)\r\n            parser.feed(xml_string)\r\n            root = parser.close()\r\n        except XMLParseError as e:\r\n            raise ResponseParserError(\r\n                \"Unable to parse response (%s), \"\r\n                \"invalid XML received. Further retries may succeed:\\n%s\" %\r\n>               (e, xml_string))\r\nE           botocore.parsers.ResponseParserError: Unable to parse response (not well-formed (invalid token): line 1, column 452), invalid XML received. Further retries may succeed:\r\nE           b'<DescribeStacksResponse><DescribeStacksResult><Stacks><member><StackName>foobar</StackName><StackId>arn:aws:cloudformation:us-east-1:123456789:stack/foobar/3781cd29-805\r\nc-4564-b7e0-9ac3647f350e</StackId><CreationTime>2010-07-27T22:28:28Z</CreationTime><StackStatus>CREATE_COMPLETE</StackStatus><NotificationARNs/><DisableRollback>false</DisableRollbac\r\nk><Outputs><member><OutputKey>MyTableName</OutputKey><OutputValue><moto.dynamodb2.models.Table object at 0x7f5ce7c3b240></OutputValue></member></Outputs><Parameters></Parameters><Tag\r\ns></Tags></member></Stacks></DescribeStacksResult></DescribeStacksResponse>'\r\n\r\n../../../../.local/lib/python3.6/site-packages/botocore/parsers.py:458: ResponseParserError\r\n=================================== 1 failed in 2.23s ====================================\r\n```\r\n\r\nIt seems `Ref` for ddb tables outputs this: `<moto.dynamodb2.models.Table object at 0x7f5ce7c3b240>`, but I think it should output the name of the table: `MyTableName` as that's the behavior of AWS.\r\n\r\n## **what version of Moto you're using**, and **how you installed it**\r\n\r\nmoto 1.3.14 installed with pip\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3114/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3114/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3078", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3078/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3078/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3078/events", "html_url": "https://github.com/getmoto/moto/issues/3078", "id": 641513774, "node_id": "MDU6SXNzdWU2NDE1MTM3NzQ=", "number": 3078, "title": "mock_cognitoidp idtoken is missing AWS oauth headers", "user": {"login": "Alladinsane", "id": 12090989, "node_id": "MDQ6VXNlcjEyMDkwOTg5", "avatar_url": "https://avatars.githubusercontent.com/u/12090989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alladinsane", "html_url": "https://github.com/Alladinsane", "followers_url": "https://api.github.com/users/Alladinsane/followers", "following_url": "https://api.github.com/users/Alladinsane/following{/other_user}", "gists_url": "https://api.github.com/users/Alladinsane/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alladinsane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alladinsane/subscriptions", "organizations_url": "https://api.github.com/users/Alladinsane/orgs", "repos_url": "https://api.github.com/users/Alladinsane/repos", "events_url": "https://api.github.com/users/Alladinsane/events{/privacy}", "received_events_url": "https://api.github.com/users/Alladinsane/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-18T19:59:27Z", "updated_at": "2020-07-04T01:51:35Z", "closed_at": "2020-07-04T01:51:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am attempting to test a function that accepts a Cognito id token, fetches the public jwk for a cognito userpool, uses that key to decode and verify the token and extract the claims. It's based on sample code from an AWS tutorial. It works in a real environment with genuine Cognito id tokens, but I haven't yet gotten my moto unittests to work.\r\n\r\nI have attempted to incorporate the test_token_verification example in test_cognitoidp.\r\n\r\nThe idtoken I am generating with my mock_cognito userpool and decoding with the provided jwks-public.json only has two headers: \r\n\r\n`{'alg': 'RS256', 'typ': 'JWT'}\r\n\r\nIn order to verify the cognito id token and extract claims, the code from AWS expects a 'kid' header, which appears in the jwks-public.json but is not in the headers.\r\n\r\nFrom the token verification function:\r\n\r\n> headers = jwt.get_unverified_headers(token)\r\n        kid = headers['kid']\r\n        \r\n\r\nI seem to be encountering an issue related to the open PR [https://github.com/spulec/moto/pull/1689](https://github.com/spulec/moto/pull/1689)\r\n\r\nI've attempted to implement this fix in my own unittest, building my own payload and headers and signing them with the dummy private key from this repo, but didn't make a lot of headway.\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3078/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3078/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3066", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3066/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3066/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3066/events", "html_url": "https://github.com/getmoto/moto/issues/3066", "id": 637750355, "node_id": "MDU6SXNzdWU2Mzc3NTAzNTU=", "number": 3066, "title": "Error: Cant create DynamoDB table", "user": {"login": "benkeil", "id": 16204452, "node_id": "MDQ6VXNlcjE2MjA0NDUy", "avatar_url": "https://avatars.githubusercontent.com/u/16204452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benkeil", "html_url": "https://github.com/benkeil", "followers_url": "https://api.github.com/users/benkeil/followers", "following_url": "https://api.github.com/users/benkeil/following{/other_user}", "gists_url": "https://api.github.com/users/benkeil/gists{/gist_id}", "starred_url": "https://api.github.com/users/benkeil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benkeil/subscriptions", "organizations_url": "https://api.github.com/users/benkeil/orgs", "repos_url": "https://api.github.com/users/benkeil/repos", "events_url": "https://api.github.com/users/benkeil/events{/privacy}", "received_events_url": "https://api.github.com/users/benkeil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-12T13:27:56Z", "updated_at": "2020-06-14T08:25:02Z", "closed_at": "2020-06-13T23:59:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version: I used the actual master.\r\n\r\nThe terraform code:\r\n\r\n```\r\nresource \"aws_dynamodb_table\" \"grades\" {\r\n  name         = \"${var.service_name}.grades\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key     = \"id\"\r\n  range_key    = \"reference\"\r\n\r\n  attribute {\r\n    name = \"id\"\r\n    type = \"S\"\r\n  }\r\n\r\n  attribute {\r\n    name = \"reference\"\r\n    type = \"S\"\r\n  }\r\n\r\n  global_secondary_index {\r\n    name            = \"byReference\"\r\n    hash_key        = \"reference\"\r\n    projection_type = \"ALL\"\r\n  }\r\n\r\n  lifecycle {\r\n    prevent_destroy = true\r\n  }\r\n\r\n  tags = local.tags\r\n}\r\n```\r\n\r\nThe debug output of terraform:\r\n\r\n```\r\n2020-06-12T14:48:02.175+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: 2020/06/12 14:48:02 [DEBUG] [aws-sdk-go] {\"Table\": {\"AttributeDefinitions\": [{\"AttributeName\": \"reference\", \"AttributeType\": \"S\"}, {\"AttributeName\": \"id\", \"AttributeType\": \"S\"}], \"ProvisionedThroughput\": {\"WriteCapacityUnits\": 10, \"ReadCapacityUnits\": 10, \"NumberOfDecreasesToday\": 0}, \"TableSizeBytes\": 0, \"TableName\": \"componenttest-widget-service.grades\", \"TableStatus\": \"ACTIVE\", \"TableArn\": \"arn:aws:dynamodb:us-east-1:123456789011:table/componenttest-widget-service.grades\", \"KeySchema\": [{\"AttributeName\": \"id\", \"KeyType\": \"HASH\"}, {\"AttributeName\": \"reference\", \"KeyType\": \"RANGE\"}], \"ItemCount\": 0, \"CreationDateTime\": 1591966082.035368, \"GlobalSecondaryIndexes\": [{\"IndexName\": \"byReference\", \"KeySchema\": [{\"AttributeName\": \"reference\", \"KeyType\": \"HASH\"}], \"Projection\": {\"ProjectionType\": \"ALL\"}, \"IndexStatus\": \"ACTIVE\"}], \"LocalSecondaryIndexes\": []}}\r\n```\r\n\r\n```\r\n runtime error: invalid memory address or nil pointer dereference\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: [signal SIGSEGV: segmentation violation code=0x1 addr=0x20 pc=0x4ea19ab]\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4:\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: goroutine 134 [running]:\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/terraform-providers/terraform-provider-aws/aws.flattenAwsDynamoDbTableResource(0xc001406b60, 0xc0012eec00, 0xc000652270, 0x0)\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/aws/structure.go:4149 +0x105b\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/terraform-providers/terraform-provider-aws/aws.resourceAwsDynamoDbTableRead(0xc001406b60, 0x5b37620, 0xc000301900, 0x64b2400, 0xc000e7fd20)\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/aws/resource_aws_dynamodb_table.go:665 +0x330\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/terraform-providers/terraform-provider-aws/aws.resourceAwsDynamoDbTableCreate(0xc001406b60, 0x5b37620, 0xc000301900, 0x2, 0xa406520)\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/aws/resource_aws_dynamodb_table.go:439 +0x1548\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/hashicorp/terraform-plugin-sdk/helper/schema.(*Resource).Apply(0xc000566000, 0xc000a346e0, 0xc0010007e0, 0x5b37620, 0xc000301900, 0xc0008c0701, 0xc000d52990, 0xc0008c0790)\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/github.com/hashicorp/terraform-plugin-sdk/helper/schema/resource.go:310 +0x365\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/hashicorp/terraform-plugin-sdk/helper/schema.(*Provider).Apply(0xc000152180, 0xc000df59c8, 0xc000a346e0, 0xc0010007e0, 0xc000881828, 0xc0011aa2e0, 0x5946b60)\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/github.com/hashicorp/terraform-plugin-sdk/helper/schema/provider.go:294 +0x99\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/hashicorp/terraform-plugin-sdk/internal/helper/plugin.(*GRPCProviderServer).ApplyResourceChange(0xc000595138, 0x702f440, 0xc000b0df80, 0xc001406540, 0xc000595138, 0xc000b0df80, 0xc000e17b30)\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/github.com/hashicorp/terraform-plugin-sdk/internal/helper/plugin/grpc_provider.go:885 +0x8b4\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/hashicorp/terraform-plugin-sdk/internal/tfplugin5._Provider_ApplyResourceChange_Handler(0x64da560, 0xc000595138, 0x702f440, 0xc000b0df80, 0xc001178ba0, 0x0, 0x702f440, 0xc000b0df80, 0xc001366b00, 0x562)\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/github.com/hashicorp/terraform-plugin-sdk/internal/tfplugin5/tfplugin5.pb.go:3305 +0x217\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: google.golang.org/grpc.(*Server).processUnaryRPC(0xc0008a9680, 0x7051c00, 0xc000e0e480, 0xc0012ee100, 0xc000958cc0, 0xa3d9780, 0x0, 0x0, 0x0)\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/google.golang.org/grpc/server.go:1024 +0x4f4\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: google.golang.org/grpc.(*Server).handleStream(0xc0008a9680, 0x7051c00, 0xc000e0e480, 0xc0012ee100, 0x0)\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/google.golang.org/grpc/server.go:1313 +0xd97\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: google.golang.org/grpc.(*Server).serveStreams.func1.1(0xc00013a0e0, 0xc0008a9680, 0x7051c00, 0xc000e0e480, 0xc0012ee100)\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/google.golang.org/grpc/server.go:722 +0xbb\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: created by google.golang.org/grpc.(*Server).serveStreams.func1\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/google.golang.org/grpc/server.go:720 +0xa1\r\n```\r\n\r\nThe problem seems to be the global secondary index.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3066/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3066/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3030", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3030/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3030/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3030/events", "html_url": "https://github.com/getmoto/moto/issues/3030", "id": 626453862, "node_id": "MDU6SXNzdWU2MjY0NTM4NjI=", "number": 3030, "title": "CloudFormation : some unit tests are failing", "user": {"login": "jeremietharaud", "id": 46786750, "node_id": "MDQ6VXNlcjQ2Nzg2NzUw", "avatar_url": "https://avatars.githubusercontent.com/u/46786750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremietharaud", "html_url": "https://github.com/jeremietharaud", "followers_url": "https://api.github.com/users/jeremietharaud/followers", "following_url": "https://api.github.com/users/jeremietharaud/following{/other_user}", "gists_url": "https://api.github.com/users/jeremietharaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremietharaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremietharaud/subscriptions", "organizations_url": "https://api.github.com/users/jeremietharaud/orgs", "repos_url": "https://api.github.com/users/jeremietharaud/repos", "events_url": "https://api.github.com/users/jeremietharaud/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremietharaud/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-28T12:03:18Z", "updated_at": "2020-05-28T13:14:19Z", "closed_at": "2020-05-28T13:14:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**moto version:**\r\n1.3.15 (spulec/moto: master)\r\n\r\n**module:**\r\nmock_cloudformation\r\n\r\n**action**:\r\nnosetests\r\n\r\n**expected behavior:**\r\nUnit tests are OK.\r\n\r\n**actual behavior:**\r\nUsing nosetests:\r\n```\r\nRan 161 tests in 10.656s\r\n\r\nFAILED (errors=4)\r\n```\r\nUsing pytest:\r\n```\r\nFAILED test_cloudformation_stack_crud_boto3.py::test_create_stack_set_from_s3_url - botocore.exceptions.ClientError: An error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.\r\nFAILED test_cloudformation_stack_crud_boto3.py::test_create_stack_from_s3_url - botocore.exceptions.ClientError: An error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.\r\nFAILED test_cloudformation_stack_crud_boto3.py::test_update_stack_from_s3_url - botocore.exceptions.ClientError: An error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.\r\nFAILED test_cloudformation_stack_crud_boto3.py::test_create_change_set_from_s3_url - botocore.exceptions.ClientError: An error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.\r\nFAILED test_validate.py::test_boto3_json_invalid_missing_resource - AttributeError: 'str' object has no attribute 'should'\r\nFAILED test_validate.py::test_boto3_yaml_invalid_missing_resource - AttributeError: 'str' object has no attribute 'should'\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3030/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3030/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3026", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3026/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3026/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3026/events", "html_url": "https://github.com/getmoto/moto/issues/3026", "id": 624480833, "node_id": "MDU6SXNzdWU2MjQ0ODA4MzM=", "number": 3026, "title": "IoT Core delete_thing_group does not behave like real boto3 for nonexistent group", "user": {"login": "bobobox", "id": 2499321, "node_id": "MDQ6VXNlcjI0OTkzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2499321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobobox", "html_url": "https://github.com/bobobox", "followers_url": "https://api.github.com/users/bobobox/followers", "following_url": "https://api.github.com/users/bobobox/following{/other_user}", "gists_url": "https://api.github.com/users/bobobox/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobobox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobobox/subscriptions", "organizations_url": "https://api.github.com/users/bobobox/orgs", "repos_url": "https://api.github.com/users/bobobox/repos", "events_url": "https://api.github.com/users/bobobox/events{/privacy}", "received_events_url": "https://api.github.com/users/bobobox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T20:53:05Z", "updated_at": "2020-10-09T18:02:16Z", "closed_at": "2020-10-09T14:57:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "### moto version: \r\n1.3.15\r\n\r\n### module: \r\n`mock_iot`\r\n\r\n### action: \r\n`delete_thing_group`\r\n\r\n### expected behavior:\r\n\r\nboto3's response is the same whether or not the thing group existed or not. It does not throw any exception if requested to delete a nonexistent thing group.\r\n\r\n### actual behavior:\r\n\r\nmoto throws a `ResourceNotFoundException` if the thing group does not exist: \r\n\r\n    botocore.errorfactory.ResourceNotFoundException: An error occurred (ResourceNotFoundException) when calling the DeleteThingGroup operation: The specified resource does not exist", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3026/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3026/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3016", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3016/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3016/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3016/events", "html_url": "https://github.com/getmoto/moto/issues/3016", "id": 623571436, "node_id": "MDU6SXNzdWU2MjM1NzE0MzY=", "number": 3016, "title": "IAM delete_role Can Delete Wrong Role If Instance Profiles Exist", "user": {"login": "jweite", "id": 8495212, "node_id": "MDQ6VXNlcjg0OTUyMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/8495212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jweite", "html_url": "https://github.com/jweite", "followers_url": "https://api.github.com/users/jweite/followers", "following_url": "https://api.github.com/users/jweite/following{/other_user}", "gists_url": "https://api.github.com/users/jweite/gists{/gist_id}", "starred_url": "https://api.github.com/users/jweite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jweite/subscriptions", "organizations_url": "https://api.github.com/users/jweite/orgs", "repos_url": "https://api.github.com/users/jweite/repos", "events_url": "https://api.github.com/users/jweite/events{/privacy}", "received_events_url": "https://api.github.com/users/jweite/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-23T03:28:46Z", "updated_at": "2020-05-27T16:19:29Z", "closed_at": "2020-05-27T16:19:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "How to reproduce: see attached script.\r\n\r\nWhat script does: creates Role1, adds it to an instance profile, creates Role2, deletes Role2.\r\n\r\nWhat should happen:  Role2 should have been deleted\r\n\r\nWhat does happen:  Role1 is deleted.\r\n\r\nDiagnosis:  models.py delete_role() function uses pre-existing/initialized variable _role_ in a for loop over instance profile roles, which leaves it set to the role of the last instance profile inspected instead of the role specified in the function parameter.\r\n\r\nMoto Version Tested: 1.3.14, installed with _pip install moto_ into a Python 3.7 virtual env.  Using Python Mocks.  botocore version 1.16.16.\r\n\r\n[moto_iam_delete_role_issue.py.txt](https://github.com/spulec/moto/files/4671073/moto_iam_delete_role_issue.py.txt)\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3016/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3016/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3006", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3006/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3006/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3006/events", "html_url": "https://github.com/getmoto/moto/issues/3006", "id": 620518493, "node_id": "MDU6SXNzdWU2MjA1MTg0OTM=", "number": 3006, "title": "mock_sqs: Unable to retrieve multiple messages in a single request", "user": {"login": "Haklim733", "id": 7102666, "node_id": "MDQ6VXNlcjcxMDI2NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7102666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Haklim733", "html_url": "https://github.com/Haklim733", "followers_url": "https://api.github.com/users/Haklim733/followers", "following_url": "https://api.github.com/users/Haklim733/following{/other_user}", "gists_url": "https://api.github.com/users/Haklim733/gists{/gist_id}", "starred_url": "https://api.github.com/users/Haklim733/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Haklim733/subscriptions", "organizations_url": "https://api.github.com/users/Haklim733/orgs", "repos_url": "https://api.github.com/users/Haklim733/repos", "events_url": "https://api.github.com/users/Haklim733/events{/privacy}", "received_events_url": "https://api.github.com/users/Haklim733/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-18T21:30:49Z", "updated_at": "2020-05-24T18:14:46Z", "closed_at": "2020-05-24T17:06:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to receive multiple messages per request but I only see one. If I run the code without mocking, I see both messages sent below in the code. I tried introducing time.sleep(3) in between sending messages and receiving the message but I end up with the same results.\r\n\r\n**Versions**\r\nboto==2.49.0\r\nboto3==1.13.1\r\nbotocore==1.16.1\r\nmoto==1.3.14\r\n\r\n**Code**\r\n```\r\n@mock_sqs\r\ndef test_create_fifo_queue(aws_credentials):\r\n    session = boto3.Session(profile_name='testing')\r\n    sqs = session.client(\"sqs\", region_name=\"us-east-1\")\r\n    today = datetime.today().strftime('%Y-%m-%d')\r\n    queue_name = f\"{os.environ['AWS_RETRY_Q']}.fifo\"  \r\n\r\n    sqs.create_queue(QueueName=queue_name,\r\n                     Attributes={\"FifoQueue\": \"true\"})\r\n\r\n    response = sqs.get_queue_url(QueueName=queue_name)\r\n    queue_url = response['QueueUrl']\r\n    print(queue_url)\r\n\r\n    sqs.send_message(QueueUrl=queue_url,\r\n                    MessageBody=json.dumps(['A']),\r\n                    MessageAttributes={\r\n                        'Date': {'DataType': 'String',\r\n                                 'StringValue': today},\r\n                        'QueryType': {'DataType': 'String',\r\n                                   'StringValue': \"RETRY\"}\r\n                    },\r\n                     MessageGroupId='test-queue',\r\n                     MessageDeduplicationId=f'{today}-A')\r\n\r\n    sqs.send_message(QueueUrl=queue_url,\r\n                    MessageBody=json.dumps(['B']),\r\n                    MessageAttributes={\r\n                        'Date': {'DataType': 'String',\r\n                                 'StringValue': today},\r\n                        'QueryType': {'DataType': 'String',\r\n                                   'StringValue': \"NEW\"}\r\n                    },\r\n                     MessageGroupId='test-queue',\r\n                     MessageDeduplicationId=f'{today}-B')\r\n\r\n    message_resp = sqs.receive_message(QueueUrl=queue_url,\r\n                                       AttributeNames=['All'],\r\n                                       MessageAttributeNames=['All'],\r\n                                       VisibilityTimeout=20,\r\n                                       MaxNumberOfMessages=10,\r\n                                       WaitTimeSeconds=5\r\n                                       )  #this works on production, receive 2 messages\r\n    print('message1', message_resp['Messages'])\r\n    assert len(message_resp['Messages'])==2\r\n```\r\n**traceback**\r\nAssertionError: assert 1 == 2\r\nE        +  where 1 = len([{'Attributes': {'ApproximateFirstReceiveTimestamp': '1589837266039', 'ApproximateReceiveCount': '1', 'MessageDeduplic...', 'MD5OfBody': '5c24fc1df56d764b550ceae1b9319125', 'MD5OfMessageAttributes': '392230c5ed0aa0660ddc3fd110bdd305', ...}])\r\n\r\ntest_sqs.py:63: AssertionError\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3006/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3006/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/3005", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/3005/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/3005/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/3005/events", "html_url": "https://github.com/getmoto/moto/issues/3005", "id": 620137592, "node_id": "MDU6SXNzdWU2MjAxMzc1OTI=", "number": 3005, "title": "Certain StepFunctions exceptions uncatchable", "user": {"login": "aidan-", "id": 327286, "node_id": "MDQ6VXNlcjMyNzI4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/327286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidan-", "html_url": "https://github.com/aidan-", "followers_url": "https://api.github.com/users/aidan-/followers", "following_url": "https://api.github.com/users/aidan-/following{/other_user}", "gists_url": "https://api.github.com/users/aidan-/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidan-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidan-/subscriptions", "organizations_url": "https://api.github.com/users/aidan-/orgs", "repos_url": "https://api.github.com/users/aidan-/repos", "events_url": "https://api.github.com/users/aidan-/events{/privacy}", "received_events_url": "https://api.github.com/users/aidan-/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-18T11:38:02Z", "updated_at": "2020-05-24T14:30:25Z", "closed_at": "2020-05-24T14:06:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am having an issue catching certain exceptions that are being thrown by only some of the StepFunction related methods.  I have managed to break it down to this simple example to illustrate my problem:\r\n\r\n```\r\nimport pytest\r\nimport moto\r\nfrom moto import mock_stepfunctions\r\nimport boto3\r\n\r\nfrom botocore.exceptions import ClientError\r\n\r\ndef test_sfn_describe_state_machine():\r\n    with mock_stepfunctions():\r\n        with pytest.raises(ClientError):\r\n            client = boto3.client(\"stepfunctions\", region_name=\"ap-southeast-2\")\r\n            client.describe_state_machine(stateMachineArn=\"asd\")\r\n\r\ndef test_sfn_start_execution():\r\n    with mock_stepfunctions():\r\n        with pytest.raises(ClientError):\r\n            client = boto3.client(\"stepfunctions\", region_name=\"ap-southeast-2\")\r\n            client.start_execution(stateMachineArn=\"asd\")\r\n\r\n```\r\n\r\nRunning this with pytest (or anything, that part isn't relevant) will result in the first test passing, with the `ClientError` successfully being caught.  The second test will fail.  From what I can see, the two methods are raising two different exceptions:\r\n\r\n1st) `botocore.errorfactory.InvalidArn: An error occurred (InvalidArn) when calling the DescribeStateMachine operation: Invalid State Machine Arn: 'asd'`\r\n2nd) `moto.stepfunctions.exceptions.InvalidArn: Invalid State Machine Arn: 'asd'`\r\n\r\nFrom what I can see, they're both calling the same code path to validate the ARN, but only one is raising exception namespace to `moto`.  I've also had a look at the tests in the `moto` repository itself and added one that follows the pattern of my failing test, and it fails there too - so I don't think this is an environment issue.\r\n\r\nI'm sure it's something obvious, but it's got my stumped at the moment.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/3005/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/3005/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2985", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2985/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2985/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2985/events", "html_url": "https://github.com/getmoto/moto/issues/2985", "id": 615868173, "node_id": "MDU6SXNzdWU2MTU4NjgxNzM=", "number": 2985, "title": "DynamoDB2 transact_write_items() raises wrong error on ConditionExpression failure", "user": {"login": "mfogel", "id": 69902, "node_id": "MDQ6VXNlcjY5OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/69902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfogel", "html_url": "https://github.com/mfogel", "followers_url": "https://api.github.com/users/mfogel/followers", "following_url": "https://api.github.com/users/mfogel/following{/other_user}", "gists_url": "https://api.github.com/users/mfogel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfogel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfogel/subscriptions", "organizations_url": "https://api.github.com/users/mfogel/orgs", "repos_url": "https://api.github.com/users/mfogel/repos", "events_url": "https://api.github.com/users/mfogel/events{/privacy}", "received_events_url": "https://api.github.com/users/mfogel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-11T13:03:25Z", "updated_at": "2020-05-15T04:18:22Z", "closed_at": "2020-05-14T22:54:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The implementation of `transact_write_items()` in #2879 appears to work well in my application (thank you!) except for one detail. Behavior differs from boto3 on transaction failure due to a failed `ConditionExpression`.\r\n\r\nOn failure of a `ConditionExpression` within a transact item, boto will raise a `TransactionCanceledException` with a message with stringified `CancellationReason`s. This allows a client to determine which of the transact items in the submitted in the transaction actually failed. Moto `1.3.15.dev842` raises a `ConditionalCheckFailedException` instead.\r\n\r\nHere's a test case demonstrating the issue. This passes when run against dynamo via boto, but fails when using moto:\r\n\r\n```python\r\n@mock_dynamodb2\r\ndef test_transact_write_items_fails_with_transaction_canceled_exception():\r\n    table_schema = {\r\n        \"KeySchema\": [{\"AttributeName\": \"id\", \"KeyType\": \"HASH\"}],\r\n        \"AttributeDefinitions\": [{\"AttributeName\": \"id\", \"AttributeType\": \"S\"},],\r\n    }\r\n    dynamodb = boto3.client(\"dynamodb\", region_name=\"us-east-1\")\r\n    dynamodb.create_table(\r\n        TableName=\"test-table\", BillingMode=\"PAY_PER_REQUEST\", **table_schema\r\n    )\r\n    # Insert one item\r\n    dynamodb.put_item(TableName=\"test-table\", Item={\"id\": {\"S\": \"foo\"}})\r\n    # Update two items, the one that exists and another that doesn't\r\n    with assert_raises(ClientError) as ex:\r\n        dynamodb.transact_write_items(\r\n            TransactItems=[\r\n                {\r\n                    \"Update\": {\r\n                        \"Key\": {\"id\": {\"S\": \"foo\"}},\r\n                        \"TableName\": \"test-table\",\r\n                        \"UpdateExpression\": \"SET #k = :v\",\r\n                        \"ConditionExpression\": \"attribute_exists(id)\",\r\n                        \"ExpressionAttributeNames\": {\"#k\": \"key\"},\r\n                        \"ExpressionAttributeValues\": {\":v\": {\"S\": \"value\"}},\r\n                    }\r\n                },\r\n                {\r\n                    \"Update\": {\r\n                        \"Key\": {\"id\": {\"S\": \"doesnotexist\"}},\r\n                        \"TableName\": \"test-table\",\r\n                        \"UpdateExpression\": \"SET #e = :v\",\r\n                        \"ConditionExpression\": \"attribute_exists(id)\",\r\n                        \"ExpressionAttributeNames\": {\"#e\": \"key\"},\r\n                        \"ExpressionAttributeValues\": {\":v\": {\"S\": \"value\"}},\r\n                    }\r\n                }\r\n            ]\r\n        )\r\n    ex.exception.response[\"Error\"][\"Code\"].should.equal(\r\n        \"TransactionCanceledException\"\r\n    )\r\n    ex.exception.response[\"ResponseMetadata\"][\"HTTPStatusCode\"].should.equal(400)\r\n    ex.exception.response[\"Error\"][\"Message\"].should.equal(\r\n        \"Transaction cancelled, please refer cancellation reasons for specific reasons [None, ConditionalCheckFailed]\"\r\n    )\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2985/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2985/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2960", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2960/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2960/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2960/events", "html_url": "https://github.com/getmoto/moto/issues/2960", "id": 612036470, "node_id": "MDU6SXNzdWU2MTIwMzY0NzA=", "number": 2960, "title": "Dynamo UpdateExpression using ADD from zero broken on master", "user": {"login": "mfogel", "id": 69902, "node_id": "MDQ6VXNlcjY5OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/69902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfogel", "html_url": "https://github.com/mfogel", "followers_url": "https://api.github.com/users/mfogel/followers", "following_url": "https://api.github.com/users/mfogel/following{/other_user}", "gists_url": "https://api.github.com/users/mfogel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfogel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfogel/subscriptions", "organizations_url": "https://api.github.com/users/mfogel/orgs", "repos_url": "https://api.github.com/users/mfogel/repos", "events_url": "https://api.github.com/users/mfogel/events{/privacy}", "received_events_url": "https://api.github.com/users/mfogel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-04T17:19:29Z", "updated_at": "2020-05-08T14:54:01Z", "closed_at": "2020-05-08T14:54:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It appears #2924 broke some dynamo updates using `ADD`.\r\n\r\nThe issue is that dynamo allows you to use `ADD` in an `UpdateExpression` with non-existent attributes and zero will be assumed. The new AST-parsing scheme doesn't seem to honor that.\r\n\r\nThe following test case demonstrates that syntax. I've verified this worked on master right before the merge #2924, and fails right after:\r\n\r\n```python\r\n@mock_dynamodb2\r\ndef test_update_item_atomic_counter_from_zero():\r\n    table = \"table_t\"\r\n    ddb_mock = boto3.client(\"dynamodb\", region_name=\"eu-west-3\")\r\n    ddb_mock.create_table(\r\n        TableName=table,\r\n        KeySchema=[{\"AttributeName\": \"t_id\", \"KeyType\": \"HASH\"}],\r\n        AttributeDefinitions=[{\"AttributeName\": \"t_id\", \"AttributeType\": \"S\"}],\r\n        BillingMode=\"PAY_PER_REQUEST\",\r\n    )\r\n\r\n    key = {\"t_id\": {\"S\": \"item1\"}}\r\n\r\n    ddb_mock.put_item(\r\n        TableName=table,\r\n        Item={\"t_id\": {\"S\": \"item1\"}},\r\n    )\r\n\r\n    ddb_mock.update_item(\r\n        TableName=table,\r\n        Key=key,\r\n        UpdateExpression=\"add n_i :inc1, n_f :inc2\",\r\n        ExpressionAttributeValues={\":inc1\": {\"N\": \"1.2\"}, \":inc2\": {\"N\": \"-0.5\"}},\r\n    )\r\n    updated_item = ddb_mock.get_item(TableName=table, Key=key)[\"Item\"]\r\n    updated_item[\"n_i\"][\"N\"].should.equal(\"1.2\")\r\n    updated_item[\"n_f\"][\"N\"].should.equal(\"-0.5\")\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2960/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2960/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2959", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2959/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2959/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2959/events", "html_url": "https://github.com/getmoto/moto/issues/2959", "id": 611850994, "node_id": "MDU6SXNzdWU2MTE4NTA5OTQ=", "number": 2959, "title": "SES verify_domain_identity incompatible with send_raw_email", "user": {"login": "staylor-ds", "id": 36075692, "node_id": "MDQ6VXNlcjM2MDc1Njky", "avatar_url": "https://avatars.githubusercontent.com/u/36075692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/staylor-ds", "html_url": "https://github.com/staylor-ds", "followers_url": "https://api.github.com/users/staylor-ds/followers", "following_url": "https://api.github.com/users/staylor-ds/following{/other_user}", "gists_url": "https://api.github.com/users/staylor-ds/gists{/gist_id}", "starred_url": "https://api.github.com/users/staylor-ds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/staylor-ds/subscriptions", "organizations_url": "https://api.github.com/users/staylor-ds/orgs", "repos_url": "https://api.github.com/users/staylor-ds/repos", "events_url": "https://api.github.com/users/staylor-ds/events{/privacy}", "received_events_url": "https://api.github.com/users/staylor-ds/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-04T12:50:37Z", "updated_at": "2020-05-15T04:16:20Z", "closed_at": "2020-05-14T22:52:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/spulec/moto/blob/323877c15de6efaaa098efd282b65729fa78d3eb/moto/ses/models.py#L203\r\n\r\nShould follow the following logic:\r\nhttps://github.com/spulec/moto/blob/323877c15de6efaaa098efd282b65729fa78d3eb/moto/ses/models.py#L147", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2959/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2959/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2937", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2937/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2937/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2937/events", "html_url": "https://github.com/getmoto/moto/issues/2937", "id": 609455896, "node_id": "MDU6SXNzdWU2MDk0NTU4OTY=", "number": 2937, "title": "S3 DeleteObjects Operation issue in Moto results failure in LocalStack", "user": {"login": "ninaRali", "id": 33415279, "node_id": "MDQ6VXNlcjMzNDE1Mjc5", "avatar_url": "https://avatars.githubusercontent.com/u/33415279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ninaRali", "html_url": "https://github.com/ninaRali", "followers_url": "https://api.github.com/users/ninaRali/followers", "following_url": "https://api.github.com/users/ninaRali/following{/other_user}", "gists_url": "https://api.github.com/users/ninaRali/gists{/gist_id}", "starred_url": "https://api.github.com/users/ninaRali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ninaRali/subscriptions", "organizations_url": "https://api.github.com/users/ninaRali/orgs", "repos_url": "https://api.github.com/users/ninaRali/repos", "events_url": "https://api.github.com/users/ninaRali/events{/privacy}", "received_events_url": "https://api.github.com/users/ninaRali/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-30T00:13:58Z", "updated_at": "2020-05-01T20:47:18Z", "closed_at": "2020-05-01T20:47:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sending a DeleteObjects request from AWS Go SDK to localStack ( set to latest, so fetched moto-ext>=1.3.15.12) results is 500 error.\r\n\r\n\r\nDeleteObject operation works successfully, it's the DeleteObject**s** that fails. Looking into the difference between the request payload (AWS Go SDK github.com/aws/aws-sdk-go v1.28.6):\r\n\r\n**DeleteObject:** \r\n`op := &request.Operation{\r\n\t\tName:       opDeleteObject,\r\n\t\tHTTPMethod: \"DELETE\",\r\n\t\tHTTPPath:   \"/{Bucket}/{Key+}\",\r\n\t}`\r\n\r\nWhere `const opDeleteObject = \"DeleteObject\"` \r\n\r\n**DeleteObjects**\r\n`op := &request.Operation{\r\n\t\tName:       opDeleteObjects,\r\n\t\tHTTPMethod: \"POST\",\r\n\t\tHTTPPath:   \"/{Bucket}?delete\",\r\n\t}`\r\n\r\nWhere `const opDeleteObjects = \"DeleteObjects\"`\r\n\r\n**In `_bucket_response_delete_keys` method of `class ResponseObject` **_line 843_** the check is:\r\n`objects = body_dict[\"Delete\"].get(\"Object\", [])`** \r\n\r\nIn case of `DeleteObjects` the key is \"Objects\", so objects variable will be []\r\n\r\nNote the difference between how each of these operations is called: \r\n\r\n**DeleteObject**\r\n\r\n`_, err := s.Client.DeleteObject(&s3.DeleteObjectInput{Bucket: aws.String(bucket), Key: aws.String(key)})\r\n`\r\n**DeleteObjects**\r\n`_, err := s.Client.DeleteObjects(&s3.DeleteObjectsInput{Bucket: aws.String(bucket), Delete: &s3.Delete{\r\n   Objects: keys,\r\n   Quiet: aws.Bool(false),\r\n}})\r\n`\r\n\r\nthe Delete struct has a field **Objects** instead of **Object**\r\n`\r\n\tObjects []*ObjectIdentifier `locationName:\"Object\" type:\"list\" flattened:\"true\" required:\"true\"`\r\n` \r\n\r\n\r\n\r\n######################################################################################\r\n\r\n\r\nHow to replicate:\r\n\r\nPlace some files in 'examplebucket'\r\ncall the DeleteObjects (code from AWS Docs) which the keys:\r\n\r\n`svc := s3.New(session.New())\r\ninput := &s3.DeleteObjectsInput{\r\n    Bucket: aws.String(\"examplebucket\"),\r\n    Delete: &s3.Delete{\r\n        Objects: []*s3.ObjectIdentifier{\r\n            {\r\n                Key: aws.String(\"objectkey1\"),\r\n            },\r\n            {\r\n                Key: aws.String(\"objectkey2\"),\r\n            },\r\n        },\r\n        Quiet: aws.Bool(false),\r\n    },\r\n}\r\n\r\nresult, err := svc.DeleteObjects(input)\r\nif err != nil {\r\n    if aerr, ok := err.(awserr.Error); ok {\r\n        switch aerr.Code() {\r\n        default:\r\n            fmt.Println(aerr.Error())\r\n        }\r\n    } else {\r\n        // Print the error, cast err to awserr.Error to get the Code and\r\n        // Message from an error.\r\n        fmt.Println(err.Error())\r\n    }\r\n    return\r\n}\r\n\r\nfmt.Println(result)\r\n}`\r\n\r\n\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2937/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2937/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2935", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2935/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2935/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2935/events", "html_url": "https://github.com/getmoto/moto/issues/2935", "id": 609219654, "node_id": "MDU6SXNzdWU2MDkyMTk2NTQ=", "number": 2935, "title": "mock_sts throws ImportError: cannot import name 'sts_backend' from 'moto.sts' ", "user": {"login": "getglad", "id": 2453555, "node_id": "MDQ6VXNlcjI0NTM1NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2453555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/getglad", "html_url": "https://github.com/getglad", "followers_url": "https://api.github.com/users/getglad/followers", "following_url": "https://api.github.com/users/getglad/following{/other_user}", "gists_url": "https://api.github.com/users/getglad/gists{/gist_id}", "starred_url": "https://api.github.com/users/getglad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/getglad/subscriptions", "organizations_url": "https://api.github.com/users/getglad/orgs", "repos_url": "https://api.github.com/users/getglad/repos", "events_url": "https://api.github.com/users/getglad/events{/privacy}", "received_events_url": "https://api.github.com/users/getglad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-29T17:12:59Z", "updated_at": "2020-05-01T13:20:25Z", "closed_at": "2020-05-01T13:02:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been tracking https://github.com/spulec/moto/issues/2836 (relax version pins in setup.py for non-Py2 users, etc) and tested it against our code base. Many seem to be working but `mock_sts` is producing an `ImportError`.\r\n\r\nAt the bottom of this ticket, I have a sample test using `pytest` pulled from the `mock_sts` tests in `moto` that is producing the same error.  \r\n\r\nI've reviewed a few dev releases and found the breaking build:\r\n\r\n- works / passes with no errors:\r\n   - 4/27 - pip install moto==1.3.15.dev758\r\n- doesn't work / fails with an `ImportError` on `mock_sts`\r\n   - 4/28 - pip install moto==1.3.15.dev765\r\n\r\nUsing `Python 3.7.3`\r\n\r\n### Sample test sourced from https://github.com/spulec/moto/blob/master/tests/test_sts/test_sts.py#L56-L84\r\n```\r\nimport pytest\r\nimport json\r\nimport boto3\r\n\r\nfrom moto import mock_sts\r\n\r\nACCOUNT_ID = '123'\r\n\r\n@mock_sts\r\ndef test_assume_role():\r\n    client = boto3.client(\"sts\", region_name=\"us-east-1\")\r\n\r\n    session_name = \"session-name\"\r\n    policy = json.dumps(\r\n        {\r\n            \"Statement\": [\r\n                {\r\n                    \"Sid\": \"Stmt13690092345534\",\r\n                    \"Action\": [\"S3:ListBucket\"],\r\n                    \"Effect\": \"Allow\",\r\n                    \"Resource\": [\"arn:aws:s3:::foobar-tester\"],\r\n                }\r\n            ]\r\n        }\r\n    )\r\n    role_name = \"test-role\"\r\n    s3_role = \"arn:aws:iam::{account_id}:role/{role_name}\".format(\r\n        account_id=ACCOUNT_ID, role_name=role_name\r\n    )\r\n    assume_role_response = client.assume_role(\r\n        RoleArn=s3_role,\r\n        RoleSessionName=session_name,\r\n        Policy=policy,\r\n        DurationSeconds=900,\r\n    )\r\n\r\n    credentials = assume_role_response[\"Credentials\"]\r\n    assert credentials[\"SessionToken\"] == 356\r\n```\r\n\r\n### Error when moto==1.3.15.dev765\r\n \r\n```\r\n================================================================ ERRORS ================================================================\r\n___________________________________________________ ERROR collecting simple_test.py ____________________________________________________\r\nImportError while importing test module '<path_to>/simple_test.py'.\r\nHint: make sure your test modules/packages have valid Python names.\r\nTraceback:\r\nsimple_test.py:11: in <module>\r\n    @mock_sts\r\n.venv/lib/python3.7/site-packages/moto/__init__.py:8: in f\r\n    module = importlib.import_module(module_name, \"moto\")\r\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/importlib/__init__.py:127: in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n.venv/lib/python3.7/site-packages/moto/sts/__init__.py:2: in <module>\r\n    from .models import sts_backend\r\n.venv/lib/python3.7/site-packages/moto/sts/models.py:5: in <module>\r\n    from moto.core import BaseBackend, BaseModel\r\n.venv/lib/python3.7/site-packages/moto/core/__init__.py:4: in <module>\r\n    from .responses import ActionAuthenticatorMixin\r\n.venv/lib/python3.7/site-packages/moto/core/responses.py:14: in <module>\r\n    from moto.core.access_control import IAMRequest, S3IAMRequest\r\n.venv/lib/python3.7/site-packages/moto/core/access_control.py:46: in <module>\r\n    from moto.sts import sts_backend\r\nE   ImportError: cannot import name 'sts_backend' from 'moto.sts' (<path_to>/.venv/lib/python3.7/site-packages/moto/sts/__init__.py)\r\n=========================================================== warnings summary ===========================================================\r\n.venv/lib/python3.7/site-packages/boto/plugin.py:40\r\n  <path_to>/.venv/lib/python3.7/site-packages/boto/plugin.py:40: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n    import imp\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n======================================================= short test summary info ========================================================\r\nERROR simple_test.py\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2935/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2935/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2898", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2898/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2898/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2898/events", "html_url": "https://github.com/getmoto/moto/issues/2898", "id": 601257875, "node_id": "MDU6SXNzdWU2MDEyNTc4NzU=", "number": 2898, "title": "ECS Service Info", "user": {"login": "zbrookle", "id": 39153813, "node_id": "MDQ6VXNlcjM5MTUzODEz", "avatar_url": "https://avatars.githubusercontent.com/u/39153813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zbrookle", "html_url": "https://github.com/zbrookle", "followers_url": "https://api.github.com/users/zbrookle/followers", "following_url": "https://api.github.com/users/zbrookle/following{/other_user}", "gists_url": "https://api.github.com/users/zbrookle/gists{/gist_id}", "starred_url": "https://api.github.com/users/zbrookle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zbrookle/subscriptions", "organizations_url": "https://api.github.com/users/zbrookle/orgs", "repos_url": "https://api.github.com/users/zbrookle/repos", "events_url": "https://api.github.com/users/zbrookle/events{/privacy}", "received_events_url": "https://api.github.com/users/zbrookle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-16T17:16:05Z", "updated_at": "2021-02-01T13:12:52Z", "closed_at": "2021-02-01T12:19:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When getting the info for ECS services using *describe_services* the real boto3 will return a list of failures and report that a service was \"MISSING\" in a list at the 'failures' key of the json response. However, moto reports an empty failures list", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2898/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2898/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2886", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2886/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2886/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2886/events", "html_url": "https://github.com/getmoto/moto/issues/2886", "id": 598346298, "node_id": "MDU6SXNzdWU1OTgzNDYyOTg=", "number": 2886, "title": "moto lambda response Payload is the log content, not function response data", "user": {"login": "dazza-codes", "id": 240623, "node_id": "MDQ6VXNlcjI0MDYyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/240623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dazza-codes", "html_url": "https://github.com/dazza-codes", "followers_url": "https://api.github.com/users/dazza-codes/followers", "following_url": "https://api.github.com/users/dazza-codes/following{/other_user}", "gists_url": "https://api.github.com/users/dazza-codes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dazza-codes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dazza-codes/subscriptions", "organizations_url": "https://api.github.com/users/dazza-codes/orgs", "repos_url": "https://api.github.com/users/dazza-codes/repos", "events_url": "https://api.github.com/users/dazza-codes/events{/privacy}", "received_events_url": "https://api.github.com/users/dazza-codes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-11T20:35:51Z", "updated_at": "2020-05-15T04:17:48Z", "closed_at": "2020-05-14T22:53:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "See all details in https://github.com/aio-libs/aiobotocore/issues/793\r\n- https://github.com/aio-libs/aiobotocore/pull/796 demonstrates the problem\r\n\r\nAlthough I don't know how to reconcile that with the moto unit tests, i.e.\r\n- https://github.com/spulec/moto/blob/master/tests/test_awslambda/test_lambda.py#L95-L125\r\n- this appears to distinguish between the logs and payload", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2886/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2886/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2877", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2877/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2877/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2877/events", "html_url": "https://github.com/getmoto/moto/issues/2877", "id": 596318597, "node_id": "MDU6SXNzdWU1OTYzMTg1OTc=", "number": 2877, "title": "Fix busted availableIpAddressCount in EC2 subnets", "user": {"login": "CpuID", "id": 916201, "node_id": "MDQ6VXNlcjkxNjIwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/916201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CpuID", "html_url": "https://github.com/CpuID", "followers_url": "https://api.github.com/users/CpuID/followers", "following_url": "https://api.github.com/users/CpuID/following{/other_user}", "gists_url": "https://api.github.com/users/CpuID/gists{/gist_id}", "starred_url": "https://api.github.com/users/CpuID/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CpuID/subscriptions", "organizations_url": "https://api.github.com/users/CpuID/orgs", "repos_url": "https://api.github.com/users/CpuID/repos", "events_url": "https://api.github.com/users/CpuID/events{/privacy}", "received_events_url": "https://api.github.com/users/CpuID/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-08T05:29:07Z", "updated_at": "2020-04-16T22:02:45Z", "closed_at": "2020-04-16T22:02:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Identified using LocalStack 0.11.0 which uses Moto 1.3.15something? (started via the Docker image `localstack/localstack:0.11.0`)\r\n\r\nThe attribute `availableIpAddressCount` in `DescribeSubnets` output is empty?\r\n\r\nRan `aws ec2 describe-subnets` against EC2 vs LocalStack, spotted the difference. Causes `awscli` to exit with this on any Subnet API calls (includes create, describe):\r\n\r\n```\r\nValueError: invalid literal for int() with base 10: ''\r\n```\r\n\r\n------------------------------\r\n\r\nEC2 response:\r\n\r\n```\r\n<DescribeSubnetsResponse xmlns=\"http://ec2.amazonaws.com/doc/2016-11-15/\">\r\n    <requestId>REDACTED-UUID</requestId>\r\n    <subnetSet>\r\n        <item>\r\n            <subnetId>subnet-REDACTED</subnetId>\r\n            <subnetArn>arn:aws:ec2:us-east-1:REDACTED:subnet/subnet-REDACTED</subnetArn>\r\n            <state>available</state>\r\n            <ownerId>REDACTED</ownerId>\r\n            <vpcId>vpc-REDACTED</vpcId>\r\n            <cidrBlock>10.REDACTED/24</cidrBlock>\r\n            <ipv6CidrBlockAssociationSet/>\r\n            <availableIpAddressCount>190</availableIpAddressCount>\r\n            <availabilityZone>us-east-1a</availabilityZone>\r\n            <availabilityZoneId>use1-az4</availabilityZoneId>\r\n            <defaultForAz>false</defaultForAz>\r\n            <mapPublicIpOnLaunch>true</mapPublicIpOnLaunch>\r\n            <tagSet>\r\n                <item>\r\n                    <key>Name</key>\r\n                    <value>REDACTED</value>\r\n                </item>\r\n                <item>\r\n                    <key>#</key>\r\n                    <value>1</value>\r\n                </item>\r\n            </tagSet>\r\n            <assignIpv6AddressOnCreation>false</assignIpv6AddressOnCreation>\r\n        </item>\r\n...\r\n```\r\n\r\nLocalStack (Moto) response:\r\n\r\n```\r\n<DescribeSubnetsResponse xmlns=\"http://ec2.amazonaws.com/doc/2013-10-15/\">\r\n  <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\r\n  <subnetSet>\r\n    <item>\r\n      <subnetId>subnet-9eaffe1d</subnetId>\r\n      <state>available</state>\r\n      <vpcId>vpc-08c7fa4d</vpcId>\r\n      <cidrBlock>172.31.0.0/20</cidrBlock>\r\n      <availableIpAddressCount></availableIpAddressCount>\r\n      <availabilityZone>us-east-1a</availabilityZone>\r\n      <availabilityZoneId>use1-az6</availabilityZoneId>\r\n      <defaultForAz>true</defaultForAz>\r\n      <mapPublicIpOnLaunch>true</mapPublicIpOnLaunch>\r\n      <ownerId>123456789012</ownerId>\r\n      <assignIpv6AddressOnCreation>False</assignIpv6AddressOnCreation>\r\n      <ipv6CidrBlockAssociationSet>[]</ipv6CidrBlockAssociationSet>\r\n      <subnetArn>arn:aws:ec2:us-east-1:123456789012:subnet/subnet-9eaffe1d</subnetArn>\r\n    </item>\r\n...\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2877/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2877/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2867", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2867/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2867/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2867/events", "html_url": "https://github.com/getmoto/moto/issues/2867", "id": 594845910, "node_id": "MDU6SXNzdWU1OTQ4NDU5MTA=", "number": 2867, "title": "S3 - PutObject/DeleteObject should have no response body", "user": {"login": "bblommers", "id": 6058517, "node_id": "MDQ6VXNlcjYwNTg1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6058517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblommers", "html_url": "https://github.com/bblommers", "followers_url": "https://api.github.com/users/bblommers/followers", "following_url": "https://api.github.com/users/bblommers/following{/other_user}", "gists_url": "https://api.github.com/users/bblommers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblommers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblommers/subscriptions", "organizations_url": "https://api.github.com/users/bblommers/orgs", "repos_url": "https://api.github.com/users/bblommers/repos", "events_url": "https://api.github.com/users/bblommers/events{/privacy}", "received_events_url": "https://api.github.com/users/bblommers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-06T06:43:41Z", "updated_at": "2020-04-07T08:10:05Z", "closed_at": "2020-04-07T08:10:05Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Both the PutObject- and DeleteObject-methods currently have a response body, but they should only return headers.\r\n\r\nOriginally raised in #2866 ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2867/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2867/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2860", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2860/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2860/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2860/events", "html_url": "https://github.com/getmoto/moto/issues/2860", "id": 592926850, "node_id": "MDU6SXNzdWU1OTI5MjY4NTA=", "number": 2860, "title": "Dynamodb2 update_item operation does not always return the UPDATED_OLD attributes.", "user": {"login": "hsq125", "id": 3532677, "node_id": "MDQ6VXNlcjM1MzI2Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/3532677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hsq125", "html_url": "https://github.com/hsq125", "followers_url": "https://api.github.com/users/hsq125/followers", "following_url": "https://api.github.com/users/hsq125/following{/other_user}", "gists_url": "https://api.github.com/users/hsq125/gists{/gist_id}", "starred_url": "https://api.github.com/users/hsq125/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hsq125/subscriptions", "organizations_url": "https://api.github.com/users/hsq125/orgs", "repos_url": "https://api.github.com/users/hsq125/repos", "events_url": "https://api.github.com/users/hsq125/events{/privacy}", "received_events_url": "https://api.github.com/users/hsq125/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-02T21:26:42Z", "updated_at": "2020-05-01T20:47:54Z", "closed_at": "2020-05-01T20:47:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Expected behaviour\r\n\r\nThe `update_item` operation can return the item attributes as they appear before or after they are updated, depending on the `ReturnValues` parameter.\r\n\r\nhttps://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html\r\n\r\nWhen set to `UPDATED_OLD` it should  \r\n> Returns only the updated attributes, as they appeared before the UpdateItem operation.\r\n\r\n# Problem\r\n\r\nWhen updating an item once (incrementing an attribute used as counter for exemple), the value of the updated attributes is correclty returned. Great.\r\n\r\nBut when updating the same item a second time in a row, the value is no longer returned at all. \r\n\r\nA minimal test for reproducing the issue is attached to the ticket (it is .txt file altougth it should have been .py; but it is not accepted by github).\r\n\r\n[moto_dynamodb_update_return_old_failure.txt](https://github.com/spulec/moto/files/4423741/moto_dynamodb_update_return_old_failure.txt)\r\n\r\n\r\n# Environment\r\n\r\nPython 3.7.5\r\n\r\nmoto (1.3.14)\r\nboto (2.49.0)\r\nboto3 (1.11.13)\r\nbotocore (1.14.13)\r\n\r\nmoto was installed well after boto*, with `pip install moto`\r\n\r\n# Thanks\r\nBecause there is no other place to say otherwise : thanks a lot for this great lib. I love it !! \r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2860/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2860/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2856", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2856/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2856/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2856/events", "html_url": "https://github.com/getmoto/moto/issues/2856", "id": 590769158, "node_id": "MDU6SXNzdWU1OTA3NjkxNTg=", "number": 2856, "title": "Dynamodb2 query should not support begins_with #x :y, only begins_with(#x, :y)", "user": {"login": "jkar32", "id": 29052061, "node_id": "MDQ6VXNlcjI5MDUyMDYx", "avatar_url": "https://avatars.githubusercontent.com/u/29052061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkar32", "html_url": "https://github.com/jkar32", "followers_url": "https://api.github.com/users/jkar32/followers", "following_url": "https://api.github.com/users/jkar32/following{/other_user}", "gists_url": "https://api.github.com/users/jkar32/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkar32/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkar32/subscriptions", "organizations_url": "https://api.github.com/users/jkar32/orgs", "repos_url": "https://api.github.com/users/jkar32/repos", "events_url": "https://api.github.com/users/jkar32/events{/privacy}", "received_events_url": "https://api.github.com/users/jkar32/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-31T03:53:02Z", "updated_at": "2022-09-07T11:45:35Z", "closed_at": "2022-09-07T11:45:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Moto's Dynamodb KeyConditionExpression's begins_with query is not aligned with DynamoDB's\r\n\r\nTable\r\n```python\r\n    with moto.mock_dynamodb2():\r\n        db = boto3.client(\"dynamodb\")\r\n        db.create_table(\r\n            TableName=table_name,\r\n            KeySchema=[\r\n                {\"AttributeName\": \"accountId\", \"KeyType\": \"HASH\"},  # partition key\r\n                {\"AttributeName\": \"vId\", \"KeyType\": \"RANGE\"},  # sort key\r\n            ],\r\n            AttributeDefinitions=[\r\n                {\"AttributeName\": \"accountId\", \"AttributeType\": \"S\"},\r\n                {\"AttributeName\": \"vId\", \"AttributeType\": \"S\"},\r\n            ],\r\n        )\r\n```\r\n\r\nWhen doing a query for an object in a Dynamodb\r\n\r\n```python\r\nDB.query(\r\n        TableName=TABLE_NAME,\r\n        Select=\"SPECIFIC_ATTRIBUTES\",\r\n        ProjectionExpression=\",\".join(\r\n            [\r\n                \"#account_id\",\r\n                \"#v_id\",\r\n                \"#name\",\r\n            ]\r\n        ),\r\n        KeyConditionExpression='#account_id=:account_id AND begins_with(#v_id,:v_id)',\r\n        ExpressionAttributeValues={\r\n            \":v_id\": db_translate_item(DbAttrs.V_ID, make_v_id(LATEST_VERSION)),\r\n            \":account_id\": db_translate_item(DbAttrs.ACCOUNT_ID, account_id)\r\n        },\r\n        ExpressionAttributeNames={\r\n            \"#account_id\": DbAttrs.ACCOUNT_ID,\r\n            \"#v_id\": DbAttrs.V_ID,\r\n            \"#name\": DbAttrs.NAME,\r\n        },\r\n    )\r\n```\r\n\r\nExample:\r\nDynamoDB is expecting \r\n```python\r\nKeyConditionExpression='#account_id=:account_id AND begins_with(#v_id,:v_id)'\r\n```\r\n\r\nBut moto is expecting\r\n```python\r\nKeyConditionExpression='#account_id=:account_id AND begins_with :v_id'\r\n```\r\n\r\nCode in question:\r\nhttps://github.com/spulec/moto/blob/acfdfb7d7c08be05a02101ff10cf467015bb0158/moto/dynamodb2/responses.py#L492", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2856/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2856/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2851", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2851/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2851/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2851/events", "html_url": "https://github.com/getmoto/moto/issues/2851", "id": 589846130, "node_id": "MDU6SXNzdWU1ODk4NDYxMzA=", "number": 2851, "title": "DynamoDB - Table.put_item returns ReturnConsumedCapacity by default & ignores parameter", "user": {"login": "dreamorosi", "id": 7353869, "node_id": "MDQ6VXNlcjczNTM4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/7353869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dreamorosi", "html_url": "https://github.com/dreamorosi", "followers_url": "https://api.github.com/users/dreamorosi/followers", "following_url": "https://api.github.com/users/dreamorosi/following{/other_user}", "gists_url": "https://api.github.com/users/dreamorosi/gists{/gist_id}", "starred_url": "https://api.github.com/users/dreamorosi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dreamorosi/subscriptions", "organizations_url": "https://api.github.com/users/dreamorosi/orgs", "repos_url": "https://api.github.com/users/dreamorosi/repos", "events_url": "https://api.github.com/users/dreamorosi/events{/privacy}", "received_events_url": "https://api.github.com/users/dreamorosi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-29T17:52:02Z", "updated_at": "2021-08-29T18:04:42Z", "closed_at": "2021-08-29T18:04:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have noticed that the `Table.put_item` method returns `ReturnConsumedCapacity` in the response by default, I'm not sure if that was an intended behavior but after a couple of tests I have noticed that `boto3`'s default seems to be to not return the consumed capacity during this operation.\r\n\r\n`moto`'s behavior (not including imports, table creation and environment variables for brevity):\r\n```\r\n@mock_dynamodb2\r\ndef moto_test():\r\n  resource = boto3.resource('dynamodb')\r\n  table = resource.Table('jobs')\r\n  item = {\r\n    'job_id': 'asdasdasd',\r\n    'expires_at': Decimal(time.time() + 60)\r\n  }\r\n  response_1 = table.put_item(\r\n    Item=item\r\n  )\r\n  print(response_1)\r\n  // {'ConsumedCapacity': {'TableName': 'jobs', 'CapacityUnits': 1}, 'ResponseMetadata': {'RequestId': '6LEWCUSFF0A7XY5EDL680SB1NEE8POGWWFIN3EDGTQGWJAPCWXDI', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com', 'x-amzn-requestid': '6LEWCUSFF0A7XY5EDL680SB1NEE8POGWWFIN3EDGTQGWJAPCWXDI'}, 'RetryAttempts': 0}}\r\n\r\n  response_2 = table.put_item(\r\n    Item=item,\r\n    ReturnConsumedCapacity='NONE'\r\n  )\r\n  // {'ConsumedCapacity': {'TableName': 'jobs', 'CapacityUnits': 1}, 'ResponseMetadata': {'RequestId': 'JOOZOSZ99RL67JK4D5L38SY827ANR16QYJLN7YULAU1TJ0UQIMVW', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com', 'x-amzn-requestid': 'JOOZOSZ99RL67JK4D5L38SY827ANR16QYJLN7YULAU1TJ0UQIMVW'}, 'RetryAttempts': 0}}\r\n\r\ntest()\r\n```\r\n`boto3`'s behavior (again not including imports, table creation and environment variables for brevity):\r\n```\r\ndef boto_test():\r\n  resource = boto3.resource('dynamodb')\r\n  table = resource.Table('jobs')\r\n  item = {\r\n    'job_id': 'asdasdasd',\r\n    'expires_at': Decimal(time.time() + 60)\r\n  }\r\n  response_1 = table.put_item(\r\n    Item=item\r\n  )\r\n  print(response_1)\r\n  // {'ResponseMetadata': {'RequestId': '262QQ9LNT0ONBC83P4VR983UD3VV4KQNSO5AEMVJF66Q9ASUAAJG', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'Server', 'date': 'Sun, 29 Mar 2020 17:23:27 GMT', 'content-type': 'application/x-amz-json-1.0', 'content-length': '2', 'connection': 'keep-alive', 'x-amzn-requestid': '262QQ9LNT0ONBC83P4VR983UD3VV4KQNSO5AEMVJF66Q9ASUAAJG', 'x-amz-crc32': '2745614147'}, 'RetryAttempts': 0}}\r\n\r\n  response_2 = table.put_item(\r\n    Item=item,\r\n    ReturnConsumedCapacity='TOTAL'\r\n  )\r\n  // {'ConsumedCapacity': {'TableName': 'jobs', 'CapacityUnits': 1.0}, 'ResponseMetadata': {'RequestId': 'AK9D9FNMLF5QA287VJ7M8NEIFVVV4KQNSO5AEMVJF66Q9ASUAAJG', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'Server', 'date': 'Sun, 29 Mar 2020 17:23:27 GMT', 'content-type': 'application/x-amz-json-1.0', 'content-length': '71', 'connection': 'keep-alive', 'x-amzn-requestid': 'AK9D9FNMLF5QA287VJ7M8NEIFVVV4KQNSO5AEMVJF66Q9ASUAAJG', 'x-amz-crc32': '2152587919'}, 'RetryAttempts': 0}}\r\n\r\ntest()\r\n```\r\n\r\nMeasuring the actual capacity for this operation might be out of scope for `moto` (right now the capacity is hard coded to 1) and personally not too high on my list but I would definitely be interested in seeing the `ReturnConsumedCapacity` parameter being honored or at least following the original AWS behavior.\r\n\r\nDesired behavior would be:\r\n```\r\nitem = { 'name': 'Rachel' }\r\nresponse = table.put_item(\r\n  Item=item\r\n)\r\n// response doesn't include 'ConsumedCapacity' dictionary.\r\n// {'ResponseMetadata': {'RequestId': 'JOOZOSZ99RL67JK4D5L38SY827ANR16QYJLN7YULAU1TJ0UQIMVW', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com', 'x-amzn-requestid': 'JOOZOSZ99RL67JK4D5L38SY827ANR16QYJLN7YULAU1TJ0UQIMVW'}, 'RetryAttempts': 0}}\r\n\r\nresponse = table.put_item(\r\n  Item=item,\r\n  ReturnConsumedCapacity='TOTAL'\r\n)\r\n// response includes 'ConsumedCapacity' dictionary with 'CapacityUnits' hard coded to 1.0.\r\n// {'ConsumedCapacity': {'TableName': 'names', 'CapacityUnits': 1.0}, 'ResponseMetadata': {'RequestId': 'JOOZOSZ99RL67JK4D5L38SY827ANR16QYJLN7YULAU1TJ0UQIMVW', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com', 'x-amzn-requestid': 'JOOZOSZ99RL67JK4D5L38SY827ANR16QYJLN7YULAU1TJ0UQIMVW'}, 'RetryAttempts': 0}}\r\n\r\nresponse = table.put_item(\r\n  Item=item,\r\n  ReturnConsumedCapacity='INDEXES'\r\n)\r\n// response includes 'ConsumedCapacity' dictionary with 'CapacityUnits' hard coded to 1.0 as well as 'Table' dictionary also hard coded.\r\n// {'ConsumedCapacity': {'TableName': 'names', 'CapacityUnits': 1.0, 'Table': {'CapacityUnits': 1.0}}, 'ResponseMetadata': {'RequestId': 'JOOZOSZ99RL67JK4D5L38SY827ANR16QYJLN7YULAU1TJ0UQIMVW', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com', 'x-amzn-requestid': 'JOOZOSZ99RL67JK4D5L38SY827ANR16QYJLN7YULAU1TJ0UQIMVW'}, 'RetryAttempts': 0}}\r\n\r\nresponse = table.put_item(\r\n  Item=item,\r\n  ReturnConsumedCapacity='SOMETHING_SOMETHING'\r\n)\r\n// ClientError with 'Code' ValidationException is raised\r\n// botocore.exceptions.ClientError: An error occurred (ValidationException) when calling the PutItem operation: 1 validation error detected: Value 'SOMETHING_SOMETHING' at 'returnConsumedCapacity' failed to satisfy constraint: Member must satisfy enum value set: [INDEXES, TOTAL, NONE]\r\n```\r\n\r\nIf the change is welcome and in line with the package's rationale I'm happy to provide a PR.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2851/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2851/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2814", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2814/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2814/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2814/events", "html_url": "https://github.com/getmoto/moto/issues/2814", "id": 582300201, "node_id": "MDU6SXNzdWU1ODIzMDAyMDE=", "number": 2814, "title": "resourceGroupsTaggingAPI.get_resources() does not follow rules for TagFilters", "user": {"login": "davidjdixon", "id": 452007, "node_id": "MDQ6VXNlcjQ1MjAwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/452007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidjdixon", "html_url": "https://github.com/davidjdixon", "followers_url": "https://api.github.com/users/davidjdixon/followers", "following_url": "https://api.github.com/users/davidjdixon/following{/other_user}", "gists_url": "https://api.github.com/users/davidjdixon/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidjdixon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidjdixon/subscriptions", "organizations_url": "https://api.github.com/users/davidjdixon/orgs", "repos_url": "https://api.github.com/users/davidjdixon/repos", "events_url": "https://api.github.com/users/davidjdixon/events{/privacy}", "received_events_url": "https://api.github.com/users/davidjdixon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-16T13:35:34Z", "updated_at": "2020-10-09T13:53:50Z", "closed_at": "2020-10-09T12:55:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to AWS rules on use of `resourcegroupstaggingapi.get-resources()`: \r\n\r\n> If you specify more than one filter in a single request, the response returns only those resources that satisfy **all** specified filters.\r\n\r\nHowever, when running a search with 2 tag filters via with moto against 2 resources with a single common tag value and a single unique tag value, instead of returning the 1 resource that contains **all** filtering tags, it appears to find resources that find **any** of the tags.\r\n\r\ne.g.\r\n\r\n```python\r\nimport pytest\r\nimport boto3\r\nimport os\r\nfrom moto import mock_resourcegroupstaggingapi, mock_ec2\r\nfrom moto.core import moto_api_backend\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef aws_credentials():\r\n    \"\"\"Mocked AWS Credentials for moto.\"\"\"\r\n    moto_api_backend.reset()\r\n    os.environ[\"AWS_ACCESS_KEY_ID\"] = \"testing\"\r\n    os.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"testing\"\r\n    os.environ[\"AWS_SECURITY_TOKEN\"] = \"testing\"\r\n    boto3.setup_default_session()\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef resourcegroupstaggingapi(aws_credentials):\r\n    with mock_resourcegroupstaggingapi():\r\n        yield boto3.client(\"resourcegroupstaggingapi\")\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef ec2(aws_credentials):\r\n    with mock_ec2():\r\n        yield boto3.client(\"ec2\")\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef create_ec2_resource(ec2):\r\n    ec2.run_instances(\r\n        ImageId=\"ami-123\",\r\n        MinCount=1,\r\n        MaxCount=1,\r\n        InstanceType=\"t2.micro\",\r\n        TagSpecifications=[\r\n            {\r\n                \"ResourceType\": \"instance\",\r\n                \"Tags\": [\r\n                    {\"Key\": \"MY_TAG1\", \"Value\": \"MY_UNIQUE_VALUE\"},\r\n                    {\"Key\": \"MY_TAG2\", \"Value\": \"MY_SHARED_VALUE\"},\r\n                ],\r\n            },\r\n            {\r\n                \"ResourceType\": \"instance\",\r\n                \"Tags\": [{\"Key\": \"MY_TAG3\", \"Value\": \"MY_VALUE3\"}],\r\n            },\r\n        ],\r\n    )\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef create_alt_ec2_resource(ec2):\r\n    ec2.run_instances(\r\n        ImageId=\"ami-456\",\r\n        MinCount=1,\r\n        MaxCount=1,\r\n        InstanceType=\"t2.micro\",\r\n        TagSpecifications=[\r\n            {\r\n                \"ResourceType\": \"instance\",\r\n                \"Tags\": [\r\n                    {\"Key\": \"MY_TAG1\", \"Value\": \"MY_ALT_UNIQUE_VALUE\"},\r\n                    {\"Key\": \"MY_TAG2\", \"Value\": \"MY_SHARED_VALUE\"},\r\n                ],\r\n            },\r\n            {\r\n                \"ResourceType\": \"instance\",\r\n                \"Tags\": [{\"Key\": \"MY_ALT_TAG3\", \"Value\": \"MY_VALUE3\"}],\r\n            },\r\n        ],\r\n    )\r\n\r\n\r\ndef test_find_tags__results_1_multiple_tags(\r\n    create_ec2_resource, create_alt_ec2_resource, resourcegroupstaggingapi\r\n):\r\n    results = resourcegroupstaggingapi.get_resources(\r\n        TagFilters=[\r\n            {\"Key\": \"MY_TAG1\", \"Values\": [\"MY_UNIQUE_VALUE\"]},\r\n            {\"Key\": \"MY_TAG2\", \"Values\": [\"MY_SHARED_VALUE\"]},\r\n        ]\r\n    )\r\n\r\n    assert len(results) == 1\r\n```\r\n\r\nexpected result:\r\n```python\r\n'ResourceTagMappingList': [\r\n    {'ResourceARN': 'arn:aws:ec2:eu-west-2::instance/i-89d91485b4613f125', 'Tags': [{'Key': 'MY_TAG1', 'Value': 'MY_UNIQUE_VALUE'}, {'Key': 'MY_TAG2', 'Value': 'MY_SHARED_VALUE'}, {'Key': 'MY_TAG3', 'Value': 'MY_VALUE3'}]}\r\n]\r\n```\r\n\r\nactual result:\r\n```python\r\n 'ResourceTagMappingList': [\r\n    {'ResourceARN': 'arn:aws:ec2:eu-west-2::instance/i-89d91485b4613f125', 'Tags': [{'Key': 'MY_TAG1', 'Value': 'MY_UNIQUE_VALUE'}, {'Key': 'MY_TAG2', 'Value': 'MY_SHARED_VALUE'}, {'Key': 'MY_TAG3', 'Value': 'MY_VALUE3'}]},\r\n    {'ResourceARN': 'arn:aws:ec2:eu-west-2::instance/i-1d884b9ba71297807', 'Tags': [{'Key': 'MY_TAG1', 'Value': 'MY_ALT_UNIQUE_VALUEM'}, {'Key': 'MY_TAG2', 'Value': 'MY_SHARED_VALUE'}, {'Key': 'MY_ALT_TAG3', 'Value': 'MY_VALUE3'}]}\r\n]\r\n```\r\n\r\nusing:\r\nmoto @ 1.3.15.dev491\r\nboto3 @ 1.12.21\r\npytest @ 5.4.1\r\npython @ 3.7.6", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2814/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2814/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2810", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2810/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2810/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2810/events", "html_url": "https://github.com/getmoto/moto/issues/2810", "id": 580061674, "node_id": "MDU6SXNzdWU1ODAwNjE2NzQ=", "number": 2810, "title": "Run Instances throwing error from Golang AWS sdk", "user": {"login": "vineethr-n", "id": 45558217, "node_id": "MDQ6VXNlcjQ1NTU4MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/45558217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vineethr-n", "html_url": "https://github.com/vineethr-n", "followers_url": "https://api.github.com/users/vineethr-n/followers", "following_url": "https://api.github.com/users/vineethr-n/following{/other_user}", "gists_url": "https://api.github.com/users/vineethr-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/vineethr-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vineethr-n/subscriptions", "organizations_url": "https://api.github.com/users/vineethr-n/orgs", "repos_url": "https://api.github.com/users/vineethr-n/repos", "events_url": "https://api.github.com/users/vineethr-n/events{/privacy}", "received_events_url": "https://api.github.com/users/vineethr-n/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-12T16:30:39Z", "updated_at": "2020-04-25T23:44:49Z", "closed_at": "2020-04-25T23:44:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am not able to run instances using the Golang sdk : github.com/aws/aws-sdk-go with the Stand-alone Server Mode.\r\nThis is the piece of code I am using to run instances:\r\n```\r\npackage main\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/aws/aws-sdk-go/aws\"\r\n\t\"github.com/aws/aws-sdk-go/aws/credentials\"\r\n\t\"github.com/aws/aws-sdk-go/aws/session\"\r\n\t\"github.com/aws/aws-sdk-go/service/ec2\"\r\n)\r\nfunc main() {\r\n\tsess, err := session.NewSession(&aws.Config{\r\n\t\tRegion:      aws.String(\"us-east-1\"),\r\n\t\tCredentials: credentials.NewStaticCredentials(\"a\", \"IBTVO4hqOK+v\", \"\"),\r\n\t\tEndpoint:    aws.String(\"http://localhost:5000\"),\r\n\t})\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error while creating session\", err)\r\n\t\treturn\r\n\t}\r\n\tec2Client := ec2.New(sess)\r\n\trunResult, err := ec2Client.RunInstances(&ec2.RunInstancesInput{\r\n\t\tImageId:      aws.String(\"ami-03cf127a\"),\r\n\t\tInstanceType: aws.String(\"t2.micro\"),\r\n\t\tMinCount:     aws.Int64(1),\r\n\t\tMaxCount:     aws.Int64(1),\r\n\t})\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error in run instances:\", err)\r\n\t\treturn\r\n\t}\r\n\tfmt.Println(runResult.Instances)\r\n}\r\n```\r\nI get this error when I run the above code:\r\n```\r\nSerializationError: failed decoding EC2 Query response\r\n\tstatus code: 200, request id:\r\ncaused by: strconv.ParseBool: parsing \"None\": invalid syntax\r\n```\r\nGo sdk unmarshall function present in github.com/aws/aws-sdk-go/private/protocol/ec2query/unmarshal.go is failing to parse the response from mock server.\r\n```\r\n// Unmarshal unmarshals a response body for the EC2 protocol.\r\nfunc Unmarshal(r *request.Request) {\r\n\tdefer r.HTTPResponse.Body.Close()\r\n\tif r.DataFilled() {\r\n\t\tdecoder := xml.NewDecoder(r.HTTPResponse.Body)\r\n\t\terr := xmlutil.UnmarshalXML(r.Data, decoder, \"\")\r\n\t\tif err != nil {\r\n\t\t\tr.Error = awserr.NewRequestFailure(\r\n\t\t\t\tawserr.New(request.ErrCodeSerialization,\r\n\t\t\t\t\t\"failed decoding EC2 Query response\", err),\r\n\t\t\t\tr.HTTPResponse.StatusCode,\r\n\t\t\t\tr.RequestID,\r\n\t\t\t)\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nI tried to print the r.Data sent the function causing the error. I get the following output:\r\n```\r\nData is {\r\n}\r\nData is {\r\n  Groups: [{\r\n      GroupId: \"sg-245f6a01\",\r\n      GroupName: \"default\"\r\n    }],\r\n  Instances: [{\r\n      AmiLaunchIndex: 0,\r\n      Architecture: \"x86_64\",\r\n      ClientToken: \"\"\r\n    }]\r\n}\r\nData is {\r\n  Groups: [{\r\n      GroupId: \"sg-245f6a01\",\r\n      GroupName: \"default\"\r\n    }],\r\n  Instances: [{\r\n      AmiLaunchIndex: 0,\r\n      Architecture: \"x86_64\",\r\n      ClientToken: \"\"\r\n    }]\r\n}\r\nData is {\r\n  Groups: [{\r\n      GroupId: \"sg-245f6a01\",\r\n      GroupName: \"default\"\r\n    }],\r\n  Instances: [{\r\n      AmiLaunchIndex: 0,\r\n      Architecture: \"x86_64\",\r\n      ClientToken: \"\"\r\n    }]\r\n}\r\nError in run instances: SerializationError: failed decoding EC2 Query response\r\n\tstatus code: 200, request id:\r\ncaused by: strconv.ParseBool: parsing \"None\": invalid syntax\r\n```\r\nData printed does not have the required fields.\r\nI am using the latest moto version 1.3.14.\r\n\r\nThank You", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2810/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2810/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2800", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2800/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2800/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2800/events", "html_url": "https://github.com/getmoto/moto/issues/2800", "id": 579136832, "node_id": "MDU6SXNzdWU1NzkxMzY4MzI=", "number": 2800, "title": "Cognito Identity identity_id format should be in format `REGION:GUID`", "user": {"login": "iisulop", "id": 307061, "node_id": "MDQ6VXNlcjMwNzA2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/307061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iisulop", "html_url": "https://github.com/iisulop", "followers_url": "https://api.github.com/users/iisulop/followers", "following_url": "https://api.github.com/users/iisulop/following{/other_user}", "gists_url": "https://api.github.com/users/iisulop/gists{/gist_id}", "starred_url": "https://api.github.com/users/iisulop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iisulop/subscriptions", "organizations_url": "https://api.github.com/users/iisulop/orgs", "repos_url": "https://api.github.com/users/iisulop/repos", "events_url": "https://api.github.com/users/iisulop/events{/privacy}", "received_events_url": "https://api.github.com/users/iisulop/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-11T09:54:55Z", "updated_at": "2020-04-25T23:39:44Z", "closed_at": "2020-04-25T23:39:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nRunning tests using moto revealed issue with the _identity id_ gotten from `cognitoidentity`. In reality aws _identity_ids_ should be `REGION:GUID`.[0] However moto creates an _identity id_ in format `\"{0}:{1}\".format(region, get_random_hex(length=19))`. [1] This causes issues when being strict with what the format is expected to be.\r\n\r\n[0] https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-identity.html#CognitoIdentity.Client.get_id\r\n[1] https://github.com/spulec/moto/blob/master/moto/cognitoidentity/utils.py", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2800/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2800/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2798", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2798/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2798/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2798/events", "html_url": "https://github.com/getmoto/moto/issues/2798", "id": 578730723, "node_id": "MDU6SXNzdWU1Nzg3MzA3MjM=", "number": 2798, "title": "DynamoDB : UPDATED_NEW return value is not equivalent to the real one", "user": {"login": "ImFlog", "id": 5982268, "node_id": "MDQ6VXNlcjU5ODIyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/5982268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ImFlog", "html_url": "https://github.com/ImFlog", "followers_url": "https://api.github.com/users/ImFlog/followers", "following_url": "https://api.github.com/users/ImFlog/following{/other_user}", "gists_url": "https://api.github.com/users/ImFlog/gists{/gist_id}", "starred_url": "https://api.github.com/users/ImFlog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ImFlog/subscriptions", "organizations_url": "https://api.github.com/users/ImFlog/orgs", "repos_url": "https://api.github.com/users/ImFlog/repos", "events_url": "https://api.github.com/users/ImFlog/events{/privacy}", "received_events_url": "https://api.github.com/users/ImFlog/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-10T17:04:21Z", "updated_at": "2020-03-18T08:21:01Z", "closed_at": "2020-03-18T08:21:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nWhile using the tool I found out that the return value UPDATED_NEW when doing an UpdateItem queries are not the same than what we retrieve from the database with real calls.\r\n\r\nThe rules around what to returns are a bit blurry, here is what I have:\r\n* For lists, if items are added / removed return the whole list\r\n* For lists, if items are modified return only the modified items\r\n* As a general rule, we only return items that changed\r\n\r\nDo not hesitate to tell me if I missed rules and see the PR for my fix attempt.\r\n\r\nThank you", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2798/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2798/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2797", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2797/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2797/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2797/events", "html_url": "https://github.com/getmoto/moto/issues/2797", "id": 578713961, "node_id": "MDU6SXNzdWU1Nzg3MTM5NjE=", "number": 2797, "title": "DynamoDB2: querying incorrectly parses KeyConditionExpression", "user": {"login": "pvbouwel", "id": 463976, "node_id": "MDQ6VXNlcjQ2Mzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/463976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvbouwel", "html_url": "https://github.com/pvbouwel", "followers_url": "https://api.github.com/users/pvbouwel/followers", "following_url": "https://api.github.com/users/pvbouwel/following{/other_user}", "gists_url": "https://api.github.com/users/pvbouwel/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvbouwel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvbouwel/subscriptions", "organizations_url": "https://api.github.com/users/pvbouwel/orgs", "repos_url": "https://api.github.com/users/pvbouwel/repos", "events_url": "https://api.github.com/users/pvbouwel/events{/privacy}", "received_events_url": "https://api.github.com/users/pvbouwel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-10T16:38:11Z", "updated_at": "2020-04-25T23:35:52Z", "closed_at": "2020-04-25T23:35:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a bug for moto==1.3.14 .\r\n\r\nWhen using an `AND` condition for DynamoDB moto fails to recognize the `AND` if it is not in all uppercase.  This is more restrictive than Dynamo DB which accepts lowercase `and` and returns the correct details.\r\n\r\nAWS also has the lower case `and` usage in their docs. For example https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html .  \r\n\r\nThis can be easily reproduced by creating a table and querying with a condition that matches the description as mentioned.\r\n\r\n```\r\nimport boto3\r\nfrom moto import mock_dynamodb2\r\n\r\ntable_name = 'Thread'\r\nforum_name = 'ForumName'\r\nsubject = 'Subject'\r\ntable_definition = {\r\n        \"AttributeDefinitions\": [\r\n            {\r\n                'AttributeName': forum_name,\r\n                'AttributeType': 'S'\r\n            },\r\n            {\r\n                'AttributeName': subject,\r\n                'AttributeType': 'S'\r\n            }\r\n        ],\r\n        \"TableName\": table_name,\r\n        \"KeySchema\": [\r\n            {\r\n                'AttributeName': forum_name,\r\n                'KeyType': 'HASH'\r\n            },\r\n            {\r\n                'AttributeName': subject,\r\n                'KeyType': 'RANGE'\r\n            }\r\n        ],\r\n        \"BillingMode\": 'PAY_PER_REQUEST',\r\n    }\r\n\r\n\r\ndef create_load_query_delete(lowercase=False, deleteTable=False):\r\n    if lowercase:\r\n        and_condition = 'and'\r\n    else:\r\n        and_condition = 'AND'\r\n    session = boto3.Session(profile_name='default')\r\n    ddb_client = session.client('dynamodb')\r\n    try:\r\n        ddb_client.create_table(**table_definition)\r\n        waiter = ddb_client.get_waiter('table_exists')\r\n        waiter.wait(TableName=table_name)\r\n    except ddb_client.exceptions.ResourceInUseException:\r\n        print(\"Table exists not creating.\")\r\n    ddb_client.put_item(\r\n        TableName=table_name,\r\n        Item={\r\n            forum_name: {'S': 'forum1'},\r\n            subject: {'S': 'subject1'}\r\n        }\r\n    )\r\n    ddb_client.put_item(\r\n        TableName=table_name,\r\n        Item={\r\n            forum_name: {'S': 'forum1'},\r\n            subject: {'S': 'subject2'}\r\n        }\r\n    )\r\n    query_args = {\r\n        'TableName': table_name,\r\n        'KeyConditionExpression': f'{forum_name} = :forum_name {and_condition} {subject} >= :subject',\r\n        'ExpressionAttributeValues': {\r\n            ':forum_name': {\r\n                'S': 'forum1'\r\n            },\r\n            ':subject': {\r\n                'S': 'subject2'\r\n            }\r\n        }\r\n    }\r\n    response = ddb_client.query(**query_args)\r\n    items = response.get('Items', [])\r\n    if deleteTable:\r\n        ddb_client.delete_table(TableName=table_name)\r\n    return items\r\n\r\n\r\n@mock_dynamodb2\r\ndef test_upper_case_mocked():\r\n    assert len(create_load_query_delete()) == 1\r\n\r\n\r\n@mock_dynamodb2\r\ndef test_lower_case_mocked():\r\n    # This test fails\r\n    assert len(create_load_query_delete(lowercase=True)) == 1\r\n\r\n\r\ndef test_upper_case_aws():\r\n    assert len(create_load_query_delete()) == 1\r\n\r\n\r\ndef test_lower_case_aws():\r\n    assert len(create_load_query_delete(lowercase=True, deleteTable=True)) == 1\r\n\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2797/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2797/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2789", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2789/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2789/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2789/events", "html_url": "https://github.com/getmoto/moto/issues/2789", "id": 577859635, "node_id": "MDU6SXNzdWU1Nzc4NTk2MzU=", "number": 2789, "title": "S3 - Downloading large files results in 416 Requested Range Not Satisfiable error", "user": {"login": "spiralnegative", "id": 3731686, "node_id": "MDQ6VXNlcjM3MzE2ODY=", "avatar_url": "https://avatars.githubusercontent.com/u/3731686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spiralnegative", "html_url": "https://github.com/spiralnegative", "followers_url": "https://api.github.com/users/spiralnegative/followers", "following_url": "https://api.github.com/users/spiralnegative/following{/other_user}", "gists_url": "https://api.github.com/users/spiralnegative/gists{/gist_id}", "starred_url": "https://api.github.com/users/spiralnegative/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spiralnegative/subscriptions", "organizations_url": "https://api.github.com/users/spiralnegative/orgs", "repos_url": "https://api.github.com/users/spiralnegative/repos", "events_url": "https://api.github.com/users/spiralnegative/events{/privacy}", "received_events_url": "https://api.github.com/users/spiralnegative/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-03-09T12:10:34Z", "updated_at": "2022-12-14T17:19:11Z", "closed_at": "2020-03-20T00:37:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nWe've recently updated `boto3` and `moto` from\r\n```\r\nboto3 = \"1.9.115\"\r\nmoto = \"1.3.7\"\r\n```\r\nto\r\n```\r\nboto3 = \"^1.12.16\"\r\nmoto = \"^1.3.14\"\r\n```\r\n(using [poetry](https://github.com/python-poetry/poetry) for dependency management)\r\n\r\nOne of our tests started failing _sometimes_. This is the problematic test:\r\n```python\r\n@mock_s3\r\nclass PdfFileDownloaderTestCase(TestCase):\r\n    def setUp(self):\r\n        boto3.client('s3').create_bucket(Bucket=os.environ['AWS_BUCKET_NAME'])\r\n        self.file = open('web/tests/fixtures/asdf.pdf', 'rb')\r\n        self.uploader = PdfFileUploader(self.file)\r\n        self.uploader.upload()\r\n\r\n    def test_delete_downloaded_file(self):\r\n        # the following two lines are basically \r\n        # boto3.client('s3').download_file(bucket_name, file_name, local_path)\r\n        # where bucket_name, file_name and local_path are retrieved from PdfFileUploader\r\n        # e.g. boto3.client('s3').download_file(\"bucket_name\", \"asdf.pdf\", \"/tmp/asdf.pdf\")\r\n        downloader = PdfFileDownloader(self.uploader.full_bucket_file_name())\r\n        downloader.download() \r\n\r\n        downloader.delete_downloaded_file()\r\n\r\n        self.assertRaises(FileNotFoundError, downloader.file)\r\n```\r\n\r\nError stacktrace:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/myuser/projects/project/web/pdf_file_downloader.py\", line 16, in download\r\n    self.s3.download_file(self.bucket_name, self.file_name, self.local_path())\r\n  File \"/Users/myuser/Library/Caches/pypoetry/virtualenvs/project-X5XCMv3p-py3.6/lib/python3.6/site-packages/boto3/s3/inject.py\", line 172, in download_file\r\n    extra_args=ExtraArgs, callback=Callback)\r\n  File \"/Users/myuser/Library/Caches/pypoetry/virtualenvs/project-X5XCMv3p-py3.6/lib/python3.6/site-packages/boto3/s3/transfer.py\", line 307, in download_file\r\n    future.result()\r\n  File \"/Users/myuser/Library/Caches/pypoetry/virtualenvs/project-X5XCMv3p-py3.6/lib/python3.6/site-packages/s3transfer/futures.py\", line 106, in result\r\n    return self._coordinator.result()\r\n  File \"/Users/myuser/Library/Caches/pypoetry/virtualenvs/project-X5XCMv3p-py3.6/lib/python3.6/site-packages/s3transfer/futures.py\", line 265, in result\r\n    raise self._exception\r\n  File \"/Users/myuser/Library/Caches/pypoetry/virtualenvs/project-X5XCMv3p-py3.6/lib/python3.6/site-packages/s3transfer/tasks.py\", line 126, in __call__\r\n    return self._execute_main(kwargs)\r\n  File \"/Users/myuser/Library/Caches/pypoetry/virtualenvs/project-X5XCMv3p-py3.6/lib/python3.6/site-packages/s3transfer/tasks.py\", line 150, in _execute_main\r\n    return_value = self._main(**kwargs)\r\n  File \"/Users/myuser/Library/Caches/pypoetry/virtualenvs/project-X5XCMv3p-py3.6/lib/python3.6/site-packages/s3transfer/download.py\", line 512, in _main\r\n    Bucket=bucket, Key=key, **extra_args)\r\n  File \"/Users/myuser/Library/Caches/pypoetry/virtualenvs/project-X5XCMv3p-py3.6/lib/python3.6/site-packages/botocore/client.py\", line 316, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/myuser/Library/Caches/pypoetry/virtualenvs/project-X5XCMv3p-py3.6/lib/python3.6/site-packages/botocore/client.py\", line 626, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (416) when calling the GetObject operation: Requested Range Not Satisfiable\r\n```\r\n\r\nUpload and download classes:\r\n```python\r\nimport os\r\nimport re\r\nimport boto3\r\nfrom pathlib import Path\r\nfrom botocore.exceptions import ClientError\r\nfrom django.http import Http404\r\n\r\n\r\nclass PdfFileDownloader:\r\n    def __init__(self, full_bucket_file_name):\r\n        self.bucket_name, self.file_name = self.extract(full_bucket_file_name)\r\n        self.s3 = boto3.client('s3')\r\n\r\n    def download(self):\r\n        try:\r\n            import pudb; pu.db\r\n            self.s3.download_file(self.bucket_name, self.file_name, self.local_path())\r\n\r\n            return self.local_path()\r\n        except ClientError as exc:\r\n            raise Http404\r\n\r\n    def local_path(self):\r\n        return '/tmp/' + self.file_name.replace('/', '')\r\n\r\n    def delete_downloaded_file(self):\r\n        if Path(self.local_path()).is_file():\r\n            os.remove(self.local_path())\r\n\r\n    def file(self):\r\n        return open(self.local_path(), 'rb')\r\n\r\n    def extract(self, full_bucket_file_name):\r\n        match = re.search(r'([\\.a-zA-Z_-]+)\\/(.*)', full_bucket_file_name)\r\n\r\n        if match and len(match.groups()) == 2:\r\n            return (match.groups()[0], match.groups()[1])\r\n        else:\r\n            raise RuntimeError(f\"Cannot determine bucket and file name for {full_bucket_file_name}\")\r\n```\r\n\r\n```python\r\nimport os\r\nimport boto3\r\nimport random\r\nimport binascii\r\nfrom datetime import datetime\r\n\r\n\r\nclass PdfFileUploader:\r\n    def __init__(self, file):\r\n        self.file = file\r\n        date = datetime.now().strftime('%Y%m%d%H%M%S')\r\n        random_hex = binascii.b2a_hex(os.urandom(16)).decode('ascii')\r\n        self.bucket_file_name = f\"{date}_{random_hex}.pdf\"\r\n\r\n    def upload(self):\r\n        self.file.seek(0)\r\n        boto3.client('s3').upload_fileobj(self.file, self.bucket_name(), self.bucket_file_name)\r\n\r\n        return (self.original_file_name(), self.full_bucket_file_name())\r\n\r\n    def original_file_name(self):\r\n        return os.path.basename(self.file.name)\r\n\r\n    def bucket_name(self):\r\n        return os.environ['AWS_BUCKET_NAME']\r\n\r\n    def full_bucket_file_name(self):\r\n        return f\"{self.bucket_name()}/{self.bucket_file_name}\"\r\n```\r\n\r\n\r\nI've tested the same problematic lines of code in the Django shell (without using `moto`) and it worked just fine which is the reason why I suspect `moto` is causing the problem.\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2789/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2781", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2781/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2781/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2781/events", "html_url": "https://github.com/getmoto/moto/issues/2781", "id": 575966926, "node_id": "MDU6SXNzdWU1NzU5NjY5MjY=", "number": 2781, "title": "Dynamodb2 error when property already exists, fixed in #2780", "user": {"login": "heyderpd", "id": 8509533, "node_id": "MDQ6VXNlcjg1MDk1MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/8509533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heyderpd", "html_url": "https://github.com/heyderpd", "followers_url": "https://api.github.com/users/heyderpd/followers", "following_url": "https://api.github.com/users/heyderpd/following{/other_user}", "gists_url": "https://api.github.com/users/heyderpd/gists{/gist_id}", "starred_url": "https://api.github.com/users/heyderpd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heyderpd/subscriptions", "organizations_url": "https://api.github.com/users/heyderpd/orgs", "repos_url": "https://api.github.com/users/heyderpd/repos", "events_url": "https://api.github.com/users/heyderpd/events{/privacy}", "received_events_url": "https://api.github.com/users/heyderpd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-05T03:26:31Z", "updated_at": "2020-03-06T08:38:50Z", "closed_at": "2020-03-06T08:38:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nI found a error on use if_not_exists combined with list_append.\r\nI know in merge https://github.com/spulec/moto/pull/2740 they tried to correct it.\r\n\r\nBut now raise a new error, `Validation Exception` when the property already exists\r\nhttps://github.com/spulec/moto/pull/2740 Work only when dont have previously value and this is replaced by default value.\r\n\r\nI made a PR with the fix and explaining what i made.\r\nMy PR https://github.com/spulec/moto/pull/2780", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2781/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2781/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2777", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2777/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2777/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2777/events", "html_url": "https://github.com/getmoto/moto/issues/2777", "id": 573263934, "node_id": "MDU6SXNzdWU1NzMyNjM5MzQ=", "number": 2777, "title": "Bug - Batch - Error describing a job when it never ran successfully", "user": {"login": "bblommers", "id": 6058517, "node_id": "MDQ6VXNlcjYwNTg1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6058517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblommers", "html_url": "https://github.com/bblommers", "followers_url": "https://api.github.com/users/bblommers/followers", "following_url": "https://api.github.com/users/bblommers/following{/other_user}", "gists_url": "https://api.github.com/users/bblommers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblommers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblommers/subscriptions", "organizations_url": "https://api.github.com/users/bblommers/orgs", "repos_url": "https://api.github.com/users/bblommers/repos", "events_url": "https://api.github.com/users/bblommers/events{/privacy}", "received_events_url": "https://api.github.com/users/bblommers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-29T09:47:58Z", "updated_at": "2020-03-15T21:45:58Z", "closed_at": "2020-03-15T21:45:58Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "When running a batch job, and Docker fails to start, describing the job results in this error:\r\nAttributeError: 'Job' object has no attribute 'log_stream_name'\r\n\r\nDue to this line:\r\nhttps://github.com/spulec/moto/blob/master/moto/batch/models.py#L356\r\n\r\nIf Docker fails to start (or running the job fails due to any other reason), this attribute is never set.\r\n\r\nFull error:\r\n```\r\n2020-02-28 23:16:27 - werkzeug     - INFO     - 127.0.0.1 - - [28/Feb/2020 23:16:27] \"POST /v1/describejobs HTTP/1.1\" 500 -\r\n 2020-02-28 23:16:27 - werkzeug     - ERROR    - Error on request:\r\n Traceback (most recent call last):\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/werkzeug/serving.py\", line 323, in run_wsgi\r\n     execute(self.server.app)\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/werkzeug/serving.py\", line 312, in execute\r\n     application_iter = app(environ, start_response)\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/moto/server.py\", line 135, in __call__\r\n     return backend_app(environ, start_response)\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/flask/app.py\", line 2463, in __call__\r\n     return self.wsgi_app(environ, start_response)\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/flask/app.py\", line 2449, in wsgi_app\r\n     response = self.handle_exception(e)\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/flask/app.py\", line 1866, in handle_exception\r\n     reraise(exc_type, exc_value, tb)\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/flask/_compat.py\", line 39, in reraise\r\n     raise value\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/flask/app.py\", line 2446, in wsgi_app\r\n     response = self.full_dispatch_request()\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/flask/app.py\", line 1951, in full_dispatch_request\r\n     rv = self.handle_user_exception(e)\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/flask/app.py\", line 1820, in handle_user_exception\r\n     reraise(exc_type, exc_value, tb)\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/flask/_compat.py\", line 39, in reraise\r\n     raise value\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/flask/app.py\", line 1949, in full_dispatch_request\r\n     rv = self.dispatch_request()\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/flask/app.py\", line 1935, in dispatch_request\r\n     return self.view_functions[rule.endpoint](**req.view_args)\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/moto/core/utils.py\", line 144, in __call__\r\n     result = self.callback(request, request.url, {})\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/moto/core/responses.py\", line 197, in dispatch\r\n     return cls()._dispatch(*args, **kwargs)\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/moto/core/responses.py\", line 295, in _dispatch\r\n     return self.call_action()\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/moto/core/responses.py\", line 380, in call_action\r\n     response = method()\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/moto/batch/responses.py\", line 257, in describejobs\r\n     return json.dumps({\"jobs\": self.batch_backend.describe_jobs(jobs)})\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/moto/batch/models.py\", line 1229, in describe_jobs\r\n     result.append(job.describe())\r\n   File \"/builds/dazza-codes/python-notes/.venv/lib/python3.6/site-packages/moto/batch/models.py\", line 355, in describe\r\n     result[\"container\"][\"logStreamName\"] = self.log_stream_name\r\n AttributeError: 'Job' object has no attribute 'log_stream_name'\r\n```\r\n\r\nTaken from #2775 ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2777/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2777/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2774", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2774/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2774/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2774/events", "html_url": "https://github.com/getmoto/moto/issues/2774", "id": 572658742, "node_id": "MDU6SXNzdWU1NzI2NTg3NDI=", "number": 2774, "title": "Meta - build fails for new PRs", "user": {"login": "bblommers", "id": 6058517, "node_id": "MDQ6VXNlcjYwNTg1MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6058517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblommers", "html_url": "https://github.com/bblommers", "followers_url": "https://api.github.com/users/bblommers/followers", "following_url": "https://api.github.com/users/bblommers/following{/other_user}", "gists_url": "https://api.github.com/users/bblommers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblommers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblommers/subscriptions", "organizations_url": "https://api.github.com/users/bblommers/orgs", "repos_url": "https://api.github.com/users/bblommers/repos", "events_url": "https://api.github.com/users/bblommers/events{/privacy}", "received_events_url": "https://api.github.com/users/bblommers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/getmoto/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-28T10:16:47Z", "updated_at": "2020-05-19T06:28:59Z", "closed_at": "2020-03-09T23:38:45Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Raising a bug here as a source of documentation\r\n\r\nAs of a few days ago, PRs are failing in Python 2.7:\r\n```\r\nFAIL: test_auth.test_access_denied_with_not_allowing_policy\r\nraise AssertionError(AssertionError(u\"given\\nX = 'AuthFailure'\\n    and\\nY = 'AccessDenied'\\nX is 'AuthFailure' whereas Y is 'AccessDenied'\",))\r\n```\r\n\r\nThis looks to be an issue since botocore 1.15.8. Manually fixing requirements.txt to 1.15.7 makes the tests pass\r\n[Changes from botocore 1.15.7 > 1.15.8](https://github.com/boto/botocore/commit/484969ee851d8c5907f5284bdb1651c49e641553)\r\n\r\nThe underlying reason that the test fails, is that the signature no longer matches for ~~this one specific test~~ tests that use the run_instances method. The error is raised here: \r\nhttps://github.com/spulec/moto/blob/master/moto/iam/access_control.py#L207\r\n\r\nWill continue to investigate", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2774/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2774/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2766", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2766/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2766/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2766/events", "html_url": "https://github.com/getmoto/moto/issues/2766", "id": 570011199, "node_id": "MDU6SXNzdWU1NzAwMTExOTk=", "number": 2766, "title": "s3 Presigned URL Post: ValueError: too many values to unpack (expected 2)", "user": {"login": "MateusAmin", "id": 7839920, "node_id": "MDQ6VXNlcjc4Mzk5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/7839920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MateusAmin", "html_url": "https://github.com/MateusAmin", "followers_url": "https://api.github.com/users/MateusAmin/followers", "following_url": "https://api.github.com/users/MateusAmin/following{/other_user}", "gists_url": "https://api.github.com/users/MateusAmin/gists{/gist_id}", "starred_url": "https://api.github.com/users/MateusAmin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MateusAmin/subscriptions", "organizations_url": "https://api.github.com/users/MateusAmin/orgs", "repos_url": "https://api.github.com/users/MateusAmin/repos", "events_url": "https://api.github.com/users/MateusAmin/events{/privacy}", "received_events_url": "https://api.github.com/users/MateusAmin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-24T17:36:53Z", "updated_at": "2020-08-20T12:26:26Z", "closed_at": "2020-04-22T06:26:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I generate (using boto3) and then use an s3 presigned post URL (using requests). It works without moto but does not work with moto.\r\n\r\nCode:\r\n```python\r\n    @moto.mock_s3\r\n    def test_use_presigned_post(self):\r\n\r\n        client = boto3.client('s3', 'us-east-1')\r\n        response = client.generate_presigned_post(\r\n            Bucket='your-bucket-name',\r\n            Key='asdasadaslkdj',\r\n            Fields={},\r\n            Conditions=[],\r\n            ExpiresIn=1200)\r\n\r\n        object_name = response['fields']['key']\r\n        print(response['fields'])\r\n        with open('./tests/integration/test.txt', 'rb') as f:\r\n            files = {'file': (object_name, f)}\r\n            http_response = requests.post(response['url'],\r\n                                          data=response['fields'],\r\n                                          files=files)\r\n        print(http_response.status_code)\r\n        print(http_response.text)\r\n        print(http_response.headers)\r\n        assert http_response.status_code == 204\r\n```\r\nOutput:\r\n```sh\r\n_______________________________________________________________ TestS3.test_use_presigned_post ________________________________________________________________\r\n\r\nself = <tests.app.common.test_s3.TestS3 object at 0x7f91c324fe50>\r\n\r\n    @moto.mock_s3\r\n    def test_use_presigned_post(self):\r\n        client = boto3.client('s3', 'us-east-1')\r\n        response = client.generate_presigned_post(\r\n            Bucket='your-bucket-name',\r\n            Key='asdasadaslkdj',\r\n            Fields={},\r\n            Conditions=[],\r\n            ExpiresIn=1200)\r\n    \r\n        object_name = response['fields']['key']\r\n    \r\n        print(response['fields'])\r\n        with open('./tests/integration/test.txt', 'rb') as f:\r\n            files = {'file': (object_name, f)}\r\n            http_response = requests.post(response['url'],\r\n                                          data=response['fields'],\r\n>                                         files=files)\r\n\r\ntests/app/common/test_s3.py:112: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/local/lib/python3.7/site-packages/requests/api.py:116: in post\r\n    return request('post', url, data=data, json=json, **kwargs)\r\n/usr/local/lib/python3.7/site-packages/requests/api.py:60: in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n/usr/local/lib/python3.7/site-packages/requests/sessions.py:533: in request\r\n    resp = self.send(prep, **send_kwargs)\r\n/usr/local/lib/python3.7/site-packages/requests/sessions.py:646: in send\r\n    r = adapter.send(request, **kwargs)\r\n/usr/local/lib/python3.7/site-packages/responses.py:660: in unbound_on_send\r\n    return self._on_request(adapter, request, *a, **kwargs)\r\n/usr/local/lib/python3.7/site-packages/responses.py:643: in _on_request\r\n    response = adapter.build_response(request, match.get_response(request))\r\n/usr/local/lib/python3.7/site-packages/moto/core/models.py:173: in get_response\r\n    result = self.callback(request)\r\n/usr/local/lib/python3.7/site-packages/moto/core/utils.py:176: in __call__\r\n    result = self.callback(request, request.url, request.headers)\r\n/usr/local/lib/python3.7/site-packages/moto/s3/responses.py:229: in bucket_response\r\n    response = self._bucket_response(request, full_url, headers)\r\n/usr/local/lib/python3.7/site-packages/moto/s3/responses.py:281: in _bucket_response\r\n    return self._bucket_response_post(request, body, bucket_name)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <moto.s3.responses.ResponseObject object at 0x7f91c2632650>, request = <PreparedRequest [POST]>\r\nbody = '--526132ecc1ce47b2141de2a7aaf1a027\\r\\nContent-Disposition: form-data; name=\"key\"\\r\\n\\r\\nasdasadaslkdj\\r\\n--526132ecc1...filename=\"asdasadaslkdj\"\\r\\n\\r\\nsuper duber private information\\r\\n--526132ecc1ce47b2141de2a7aaf1a027--\\r\\n'\r\nbucket_name = 'your-bucket-name'\r\n\r\n    def _bucket_response_post(self, request, body, bucket_name):\r\n        if not request.headers.get(\"Content-Length\"):\r\n            return 411, {}, \"Content-Length required\"\r\n    \r\n        path = self._get_path(request)\r\n    \r\n        if self.is_delete_keys(request, path, bucket_name):\r\n            self.data[\"Action\"] = \"DeleteObject\"\r\n            self._authenticate_and_authorize_s3_action()\r\n    \r\n            return self._bucket_response_delete_keys(request, body, bucket_name)\r\n    \r\n        self.data[\"Action\"] = \"PutObject\"\r\n        self._authenticate_and_authorize_s3_action()\r\n    \r\n        # POST to bucket-url should create file from form\r\n        if hasattr(request, \"form\"):\r\n            # Not HTTPretty\r\n            form = request.form\r\n        else:\r\n            # HTTPretty, build new form object\r\n            body = body.decode()\r\n    \r\n            form = {}\r\n            for kv in body.split(\"&\"):\r\n>               k, v = kv.split(\"=\")\r\nE               ValueError: too many values to unpack (expected 2)\r\n\r\n/usr/local/lib/python3.7/site-packages/moto/s3/responses.py:746: ValueError\r\n-------------------------------------------------------------------- Captured stdout call ---------------------------------------------------------------------\r\n{'key': 'asdasadaslkdj', 'AWSAccessKeyId': 'ASIAX7NJLYETKXGFCZZY', 'x-amz-security-token': 'IQoJb3JpZ2luX2VjELL//////////wEaCXVzLWVhc3QtMSJHMEUCIQCgztjWKhthznb/o6k00X97L1Qx8CD1y5Cf3GFIFZ9MOgIgVhijxotz/rlUfeWeUl9yOJ7pYoxu4/b22elscHA3QcIq4gEIexABGgw1NDg1MDAzOTAxODIiDB/fbBrucAmTzS+l6Sq/AeVCGWXrxODV29zieZkBonZAhLx8tARA14CuDFtQKvvbvXlxqFAv40ho/zbHBwwPY8coU9HW5j9MSHd58kyREMp4/+7CR/sfkfhIAMl4tsgSLYvFUchZKkVIvF23IsMQ02Hq5Fj2i5xA86Smb17ih6AYvDQZ4VBXHfYTvmdbqh+sFq19DIEjdpwEjgfe8+R/kIG1zaQSB0avKtPEL8eYJOxzHMe3cI3Ugs80M2OllQQvYZ0l4tBxZiyulPSHW9VoMJ+O0PIFOuMBsGd80lK0MDw7jPvby3Xw8QK4qA3/4h9MvUbCph1vRemGMsTTNbClMJwqI1rMpTYxzmi5cMO/OvLqxs9hQJw5SHir/fhDAverfHirtw9bu/GryTf5SVaJN6VGv/1pT5GmJb6o+vr9Iuzat+r6Jhq6MxThDz4e3vczKucntzlPRk9ab/AKwA5eQHShKZDeVYwwulVdOmGaAgKyq5aMeSvarNfuM7BxJT52nKDP7/cMx1OWgltSqRZ97aUeoOzhqmO6sH+LT+CumPmH32AXwr1aLpIKROpOC8SQZd/xaZcyxAfrTNA=', 'policy': 'eyJleHBpcmF0aW9uIjogIjIwMjAtMDItMjRUMTc6NDU6NTNaIiwgImNvbmRpdGlvbnMiOiBbeyJidWNrZXQiOiAianVuby11cy1lYXN0LTEtMDAwMDAxNTAifSwgeyJrZXkiOiAiYXNkYXNhZGFzbGtkaiJ9LCB7IngtYW16LXNlY3VyaXR5LXRva2VuIjogIklRb0piM0pwWjJsdVgyVmpFTEwvLy8vLy8vLy8vd0VhQ1hWekxXVmhjM1F0TVNKSE1FVUNJUUNnenRqV0todGh6bmIvbzZrMDBYOTdMMVF4OENEMXk1Q2YzR0ZJRlo5TU9nSWdWaGlqeG90ei9ybFVmZVdlVWw5eU9KN3BZb3h1NC9iMjJlbHNjSEEzUWNJcTRnRUlleEFCR2d3MU5EZzFNREF6T1RBeE9ESWlEQi9mYkJydWNBbVR6UytsNlNxL0FlVkNHV1hyeE9EVjI5emllWmtCb25aQWhMeDh0QVJBMTRDdURGdFFLdnZidlhseHFGQXY0MGhvL3piSEJ3d1BZOGNvVTlIVzVqOU1TSGQ1OGt5UkVNcDQvKzdDUi9zZmtmaElBTWw0dHNnU0xZdkZVY2haS2tWSXZGMjNJc01RMDJIcTVGajJpNXhBODZTbWIxN2loNkFZdkRRWjRWQlhIZllUdm1kYnFoK3NGcTE5RElFamRwd0VqZ2ZlOCtSL2tJRzF6YVFTQjBhdkt0UEVMOGVZSk94ekhNZTNjSTNVZ3M4ME0yT2xsUVF2WVowbDR0QnhaaXl1bFBTSFc5Vm9NSitPMFBJRk91TUJzR2Q4MGxLME1EdzdqUHZieTNYdzhRSzRxQTMvNGg5TXZVYkNwaDF2UmVtR01zVFROYkNsTUp3cUkxck1wVFl4em1pNWNNTy9PdkxxeHM5aFFKdzVTSGlyL2ZoREF2ZXJmSGlydHc5YnUvR3J5VGY1U1ZhSk42Vkd2LzFwVDVHbUpiNm8rdnI5SXV6YXQrcjZKaHE2TXhUaER6NGUzdmN6S3VjbnR6bFBSazlhYi9BS3dBNWVRSFNoS1pEZVZZd3d1bFZkT21HYUFnS3lxNWFNZVN2YXJOZnVNN0J4SlQ1Mm5LRFA3L2NNeDFPV2dsdFNxUlo5N2FVZW9PemhxbU82c0grTFQrQ3VtUG1IMzJBWHdyMWFMcElLUk9wT0M4U1FaZC94YVpjeXhBZnJUTkE9In1dfQ==', 'signature': 'BhFa99wxFGzmKQerxMOLoxC8xkY='}\r\n```\r\n\r\n## Versions\r\nboto3==1.12.5\r\nbotocore==1.15.5\r\nmoto>= 1.3.0\r\n\r\nInstalled using a requirements file and pip3 in a Debian based Docker container. \r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2766/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2766/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2760", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2760/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2760/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2760/events", "html_url": "https://github.com/getmoto/moto/issues/2760", "id": 567809151, "node_id": "MDU6SXNzdWU1Njc4MDkxNTE=", "number": 2760, "title": "DynamoDb2: Query response items ordered wrong for GSI with numeric range key, with negative numbers", "user": {"login": "mfogel", "id": 69902, "node_id": "MDQ6VXNlcjY5OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/69902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfogel", "html_url": "https://github.com/mfogel", "followers_url": "https://api.github.com/users/mfogel/followers", "following_url": "https://api.github.com/users/mfogel/following{/other_user}", "gists_url": "https://api.github.com/users/mfogel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfogel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfogel/subscriptions", "organizations_url": "https://api.github.com/users/mfogel/orgs", "repos_url": "https://api.github.com/users/mfogel/repos", "events_url": "https://api.github.com/users/mfogel/events{/privacy}", "received_events_url": "https://api.github.com/users/mfogel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-19T19:56:26Z", "updated_at": "2020-03-20T00:39:10Z", "closed_at": "2020-03-20T00:39:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, thanks again so much for this library.\r\n\r\nIt appears that moto is confusing order of items in GSI's when the range key is numeric and the values are negative. Here's a minimal script that demonstrates the bug:\r\n\r\n```python\r\nfrom decimal import Decimal\r\nfrom pprint import pprint\r\n\r\nimport boto3\r\nfrom boto3.dynamodb.conditions import Key\r\n\r\nfrom moto import mock_dynamodb2\r\n\r\n\r\ntable_schema = {\r\n    'KeySchema': [{\r\n        'AttributeName': 'partitionKey',\r\n        'KeyType': 'HASH'\r\n    }],\r\n    'GlobalSecondaryIndexes': [{\r\n        'IndexName': 'GSI-K1',\r\n        'KeySchema': [{\r\n            'AttributeName': 'gsiK1PartitionKey',\r\n            'KeyType': 'HASH'\r\n        }, {\r\n            'AttributeName': 'gsiK1SortKey',\r\n            'KeyType': 'RANGE'\r\n        }],\r\n        'Projection': {\r\n            'ProjectionType': 'KEYS_ONLY',\r\n        }\r\n    }],\r\n    'AttributeDefinitions': [{\r\n        'AttributeName': 'partitionKey',\r\n        'AttributeType': 'S'\r\n    }, {\r\n        'AttributeName': 'gsiK1PartitionKey',\r\n        'AttributeType': 'S'\r\n    }, {\r\n        'AttributeName': 'gsiK1SortKey',\r\n        'AttributeType': 'N'\r\n    }],\r\n}\r\n\r\nitem1 = {\r\n    'partitionKey': 'pk-1',\r\n    'gsiK1PartitionKey': 'gsi-k1',\r\n    'gsiK1SortKey': Decimal('-0.6'),\r\n}\r\n\r\nitem2 = {\r\n    'partitionKey': 'pk-2',\r\n    'gsiK1PartitionKey': 'gsi-k1',\r\n    'gsiK1SortKey': Decimal('-0.7'),\r\n}\r\n\r\nwith mock_dynamodb2():\r\n    dynamodb = boto3.resource('dynamodb')\r\n    dynamodb.create_table(TableName='test-table', BillingMode='PAY_PER_REQUEST', **table_schema)\r\n    table = dynamodb.Table('test-table')\r\n    table.put_item(Item=item1)\r\n    table.put_item(Item=item2)\r\n\r\n    resp = table.query(\r\n        KeyConditionExpression=Key('gsiK1PartitionKey').eq('gsi-k1'),\r\n        IndexName='GSI-K1',\r\n    )\r\n    pprint(resp['Items'])\r\n```\r\n\r\nRunning this using boto against a real dynamo table gives the following output:\r\n\r\n```python\r\n[{'gsiK1PartitionKey': 'gsi-k1',\r\n  'gsiK1SortKey': Decimal('-0.7'),\r\n  'partitionKey': 'pk-2'},\r\n {'gsiK1PartitionKey': 'gsi-k1',\r\n  'gsiK1SortKey': Decimal('-0.6'),\r\n  'partitionKey': 'pk-1'}]\r\n```\r\n\r\nHowever, with the latest version of moto (`1.3.15.dev414`), the script outputs:\r\n\r\n```python\r\n[{'gsiK1PartitionKey': 'gsi-k1',\r\n  'gsiK1SortKey': Decimal('-0.6'),\r\n  'partitionKey': 'pk-1'},\r\n {'gsiK1PartitionKey': 'gsi-k1',\r\n  'gsiK1SortKey': Decimal('-0.7'),\r\n  'partitionKey': 'pk-2'}]\r\n```\r\n\r\nNote moto gets the order backwards. This seems to happen only with negative numbers in the range key.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2760/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2760/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2759", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2759/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2759/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2759/events", "html_url": "https://github.com/getmoto/moto/issues/2759", "id": 567378851, "node_id": "MDU6SXNzdWU1NjczNzg4NTE=", "number": 2759, "title": "S3 will not return '/' in CommonPrefixes when there is.", "user": {"login": "vuryleo", "id": 1854100, "node_id": "MDQ6VXNlcjE4NTQxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1854100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vuryleo", "html_url": "https://github.com/vuryleo", "followers_url": "https://api.github.com/users/vuryleo/followers", "following_url": "https://api.github.com/users/vuryleo/following{/other_user}", "gists_url": "https://api.github.com/users/vuryleo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vuryleo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vuryleo/subscriptions", "organizations_url": "https://api.github.com/users/vuryleo/orgs", "repos_url": "https://api.github.com/users/vuryleo/repos", "events_url": "https://api.github.com/users/vuryleo/events{/privacy}", "received_events_url": "https://api.github.com/users/vuryleo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-19T07:48:02Z", "updated_at": "2020-04-25T23:46:26Z", "closed_at": "2020-04-25T23:46:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Reporting Bugs\r\n\r\n# Description\r\nWhen there is some Key with consecutive slashes `'/'`, `list_objects_v2` with `Delimiter='/'` will not include the right answer in `CommonPrefixes`\r\n\r\n# Code to reproduce\r\n```python\r\nimport boto3\r\nfrom moto import mock_s3\r\n\r\n@mock_s3\r\ndef list_slashes():\r\n    c = boto3.client('s3')\r\n    c.create_bucket(Bucket='bucket')\r\n    c.put_object(Bucket='bucket', Key='///')\r\n\r\n    resp = c.list_objects_v2(Bucket='bucket', Prefix='', Delimiter='/')\r\n    print(resp)\r\n\r\n    resp = c.list_objects_v2(Bucket='bucket', Prefix='/', Delimiter='/')\r\n    print(resp)\r\n\r\nlist_slashes()\r\n```\r\n\r\n# Expected\r\n```python\r\n{\r\n  ...,\r\n 'CommonPrefixes': [{'Prefix': '/'}],\r\n 'KeyCount': 1,\r\n  ...,\r\n}\r\n{\r\n  ...,\r\n 'CommonPrefixes': [{'Prefix': '//'}],\r\n 'KeyCount': 1,\r\n  ...,\r\n}\r\n```\r\n\r\n# Reality\r\n```python\r\n{\r\n   ...,\r\n   'Contents': [{'Key': '', ..., }],\r\n   'KeyCount': 1,\r\n   ...\r\n}\r\n{\r\n   ...,\r\n   'KeyCount': 0,\r\n   ...,\r\n}\r\n```\r\n\r\nsample output from real aws S3\r\n```python\r\nimport boto3\r\nc = boto3.client('s3')\r\nc.put_object(Bucket='oss-playground', Key='///') \r\nprint(c.list_objects_v2(Bucket='oss-playground', Prefix='//', Delimiter='/'))\r\n\r\n```\r\nOutput\r\n```python\r\n{\r\n ...,\r\n 'IsTruncated': False,\r\n 'Name': 'oss-playground',\r\n 'Prefix': '//',\r\n 'Delimiter': '/',\r\n 'CommonPrefixes': [{'Prefix': '///'}],\r\n 'KeyCount': 1}\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2759/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2759/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2746", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2746/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2746/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2746/events", "html_url": "https://github.com/getmoto/moto/issues/2746", "id": 565393500, "node_id": "MDU6SXNzdWU1NjUzOTM1MDA=", "number": 2746, "title": "Roles created in cloudformation not created with proper name", "user": {"login": "zbrookle", "id": 39153813, "node_id": "MDQ6VXNlcjM5MTUzODEz", "avatar_url": "https://avatars.githubusercontent.com/u/39153813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zbrookle", "html_url": "https://github.com/zbrookle", "followers_url": "https://api.github.com/users/zbrookle/followers", "following_url": "https://api.github.com/users/zbrookle/following{/other_user}", "gists_url": "https://api.github.com/users/zbrookle/gists{/gist_id}", "starred_url": "https://api.github.com/users/zbrookle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zbrookle/subscriptions", "organizations_url": "https://api.github.com/users/zbrookle/orgs", "repos_url": "https://api.github.com/users/zbrookle/repos", "events_url": "https://api.github.com/users/zbrookle/events{/privacy}", "received_events_url": "https://api.github.com/users/zbrookle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 732738746, "node_id": "MDU6TGFiZWw3MzI3Mzg3NDY=", "url": "https://api.github.com/repos/getmoto/moto/labels/good%20first%20issue", "name": "good first issue", "color": "233f93", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-14T15:24:08Z", "updated_at": "2020-03-15T21:43:32Z", "closed_at": "2020-03-15T21:43:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When creating a role through cloudformation, the role name ends up being incorrect. The pattern seems to be, with parameters, role_name as the role name and stack_name as the stack name\r\n\r\nstack_name-role_name-some_random_id\r\n\r\nhowever, in AWS, \r\n\r\nThe role name would just be role_name", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2746/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2746/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2743", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2743/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2743/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2743/events", "html_url": "https://github.com/getmoto/moto/issues/2743", "id": 562756274, "node_id": "MDU6SXNzdWU1NjI3NTYyNzQ=", "number": 2743, "title": "Potential Bug? cloudwatch metrics timestamp format doesn't match Datapoint timestamp format", "user": {"login": "PeterCui1991", "id": 20930254, "node_id": "MDQ6VXNlcjIwOTMwMjU0", "avatar_url": "https://avatars.githubusercontent.com/u/20930254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterCui1991", "html_url": "https://github.com/PeterCui1991", "followers_url": "https://api.github.com/users/PeterCui1991/followers", "following_url": "https://api.github.com/users/PeterCui1991/following{/other_user}", "gists_url": "https://api.github.com/users/PeterCui1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterCui1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterCui1991/subscriptions", "organizations_url": "https://api.github.com/users/PeterCui1991/orgs", "repos_url": "https://api.github.com/users/PeterCui1991/repos", "events_url": "https://api.github.com/users/PeterCui1991/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterCui1991/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-10T18:47:51Z", "updated_at": "2020-03-15T21:43:03Z", "closed_at": "2020-03-15T21:43:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n@mock_cloudwatch_b2\r\ndef test_cloudwatch_metrics():\r\n    @mock_ec2\r\n    def create_instances():\r\n      session = boto3.Session(\r\n          aws_access_key_id=access_key,\r\n          aws_secret_access_key=secret_key,\r\n      )\r\n      ec2 = session.resource('ec2', CLOUD_REGION)\r\n      response = ec2.create_instances(MinCount=1, MaxCount=1, InstanceType='t2.micro')\r\n      instance_id = response[0].id\r\n      # create VPC\r\n      vpc = ec2.create_vpc(CidrBlock='192.168.0.0/16')\r\n      # we can assign a name to vpc, or any resource, by using tag\r\n      vpc.create_tags(Tags=[{\"Key\": \"Name\", \"Value\": \"default_vpc\"}])\r\n      vpc.wait_until_available()\r\n\r\n      sec_group = ec2.create_security_group(\r\n          GroupName='test-group', Description='test sec group', VpcId=vpc.id)\r\n      sec_group.authorize_ingress(\r\n          CidrIp='0.0.0.0/0',\r\n          IpProtocol='icmp',\r\n          FromPort=-1,\r\n          ToPort=-1\r\n      )\r\n      return instance_id\r\n\r\n    instance_id = create_instances()\r\n\r\n    cw = boto.ec2.cloudwatch.connect_to_region(CLOUD_REGION, aws_access_key_id=access_key,\r\n                                               aws_secret_access_key=secret_key)\r\n    cw.put_metric_data(\r\n        namespace=\"AWS/test\", # metric namespace start with AWS/, Stackdriver or customer_cloudwathc_metric can be monitored\r\n        name=\"instance_metric\",\r\n        value=1.5,\r\n        dimensions={\"InstanceId\": [instance_id]},\r\n    )\r\n```\r\n\r\nWhen call metric.query(start, end, boto.ec2.cloudwatch.Metric.Statistics), it returned error like this:\r\n```\r\nValueError: time data '2020-02-10T18:44:09.496Z' does not match format '%Y-%m-%dT%H:%M:%SZ'\r\n\"lib/python2.7/site-packages/boto/ec2/cloudwatch/datapoint.py\", line 38, in endElement\r\n    self[name] = datetime.strptime(value, '%Y-%m-%dT%H:%M:%SZ')\r\n```\r\nIt seems like put_metric_data()'s timestamp format cannot match datapoints format?\r\nPlease let me know if I am doing wrong.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2743/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2743/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2741", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2741/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2741/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2741/events", "html_url": "https://github.com/getmoto/moto/issues/2741", "id": 562672220, "node_id": "MDU6SXNzdWU1NjI2NzIyMjA=", "number": 2741, "title": "Cognito admin_create_user resend flow broken", "user": {"login": "Ptosiek", "id": 16878205, "node_id": "MDQ6VXNlcjE2ODc4MjA1", "avatar_url": "https://avatars.githubusercontent.com/u/16878205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ptosiek", "html_url": "https://github.com/Ptosiek", "followers_url": "https://api.github.com/users/Ptosiek/followers", "following_url": "https://api.github.com/users/Ptosiek/following{/other_user}", "gists_url": "https://api.github.com/users/Ptosiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ptosiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ptosiek/subscriptions", "organizations_url": "https://api.github.com/users/Ptosiek/orgs", "repos_url": "https://api.github.com/users/Ptosiek/repos", "events_url": "https://api.github.com/users/Ptosiek/events{/privacy}", "received_events_url": "https://api.github.com/users/Ptosiek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-10T16:21:03Z", "updated_at": "2020-02-18T13:41:03Z", "closed_at": "2020-02-18T13:41:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "PR #2357 broke the resend flow in admin_create_user.\r\nFrom APIReference:\r\n\r\n>  MessageAction\r\n>     Set to \"RESEND\" to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to \"SUPPRESS\" to suppress sending the message. Only one value can be specified.\r\n> \r\n>     Type: String\r\n>     Valid Values: RESEND | SUPPRESS\r\n>     Required: No\r\n\r\nhttps://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminCreateUser.html\r\n\r\nAs a solution If the MessageAction iis given the reset value, the user should exist in the system and if not UserNotFoundException must be raised to match AWS behaviour", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2741/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2741/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2732", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2732/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2732/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2732/events", "html_url": "https://github.com/getmoto/moto/issues/2732", "id": 561237343, "node_id": "MDU6SXNzdWU1NjEyMzczNDM=", "number": 2732, "title": "Potential bug? create image in ec2 mocking, but the owner id of this imaged returned error ", "user": {"login": "PeterCui1991", "id": 20930254, "node_id": "MDQ6VXNlcjIwOTMwMjU0", "avatar_url": "https://avatars.githubusercontent.com/u/20930254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterCui1991", "html_url": "https://github.com/PeterCui1991", "followers_url": "https://api.github.com/users/PeterCui1991/followers", "following_url": "https://api.github.com/users/PeterCui1991/following{/other_user}", "gists_url": "https://api.github.com/users/PeterCui1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterCui1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterCui1991/subscriptions", "organizations_url": "https://api.github.com/users/PeterCui1991/orgs", "repos_url": "https://api.github.com/users/PeterCui1991/repos", "events_url": "https://api.github.com/users/PeterCui1991/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterCui1991/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-06T20:00:05Z", "updated_at": "2020-02-15T16:37:04Z", "closed_at": "2020-02-15T16:37:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is my code to mock creating AMI in ec2:\r\n\r\n```\r\n@mock_ec2_deprecated\r\n@mock_iam_deprecated\r\ndef test_images(self):\r\n    conn = boto.ec2.connect_to_region(CLOUD_REGION,\r\n                                      aws_access_key_id=access_key,\r\n                                      aws_secret_access_key=secret_key)\r\n    reservation = conn.run_instances(\"ami-1234abcd\")\r\n    instance = reservation.instances[0]\r\n    image_id = conn.create_image(instance.id, \"test-ami\", \"this is a test ami\")\r\n    amis = conn.get_all_images()\r\n    for ami in amis:\r\n         print ami.id, ami.owner_id\r\n```\r\n\r\nThen i found that owner id of image i just created return access key instead of account id.\r\nAm I doing something wrong?", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2732/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2732/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2728", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2728/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2728/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2728/events", "html_url": "https://github.com/getmoto/moto/issues/2728", "id": 560769062, "node_id": "MDU6SXNzdWU1NjA3NjkwNjI=", "number": 2728, "title": "Greedy Qualifiers Cause Action From Method to Fail", "user": {"login": "arthurvernon", "id": 7449464, "node_id": "MDQ6VXNlcjc0NDk0NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7449464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurvernon", "html_url": "https://github.com/arthurvernon", "followers_url": "https://api.github.com/users/arthurvernon/followers", "following_url": "https://api.github.com/users/arthurvernon/following{/other_user}", "gists_url": "https://api.github.com/users/arthurvernon/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurvernon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurvernon/subscriptions", "organizations_url": "https://api.github.com/users/arthurvernon/orgs", "repos_url": "https://api.github.com/users/arthurvernon/repos", "events_url": "https://api.github.com/users/arthurvernon/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurvernon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-06T04:18:57Z", "updated_at": "2020-02-18T02:56:42Z", "closed_at": "2020-02-17T23:54:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "When mocking a call to iot.list_thing_principals I got a regular expression compilation error using moto 1.3.14.\r\nThe mock should have returned a list of principals.\r\n\r\nProblem appears to be related to the consumption of service-2.json files from boto core that contain API gateway proxy setup with [greedy qualifiers](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-settings-method-request.html#setup-method-resources).\r\n\r\nThe service json files have many examples of greedy qualifiers for API gateway endpoints.\r\nIOT Core has for example this one...\r\n```json\r\n\"requestUri\":\"/confirmdestination/{confirmationToken+}\"\r\n```\r\nThe\r\nmoto/core/responses.py module's _get_action_from_method_and_request_uri function attempts to create a regular expression with this to find a matching action based upon the method and URI.\r\n\r\nIt evens mentions https://github.com/boto/botocore/blob/develop/botocore/data/iot/2015-05-28/service-2.json \r\n\r\nThe problem with this code (line 348)\r\n```python\r\n        for regexp, name in regexp_and_names.items():\r\n            match = re.match(regexp, request_uri) \r\n```\r\nis that it the regular expression cannot be compiled.\r\n\r\nThe resulting error message is...\r\n```\r\n                            if not name.isidentifier():\r\n                                msg = \"bad character in group name %r\" % name\r\n>                               raise source.error(msg, len(name) + 1)\r\nE                               re.error: bad character in group name 'confirmationToken+' at position 25\r\n\r\ntest/.venv/lib/python3.8/sre_parse.py:703: error\r\n```\r\n\r\nThe solution may be as simple as removing the plus - not sure if there are other edge cases:\r\n\r\n```python\r\n        for regexp, name in regexp_and_names.items()\r\n            regexp = regexp.replace(\"+\", \"\")\r\n            match = re.match(regexp, request_uri) \r\n```\r\n\r\nHere is a full stack trace\r\n```\r\nhelpers/iot_core_client.py:53: in delete_thing\r\n    principal_arn = iot.list_thing_principals(thingName=thing_name)['principals'][0]\r\ntest/.venv/lib/python3.8/site-packages/botocore/client.py:276: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\ntest/.venv/lib/python3.8/site-packages/botocore/client.py:572: in _make_api_call\r\n    http, parsed_response = self._make_request(\r\ntest/.venv/lib/python3.8/site-packages/botocore/client.py:592: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\ntest/.venv/lib/python3.8/site-packages/botocore/endpoint.py:102: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\ntest/.venv/lib/python3.8/site-packages/botocore/endpoint.py:136: in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\ntest/.venv/lib/python3.8/site-packages/botocore/endpoint.py:228: in _needs_retry\r\n    responses = self._event_emitter.emit(\r\ntest/.venv/lib/python3.8/site-packages/botocore/hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\ntest/.venv/lib/python3.8/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\ntest/.venv/lib/python3.8/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\ntest/.venv/lib/python3.8/site-packages/botocore/retryhandler.py:183: in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\ntest/.venv/lib/python3.8/site-packages/botocore/retryhandler.py:250: in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\ntest/.venv/lib/python3.8/site-packages/botocore/retryhandler.py:269: in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\ntest/.venv/lib/python3.8/site-packages/botocore/retryhandler.py:316: in __call__\r\n    checker_response = checker(attempt_number, response,\r\ntest/.venv/lib/python3.8/site-packages/botocore/retryhandler.py:222: in __call__\r\n    return self._check_caught_exception(\r\ntest/.venv/lib/python3.8/site-packages/botocore/retryhandler.py:359: in _check_caught_exception\r\n    raise caught_exception\r\ntest/.venv/lib/python3.8/site-packages/botocore/endpoint.py:197: in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\ntest/.venv/lib/python3.8/site-packages/botocore/hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\ntest/.venv/lib/python3.8/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\ntest/.venv/lib/python3.8/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\ntest/.venv/lib/python3.8/site-packages/moto/core/models.py:271: in __call__\r\n    status, headers, body = response_callback(\r\ntest/.venv/lib/python3.8/site-packages/moto/core/responses.py:197: in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\ntest/.venv/lib/python3.8/site-packages/moto/core/responses.py:295: in _dispatch\r\n    return self.call_action()\r\ntest/.venv/lib/python3.8/site-packages/moto/core/responses.py:375: in call_action\r\n    action = camelcase_to_underscores(self._get_action())\r\ntest/.venv/lib/python3.8/site-packages/moto/core/responses.py:363: in _get_action\r\n    return self._get_action_from_method_and_request_uri(self.method, self.path)\r\ntest/.venv/lib/python3.8/site-packages/moto/core/responses.py:348: in _get_action_from_method_and_request_uri\r\n    match = re.match(regexp, request_uri)\r\ntest/.venv/lib/python3.8/re.py:189: in match\r\n    return _compile(pattern, flags).match(string)\r\ntest/.venv/lib/python3.8/re.py:302: in _compile\r\n    p = sre_compile.compile(pattern, flags)\r\ntest/.venv/lib/python3.8/sre_compile.py:764: in compile\r\n    p = sre_parse.parse(p, flags)\r\ntest/.venv/lib/python3.8/sre_parse.py:948: in parse\r\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\r\ntest/.venv/lib/python3.8/sre_parse.py:443: in _parse_sub\r\n    itemsappend(_parse(source, state, verbose, nested + 1,\r\n\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2728/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2728/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2689", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2689/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2689/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2689/events", "html_url": "https://github.com/getmoto/moto/issues/2689", "id": 549107427, "node_id": "MDU6SXNzdWU1NDkxMDc0Mjc=", "number": 2689, "title": "[Bug] Creating subnet group returns an index error ", "user": {"login": "sillyfatcat", "id": 3541579, "node_id": "MDQ6VXNlcjM1NDE1Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3541579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sillyfatcat", "html_url": "https://github.com/sillyfatcat", "followers_url": "https://api.github.com/users/sillyfatcat/followers", "following_url": "https://api.github.com/users/sillyfatcat/following{/other_user}", "gists_url": "https://api.github.com/users/sillyfatcat/gists{/gist_id}", "starred_url": "https://api.github.com/users/sillyfatcat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sillyfatcat/subscriptions", "organizations_url": "https://api.github.com/users/sillyfatcat/orgs", "repos_url": "https://api.github.com/users/sillyfatcat/repos", "events_url": "https://api.github.com/users/sillyfatcat/events{/privacy}", "received_events_url": "https://api.github.com/users/sillyfatcat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/getmoto/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-13T18:32:01Z", "updated_at": "2020-03-18T11:30:59Z", "closed_at": "2020-03-18T11:30:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n        vpc_conn = boto3.client(\"ec2\", self.region)\r\n        vpc = vpc_conn.create_vpc(CidrBlock=\"10.0.0.0/16\")[\"Vpc\"]\r\n        subnet = vpc_conn.create_subnet(VpcId=vpc[\"VpcId\"], CidrBlock=\"10.0.1.0/24\")[\r\n            \"Subnet\"\r\n        ]\r\n\r\n        conn = boto3.client(\"rds\", region_name=self.region)\r\n        conn.create_db_subnet_group(\r\n            DBSubnetGroupName=\"db_subnet1\",\r\n            DBSubnetGroupDescription=\"my db subnet\",\r\n            SubnetIds=[subnet[\"SubnetId\"]],\r\n        )\r\n```\r\nThis fails with the following traceback\r\n\r\n> self = <moto.rds2.models.SubnetGroup object at 0x11e40e550>, subnet_name = 'db_subnet1', description = 'my db subnet', subnets = [], tags = []\r\n> \r\n>     def __init__(self, subnet_name, description, subnets, tags):\r\n>         self.subnet_name = subnet_name\r\n>         self.description = description\r\n>         self.subnets = subnets\r\n>         self.status = \"Complete\"\r\n>         self.tags = tags\r\n> >       self.vpc_id = self.subnets[0].vpc_id\r\n> E       IndexError: list index out of range\r\n> \r\n> ../my-venv/lib/python3.7/site-packages/moto/rds2/models.py:677: IndexError\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2689/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2689/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2674", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2674/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2674/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2674/events", "html_url": "https://github.com/getmoto/moto/issues/2674", "id": 545584469, "node_id": "MDU6SXNzdWU1NDU1ODQ0Njk=", "number": 2674, "title": "[Bug][dynamodb2] list_append doesn't construct DynamoType objects", "user": {"login": "comaniac", "id": 8262694, "node_id": "MDQ6VXNlcjgyNjI2OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8262694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/comaniac", "html_url": "https://github.com/comaniac", "followers_url": "https://api.github.com/users/comaniac/followers", "following_url": "https://api.github.com/users/comaniac/following{/other_user}", "gists_url": "https://api.github.com/users/comaniac/gists{/gist_id}", "starred_url": "https://api.github.com/users/comaniac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/comaniac/subscriptions", "organizations_url": "https://api.github.com/users/comaniac/orgs", "repos_url": "https://api.github.com/users/comaniac/repos", "events_url": "https://api.github.com/users/comaniac/events{/privacy}", "received_events_url": "https://api.github.com/users/comaniac/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-06T07:32:51Z", "updated_at": "2020-01-23T02:01:54Z", "closed_at": "2020-01-23T02:01:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `list_append` support in `dynamodb2` does not construct `DynamoType` for new appended values. It results in type inconsistency and runtime errors. Details are as follows:\r\n\r\n* Reproduce code:\r\n\r\n```python\r\nimport boto3\r\nimport moto\r\n\r\n@moto.mock_dynamodb2\r\ndef test_dynamodb2():\r\n    client = boto3.client('dynamodb', region_name='us-west-1')\r\n    client.create_table(\r\n        AttributeDefinitions=[{\"AttributeName\": \"id\", \"AttributeType\": \"S\"}, {\"AttributeName\": \"rid\", \"AttributeType\": \"S\"}],\r\n        TableName=\"TestTable\",\r\n        KeySchema=[{\"AttributeName\": \"id\", \"KeyType\": \"HASH\"}, {\"AttributeName\": \"rid\", \"KeyType\": \"RANGE\"}],\r\n        ProvisionedThroughput={\"ReadCapacityUnits\": 5, \"WriteCapacityUnits\": 5},\r\n    )\r\n    client.put_item(\r\n        TableName=\"TestTable\",\r\n        Item={\r\n            \"id\": {\"S\": \"nested_list_append\"},\r\n            \"rid\": {\"S\": \"range_key\"},\r\n            \"a\": {\"L\": [{\"M\": {\"b\": {\"S\": \"bar1\"}}}]},\r\n        },\r\n    )\r\n\r\n    # Update item using list_append expression\r\n    client.update_item(\r\n        TableName=\"TestTable\",\r\n        Key={\"id\": {\"S\": \"nested_list_append\"}, \"rid\": {\"S\": \"range_key\"}},\r\n        UpdateExpression=\"SET a = list_append(a, :i)\",\r\n        ExpressionAttributeValues={\":i\": {\"L\": [{\"M\": {\"b\": {\"S\": \"bar2\"}}}]}}\r\n    )\r\n\r\n    # Verify item is appended to the existing list\r\n    result = client.query(\r\n        TableName=\"TestTable\",\r\n        KeyConditionExpression=\"id = :i AND begins_with(rid, :r)\",\r\n        ExpressionAttributeValues={\":i\": {\"S\": \"nested_list_append\"}, \":r\": {\"S\": \"range_key\"}}\r\n    )[\"Items\"]\r\n```\r\n\r\n* Error message\r\n```\r\n        # Verify item is appended to the existing list\r\n        result = client.query(\r\n            TableName=\"TestTable\",\r\n            KeyConditionExpression=\"id = :i AND begins_with(rid, :r)\",\r\n>           ExpressionAttributeValues={\":i\": {\"S\": \"nested_list_append\"}, \":r\": {\"S\": \"range_key\"}}\r\n        )[\"Items\"]\r\n\r\nmoto_bug.py:34: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../.local/lib/python3.6/site-packages/botocore/client.py:276: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n../.local/lib/python3.6/site-packages/botocore/client.py:573: in _make_api_call\r\n    operation_model, request_dict, request_context)\r\n../.local/lib/python3.6/site-packages/botocore/client.py:592: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n../.local/lib/python3.6/site-packages/botocore/endpoint.py:102: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n../.local/lib/python3.6/site-packages/botocore/endpoint.py:137: in _send_request\r\n    success_response, exception):\r\n../.local/lib/python3.6/site-packages/botocore/endpoint.py:231: in _needs_retry\r\n    caught_exception=caught_exception, request_dict=request_dict)\r\n../.local/lib/python3.6/site-packages/botocore/hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n../.local/lib/python3.6/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n../.local/lib/python3.6/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n../.local/lib/python3.6/site-packages/botocore/retryhandler.py:183: in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n../.local/lib/python3.6/site-packages/botocore/retryhandler.py:251: in __call__\r\n    caught_exception)\r\n../.local/lib/python3.6/site-packages/botocore/retryhandler.py:269: in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n../.local/lib/python3.6/site-packages/botocore/retryhandler.py:317: in __call__\r\n    caught_exception)\r\n../.local/lib/python3.6/site-packages/botocore/retryhandler.py:223: in __call__\r\n    attempt_number, caught_exception)\r\n../.local/lib/python3.6/site-packages/botocore/retryhandler.py:359: in _check_caught_exception\r\n    raise caught_exception\r\n../.local/lib/python3.6/site-packages/botocore/endpoint.py:197: in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n../.local/lib/python3.6/site-packages/botocore/hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n../.local/lib/python3.6/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n../.local/lib/python3.6/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n/usr/local/lib/python3.6/dist-packages/moto/core/models.py:278: in __call__\r\n    request, request.url, request.headers\r\n/usr/local/lib/python3.6/dist-packages/moto/core/responses.py:197: in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n/usr/local/lib/python3.6/dist-packages/moto/core/responses.py:295: in _dispatch\r\n    return self.call_action()\r\n/usr/local/lib/python3.6/dist-packages/moto/core/utils.py:271: in _wrapper\r\n    response = f(*args, **kwargs)\r\n/usr/local/lib/python3.6/dist-packages/moto/dynamodb2/responses.py:75: in call_action\r\n    response = getattr(self, endpoint)()\r\n/usr/local/lib/python3.6/dist-packages/moto/dynamodb2/responses.py:559: in query\r\n    **filter_kwargs\r\n/usr/local/lib/python3.6/dist-packages/moto/dynamodb2/models.py:1333: in query\r\n    **filter_kwargs\r\n/usr/local/lib/python3.6/dist-packages/moto/dynamodb2/models.py:991: in query\r\n    results = copy.deepcopy(results)\r\n/usr/lib/python3.6/copy.py:150: in deepcopy\r\n    y = copier(x, memo)\r\n/usr/lib/python3.6/copy.py:215: in _deepcopy_list\r\n    append(deepcopy(a, memo))\r\n/usr/lib/python3.6/copy.py:180: in deepcopy\r\n    y = _reconstruct(x, memo, *rv)\r\n/usr/lib/python3.6/copy.py:280: in _reconstruct\r\n    state = deepcopy(state, memo)\r\n/usr/lib/python3.6/copy.py:150: in deepcopy\r\n    y = copier(x, memo)\r\n/usr/lib/python3.6/copy.py:240: in _deepcopy_dict\r\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n/usr/lib/python3.6/copy.py:180: in deepcopy\r\n    y = _reconstruct(x, memo, *rv)\r\n/usr/lib/python3.6/copy.py:307: in _reconstruct\r\n    y[key] = value\r\n/usr/local/lib/python3.6/dist-packages/moto/dynamodb2/models.py:261: in __setitem__\r\n    value.size() if type(value) == DynamoType else bytesize(str(value))\r\n/usr/local/lib/python3.6/dist-packages/moto/dynamodb2/models.py:209: in size\r\n    value_size = sum([v.size() for v in self.value])\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n.0 = <list_iterator object at 0x7f4baaede710>\r\n\r\n>   value_size = sum([v.size() for v in self.value])\r\nE   AttributeError: 'dict' object has no attribute 'size'\r\n\r\n/usr/local/lib/python3.6/dist-packages/moto/dynamodb2/models.py:209: AttributeError\r\n```\r\n\r\n* Analysis\r\n\r\nThe error object was `{\"M\": {\"b\": {\"S\": \"bar1\"}}}`. It was stored to the table by the following line without constructing a DynamoType object:\r\n\r\n`[moto/dynamodb2/models.py:L460] old_list.value.extend(new_value[\"L\"])`\r\n\r\nMake the following change can pass the test case:\r\n\r\n`old_list.value.extend([DynamoType(v) for v in new_value[\"L\"]])`\r\n\r\n@bblommers since you filed PR #2598 , could you help verify this issue?\r\n\r\nThanks!\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2674/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2674/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2670", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2670/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2670/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2670/events", "html_url": "https://github.com/getmoto/moto/issues/2670", "id": 545415649, "node_id": "MDU6SXNzdWU1NDU0MTU2NDk=", "number": 2670, "title": "Cognito-idp: readable attributes in JWT payload should be in idToken and not in accessToken", "user": {"login": "franz-see", "id": 499668, "node_id": "MDQ6VXNlcjQ5OTY2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/499668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/franz-see", "html_url": "https://github.com/franz-see", "followers_url": "https://api.github.com/users/franz-see/followers", "following_url": "https://api.github.com/users/franz-see/following{/other_user}", "gists_url": "https://api.github.com/users/franz-see/gists{/gist_id}", "starred_url": "https://api.github.com/users/franz-see/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/franz-see/subscriptions", "organizations_url": "https://api.github.com/users/franz-see/orgs", "repos_url": "https://api.github.com/users/franz-see/repos", "events_url": "https://api.github.com/users/franz-see/events{/privacy}", "received_events_url": "https://api.github.com/users/franz-see/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-05T13:08:31Z", "updated_at": "2020-01-16T05:57:47Z", "closed_at": "2020-01-16T05:57:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is related to https://github.com/spulec/moto/issues/1755 which implemented returning the readable attributes in the JWT Payload.\r\n\r\nBut that issue added the JWT attributes in the accessToken. It should have been in the idToken\r\n\r\nSee https://auth0.com/docs/api-auth/why-use-access-tokens-to-secure-apis for more information on idToken vs accessToken", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2670/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2670/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2665", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2665/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2665/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2665/events", "html_url": "https://github.com/getmoto/moto/issues/2665", "id": 544657364, "node_id": "MDU6SXNzdWU1NDQ2NTczNjQ=", "number": 2665, "title": "S3 CreationDate not correctly formatted", "user": {"login": "rnorth", "id": 132175, "node_id": "MDQ6VXNlcjEzMjE3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/132175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rnorth", "html_url": "https://github.com/rnorth", "followers_url": "https://api.github.com/users/rnorth/followers", "following_url": "https://api.github.com/users/rnorth/following{/other_user}", "gists_url": "https://api.github.com/users/rnorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rnorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rnorth/subscriptions", "organizations_url": "https://api.github.com/users/rnorth/orgs", "repos_url": "https://api.github.com/users/rnorth/repos", "events_url": "https://api.github.com/users/rnorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rnorth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-02T16:50:05Z", "updated_at": "2020-06-02T10:03:10Z", "closed_at": "2020-01-23T02:44:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think there's a small regression in version 1.3.15.3 of the library, as used by Localstack.\r\n\r\nThis appears to be generating incorrectly formatted `CreationDate` fields in S3 ListBucket responses, which breaks some clients (AWS Java SDK chokes on the formatting; AWS CLI does not).\r\n\r\nMore background is captured in this Localstack issue: https://github.com/localstack/localstack/issues/1899\r\n\r\nI suspect this issue can be simply fixed by amending this line to format the creation date according to ISO8601: https://github.com/spulec/moto/commit/ab0853cddc6bf9a0789999751a5d698186b8ebd0#diff-f28b3d402b1d050e247f518f3b94865bR1313", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2665/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2665/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2660", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2660/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2660/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2660/events", "html_url": "https://github.com/getmoto/moto/issues/2660", "id": 542959689, "node_id": "MDU6SXNzdWU1NDI5NTk2ODk=", "number": 2660, "title": "[bug] Route53.list_resource_record_sets not returning `IsTruncated`", "user": {"login": "deanrock", "id": 857946, "node_id": "MDQ6VXNlcjg1Nzk0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/857946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deanrock", "html_url": "https://github.com/deanrock", "followers_url": "https://api.github.com/users/deanrock/followers", "following_url": "https://api.github.com/users/deanrock/following{/other_user}", "gists_url": "https://api.github.com/users/deanrock/gists{/gist_id}", "starred_url": "https://api.github.com/users/deanrock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deanrock/subscriptions", "organizations_url": "https://api.github.com/users/deanrock/orgs", "repos_url": "https://api.github.com/users/deanrock/repos", "events_url": "https://api.github.com/users/deanrock/events{/privacy}", "received_events_url": "https://api.github.com/users/deanrock/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-27T18:51:20Z", "updated_at": "2020-01-15T15:39:32Z", "closed_at": "2020-01-15T15:39:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`boto3` documentation specifies that `list_resource_record_sets` should return:\r\n```python\r\n'IsTruncated': True|False,\r\n```\r\nto indicate if results were truncated.\r\n\r\nAWS API always returns this field, whether records are truncated or not. We rely on this field to know if we need to fetch more results, and using `@mock_route53` around this code fails due to missing field.\r\n\r\nhttps://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/route53.html#Route53.Client.list_resource_record_sets", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2660/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2660/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2642", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2642/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2642/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2642/events", "html_url": "https://github.com/getmoto/moto/issues/2642", "id": 538500235, "node_id": "MDU6SXNzdWU1Mzg1MDAyMzU=", "number": 2642, "title": "Invoke Lambda InvocationType RequestResponse not returning 200 HTTPStatusCode", "user": {"login": "clowtown", "id": 6283944, "node_id": "MDQ6VXNlcjYyODM5NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6283944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clowtown", "html_url": "https://github.com/clowtown", "followers_url": "https://api.github.com/users/clowtown/followers", "following_url": "https://api.github.com/users/clowtown/following{/other_user}", "gists_url": "https://api.github.com/users/clowtown/gists{/gist_id}", "starred_url": "https://api.github.com/users/clowtown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clowtown/subscriptions", "organizations_url": "https://api.github.com/users/clowtown/orgs", "repos_url": "https://api.github.com/users/clowtown/repos", "events_url": "https://api.github.com/users/clowtown/events{/privacy}", "received_events_url": "https://api.github.com/users/clowtown/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-16T15:57:27Z", "updated_at": "2020-02-15T16:46:02Z", "closed_at": "2020-02-15T16:46:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "AWS docs stating syncronous ResquestResponse should return a 200\r\nhttps://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_ResponseSyntax\r\n\r\nhttps://github.com/spulec/moto/blob/8e2e3cec5a5b31ad4b81c24e087b4df6f1a2b279/tests/test_awslambda/test_lambda.py#L117\r\n\r\n#2623 is focusing on the return value but also alluded to this discrepancy. ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2642/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2642/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2638", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2638/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2638/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2638/events", "html_url": "https://github.com/getmoto/moto/issues/2638", "id": 537986234, "node_id": "MDU6SXNzdWU1Mzc5ODYyMzQ=", "number": 2638, "title": "Xray Client Broken Tests", "user": {"login": "mikegrima", "id": 11035926, "node_id": "MDQ6VXNlcjExMDM1OTI2", "avatar_url": "https://avatars.githubusercontent.com/u/11035926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikegrima", "html_url": "https://github.com/mikegrima", "followers_url": "https://api.github.com/users/mikegrima/followers", "following_url": "https://api.github.com/users/mikegrima/following{/other_user}", "gists_url": "https://api.github.com/users/mikegrima/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikegrima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikegrima/subscriptions", "organizations_url": "https://api.github.com/users/mikegrima/orgs", "repos_url": "https://api.github.com/users/mikegrima/repos", "events_url": "https://api.github.com/users/mikegrima/events{/privacy}", "received_events_url": "https://api.github.com/users/mikegrima/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-15T01:05:09Z", "updated_at": "2020-11-16T14:25:06Z", "closed_at": "2019-12-16T22:44:20Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "@terrycain : Can you take a look at why the XRay Client tests are broken?\r\n\r\nSomething about:\r\n```\r\naws_xray_sdk.core.exceptions.exceptions.SegmentNotFoundException: cannot find the current segment/subsegment, please make sure you have a segment open\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2638/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2638/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2634", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2634/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2634/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2634/events", "html_url": "https://github.com/getmoto/moto/issues/2634", "id": 536948302, "node_id": "MDU6SXNzdWU1MzY5NDgzMDI=", "number": 2634, "title": "Unable to Mock Profiles", "user": {"login": "HenryHoggard", "id": 1208121, "node_id": "MDQ6VXNlcjEyMDgxMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1208121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HenryHoggard", "html_url": "https://github.com/HenryHoggard", "followers_url": "https://api.github.com/users/HenryHoggard/followers", "following_url": "https://api.github.com/users/HenryHoggard/following{/other_user}", "gists_url": "https://api.github.com/users/HenryHoggard/gists{/gist_id}", "starred_url": "https://api.github.com/users/HenryHoggard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HenryHoggard/subscriptions", "organizations_url": "https://api.github.com/users/HenryHoggard/orgs", "repos_url": "https://api.github.com/users/HenryHoggard/repos", "events_url": "https://api.github.com/users/HenryHoggard/events{/privacy}", "received_events_url": "https://api.github.com/users/HenryHoggard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2019-12-12T12:27:45Z", "updated_at": "2022-11-09T14:30:05Z", "closed_at": "2022-03-24T22:20:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a duplicate of the following issue seems to have been closed without a fix: https://github.com/spulec/moto/issues/889\r\n\r\nMy tests are failing because it requires the profiles to actually exist within `~/.aws/config`. Given that this is a mocking library, we should be able to mock this functionality. Otherwise I am going to have to overwrite `/.aws/config` files anywhere that the tests are run for this to work.\r\n\r\nExample error:\r\n\r\n```\r\n botocore.exceptions.ProfileNotFound: The config profile (myenv) could not be found\r\n```\r\n\r\nExample code\r\n\r\n```\r\n@mock_ssm\r\ndef test_whatever():\r\n    env = boto3.session.Session(profile_name=\"myenv\")\r\n    ssm = env.client('ssm')\r\n    ...\r\n```\r\n\r\nThis can be fixed on my machine by adding the valid profiles, but I need these tests to be portable so that is not an option, ideally this should be mockable.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2634/reactions", "total_count": 5, "+1": 5, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2634/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2627", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2627/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2627/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2627/events", "html_url": "https://github.com/getmoto/moto/issues/2627", "id": 536383562, "node_id": "MDU6SXNzdWU1MzYzODM1NjI=", "number": 2627, "title": "1.3.14 regression: dynamodb ConditionExpression can't handle substitutions from ExpressionAttributeValues", "user": {"login": "mfogel", "id": 69902, "node_id": "MDQ6VXNlcjY5OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/69902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfogel", "html_url": "https://github.com/mfogel", "followers_url": "https://api.github.com/users/mfogel/followers", "following_url": "https://api.github.com/users/mfogel/following{/other_user}", "gists_url": "https://api.github.com/users/mfogel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfogel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfogel/subscriptions", "organizations_url": "https://api.github.com/users/mfogel/orgs", "repos_url": "https://api.github.com/users/mfogel/repos", "events_url": "https://api.github.com/users/mfogel/events{/privacy}", "received_events_url": "https://api.github.com/users/mfogel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-11T13:51:44Z", "updated_at": "2020-01-23T02:01:01Z", "closed_at": "2020-01-23T02:01:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following test script works on `1.3.13`, and also directly on dynamodb.\r\n\r\nIt fails on `1.3.14` and on the current master (4d5bf1c5c6f0fb1e60951635ca70a74cddddb461) with error: `botocore.errorfactory.ConditionalCheckFailedException: An error occurred (ConditionalCheckFailedException) when calling the UpdateItem operation: A condition specified in the operation could not be evaluated.`\r\n\r\n```python\r\nimport boto3\r\nfrom moto import mock_dynamodb2\r\n\r\ntable_name = 'my-table'\r\ntable_schema = {\r\n    'KeySchema': [{\r\n        'AttributeName': 'partitionKey',\r\n        'KeyType': 'HASH'\r\n    }],\r\n    'AttributeDefinitions': [{\r\n        'AttributeName': 'partitionKey',\r\n        'AttributeType': 'S'\r\n    }],\r\n}\r\n\r\nitem = {\r\n    'partitionKey': 'pk-1',\r\n    'myAttr': 5,\r\n}\r\n\r\nwith mock_dynamodb2():\r\n    dynamodb = boto3.resource('dynamodb')\r\n    dynamodb.create_table(TableName=table_name, **table_schema)\r\n    table = dynamodb.Table(table_name)\r\n    table.put_item(Item=item)\r\n\r\n    # try to update the item we put in the table, this works on v1.3.13 but fails on v1.3.14\r\n    table.update_item(\r\n        Key={'partitionKey': 'pk-1'},\r\n        UpdateExpression='ADD myAttr :one',\r\n        ExpressionAttributeValues={\r\n            ':zero': 0,\r\n            ':one': 1,\r\n        },\r\n        ConditionExpression='myAttr > :zero',\r\n    )\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2627/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2627/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2626", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2626/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2626/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2626/events", "html_url": "https://github.com/getmoto/moto/issues/2626", "id": 536351737, "node_id": "MDU6SXNzdWU1MzYzNTE3Mzc=", "number": 2626, "title": "dynamodb Attr in FilterExpression doesn't handle missing attributes correctly", "user": {"login": "mfogel", "id": 69902, "node_id": "MDQ6VXNlcjY5OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/69902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfogel", "html_url": "https://github.com/mfogel", "followers_url": "https://api.github.com/users/mfogel/followers", "following_url": "https://api.github.com/users/mfogel/following{/other_user}", "gists_url": "https://api.github.com/users/mfogel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfogel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfogel/subscriptions", "organizations_url": "https://api.github.com/users/mfogel/orgs", "repos_url": "https://api.github.com/users/mfogel/repos", "events_url": "https://api.github.com/users/mfogel/events{/privacy}", "received_events_url": "https://api.github.com/users/mfogel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-11T12:54:47Z", "updated_at": "2020-01-23T02:01:01Z", "closed_at": "2020-01-23T02:01:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I verified the following bug shows up on `1.3.14` and on the latest on master (`4d5bf1c5c6f0fb1e60951635ca70a74cddddb461`). The behavior has changed from `1.3.13`, although it wasn't really working then either.\r\n\r\nHere's a test script:\r\n\r\n```python\r\nimport boto3\r\nfrom boto3.dynamodb.conditions import Attr\r\nfrom moto import mock_dynamodb2\r\n\r\ntable_name = 'my-table'\r\ntable_schema = {\r\n    'KeySchema': [{\r\n        'AttributeName': 'partitionKey',\r\n        'KeyType': 'HASH'\r\n    }],\r\n    'AttributeDefinitions': [{\r\n        'AttributeName': 'partitionKey',\r\n        'AttributeType': 'S'\r\n    }],\r\n}\r\n\r\nitem_1 = {\r\n    'partitionKey': 'pk-1',\r\n}\r\n\r\nitem_2 = {\r\n    'partitionKey': 'pk-2',\r\n    'my-attr': 42,\r\n}\r\n\r\nwith mock_dynamodb2():\r\n    dynamodb = boto3.resource('dynamodb')\r\n    dynamodb.create_table(TableName=table_name, **table_schema)\r\n    table = dynamodb.Table(table_name)\r\n\r\n    # insert the two items into the table\r\n    table.put_item(Item=item_1)\r\n    table.put_item(Item=item_2)\r\n\r\n    # scan: we should see one of them\r\n    resp = table.scan(FilterExpression=Attr('my-attr').lt(43))\r\n    print(f'I found {len(resp[\"Items\"])} items:\\n{resp}')\r\n```\r\n\r\nResults by platform:\r\n\r\n- moto `1.3.14+`: finds two items\r\n- dynamodb for reals: finds one item\r\n- moto `1.3.13`: fails with error `Internal error. '<' not supported between instances of 'NoneType' and 'int'`", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2626/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2626/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2623", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2623/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2623/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2623/events", "html_url": "https://github.com/getmoto/moto/issues/2623", "id": 535707834, "node_id": "MDU6SXNzdWU1MzU3MDc4MzQ=", "number": 2623, "title": "Lambda response not correctly returned to invoker", "user": {"login": "clapas", "id": 927559, "node_id": "MDQ6VXNlcjkyNzU1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/927559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clapas", "html_url": "https://github.com/clapas", "followers_url": "https://api.github.com/users/clapas/followers", "following_url": "https://api.github.com/users/clapas/following{/other_user}", "gists_url": "https://api.github.com/users/clapas/gists{/gist_id}", "starred_url": "https://api.github.com/users/clapas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clapas/subscriptions", "organizations_url": "https://api.github.com/users/clapas/orgs", "repos_url": "https://api.github.com/users/clapas/repos", "events_url": "https://api.github.com/users/clapas/events{/privacy}", "received_events_url": "https://api.github.com/users/clapas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-10T12:46:52Z", "updated_at": "2020-01-22T07:23:56Z", "closed_at": "2020-01-22T07:23:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "## How to reproduce\r\nIn file `my_module.py`:\r\n```\r\ndef my_lambda(event, context):\r\n    return '\"ok\"'  # a JSON string \r\n```\r\nCreate the lambda function using boto3:\r\n```\r\n>>> create_function(FunctionName='my_lambda', Handler='my_module.my_lambda', Role='some-role', Code={'ZipFile': my_zip}, Publish=True, Runtime='python3.6')\r\n```\r\nthen invoke it:\r\n```\r\n>>> invoke(FunctionName='my_lambda', InvocationType='RequestResponse')['Payload'].read()\r\nb'\\x1b[32mSTART RequestId: 0417092f-ea57-1db3-0083-35882dc25044 Version: $LATEST\\x1b[0m\\n\\x1b[32mEND RequestId: 0417092f-ea57-1db3-0083-35882dc25044\\x1b[0m\\n\\x1b[32mREPORT RequestId: 0417092f-ea57-1db3-0083-35882dc25044\\tInit Duration: 217.97 ms\\tDuration: 3.77 ms\\tBilled Duration: 100 ms\\tMemory Size: 128 MB\\tMax Memory Used: 26 MB\\t\\x1b[0m\\n\\n\"ok\"}'\r\n```\r\nAs you see, I get the \"ok\" string returned by my lambda besides a bunch of logging info.\r\n\r\n## What I expected to happen\r\nI expected `\"ok\"` alone to be returned.\r\nBesides, I expected the return status to be 200, but it is always 202.\r\n\r\n## What version of moto\r\n1.3.14\r\n\r\nThanks.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2623/reactions", "total_count": 2, "+1": 2, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2623/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2614", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2614/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2614/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2614/events", "html_url": "https://github.com/getmoto/moto/issues/2614", "id": 532100688, "node_id": "MDU6SXNzdWU1MzIxMDA2ODg=", "number": 2614, "title": "Cloudwatch put_metric_data expects microseconds.", "user": {"login": "markchalloner", "id": 665830, "node_id": "MDQ6VXNlcjY2NTgzMA==", "avatar_url": "https://avatars.githubusercontent.com/u/665830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markchalloner", "html_url": "https://github.com/markchalloner", "followers_url": "https://api.github.com/users/markchalloner/followers", "following_url": "https://api.github.com/users/markchalloner/following{/other_user}", "gists_url": "https://api.github.com/users/markchalloner/gists{/gist_id}", "starred_url": "https://api.github.com/users/markchalloner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markchalloner/subscriptions", "organizations_url": "https://api.github.com/users/markchalloner/orgs", "repos_url": "https://api.github.com/users/markchalloner/repos", "events_url": "https://api.github.com/users/markchalloner/events{/privacy}", "received_events_url": "https://api.github.com/users/markchalloner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-03T16:18:53Z", "updated_at": "2020-03-16T08:29:59Z", "closed_at": "2020-03-16T08:29:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [cloudwatch function put_metric_data expects a timestamp with microseconds](https://github.com/spulec/moto/blob/502957f1f9560cb6dff75271e6812498f4ff7bba/moto/cloudwatch/models.py#L277) in the format:\r\n\r\n```\r\n%Y-%m-%dT%H:%M:%S.%fZ\r\n```\r\n\r\nHowever if the datetime does not have microseconds (e.g. sourced from cost-explorer or `datetime.datetime(2019, 12, 3, 0, 0, 0)` then the call to `datetime.strptime` will fail with the error:\r\n\r\n\r\n```\r\n ValueError: time data '2019-12-03T00:00:00Z' does not match format '%Y-%m-%dT%H:%M:%S.%fZ'\r\n```\r\n\r\nA workaround is to add a microsecond if one doesn't exist:\r\n\r\n```\r\ndatetime_ = datetime.datetime(2019, 12, 3, 0, 0, 0)\r\nif datetime_.microsecond == 0:\r\n    datetime_ += datetime.timedelta(microseconds=1)\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2614/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2614/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2581", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2581/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2581/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2581/events", "html_url": "https://github.com/getmoto/moto/issues/2581", "id": 525384504, "node_id": "MDU6SXNzdWU1MjUzODQ1MDQ=", "number": 2581, "title": "cloudwatch-fluent-metrics and moto don't play nicely", "user": {"login": "romcab", "id": 1425488, "node_id": "MDQ6VXNlcjE0MjU0ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1425488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/romcab", "html_url": "https://github.com/romcab", "followers_url": "https://api.github.com/users/romcab/followers", "following_url": "https://api.github.com/users/romcab/following{/other_user}", "gists_url": "https://api.github.com/users/romcab/gists{/gist_id}", "starred_url": "https://api.github.com/users/romcab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/romcab/subscriptions", "organizations_url": "https://api.github.com/users/romcab/orgs", "repos_url": "https://api.github.com/users/romcab/repos", "events_url": "https://api.github.com/users/romcab/events{/privacy}", "received_events_url": "https://api.github.com/users/romcab/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-20T02:37:26Z", "updated_at": "2020-01-15T15:49:37Z", "closed_at": "2020-01-15T15:49:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem:**  \r\n I am receiving the error below when mocking the cloudwatch. Based from the stack trace, it happens when executing the code below.\r\n\r\n- moto/cloudwatch/responses.py:81: in put_metric_data\r\n- self.cloudwatch_backend.put_metric_data(namespace, metric_data)\r\n- moto/cloudwatch/models.py:235: in put_metric_data\r\n\r\n**Error:**\r\n\r\n- ValueError: time data '2019-11-20T02:26:58Z' does not match format '%Y-%m-%dT%H:%M:%S.%fZ'. \r\n\r\n**Setup:**\r\n\r\n- python 3.7.5\r\n- boto=2.49.0\r\n- boto3=1.10.20\r\n- botocore=1.13.20\r\n- moto=1.3.14\r\n- cloudwatch-fluent-metrics=0.5.3\r\n\r\n**Step to reproduced:**\r\n@mock_cloudwatch\r\ndef test_put_metric_data():\r\n    metrics = BufferedFluentMetric().with_namespace('my-namespace')\r\n    metrics.with_timer('RequestLatency')\r\n    metrics.elapsed(MetricName='RequestLatency', TimerName='RequestLatency')\r\n    metrics.flush()\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2581/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2575", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2575/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2575/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2575/events", "html_url": "https://github.com/getmoto/moto/issues/2575", "id": 523986685, "node_id": "MDU6SXNzdWU1MjM5ODY2ODU=", "number": 2575, "title": "can not stop mocking after moto==1.3.14", "user": {"login": "ynaka81", "id": 13902735, "node_id": "MDQ6VXNlcjEzOTAyNzM1", "avatar_url": "https://avatars.githubusercontent.com/u/13902735?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ynaka81", "html_url": "https://github.com/ynaka81", "followers_url": "https://api.github.com/users/ynaka81/followers", "following_url": "https://api.github.com/users/ynaka81/following{/other_user}", "gists_url": "https://api.github.com/users/ynaka81/gists{/gist_id}", "starred_url": "https://api.github.com/users/ynaka81/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ynaka81/subscriptions", "organizations_url": "https://api.github.com/users/ynaka81/orgs", "repos_url": "https://api.github.com/users/ynaka81/repos", "events_url": "https://api.github.com/users/ynaka81/events{/privacy}", "received_events_url": "https://api.github.com/users/ynaka81/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-17T13:33:29Z", "updated_at": "2019-11-20T18:06:52Z", "closed_at": "2019-11-20T18:06:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "### versions\r\n\r\n```bash\r\n$ python --version\r\nPython 3.6.8\r\n$ pip freeze | grep boto\r\nboto==2.49.0\r\nboto3==1.10.19\r\nbotocore==1.13.19\r\n```\r\n\r\n### Reporting Bugs\r\n\r\nI mock only DynamoDB and run S3 client on real environment. But it has not worked since I update moto to `1.3.14`.\r\n\r\nHere is a minimum sample code.\r\n\r\n```python\r\nimport boto3\r\nimport moto\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(moto.__version__)\r\n    mock = moto.mock_dynamodb2()\r\n    mock.start()\r\n    boto3.client('dynamodb')\r\n    mock.stop()\r\n    bucket = boto3.resource('s3').Bucket('test-bucket')\r\n    print(list(bucket.objects.filter(Prefix='dummy')))\r\n```\r\n\r\nAlthough this code works on `moto==1.3.13`,\r\n\r\n```bash\r\n$ AWS_ACCESS_KEY_ID=xxx AWS_SECRET_ACCESS_KEY=xxx AWS_DEFAULT_REGION=xxx python main.py \r\n1.3.13\r\n[s3.ObjectSummary(bucket_name='test-bucket', key='dummy')]\r\n```\r\n\r\ndoes not work on `moto==1.3.14`.\r\n\r\n```bash\r\n$ AWS_ACCESS_KEY_ID=xxx AWS_SECRET_ACCESS_KEY=xxx AWS_DEFAULT_REGION=xxx python main.py \r\n1.3.14\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 12, in <module>\r\n    print(list(bucket.objects.filter(Prefix='dummy')))\r\n  File \"/home/nakagawa/.pyenv/versions/3.6.8/lib/python3.6/site-packages/boto3/resources/collection.py\", line 83, in __iter__\r\n    for page in self.pages():\r\n  File \"/home/nakagawa/.pyenv/versions/3.6.8/lib/python3.6/site-packages/boto3/resources/collection.py\", line 166, in pages\r\n    for page in pages:\r\n  File \"/home/nakagawa/.pyenv/versions/3.6.8/lib/python3.6/site-packages/botocore/paginate.py\", line 255, in __iter__\r\n    response = self._make_request(current_kwargs)\r\n  File \"/home/nakagawa/.pyenv/versions/3.6.8/lib/python3.6/site-packages/botocore/paginate.py\", line 332, in _make_request\r\n    return self._method(**current_kwargs)\r\n  File \"/home/nakagawa/.pyenv/versions/3.6.8/lib/python3.6/site-packages/botocore/client.py\", line 357, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/nakagawa/.pyenv/versions/3.6.8/lib/python3.6/site-packages/botocore/client.py\", line 661, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (InvalidAccessKeyId) when calling the ListObjects operation: The AWS Access Key Id you provided does not exist in our records.\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2575/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2575/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2567", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2567/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2567/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2567/events", "html_url": "https://github.com/getmoto/moto/issues/2567", "id": 523746698, "node_id": "MDU6SXNzdWU1MjM3NDY2OTg=", "number": 2567, "title": "Second request to presigned URL fails (1.3.14, after c7147b06)", "user": {"login": "jvtm", "id": 2363447, "node_id": "MDQ6VXNlcjIzNjM0NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2363447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvtm", "html_url": "https://github.com/jvtm", "followers_url": "https://api.github.com/users/jvtm/followers", "following_url": "https://api.github.com/users/jvtm/following{/other_user}", "gists_url": "https://api.github.com/users/jvtm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvtm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvtm/subscriptions", "organizations_url": "https://api.github.com/users/jvtm/orgs", "repos_url": "https://api.github.com/users/jvtm/repos", "events_url": "https://api.github.com/users/jvtm/events{/privacy}", "received_events_url": "https://api.github.com/users/jvtm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-15T23:33:48Z", "updated_at": "2020-03-07T16:33:34Z", "closed_at": "2020-03-07T16:33:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nLooks like second request to generated presigned URL (using `requests`) fails.\r\n\r\nI was able to find with `git bisect` that the offending change was  c7147b06 in #2294.\r\n\r\nIt looks like `responses` has a bit of weird logic: if there are multiple matches to the given URL, then the first one is popped out from the internal list. So, with requests to presigned URLs, the first (valid) regular expression is popped out, and then second call fails.\r\n\r\nNot sure if this affects other intercepted requests (also in other backends than S3).\r\n\r\nResponses code: https://github.com/getsentry/responses/blob/c8a1733b099f4b3c1bb3db3b42710c7cf8168142/responses.py#L580-L587\r\n\r\nThis patch to existing tests reproduces the issue:\r\n\r\n```diff\r\n--- a/tests/test_s3/test_s3.py\r\n+++ b/tests/test_s3/test_s3.py\r\n@@ -1017,8 +1017,9 @@ def test_s3_object_in_public_bucket():\r\n     presigned_url = boto3.client(\"s3\").generate_presigned_url(\r\n         \"get_object\", params, ExpiresIn=900\r\n     )\r\n-    response = requests.get(presigned_url)\r\n-    assert response.status_code == 200\r\n+    for i in range(1, 10):\r\n+        response = requests.get(presigned_url)\r\n+        assert response.status_code == 200, \"Failed on req number {}\".format(i)\r\n\r\n```\r\n\r\nOutput:\r\n```\r\nFAIL: tests.test_s3.test_s3.test_s3_object_in_public_bucket\r\nAssertionError: Failed on req number 2\r\n    <Response [400]> = <module 'requests' from ...>.get('https://test-bucket.s3.amazonaws.com/file.txt?AWSAccessKeyId=foobar_key&Signature=Gry%2F\r\nOmBZWksaCaoNGVgRazZVxiI%3D&Expires=1573860668')\r\n```\r\n\r\nSpotted this from private project test where we do create multiple presigned `PUT` to same bucket but with different key. Second upload using `requests.put()` fails (using session object actually). This used to work with `moto==1.3.13`.\r\n\r\nVersions in use:\r\n```\r\nboto3==1.10.16\r\nbotocore==1.13.16\r\nrequests==2.22.0\r\nresponses==0.10.6\r\nmoto==1.3.14         # (or latest git revision)\r\n```\r\n\r\nNote: recently botocore switched fully away from vendored requests, but that doesn't seem to affect the result.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2567/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2566", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2566/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2566/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2566/events", "html_url": "https://github.com/getmoto/moto/issues/2566", "id": 523589197, "node_id": "MDU6SXNzdWU1MjM1ODkxOTc=", "number": 2566, "title": "Class Decorator is blocking os.environ patching in setup/teardown in 1.3.14 (worked on 1.3.13)", "user": {"login": "clowtown", "id": 6283944, "node_id": "MDQ6VXNlcjYyODM5NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6283944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clowtown", "html_url": "https://github.com/clowtown", "followers_url": "https://api.github.com/users/clowtown/followers", "following_url": "https://api.github.com/users/clowtown/following{/other_user}", "gists_url": "https://api.github.com/users/clowtown/gists{/gist_id}", "starred_url": "https://api.github.com/users/clowtown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clowtown/subscriptions", "organizations_url": "https://api.github.com/users/clowtown/orgs", "repos_url": "https://api.github.com/users/clowtown/repos", "events_url": "https://api.github.com/users/clowtown/events{/privacy}", "received_events_url": "https://api.github.com/users/clowtown/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-15T17:12:02Z", "updated_at": "2021-10-21T16:23:30Z", "closed_at": "2021-10-21T16:23:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Class level decorator is decorating the setup/teardown which is preventing them from setting other key values. \r\n\r\nI understand that mocking setup can also be a good thing if we are setting up a boto client, but raising this issue in case it was not intentional. My own attempt to `patch.dict` os.environ further inside setup seemed to work but unsure of side effects.\r\n\r\npython version 3.7.5\r\n```\r\nfrom moto import mock_s3\r\n@mock_s3\r\nclass MotoUpdateBrokeTest(unittest.TestCase):\r\n    def setUp(self) -> None:\r\n        os.environ[\"GLUE_JOB_NAME\"] = \"glue-job\"\r\n\r\n    def tearDown(self):\r\n        pass\r\n\r\n    def test_env_is_set(self):\r\n        self.assertEqual(os.environ[\"GLUE_JOB_NAME\"], \"glue-job\")\r\n\r\n```\r\n\r\nresulting test run\r\n```\r\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = environ({'AWS_ACCESS_KEY_ID': 'foobar_key', 'AWS_SECRET_ACCESS_KEY': 'foobar_secret'})\r\nkey = 'GLUE_JOB_NAME'\r\n\r\n    def __getitem__(self, key):\r\n        try:\r\n            value = self._data[self.encodekey(key)]\r\n        except KeyError:\r\n            # raise KeyError with the original key value\r\n>           raise KeyError(key) from None\r\nE           KeyError: 'GLUE_JOB_NAME'\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2566/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2566/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2434", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2434/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2434/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2434/events", "html_url": "https://github.com/getmoto/moto/pull/2434", "id": 499075567, "node_id": "MDExOlB1bGxSZXF1ZXN0MzIxODc0NDAw", "number": 2434, "title": "fixing ErrorResponse top-level tag", "user": {"login": "JackDanger", "id": 2071, "node_id": "MDQ6VXNlcjIwNzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2071?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JackDanger", "html_url": "https://github.com/JackDanger", "followers_url": "https://api.github.com/users/JackDanger/followers", "following_url": "https://api.github.com/users/JackDanger/following{/other_user}", "gists_url": "https://api.github.com/users/JackDanger/gists{/gist_id}", "starred_url": "https://api.github.com/users/JackDanger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JackDanger/subscriptions", "organizations_url": "https://api.github.com/users/JackDanger/orgs", "repos_url": "https://api.github.com/users/JackDanger/repos", "events_url": "https://api.github.com/users/JackDanger/events{/privacy}", "received_events_url": "https://api.github.com/users/JackDanger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-26T19:33:51Z", "updated_at": "2019-09-27T18:14:58Z", "closed_at": "2019-09-27T18:14:54Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "draft": false, "pull_request": {"url": "https://api.github.com/repos/getmoto/moto/pulls/2434", "html_url": "https://github.com/getmoto/moto/pull/2434", "diff_url": "https://github.com/getmoto/moto/pull/2434.diff", "patch_url": "https://github.com/getmoto/moto/pull/2434.patch", "merged_at": "2019-09-27T18:14:54Z"}, "body": "In the golang SDK this throws an unmarshaling error:\n\n    /usr/local/Cellar/go/1.12.6/libexec/src/encoding/xml/read.go:209 &errors.errorString{s:\"unknown error response tag, {{ Response} []}\"}\n    err: <*>SerializationError: failed to unmarshal error message", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2434/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2434/timeline", "performed_via_github_app": null, "state_reason": null}, {"url": "https://api.github.com/repos/getmoto/moto/issues/2126", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/2126/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/2126/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/2126/events", "html_url": "https://github.com/getmoto/moto/issues/2126", "id": 425078957, "node_id": "MDU6SXNzdWU0MjUwNzg5NTc=", "number": 2126, "title": "Unit tests are broken", "user": {"login": "mikegrima", "id": 11035926, "node_id": "MDQ6VXNlcjExMDM1OTI2", "avatar_url": "https://avatars.githubusercontent.com/u/11035926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikegrima", "html_url": "https://github.com/mikegrima", "followers_url": "https://api.github.com/users/mikegrima/followers", "following_url": "https://api.github.com/users/mikegrima/following{/other_user}", "gists_url": "https://api.github.com/users/mikegrima/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikegrima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikegrima/subscriptions", "organizations_url": "https://api.github.com/users/mikegrima/orgs", "repos_url": "https://api.github.com/users/mikegrima/repos", "events_url": "https://api.github.com/users/mikegrima/events{/privacy}", "received_events_url": "https://api.github.com/users/mikegrima/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-03-25T19:32:50Z", "updated_at": "2019-03-28T18:42:40Z", "closed_at": "2019-03-28T18:42:40Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The following versions of boto:\r\n```\r\nboto==2.49.0\r\nboto3==1.9.120\r\nbotocore==1.12.120\r\n```\r\n... seem to be breaking the following tests:\r\n\r\n- `test_cloudformation`\r\n- `test_kms`\r\n- `test_s3`\r\n\r\nCloudFormation is breaking with:\r\n```\r\nyaml.constructor.ConstructorError: could not determine a constructor for the tag '!Ref'\r\n  in \"<unicode string>\", line 22, column 18:\r\n              Value: !Ref TagName\r\n                     ^\r\n```\r\n\r\nKMS is breaking on:\r\n```\r\nline 663, in test_schedule_key_deletion\r\n    assert response['DeletionDate'] == datetime(2015, 1, 31, 12, 0, tzinfo=tzlocal())\r\nAssertionError\r\n```\r\n\r\nS3 is breaking on server tests.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/2126/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/2126/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1966", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1966/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1966/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1966/events", "html_url": "https://github.com/getmoto/moto/issues/1966", "id": 383804390, "node_id": "MDU6SXNzdWUzODM4MDQzOTA=", "number": 1966, "title": "Error when updating Cloudformation stack containing unsupported resources", "user": {"login": "grahamlyons", "id": 284688, "node_id": "MDQ6VXNlcjI4NDY4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/284688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grahamlyons", "html_url": "https://github.com/grahamlyons", "followers_url": "https://api.github.com/users/grahamlyons/followers", "following_url": "https://api.github.com/users/grahamlyons/following{/other_user}", "gists_url": "https://api.github.com/users/grahamlyons/gists{/gist_id}", "starred_url": "https://api.github.com/users/grahamlyons/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grahamlyons/subscriptions", "organizations_url": "https://api.github.com/users/grahamlyons/orgs", "repos_url": "https://api.github.com/users/grahamlyons/repos", "events_url": "https://api.github.com/users/grahamlyons/events{/privacy}", "received_events_url": "https://api.github.com/users/grahamlyons/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-23T12:17:22Z", "updated_at": "2021-11-07T16:01:40Z", "closed_at": "2021-11-07T16:01:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When updating a Cloudformation stack which contains a resource which contains a resource which isn't supported by the moto implementation then a `TypeError` is generated, complaining about not being able to unpack a `NoneType` object.\r\n\r\nThe error is thrown at the bottom of this block: https://github.com/spulec/moto/blob/ed861ec/moto/cloudformation/parsing.py#L500-L511\r\n\r\nAnd this line actually generates the error: https://github.com/spulec/moto/blob/ed861ec/moto/cloudformation/parsing.py#L306-L307\r\n\r\nThe return site expects a tuple and tries to unpack it but as the resource isn't supported the  `parse_resource` function returns `None`: https://github.com/spulec/moto/blob/ed861ec/moto/cloudformation/parsing.py#L264-L270\r\n\r\nIt looks like the logic needs to be updated to catch that case, which the corresponding create function does: https://github.com/spulec/moto/blob/ed861ec/moto/cloudformation/parsing.py#L294-L296", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1966/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1966/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1861", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1861/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1861/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1861/events", "html_url": "https://github.com/getmoto/moto/issues/1861", "id": 368248884, "node_id": "MDU6SXNzdWUzNjgyNDg4ODQ=", "number": 1861, "title": "boto3 does not specify `STARTING` as valid EMR step state", "user": {"login": "karok2m", "id": 20900945, "node_id": "MDQ6VXNlcjIwOTAwOTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/20900945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karok2m", "html_url": "https://github.com/karok2m", "followers_url": "https://api.github.com/users/karok2m/followers", "following_url": "https://api.github.com/users/karok2m/following{/other_user}", "gists_url": "https://api.github.com/users/karok2m/gists{/gist_id}", "starred_url": "https://api.github.com/users/karok2m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karok2m/subscriptions", "organizations_url": "https://api.github.com/users/karok2m/orgs", "repos_url": "https://api.github.com/users/karok2m/repos", "events_url": "https://api.github.com/users/karok2m/events{/privacy}", "received_events_url": "https://api.github.com/users/karok2m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-09T14:46:43Z", "updated_at": "2021-10-21T16:37:57Z", "closed_at": "2021-10-21T16:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/spulec/moto/blob/dfa7935e13e6065810d6fc4e1edbf3e86499aea5/moto/emr/models.py#L241\r\n\r\nBoto3 documentation for `describe_step()` specifies only the following EMR step states: \r\n\r\n- `PENDING`\r\n- `CANCEL_PENDING`\r\n- `RUNNING`\r\n- `COMPLETED`\r\n- `CANCELLED`\r\n- `FAILED`\r\n- `INTERRUPTED`\r\n\r\nSo `STARTING` is not a valid state. Default should most probably be changed to `RUNNING`.\r\n\r\nBoto3 documentation for `describe_step()`: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/emr.html#EMR.Client.describe_step ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1861/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1861/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1775", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1775/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1775/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1775/events", "html_url": "https://github.com/getmoto/moto/issues/1775", "id": 349737711, "node_id": "MDU6SXNzdWUzNDk3Mzc3MTE=", "number": 1775, "title": "Cannot download 'application/x-empty' files", "user": {"login": "NyanKiyoshi", "id": 6186720, "node_id": "MDQ6VXNlcjYxODY3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6186720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NyanKiyoshi", "html_url": "https://github.com/NyanKiyoshi", "followers_url": "https://api.github.com/users/NyanKiyoshi/followers", "following_url": "https://api.github.com/users/NyanKiyoshi/following{/other_user}", "gists_url": "https://api.github.com/users/NyanKiyoshi/gists{/gist_id}", "starred_url": "https://api.github.com/users/NyanKiyoshi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NyanKiyoshi/subscriptions", "organizations_url": "https://api.github.com/users/NyanKiyoshi/orgs", "repos_url": "https://api.github.com/users/NyanKiyoshi/repos", "events_url": "https://api.github.com/users/NyanKiyoshi/events{/privacy}", "received_events_url": "https://api.github.com/users/NyanKiyoshi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-11T14:24:41Z", "updated_at": "2019-10-10T22:06:37Z", "closed_at": "2019-10-10T22:06:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, when trying to download a file having for mime-type `application/x-empty`, the following error occurs: `ValueError: I/O operation on closed file`.\r\n\r\nI tried to reproduce the issue on `boto3` without using `moto`, and it doesn't occur.\r\n\r\n## How to reproduce\r\n```python\r\nfrom io import BytesIO\r\nimport boto3\r\nimport moto\r\n\r\nBUCKET_NAME = 'bucket'\r\nKEY_NAME = 'emptyFile'\r\n\r\nKEY_MIME_TYPE = 'application/x-empty'\r\n\r\nmocked_s3 = moto.mock_s3()\r\nmocked_s3.start()\r\n\r\ns3 = boto3.resource(service_name='s3')\r\ns3.create_bucket(Bucket=BUCKET_NAME)\r\n\r\nbucket = s3.Bucket(BUCKET_NAME)\r\n\r\nwith BytesIO() as fp:\r\n    bucket.upload_fileobj(\r\n        Fileobj=fp, Key=KEY_NAME, ExtraArgs={'ContentType': KEY_MIME_TYPE})\r\n\r\n\r\n# should raise 'ValueError: I/O operation on closed file.'\r\nwith BytesIO() as fp:\r\n    bucket.download_fileobj(Fileobj=fp, Key=KEY_NAME)\r\n```\r\n\r\n## Error Stack\r\n```\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 25, in <module>\r\n  File \"/home/sayuri/development/sailing-venv/lib/python3.6/site-packages/boto3/s3/inject.py\", line 720, in bucket_download_fileobj\r\n    Callback=Callback, Config=Config)\r\n  File \"/home/sayuri/development/sailing-venv/lib/python3.6/site-packages/boto3/s3/inject.py\", line 678, in download_fileobj\r\n    return future.result()\r\n  File \"/home/sayuri/development/sailing-venv/lib/python3.6/site-packages/s3transfer/futures.py\", line 73, in result\r\n    return self._coordinator.result()\r\n  File \"/home/sayuri/development/sailing-venv/lib/python3.6/site-packages/s3transfer/futures.py\", line 233, in result\r\n    raise self._exception\r\n  File \"/home/sayuri/development/sailing-venv/lib/python3.6/site-packages/s3transfer/tasks.py\", line 126, in __call__\r\n    return self._execute_main(kwargs)\r\n  File \"/home/sayuri/development/sailing-venv/lib/python3.6/site-packages/s3transfer/tasks.py\", line 150, in _execute_main\r\n    return_value = self._main(**kwargs)\r\n  File \"/home/sayuri/development/sailing-venv/lib/python3.6/site-packages/s3transfer/download.py\", line 532, in _main\r\n    for chunk in chunks:\r\n  File \"/home/sayuri/development/sailing-venv/lib/python3.6/site-packages/s3transfer/download.py\", line 660, in __next__\r\n    chunk = self._body.read(self._chunksize)\r\n  File \"/home/sayuri/development/sailing-venv/lib/python3.6/site-packages/s3transfer/utils.py\", line 519, in read\r\n    value = self._stream.read(*args, **kwargs)\r\n  File \"/home/sayuri/development/sailing-venv/lib/python3.6/site-packages/botocore/response.py\", line 76, in read\r\n    chunk = self._raw_stream.read(amt)\r\n  File \"/home/sayuri/development/sailing-venv/lib/python3.6/site-packages/urllib3/response.py\", line 413, in read\r\n    data = self._fp.read(amt)\r\nValueError: I/O operation on closed file.\r\n```\r\n\r\n## Versions\r\n```\r\npython==3.6.6\r\nmoto==1.3.4\r\nboto==2.49.0\r\nboto3==1.7.70\r\nbotocore==1.10.72\r\ns3transfer==0.1.13\r\nurllib3==1.23\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1775/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1775/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1712", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1712/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1712/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1712/events", "html_url": "https://github.com/getmoto/moto/issues/1712", "id": 339571229, "node_id": "MDU6SXNzdWUzMzk1NzEyMjk=", "number": 1712, "title": "python-jose is not compatible with python 3.6", "user": {"login": "hackalyze", "id": 6118647, "node_id": "MDQ6VXNlcjYxMTg2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6118647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackalyze", "html_url": "https://github.com/hackalyze", "followers_url": "https://api.github.com/users/hackalyze/followers", "following_url": "https://api.github.com/users/hackalyze/following{/other_user}", "gists_url": "https://api.github.com/users/hackalyze/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackalyze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackalyze/subscriptions", "organizations_url": "https://api.github.com/users/hackalyze/orgs", "repos_url": "https://api.github.com/users/hackalyze/repos", "events_url": "https://api.github.com/users/hackalyze/events{/privacy}", "received_events_url": "https://api.github.com/users/hackalyze/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-09T19:07:51Z", "updated_at": "2020-06-10T09:50:29Z", "closed_at": "2020-06-06T10:48:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently the python-jose requirement was added to moto in PR https://github.com/spulec/moto/pull/1617, however python-jose breaks compatibility with python 3.6.\r\n\r\nSee a similar issue that was raised in warrant: https://github.com/capless/warrant/issues/31\r\n\r\nAs mentioned in the above issue, pycryptodome is the preferred solution: https://github.com/Legrandin/pycryptodome\r\n\r\nWhen I try to pipenv install git+git://github.com/spulec/moto.git#egg=moto I get the following in python 3.6:\r\n\r\nError:  An error occurred while installing git+git://github.com/spulec/moto.git#egg=moto!\r\n  Could not find a version that satisfies the requirement python-jose<3.0.0 (from moto) (from versions: )\r\nNo matching distribution found for python-jose<3.0.0 (from moto)", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1712/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1712/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1711", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1711/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1711/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1711/events", "html_url": "https://github.com/getmoto/moto/issues/1711", "id": 339527043, "node_id": "MDU6SXNzdWUzMzk1MjcwNDM=", "number": 1711, "title": "dynamoDB query fails to find any match when using nested attributes in FilterExpression", "user": {"login": "mgab", "id": 6085431, "node_id": "MDQ6VXNlcjYwODU0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6085431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgab", "html_url": "https://github.com/mgab", "followers_url": "https://api.github.com/users/mgab/followers", "following_url": "https://api.github.com/users/mgab/following{/other_user}", "gists_url": "https://api.github.com/users/mgab/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgab/subscriptions", "organizations_url": "https://api.github.com/users/mgab/orgs", "repos_url": "https://api.github.com/users/mgab/repos", "events_url": "https://api.github.com/users/mgab/events{/privacy}", "received_events_url": "https://api.github.com/users/mgab/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-09T16:46:39Z", "updated_at": "2020-03-10T15:43:30Z", "closed_at": "2020-03-10T15:43:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to find an open issue referring to this problem, but failed to, so I guess I'm not creating a duplicate. Otherwise, I apologize, I'll be happy to continue the discussion in the original issue.\r\n\r\nFor the record, I'm using version `1.3.3` of `moto`.\r\n\r\nThe problem I found is that when querying a table with one as KeyConditionExpression and some nested attribute condition as FilterExpression, moto fails to find any match while using a real table finds it. I guess the best way to illustrate it is with a minimal working example.\r\n\r\nSo, when executing the following code (using real dynamo, no mock ups)\r\n```\r\ndydb = boto3.resource(\"dynamodb\")\r\ntable = dydb.create_table(\r\n    TableName=\"TEST_TABLE\",\r\n    KeySchema=[{\"AttributeName\": \"Key1\", \"KeyType\": \"HASH\"},\r\n               {\"AttributeName\": \"Key2\", \"KeyType\": \"RANGE\"}],\r\n    AttributeDefinitions=[{\"AttributeName\": \"Key1\", \"AttributeType\": \"S\"},\r\n    \t\t\t\t\t  {\"AttributeName\": \"Key2\", \"AttributeType\": \"N\"}],\r\n    ProvisionedThroughput={\"ReadCapacityUnits\": 3, \"WriteCapacityUnits\": 3})\r\n\r\nwhile table.table_status != u\"ACTIVE\":\r\n    time.sleep(1)\r\n    table.reload()\r\n\r\ntable.put_item(Item={\"Key1\": \"foo\", \"Key2\": 1,\r\n                     \"details\": {\"type\": \"spam\"}})\r\ntable.put_item(Item={\"Key1\": \"foo\", \"Key2\": 2,\r\n                     \"details\": {\"type\": \"beans\"}})\r\n\r\nresult = table.query(KeyConditionExpression=Key(\"Key1\").eq(\"foo\"),\r\n                     FilterExpression=Attr(\"details.type\").eq(\"spam\"))\r\n```\r\n`result` contains\r\n```\r\n{u'Count': 1,\r\n u'Items': [{u'Key1': u'foo',\r\n   u'Key2': Decimal('1'),\r\n   u'details': {u'type': u'spam'}}],\r\n 'ResponseMetadata': {'HTTPHeaders': {'connection': 'keep-alive',\r\n   'content-length': '114',\r\n   'content-type': 'application/x-amz-json-1.0',\r\n   'date': 'Mon, 09 Jul 2018 16:25:06 GMT',\r\n   'server': 'Server',\r\n   'x-amz-crc32': '3511637975',\r\n   'x-amzn-requestid': '1BUUGBN4LOSU58UK7Q31CF3647VV4KQNSO5AEMVJF66Q9ASUAAJG'},\r\n  'HTTPStatusCode': 200,\r\n  'RequestId': '1BUUGBN4LOSU58UK7Q31CF3647VV4KQNSO5AEMVJF66Q9ASUAAJG',\r\n  'RetryAttempts': 0},\r\n u'ScannedCount': 2}\r\n```\r\nOn the other hand, when mocking dynamoDB executing the code inside a `with mock_dynamodb():` block, the query returns zero Items, and the value of `result` is\r\n```\r\n{u'ConsumedCapacity': {u'CapacityUnits': 1, u'TableName': u'TEST_TABLE'},\r\n u'Count': 0,\r\n u'Items': [],\r\n 'ResponseMetadata': {'HTTPHeaders': {u'Content-Type': u'text/plain',\r\n   u'server': u'amazon.com',\r\n   u'x-amzn-requestid': u'BVAY6HDZ94BNA75MPDC5DIA2NY9Y7PC9BMQQ8Q8GG6WR3VF7KCM5'},\r\n  'HTTPStatusCode': 200,\r\n  'RequestId': u'BVAY6HDZ94BNA75MPDC5DIA2NY9Y7PC9BMQQ8Q8GG6WR3VF7KCM5',\r\n  'RetryAttempts': 0},\r\n u'ScannedCount': 2}\r\n```\r\nAm I doing something wrong? Any idea what could be going on?\r\n\r\nThanks!", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1711/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1711/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1673", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1673/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1673/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1673/events", "html_url": "https://github.com/getmoto/moto/issues/1673", "id": 329745704, "node_id": "MDU6SXNzdWUzMjk3NDU3MDQ=", "number": 1673, "title": "Bug: Implementation Coverage script not working as expected", "user": {"login": "sthuber90", "id": 4415930, "node_id": "MDQ6VXNlcjQ0MTU5MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/4415930?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sthuber90", "html_url": "https://github.com/sthuber90", "followers_url": "https://api.github.com/users/sthuber90/followers", "following_url": "https://api.github.com/users/sthuber90/following{/other_user}", "gists_url": "https://api.github.com/users/sthuber90/gists{/gist_id}", "starred_url": "https://api.github.com/users/sthuber90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sthuber90/subscriptions", "organizations_url": "https://api.github.com/users/sthuber90/orgs", "repos_url": "https://api.github.com/users/sthuber90/repos", "events_url": "https://api.github.com/users/sthuber90/events{/privacy}", "received_events_url": "https://api.github.com/users/sthuber90/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-06T07:33:38Z", "updated_at": "2018-09-22T20:40:34Z", "closed_at": "2018-09-22T20:40:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For a project of mine I needed to use the _iot-data_ service. Looking into [`IMPLEMENTATION_COVERAGE.md`](https://github.com/spulec/moto/blob/master/IMPLEMENTATION_COVERAGE.md) it looked like the service wasn't implemented yet. After doing a bit of searching I found #1303, where the _iot-data_ service was added to moto.\r\n\r\nhttps://github.com/spulec/moto/blob/0f816566df3aefc20b9054e4dc9f7ca7373bc6f6/IMPLEMENTATION_COVERAGE.md#L2527-L2532\r\n\r\nBeing interested why this isn't reflected in `IMPLEMENTATION_COVERAGE.md` I dug a bit deeper. I found out that coverage information is not only missing for _iot-data_, but also for _cognito-identity_, and _cognito-idp_. The all have in common that their moto attribute represation is without the \"-\" i.e. iotdata, cognitoidentity, cognitoidp. If this \"renaming pattern\" can be seen as set (default) adding following line between these two lines:\r\nhttps://github.com/spulec/moto/blob/4198abfd24a3aab49a8b83640ca265870e2688d1/scripts/implementation_coverage.py#L8-L9\r\n\r\n`service_name = service_name.replace(\"-\", \"\") if \"-\" in service_name else service_name`\r\n\r\nThis will result in having correct coverage info on _iot-data_, _cognito-identity_, as well as _cognito-idp_ services.\r\n\r\nShould I make a pull request for this?\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1673/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1673/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1665", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1665/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1665/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1665/events", "html_url": "https://github.com/getmoto/moto/issues/1665", "id": 328452694, "node_id": "MDU6SXNzdWUzMjg0NTI2OTQ=", "number": 1665, "title": "Cannot install with pipenv", "user": {"login": "aaugustin", "id": 788910, "node_id": "MDQ6VXNlcjc4ODkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/788910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaugustin", "html_url": "https://github.com/aaugustin", "followers_url": "https://api.github.com/users/aaugustin/followers", "following_url": "https://api.github.com/users/aaugustin/following{/other_user}", "gists_url": "https://api.github.com/users/aaugustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaugustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaugustin/subscriptions", "organizations_url": "https://api.github.com/users/aaugustin/orgs", "repos_url": "https://api.github.com/users/aaugustin/repos", "events_url": "https://api.github.com/users/aaugustin/events{/privacy}", "received_events_url": "https://api.github.com/users/aaugustin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-06-01T09:48:12Z", "updated_at": "2021-11-07T14:01:51Z", "closed_at": "2021-11-07T14:01:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running `pipenv install moto` in a fresh environment with a clean cache fails with:\r\n\r\n```\r\nWarning: Your dependencies could not be resolved. You likely have a mismatch in your sub-dependencies.\r\n  You can use $ pipenv install --skip-lock to bypass this mechanism, then run $ pipenv graph to inspect the situation.\r\nCould not find a version that matches pypiwin32==219,==220\r\nTried: 219, 223, 223\r\n```\r\n\r\n<details><summary>Here's the complete output:</summary>\r\n\r\n```\r\nCreating a virtualenv for this project\u2026\r\nUsing /Users/ayaugustin/.pyenv/versions/3.6.1/bin/python3.6m to create virtualenv\u2026\r\nRunning virtualenv with interpreter /Users/ayaugustin/.pyenv/versions/3.6.1/bin/python3.6m\r\nUsing base prefix '/Users/ayaugustin/.pyenv/versions/3.6.1'\r\nNew python executable in /Users/ayaugustin/.virtualenvs/pipenvmoto-_yaAETCE/bin/python3.6m\r\nAlso creating executable in /Users/ayaugustin/.virtualenvs/pipenvmoto-_yaAETCE/bin/python\r\nInstalling setuptools, pip, wheel...done.\r\n\r\nVirtualenv location: /Users/ayaugustin/.virtualenvs/pipenvmoto-_yaAETCE\r\nPipfile.lock not found, creating\u2026\r\nLocking [dev-packages] dependencies\u2026\r\nLocking [packages] dependencies\u2026\r\n\r\nWarning: Your dependencies could not be resolved. You likely have a mismatch in your sub-dependencies.\r\n  You can use $ pipenv install --skip-lock to bypass this mechanism, then run $ pipenv graph to inspect the situation.\r\nCould not find a version that matches pypiwin32==219,==220\r\nTried: 219, 223, 223\r\n\r\nayaugustin@freifmac0031280:~/pipenvmoto $ pipenv install moto\r\nayaugustin@freifmac0031280:~/pipenvmoto $ rm -rf ../.virtualenvs/pipenvmoto-_yaAETCE\r\nayaugustin@freifmac0031280:~/pipenvmoto $ pipenv install moto\r\nCreating a virtualenv for this project\u2026\r\nUsing /Users/ayaugustin/.pyenv/versions/3.6.1/bin/python3.6m to create virtualenv\u2026\r\n\u280bRunning virtualenv with interpreter /Users/ayaugustin/.pyenv/versions/3.6.1/bin/python3.6m\r\nUsing base prefix '/Users/ayaugustin/.pyenv/versions/3.6.1'\r\nNew python executable in /Users/ayaugustin/.virtualenvs/pipenvmoto-_yaAETCE/bin/python3.6m\r\nAlso creating executable in /Users/ayaugustin/.virtualenvs/pipenvmoto-_yaAETCE/bin/python\r\nInstalling setuptools, pip, wheel...done.\r\n\r\nVirtualenv location: /Users/ayaugustin/.virtualenvs/pipenvmoto-_yaAETCE\r\nInstalling moto\u2026\r\nLooking in indexes: https://pypi.python.org/simple\r\nCollecting moto\r\n  Using cached https://files.pythonhosted.org/packages/b3/a8/fccbacf94fdaa474316c4f65289d58b0271d1352e35628014bc071aa7291/moto-1.3.3-py2.py3-none-any.whl\r\nCollecting mock (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/e6/35/f187bdf23be87092bd0f1200d43d23076cee4d0dec109f195173fd3ebc79/mock-2.0.0-py2.py3-none-any.whl\r\nCollecting responses (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/d9/a2/1cf64651ca0837ea627fbf0455231611bec85dbb7a9ffe761365950cabe5/responses-0.9.0-py2.py3-none-any.whl\r\nCollecting cookies (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/6a/60/557f84aa2db629e5124aa05408b975b1b5d0e1cec16cde0bfa06aae097d3/cookies-2.2.1-py2.py3-none-any.whl\r\nCollecting six>1.9 (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/67/4b/141a581104b1f6397bfa78ac9d43d8ad29a7ca43ea90a2d863fe3056e86a/six-1.11.0-py2.py3-none-any.whl\r\nCollecting pytz (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/dc/83/15f7833b70d3e067ca91467ca245bae0f6fe56ddc7451aa0dc5606b120f2/pytz-2018.4-py2.py3-none-any.whl\r\nCollecting python-dateutil<2.7.0,>=2.1 (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/4b/0d/7ed381ab4fe80b8ebf34411d14f253e1cf3e56e2820ffa1d8844b23859a2/python_dateutil-2.6.1-py2.py3-none-any.whl\r\nCollecting aws-xray-sdk<0.96,>=0.93 (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/a4/a5/da7887285564f9e0ae5cd25a453cca36e2cd43d8ccc9effde260b4d80904/aws_xray_sdk-0.95-py2.py3-none-any.whl\r\nCollecting boto>=2.36.0 (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/bd/b7/a88a67002b1185ed9a8e8a6ef15266728c2361fcb4f1d02ea331e4c7741d/boto-2.48.0-py2.py3-none-any.whl\r\nCollecting cryptography>=2.0.0 (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/40/87/acdcf84ce6d25a7db1c113f4b9b614fd8d707b7ab56fbf17cf18cd26a627/cryptography-2.2.2-cp34-abi3-macosx_10_6_intel.whl\r\nCollecting werkzeug (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/20/c4/12e3e56473e52375aa29c4764e70d1b8f3efa6682bef8d0aae04fe335243/Werkzeug-0.14.1-py2.py3-none-any.whl\r\nCollecting pyaml (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/17/c1/5892f756109e54ed53c753129b0da4acf6b6add8dff5a85b18667553b16d/pyaml-17.12.1-py2.py3-none-any.whl\r\nCollecting Jinja2>=2.7.3 (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/7f/ff/ae64bacdfc95f27a016a7bed8e8686763ba4d277a78ca76f32659220a731/Jinja2-2.10-py2.py3-none-any.whl\r\nCollecting docker>=2.5.1 (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/31/01/41f727a549abd788eb91d0df4c801cb4c1f5227eee04a2621e13d7ed3e04/docker-3.3.0-py2.py3-none-any.whl\r\nCollecting jsondiff==1.1.1 (from moto)\r\nCollecting requests>=2.5 (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/49/df/50aa1999ab9bde74656c2919d9c0c085fd2b3775fd3eca826012bef76d8c/requests-2.18.4-py2.py3-none-any.whl\r\nCollecting xmltodict (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/42/a9/7e99652c6bc619d19d58cdd8c47560730eb5825d43a7e25db2e1d776ceb7/xmltodict-0.11.0-py2.py3-none-any.whl\r\nCollecting botocore>=1.9.16 (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/da/aa/b227500e26dbbd95bd6cda78cf784f769bbad3e74b81bfc52963b55b6363/botocore-1.10.30-py2.py3-none-any.whl\r\nCollecting boto3>=1.6.16 (from moto)\r\n  Using cached https://files.pythonhosted.org/packages/25/54/288f3d87d055440e20eb7a9dce58fdd005c91c1071883dea9033c5ddb9e4/boto3-1.7.30-py2.py3-none-any.whl\r\nCollecting pbr>=0.11 (from mock->moto)\r\n  Using cached https://files.pythonhosted.org/packages/2d/9d/7bfab757977067556c7ca5fe437f28e8b8843c95564fca504de79df63b25/pbr-4.0.3-py2.py3-none-any.whl\r\nCollecting jsonpickle (from aws-xray-sdk<0.96,>=0.93->moto)\r\nCollecting wrapt (from aws-xray-sdk<0.96,>=0.93->moto)\r\nCollecting asn1crypto>=0.21.0 (from cryptography>=2.0.0->moto)\r\n  Using cached https://files.pythonhosted.org/packages/ea/cd/35485615f45f30a510576f1a56d1e0a7ad7bd8ab5ed7cdc600ef7cd06222/asn1crypto-0.24.0-py2.py3-none-any.whl\r\nCollecting idna>=2.1 (from cryptography>=2.0.0->moto)\r\n  Using cached https://files.pythonhosted.org/packages/27/cc/6dd9a3869f15c2edfab863b992838277279ce92663d334df9ecf5106f5c6/idna-2.6-py2.py3-none-any.whl\r\nCollecting cffi>=1.7; platform_python_implementation != \"PyPy\" (from cryptography>=2.0.0->moto)\r\n  Using cached https://files.pythonhosted.org/packages/8e/be/40b1bc2c3221acdefeb9dab6773d43cda7543ed0d8c8df8768f05af2d01e/cffi-1.11.5-cp36-cp36m-macosx_10_6_intel.whl\r\nCollecting PyYAML (from pyaml->moto)\r\nCollecting MarkupSafe>=0.23 (from Jinja2>=2.7.3->moto)\r\nCollecting docker-pycreds>=0.2.3 (from docker>=2.5.1->moto)\r\n  Using cached https://files.pythonhosted.org/packages/5c/b6/3a4ca03225f6e9a25cb47cd3c695d19b88df5928ab9310e64dec1eb3b4d1/docker_pycreds-0.2.3-py2.py3-none-any.whl\r\nCollecting websocket-client>=0.32.0 (from docker>=2.5.1->moto)\r\n  Using cached https://files.pythonhosted.org/packages/8a/a1/72ef9aa26cfe1a75cee09fc1957e4723add9de098c15719416a1ee89386b/websocket_client-0.48.0-py2.py3-none-any.whl\r\nCollecting certifi>=2017.4.17 (from requests>=2.5->moto)\r\n  Using cached https://files.pythonhosted.org/packages/7c/e6/92ad559b7192d846975fc916b65f667c7b8c3a32bea7372340bfe9a15fa5/certifi-2018.4.16-py2.py3-none-any.whl\r\nCollecting chardet<3.1.0,>=3.0.2 (from requests>=2.5->moto)\r\n  Using cached https://files.pythonhosted.org/packages/bc/a9/01ffebfb562e4274b6487b4bb1ddec7ca55ec7510b22e4c51f14098443b8/chardet-3.0.4-py2.py3-none-any.whl\r\nCollecting urllib3<1.23,>=1.21.1 (from requests>=2.5->moto)\r\n  Using cached https://files.pythonhosted.org/packages/63/cb/6965947c13a94236f6d4b8223e21beb4d576dc72e8130bd7880f600839b8/urllib3-1.22-py2.py3-none-any.whl\r\nCollecting jmespath<1.0.0,>=0.7.1 (from botocore>=1.9.16->moto)\r\n  Using cached https://files.pythonhosted.org/packages/b7/31/05c8d001f7f87f0f07289a5fc0fc3832e9a57f2dbd4d3b0fee70e0d51365/jmespath-0.9.3-py2.py3-none-any.whl\r\nCollecting docutils>=0.10 (from botocore>=1.9.16->moto)\r\n  Using cached https://files.pythonhosted.org/packages/36/fa/08e9e6e0e3cbd1d362c3bbee8d01d0aedb2155c4ac112b19ef3cae8eed8d/docutils-0.14-py3-none-any.whl\r\nCollecting s3transfer<0.2.0,>=0.1.10 (from boto3>=1.6.16->moto)\r\n  Using cached https://files.pythonhosted.org/packages/d7/14/2a0004d487464d120c9fb85313a75cd3d71a7506955be458eebfe19a6b1d/s3transfer-0.1.13-py2.py3-none-any.whl\r\nCollecting pycparser (from cffi>=1.7; platform_python_implementation != \"PyPy\"->cryptography>=2.0.0->moto)\r\nInstalling collected packages: pbr, six, mock, cookies, idna, certifi, chardet, urllib3, requests, responses, pytz, python-dateutil, jsonpickle, wrapt, aws-xray-sdk, boto, asn1crypto, pycparser, cffi, cryptography, werkzeug, PyYAML, pyaml, MarkupSafe, Jinja2, docker-pycreds, websocket-client, docker, jsondiff, xmltodict, jmespath, docutils, botocore, s3transfer, boto3, moto\r\nSuccessfully installed Jinja2-2.10 MarkupSafe-1.0 PyYAML-3.12 asn1crypto-0.24.0 aws-xray-sdk-0.95 boto-2.48.0 boto3-1.7.30 botocore-1.10.30 certifi-2018.4.16 cffi-1.11.5 chardet-3.0.4 cookies-2.2.1 cryptography-2.2.2 docker-3.3.0 docker-pycreds-0.2.3 docutils-0.14 idna-2.6 jmespath-0.9.3 jsondiff-1.1.1 jsonpickle-0.9.6 mock-2.0.0 moto-1.3.3 pbr-4.0.3 pyaml-17.12.1 pycparser-2.18 python-dateutil-2.6.1 pytz-2018.4 requests-2.18.4 responses-0.9.0 s3transfer-0.1.13 six-1.11.0 urllib3-1.22 websocket-client-0.48.0 werkzeug-0.14.1 wrapt-1.10.11 xmltodict-0.11.0\r\n\r\nAdding moto to Pipfile's [packages]\u2026\r\nPipfile.lock not found, creating\u2026\r\nLocking [dev-packages] dependencies\u2026\r\nLocking [packages] dependencies\u2026\r\n\r\nWarning: Your dependencies could not be resolved. You likely have a mismatch in your sub-dependencies.\r\n  You can use $ pipenv install --skip-lock to bypass this mechanism, then run $ pipenv graph to inspect the situation.\r\nCould not find a version that matches pypiwin32==219,==220\r\nTried: 219, 223, 223\r\n\r\n```\r\n\r\n</details>\r\n\r\n----\r\n\r\nIf you have pipenv installed, you can reproduce this issue with:\r\n\r\n```\r\n$ mkdir pipenvmoto\r\n$ cd pipenvmoto\r\n$ pipenv install moto\r\n```\r\n\r\nClearing pipenv's cache didn't help.\r\n\r\n----\r\n\r\nI suspect there's an inconsistency in moto's dependencies but I couldn't locate it.\r\n\r\n`pip install moto` works for me on macOS, probably because pypiwin is a Windows-only dependency. However this is annoying because it prevents me from including moto in my Pipfile.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1665/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1665/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1648", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1648/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1648/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1648/events", "html_url": "https://github.com/getmoto/moto/issues/1648", "id": 324398391, "node_id": "MDU6SXNzdWUzMjQzOTgzOTE=", "number": 1648, "title": "No result using cointains in filter when scanning dynamodb2", "user": {"login": "martinhyldgaard", "id": 20985787, "node_id": "MDQ6VXNlcjIwOTg1Nzg3", "avatar_url": "https://avatars.githubusercontent.com/u/20985787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinhyldgaard", "html_url": "https://github.com/martinhyldgaard", "followers_url": "https://api.github.com/users/martinhyldgaard/followers", "following_url": "https://api.github.com/users/martinhyldgaard/following{/other_user}", "gists_url": "https://api.github.com/users/martinhyldgaard/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinhyldgaard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinhyldgaard/subscriptions", "organizations_url": "https://api.github.com/users/martinhyldgaard/orgs", "repos_url": "https://api.github.com/users/martinhyldgaard/repos", "events_url": "https://api.github.com/users/martinhyldgaard/events{/privacy}", "received_events_url": "https://api.github.com/users/martinhyldgaard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-18T12:51:08Z", "updated_at": "2020-03-29T11:29:54Z", "closed_at": "2020-03-29T11:29:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to write some tests, I ran into a problem using contains for filtering. This small example run with pytest illustrates the problem:\r\n```\r\nimport boto3\r\nimport moto\r\nfrom contextlib import contextmanager\r\nimport uuid\r\nfrom boto3.dynamodb.conditions import Attr\r\nimport os\r\n\r\nos.environ['AWS_DEFAULT_REGION'] = 'eu-central-1'\r\nTXNS_TABLE = 'TestTable'\r\n@contextmanager\r\ndef do_test_setup():\r\n    with moto.mock_dynamodb2():\r\n        set_up_dynamodb()\r\n        yield\r\n\r\ndef set_up_dynamodb():\r\n    client = boto3.client('dynamodb')\r\n    client.create_table(\r\n        AttributeDefinitions=[\r\n            {\r\n                'AttributeName': 'id',\r\n                'AttributeType': 'S'\r\n            },\r\n        ],\r\n        KeySchema=[\r\n            {\r\n                'AttributeName': 'id',\r\n                'KeyType': 'HASH'\r\n            }\r\n        ],\r\n        TableName=TXNS_TABLE,\r\n        ProvisionedThroughput={\r\n            'ReadCapacityUnits': 10,\r\n            'WriteCapacityUnits': 1\r\n        }\r\n    )\r\n\r\n\r\ndef test_moto():\r\n    with do_test_setup():\r\n        print('boto3 version: ' + boto3.__version__)\r\n        print('moto version: ' + moto.__version__)\r\n        table = boto3.resource('dynamodb').Table(TXNS_TABLE)\r\n        id = str(uuid.uuid1())\r\n        table.put_item(Item={'id': id, 'list': ['a', 'b']})\r\n        idFilter = Attr('id').eq(id)\r\n\r\n        found = table.scan(\r\n            FilterExpression=idFilter\r\n        )\r\n        assert len(found['Items']) == 1\r\n\r\n        listFilter = Attr('list').contains('b')\r\n        found = table.scan(\r\n            FilterExpression=listFilter\r\n        )\r\n        assert len(found['Items']) == 1\r\n\r\n```\r\n\r\nThe first assert, on the scan using idFilter is successful. The second assert, on the scan using listFilter fails. The length of Items is 0, where I expect 1.\r\nBoth asserts succeed if I run the code against an empty table in AWS.\r\nI use boto3 version: 1.7.22 and moto version: 1.3.3. Installation has been done through PyCharm\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1648/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1648/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1637", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1637/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1637/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1637/events", "html_url": "https://github.com/getmoto/moto/issues/1637", "id": 322470280, "node_id": "MDU6SXNzdWUzMjI0NzAyODA=", "number": 1637, "title": "mock_s3 gives \"ConnectionError: Connection refused...\" error when Key used in put_object call contains leading forward slash", "user": {"login": "jwldev2014", "id": 12335727, "node_id": "MDQ6VXNlcjEyMzM1NzI3", "avatar_url": "https://avatars.githubusercontent.com/u/12335727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwldev2014", "html_url": "https://github.com/jwldev2014", "followers_url": "https://api.github.com/users/jwldev2014/followers", "following_url": "https://api.github.com/users/jwldev2014/following{/other_user}", "gists_url": "https://api.github.com/users/jwldev2014/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwldev2014/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwldev2014/subscriptions", "organizations_url": "https://api.github.com/users/jwldev2014/orgs", "repos_url": "https://api.github.com/users/jwldev2014/repos", "events_url": "https://api.github.com/users/jwldev2014/events{/privacy}", "received_events_url": "https://api.github.com/users/jwldev2014/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-05-12T01:02:30Z", "updated_at": "2019-09-12T02:49:54Z", "closed_at": "2019-09-12T02:49:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is very specific situation, however the behavior of moto in this situation doesn't match what happens when you use the actual boto3 connecting to AWS.\r\n\r\nThe situation is if you have a Key for a S3 object that you are putting into a S3 bucket that has a leading forward slash (\"/\").\r\n\r\nSo if your Key is \"/abc\" and you try putting an object into a S3 bucket with the key as follows:\r\n\r\n```\r\ndef do_something():\r\n  my_bucket = boto3.resource('s3', region_name='us-west-2').Bucket('my_bucket')\r\n  my_bucket.put_object(Key='/abc', Body='ABCD')\r\n```\r\n\r\nIf you run this snippet of code (along with required imports and so on), then an object with the key \"/abc\" will be placed in the bucket with the content specified.\r\n\r\nWhen you view this on the AWS Console, it will seem a bit strange because at the \"root\" level of the S3 bucket, you'll find a \"folder\" with no name. Upon clicking this no-named folder, you'll see an object named \"abc\" with the content specified. So this is the expected behavior when boto3 is being used without moto.\r\n\r\nWhen moto is used in a similar situation, lets say as follows:\r\n\r\n```\r\n@moto_s3\r\ndef do_something_moto()\r\n  conn = botot3.resource('s3', region_name='us-west-2')\r\n  conn.create_bucket(Bucket='my_bucket')\r\n  bucket.put_object(Key='/abc', Body='ABCD')\r\n```\r\n\r\nIf you run this code, you will get an error with a traceback ending with:\r\n\r\n`ConnectionError: Connection refused: PUT https://foobar.s3.us-west-2.amazonaws.com//abc`\r\n\r\nIf you remove the leading forward slash from the Key in the put_object call:\r\n\r\n`bucket.put_object(Key='abc', Body='ABCD')`\r\n\r\nThen this code will run without an error. As pointed out above when using the boto3 without moto, a Key with a leading forward slash is a valid key and should not cause an error. This is really an edge case, but I think moto should be made to handle this situation correctly.\r\n\r\nAs for versions of boto3 and moto being used:\r\nboto3: 1.7.19\r\nmoto: 1.3.3", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1637/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1637/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1603", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1603/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1603/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1603/events", "html_url": "https://github.com/getmoto/moto/issues/1603", "id": 318542541, "node_id": "MDU6SXNzdWUzMTg1NDI1NDE=", "number": 1603, "title": "Using StreamingBody as a file fails with GzipFile", "user": {"login": "jruere", "id": 1299142, "node_id": "MDQ6VXNlcjEyOTkxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1299142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruere", "html_url": "https://github.com/jruere", "followers_url": "https://api.github.com/users/jruere/followers", "following_url": "https://api.github.com/users/jruere/following{/other_user}", "gists_url": "https://api.github.com/users/jruere/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruere/subscriptions", "organizations_url": "https://api.github.com/users/jruere/orgs", "repos_url": "https://api.github.com/users/jruere/repos", "events_url": "https://api.github.com/users/jruere/events{/privacy}", "received_events_url": "https://api.github.com/users/jruere/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-04-27T20:38:30Z", "updated_at": "2021-11-01T08:33:12Z", "closed_at": "2021-10-30T10:14:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code fails:\r\n\r\n```python\r\ns3 = boto3.resource('s3', region_name='us-east-1')\r\ns3.create_bucket(Bucket='test-bucket')\r\nobj = s3.Object('test-bucket', 'an-object')\r\nobj.put(Body=io.BytesIO(gzip.compress(b'some data')))\r\n\r\ngzip.GzipFile(fileobj=s3.Object('test-bucket', 'an-object').get()['Body'], mode='rb').read()\r\n```\r\n\r\nThe traceback is:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/javier/tmp/virtualenvs-2/lupin-analytics/lib/python3.5/site-packages/moto/core/models.py\", line 71, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/home/javier/Projects/domainsbot.com/lupin-analytics/tests/lupin_analytics_/test_repositories.py\", line 377, in test_moto\r\n    gzip.GzipFile(fileobj=s3.Object('test-bucket', 'an-object').get()['Body'], mode='rb').read()\r\n  File \"/usr/lib64/python3.5/gzip.py\", line 274, in read\r\n    return self._buffer.read(size)\r\n  File \"/usr/lib64/python3.5/gzip.py\", line 461, in read\r\n    if not self._read_gzip_header():\r\n  File \"/usr/lib64/python3.5/gzip.py\", line 404, in _read_gzip_header\r\n    magic = self._fp.read(2)\r\n  File \"/usr/lib64/python3.5/gzip.py\", line 82, in read\r\n    return self.file.read(size)\r\n  File \"/home/javier/tmp/virtualenvs-2/lupin-analytics/lib/python3.5/site-packages/botocore/response.py\", line 74, in read\r\n    chunk = self._raw_stream.read(amt)\r\n  File \"/home/javier/tmp/virtualenvs-2/lupin-analytics/lib/python3.5/site-packages/urllib3/response.py\", line 384, in read\r\n    data = self._fp.read(amt)\r\nValueError: I/O operation on closed file.\r\n```\r\n\r\nThe code works if the last line is changed to:\r\n\r\n```python\r\ngzip.GzipFile(fileobj=io.BytesIO(s3.Object('test-bucket', 'an-object').get()['Body'].read()), mode='rb').read()\r\n```\r\n\r\nOf course, it also works with boto3 without reading into memory.\r\n\r\nI'm using moto 1.3.3. I tried this with boto3 1.5.1 and 1.7.10.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1603/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1603/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1587", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1587/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1587/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1587/events", "html_url": "https://github.com/getmoto/moto/issues/1587", "id": 316224963, "node_id": "MDU6SXNzdWUzMTYyMjQ5NjM=", "number": 1587, "title": "dynamodb2 ConditionExpression does not work", "user": {"login": "RudolfVonKrugstein", "id": 1104805, "node_id": "MDQ6VXNlcjExMDQ4MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1104805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RudolfVonKrugstein", "html_url": "https://github.com/RudolfVonKrugstein", "followers_url": "https://api.github.com/users/RudolfVonKrugstein/followers", "following_url": "https://api.github.com/users/RudolfVonKrugstein/following{/other_user}", "gists_url": "https://api.github.com/users/RudolfVonKrugstein/gists{/gist_id}", "starred_url": "https://api.github.com/users/RudolfVonKrugstein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RudolfVonKrugstein/subscriptions", "organizations_url": "https://api.github.com/users/RudolfVonKrugstein/orgs", "repos_url": "https://api.github.com/users/RudolfVonKrugstein/repos", "events_url": "https://api.github.com/users/RudolfVonKrugstein/events{/privacy}", "received_events_url": "https://api.github.com/users/RudolfVonKrugstein/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-04-20T11:06:03Z", "updated_at": "2019-10-29T15:30:15Z", "closed_at": "2019-07-28T21:58:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Reproduce the bug:\r\n\r\nI am doing the following in ipython:\r\n\r\nSetup moto:\r\n```\r\nimport moto\r\nimport boto3\r\nmock = moto.mock_dynamodb2()\r\nmock.start()\r\n```\r\n\r\nCreate a table:\r\n```\r\nclient = boto3.client(\"dynamodb\")\r\nclient.create_table(TableName=\"test\"\r\n    , KeySchema=[{\"AttributeName\": \"id\", \"KeyType\": \"HASH\"}]\r\n    , AttributeDefinitions=[{\"AttributeName\": \"id\", \"AttributeType\": \"S\"}]\r\n    , ProvisionedThroughput={\"ReadCapacityUnits\": 1, \"WriteCapacityUnits\": 1})\r\n```\r\n\r\nInsert some data:\r\n```\r\ntable = boto3.resource(\"dynamodb\").Table(\"test\")\r\ntable.put_item(Item={\"id\": \"abc\", \"task_states\": {\"task_id\": {\"phase\": \"ABSENT\"}}})\r\n```\r\n\r\nNow I want to update the item, with a failing condition:\r\n\r\n```\r\ntable.update_item(Key={\"id\": \"abc\"}\r\n    , UpdateExpression=\"SET task_states.task_id.phase = :p\"\r\n    , ExpressionAttributeValues={\":p\": \"DELETED\", \":v1\": \"FINISHED\", \":v2\": \"RUNNING\"}\r\n    , ConditionExpression=\"task_states.task_id.phase IN (:v1,:v2)\")\r\nOut[16]:\r\n{'Attributes': {'id': 'abc', 'task_states': {'task_id': {'phase': 'DELETED'}}},\r\n 'ConsumedCapacity': {'CapacityUnits': 0.5, 'TableName': 'test'},\r\n 'ResponseMetadata': {'HTTPHeaders': {'Content-Type': 'text/plain',\r\n   'server': 'amazon.com',\r\n   'x-amzn-requestid': 'UIDN2VKJWO9W59LQYWN8CMQCOA321AXHSDXV7E3J6JW9ZL0E8IHY'},\r\n  'HTTPStatusCode': 200,\r\n  'RequestId': 'UIDN2VKJWO9W59LQYWN8CMQCOA321AXHSDXV7E3J6JW9ZL0E8IHY',\r\n  'RetryAttempts': 0}}\r\n```\r\n\r\n# Expected Result:\r\nThe item in the table is not updated and an Error (ConditionalCheckFailedException) is thrown\r\n\r\n# Actual Result\r\nThe item is updated", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1587/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1587/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1581", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1581/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1581/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1581/events", "html_url": "https://github.com/getmoto/moto/issues/1581", "id": 315810021, "node_id": "MDU6SXNzdWUzMTU4MTAwMjE=", "number": 1581, "title": "s3 delete_objects incorrectly raises errors for non-existing keys", "user": {"login": "divad", "id": 747790, "node_id": "MDQ6VXNlcjc0Nzc5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/747790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divad", "html_url": "https://github.com/divad", "followers_url": "https://api.github.com/users/divad/followers", "following_url": "https://api.github.com/users/divad/following{/other_user}", "gists_url": "https://api.github.com/users/divad/gists{/gist_id}", "starred_url": "https://api.github.com/users/divad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divad/subscriptions", "organizations_url": "https://api.github.com/users/divad/orgs", "repos_url": "https://api.github.com/users/divad/repos", "events_url": "https://api.github.com/users/divad/events{/privacy}", "received_events_url": "https://api.github.com/users/divad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-19T10:03:26Z", "updated_at": "2021-06-25T09:26:03Z", "closed_at": "2021-06-25T09:26:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "When asking S3 to delete a series of keys in a bucket (via delete_objects) no errors are raised if the keys do not exist. Sample response from s3:\r\n\r\n`{u'Deleted': [{u'Key': 'key1'}, {u'Key': 'key2'}, {u'Key': 'key3'}], 'ResponseMetadata': {'HTTPStatusCode': 200, 'RetryAttempts': 0, 'HostId': '<omitted>', 'RequestId': '<omitted>', 'HTTPHeaders': {'x-amz-id-2': '<omitted>', 'server': 'AmazonS3', 'transfer-encoding': 'chunked', 'connection': 'close', 'x-amz-request-id': '<omitted>', 'date': 'Thu, 19 Apr 2018 08:48:56 GMT', 'content-type': 'application/xml'}}}`\r\n\r\nHowever, when using moto, attempts to delete non-existent keys are incorrectly raised as errors:\r\n\r\n`{u'Deleted': [{u'Key': 'key1'}], u'Errors': [{u'Key': 'key2'}, {u'Key': 'key3'}], 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'HTTPHeaders': {u'Content-Type': u'text/plain'}}}`\r\n\r\nIn the above examples, key1 exists, but key2 and key3 do not. S3 says all three are deleted, moto says key2 and key3 errored (but does not say what the errors are).", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1581/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1581/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1547", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1547/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1547/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1547/events", "html_url": "https://github.com/getmoto/moto/issues/1547", "id": 310928707, "node_id": "MDU6SXNzdWUzMTA5Mjg3MDc=", "number": 1547, "title": "Wrong IAM get_user_policy() response", "user": {"login": "senfbrot", "id": 38048190, "node_id": "MDQ6VXNlcjM4MDQ4MTkw", "avatar_url": "https://avatars.githubusercontent.com/u/38048190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/senfbrot", "html_url": "https://github.com/senfbrot", "followers_url": "https://api.github.com/users/senfbrot/followers", "following_url": "https://api.github.com/users/senfbrot/following{/other_user}", "gists_url": "https://api.github.com/users/senfbrot/gists{/gist_id}", "starred_url": "https://api.github.com/users/senfbrot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/senfbrot/subscriptions", "organizations_url": "https://api.github.com/users/senfbrot/orgs", "repos_url": "https://api.github.com/users/senfbrot/repos", "events_url": "https://api.github.com/users/senfbrot/events{/privacy}", "received_events_url": "https://api.github.com/users/senfbrot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 732738746, "node_id": "MDU6TGFiZWw3MzI3Mzg3NDY=", "url": "https://api.github.com/repos/getmoto/moto/labels/good%20first%20issue", "name": "good first issue", "color": "233f93", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-03T17:31:37Z", "updated_at": "2018-05-31T22:45:23Z", "closed_at": "2018-05-31T22:45:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "The result given back from get_user_policy() is wrong. 'PolicyDocument' contains the internal dict that is used by moto instead of the clean policy document.\r\n```\r\nimport json\r\nfrom moto import mock_iam\r\nimport boto3\r\n\r\niam = boto3.client('iam')\r\niam.create_user(UserName='testuser')\r\niam.put_user_policy(\r\n    UserName='testuser',\r\n    PolicyName='testpolicy',\r\n    PolicyDocument=json.dumps({'key': 'value'}))\r\nresult = iam.get_user_policy(\r\n    UserName='testuser', PolicyName='testpolicy')\r\nprint result\r\n```\r\n\r\nResults in:\r\n```\r\n{u'UserName': 'testuser', u'PolicyName': 'testpolicy', u'PolicyDocument': '\\n      {u\\'policy_document\\': u\\'{\"key\": \"value\"}\\', u\\'user_name\\': u\\'testuser\\', u\\'policy_name\\': u\\'testpolicy\\'}\\n      ', 'ResponseMetadata': {'RetryAttempts': 0, 'HTTPStatusCode': 200, 'RequestId': '7a62c49f-347e-4fc4-9331-6e8eEXAMPLE', 'HTTPHeaders': {u'Content-Type': u'text/plain', u'server': u'amazon.com'}}}\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1547/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1547/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1542", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1542/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1542/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1542/events", "html_url": "https://github.com/getmoto/moto/issues/1542", "id": 309110868, "node_id": "MDU6SXNzdWUzMDkxMTA4Njg=", "number": 1542, "title": "s3.download_file() fails on empty key", "user": {"login": "RonRothman", "id": 4672664, "node_id": "MDQ6VXNlcjQ2NzI2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4672664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RonRothman", "html_url": "https://github.com/RonRothman", "followers_url": "https://api.github.com/users/RonRothman/followers", "following_url": "https://api.github.com/users/RonRothman/following{/other_user}", "gists_url": "https://api.github.com/users/RonRothman/gists{/gist_id}", "starred_url": "https://api.github.com/users/RonRothman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RonRothman/subscriptions", "organizations_url": "https://api.github.com/users/RonRothman/orgs", "repos_url": "https://api.github.com/users/RonRothman/repos", "events_url": "https://api.github.com/users/RonRothman/events{/privacy}", "received_events_url": "https://api.github.com/users/RonRothman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-03-27T19:55:32Z", "updated_at": "2021-09-05T09:05:20Z", "closed_at": "2021-09-05T09:05:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When trying to download an empty (zero-length) key, `s3.download_file()` fails with \"ValueError: I/O operation on closed file\".  (This appears to be a duplicate of https://github.com/spulec/moto/issues/483, but that issue was closed so I'm not sure how to handle this report.)\r\n\r\nHere's a minimal example that demonstrates the failure:\r\n\r\n```\r\nimport boto3\r\nfrom moto import mock_s3\r\n\r\nmock_s3().start()\r\ns3 = boto3.client('s3')\r\ns3.create_bucket(Bucket='foo')\r\ns3.put_object(Bucket='foo', Key='hello/world.txt', Body='')  # write zero bytes\r\ns3.download_file('foo', 'hello/world.txt', '/tmp/foo')\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/tmp/t.py\", line 11, in <module>\r\n    s3.download_file('foo', 'hello/world.txt', '/tmp/foo')\r\n  File \"/usr/local/lib/python2.7/dist-packages/boto3/s3/inject.py\", line 130, in download_file\r\n    extra_args=ExtraArgs, callback=Callback)\r\n  File \"/usr/local/lib/python2.7/dist-packages/boto3/s3/transfer.py\", line 307, in download_file\r\n    future.result()\r\n  File \"/usr/local/lib/python2.7/dist-packages/s3transfer/futures.py\", line 73, in result\r\n    return self._coordinator.result()\r\n  File \"/usr/local/lib/python2.7/dist-packages/s3transfer/futures.py\", line 233, in result\r\n    raise self._exception\r\nValueError: I/O operation on closed file\r\n```\r\n\r\nWhereas this code does not fail: (the only change is that we're writing one byte to the key, instead of zero bytes)\r\n\r\n```\r\nimport boto3\r\nfrom moto import mock_s3\r\n\r\nmock_s3().start()\r\ns3 = boto3.client('s3')\r\ns3.create_bucket(Bucket='foo')\r\ns3.put_object(Bucket='foo', Key='hello/world.txt', Body='X')  # write one byte\r\ns3.download_file('foo', 'hello/world.txt', '/tmp/foo')\r\n```\r\n\r\n```\r\n> pip freeze | grep -E '(moto|boto3)'\r\nboto3==1.6.17\r\nmoto==1.3.1\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1542/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1542/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1513", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1513/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1513/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1513/events", "html_url": "https://github.com/getmoto/moto/issues/1513", "id": 305382852, "node_id": "MDU6SXNzdWUzMDUzODI4NTI=", "number": 1513, "title": "S3 multipart upload completion error", "user": {"login": "JonWhitehead", "id": 1563231, "node_id": "MDQ6VXNlcjE1NjMyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1563231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonWhitehead", "html_url": "https://github.com/JonWhitehead", "followers_url": "https://api.github.com/users/JonWhitehead/followers", "following_url": "https://api.github.com/users/JonWhitehead/following{/other_user}", "gists_url": "https://api.github.com/users/JonWhitehead/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonWhitehead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonWhitehead/subscriptions", "organizations_url": "https://api.github.com/users/JonWhitehead/orgs", "repos_url": "https://api.github.com/users/JonWhitehead/repos", "events_url": "https://api.github.com/users/JonWhitehead/events{/privacy}", "received_events_url": "https://api.github.com/users/JonWhitehead/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2018-03-15T01:18:43Z", "updated_at": "2022-08-20T11:04:37Z", "closed_at": "2022-08-20T11:04:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been trying to run the Multipart upload example against Moto from:\r\nhttps://docs.aws.amazon.com/AmazonS3/latest/dev/llJavaUploadFile.html\r\nUsing the class UploadObjectMPULowLevelAPI.\r\n\r\nWhen calling completeMultipartUpload, I get an error response:\r\n\r\ncom.amazonaws.services.s3.model.AmazonS3Exception: One or more of the specified parts could not be found. The part might not have been uploaded, or the specified entity tag might not have matched the part's entity tag. (Service: Amazon S3; Status Code: 400; Error Code: InvalidPart; Request ID: null; S3 Extended Request ID: null), S3 Extended Request ID: null\r\n\r\nI believe the error is being thrown from the below code:\r\n\r\ns3/models.py\r\n\r\n    def complete(self, body):\r\n        decode_hex = codecs.getdecoder(\"hex_codec\")\r\n        total = bytearray()\r\n        md5s = bytearray()\r\n\r\n        last = None\r\n        count = 0\r\n        for pn, etag in body:\r\n            part = self.parts.get(pn)\r\n            if part is None or part.etag != etag:\r\n                raise InvalidPart()\r\n                \r\n\r\nThe part.etag appears to contain a string with additional quotes e.g '\"7319d066c5e41e4c25f3fc3cef366adb\"' They are being removed on line 175, however I think they are causing the prior equality check on line 171 to fail.\r\n\r\nThe addtional quotes are introduced in FakeKey, line 97: return '\"{0}\"'.format(self._etag)\r\nhttps://github.com/spulec/moto/blob/master/moto/s3/models.py#L97\r\n\r\nRemoving the outer quotes appears to fix the issue e.g return \"{0}\".format(self._etag)\r\nI'm not sure whether this is an appropriate fix, it would be great it someone could take a look.\r\nThanks in advance.\r\nJon\r\n\r\n              ", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1513/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1513/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1427", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1427/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1427/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1427/events", "html_url": "https://github.com/getmoto/moto/issues/1427", "id": 287739089, "node_id": "MDU6SXNzdWUyODc3MzkwODk=", "number": 1427, "title": "EMR list_step responses don't contain start date in output", "user": {"login": "ashb", "id": 34150, "node_id": "MDQ6VXNlcjM0MTUw", "avatar_url": "https://avatars.githubusercontent.com/u/34150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashb", "html_url": "https://github.com/ashb", "followers_url": "https://api.github.com/users/ashb/followers", "following_url": "https://api.github.com/users/ashb/following{/other_user}", "gists_url": "https://api.github.com/users/ashb/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashb/subscriptions", "organizations_url": "https://api.github.com/users/ashb/orgs", "repos_url": "https://api.github.com/users/ashb/repos", "events_url": "https://api.github.com/users/ashb/events{/privacy}", "received_events_url": "https://api.github.com/users/ashb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-11T10:40:09Z", "updated_at": "2020-02-23T00:26:01Z", "closed_at": "2020-02-23T00:26:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a bug in the LIST_STEP_TEMPLATE and other EMR templates around the start date for steps: the conditional looks at `ready_datetime` but then outputs `start_datetime`.\r\n\r\nThis from https://github.com/spulec/moto/blob/896f040fca975865c1d441d90016446c72db3ed4/moto/emr/responses.py#L794-L796\r\n\r\n```\r\n            {% if step.ready_datetime is not none %}\r\n            <StartDateTime>{{ step.start_datetime.isoformat() }}</StartDateTime>\r\n            {% endif %}\r\n```\r\n\r\nNothing in the code looks at `step.ready_datetime` that I could see (use create, start, and end), so I'm guessing the conditional is wrong. This exists in a few other templates too.", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1427/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1427/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1371", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1371/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1371/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1371/events", "html_url": "https://github.com/getmoto/moto/issues/1371", "id": 278867630, "node_id": "MDU6SXNzdWUyNzg4Njc2MzA=", "number": 1371, "title": "no error or warning when creating s3 bucket that already exists in standalone server", "user": {"login": "dtenenba", "id": 2286826, "node_id": "MDQ6VXNlcjIyODY4MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2286826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtenenba", "html_url": "https://github.com/dtenenba", "followers_url": "https://api.github.com/users/dtenenba/followers", "following_url": "https://api.github.com/users/dtenenba/following{/other_user}", "gists_url": "https://api.github.com/users/dtenenba/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtenenba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtenenba/subscriptions", "organizations_url": "https://api.github.com/users/dtenenba/orgs", "repos_url": "https://api.github.com/users/dtenenba/repos", "events_url": "https://api.github.com/users/dtenenba/events{/privacy}", "received_events_url": "https://api.github.com/users/dtenenba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-04T04:29:29Z", "updated_at": "2021-09-01T15:30:02Z", "closed_at": "2021-09-01T15:30:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Python 3.6.3\r\nboto3==1.4.8\r\nmoto==1.1.25\r\n\r\nI know I should be using the decorators and not the standalone server, but this still seems like a bug. After starting the standalone server: \r\n\r\n```\r\nmoto_server s3\r\n```\r\n\r\nI run this code:\r\n\r\n```python\r\nimport boto3\r\nboto3.setup_default_session()\r\ns3 = boto3.client(service_name=\"s3\", region_name=\"us-west-2\", endpoint_url=\"http://localhost:5000\")\r\nresult = s3.create_bucket(Bucket='mybucket')\r\nprint(result)\r\nresult = s3.create_bucket(Bucket='mybucket')\r\nprint(result)\r\n```\r\nI expect that last line to return a stack trace with the message `BucketAlreadyOwnedByYou: An error occurred (BucketAlreadyOwnedByYou) when calling the CreateBucket operation: Your previous request to create the named bucket succeeded and you already own it.` That's what I get in actual S3 when trying to create a bucket I have already created.\r\n\r\nBut instead it succeeds without comment just like the first call to `create_bucket`.\r\n\r\nThis is what it outputs:\r\n\r\n```\r\n{'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'content-type': 'text/html; charset=utf-8', 'content-length': '174', 'server': 'Werkzeug/0.12.2 Python/3.6.3', 'date': 'Mon, 04 Dec 2017 04:24:04 GMT'}, 'RetryAttempts': 0}}\r\n{'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'content-type': 'text/html; charset=utf-8', 'content-length': '174', 'server': 'Werkzeug/0.12.2 Python/3.6.3', 'date': 'Mon, 04 Dec 2017 04:24:04 GMT'}, 'RetryAttempts': 0}}\r\n```\r\n\r\nIf I upload a file to the bucket after the first bucket creation, that file is still there after the second creation. So it's not overwriting the original bucket, it's just not telling me that bucket already exists.\r\n\r\nI'm trying to test code that relies on the correct behavior, so...\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1371/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1371/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1358", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1358/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1358/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1358/events", "html_url": "https://github.com/getmoto/moto/issues/1358", "id": 275998240, "node_id": "MDU6SXNzdWUyNzU5OTgyNDA=", "number": 1358, "title": "dynamodb update item with if_not_exists in update-expression", "user": {"login": "ysku", "id": 17197355, "node_id": "MDQ6VXNlcjE3MTk3MzU1", "avatar_url": "https://avatars.githubusercontent.com/u/17197355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysku", "html_url": "https://github.com/ysku", "followers_url": "https://api.github.com/users/ysku/followers", "following_url": "https://api.github.com/users/ysku/following{/other_user}", "gists_url": "https://api.github.com/users/ysku/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysku/subscriptions", "organizations_url": "https://api.github.com/users/ysku/orgs", "repos_url": "https://api.github.com/users/ysku/repos", "events_url": "https://api.github.com/users/ysku/events{/privacy}", "received_events_url": "https://api.github.com/users/ysku/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "terrycain", "id": 1986397, "node_id": "MDQ6VXNlcjE5ODYzOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1986397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrycain", "html_url": "https://github.com/terrycain", "followers_url": "https://api.github.com/users/terrycain/followers", "following_url": "https://api.github.com/users/terrycain/following{/other_user}", "gists_url": "https://api.github.com/users/terrycain/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrycain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrycain/subscriptions", "organizations_url": "https://api.github.com/users/terrycain/orgs", "repos_url": "https://api.github.com/users/terrycain/repos", "events_url": "https://api.github.com/users/terrycain/events{/privacy}", "received_events_url": "https://api.github.com/users/terrycain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "terrycain", "id": 1986397, "node_id": "MDQ6VXNlcjE5ODYzOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1986397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrycain", "html_url": "https://github.com/terrycain", "followers_url": "https://api.github.com/users/terrycain/followers", "following_url": "https://api.github.com/users/terrycain/following{/other_user}", "gists_url": "https://api.github.com/users/terrycain/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrycain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrycain/subscriptions", "organizations_url": "https://api.github.com/users/terrycain/orgs", "repos_url": "https://api.github.com/users/terrycain/repos", "events_url": "https://api.github.com/users/terrycain/events{/privacy}", "received_events_url": "https://api.github.com/users/terrycain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-11-22T09:30:45Z", "updated_at": "2018-03-07T03:46:12Z", "closed_at": "2018-03-07T03:46:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I did update_item with Update expression as `SET a = if_not_exists(a, :a)`, I got `ConditionalCheckFailedException`.\r\n\r\ncode to reproduce:\r\n```\r\nimport boto3\r\ndb = boto3.resource('dynamodb')\r\ntable = db.Table('xxx')\r\ntable.update_item(\r\n  Key={'id': 'xxx-1', 'timestamp': 123},\r\n  UpdateExpression='SET created_at = if_not_exists(created_at, :created_at)',\r\n  ExpressionAttributeValues={':created_at': 123}\r\n)\r\n```\r\n\r\nwhen executing the above code, get the below error.\r\n```\r\n# ConditionalCheckFailedException: An error occurred (ConditionalCheckFailedException) when calling the UpdateItem operation: \r\n```\r\n\r\nthe below is the expected response.\r\n```\r\n##### expected response #####\r\n{'ResponseMetadata': {'HTTPHeaders': {'connection': 'keep-alive',\r\n   'content-length': '2',\r\n   'content-type': 'application/x-amz-json-1.0',\r\n   'date': 'Wed, 22 Nov 2017 09:04:38 GMT',\r\n   'server': 'Server',\r\n   'x-amz-crc32': '2745614147',\r\n   'x-amzn-requestid': 'M7QP71DV81RKGTSPO4J2QU29M7VV4KQNSO5AEMVJF66Q9ASUAAJG'},\r\n  'HTTPStatusCode': 200,\r\n  'RequestId': 'M7QP71DV81RKGTSPO4J2QU29M7VV4KQNSO5AEMVJF66Q9ASUAAJG',\r\n  'RetryAttempts': 0}}\r\n```\r\n\r\nversion : `1.1.25`", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1358/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1358/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1342", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1342/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1342/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1342/events", "html_url": "https://github.com/getmoto/moto/issues/1342", "id": 274181686, "node_id": "MDU6SXNzdWUyNzQxODE2ODY=", "number": 1342, "title": "dynamodb update item with nested item issue", "user": {"login": "sunilkumarmohanty", "id": 5204261, "node_id": "MDQ6VXNlcjUyMDQyNjE=", "avatar_url": "https://avatars.githubusercontent.com/u/5204261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunilkumarmohanty", "html_url": "https://github.com/sunilkumarmohanty", "followers_url": "https://api.github.com/users/sunilkumarmohanty/followers", "following_url": "https://api.github.com/users/sunilkumarmohanty/following{/other_user}", "gists_url": "https://api.github.com/users/sunilkumarmohanty/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunilkumarmohanty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunilkumarmohanty/subscriptions", "organizations_url": "https://api.github.com/users/sunilkumarmohanty/orgs", "repos_url": "https://api.github.com/users/sunilkumarmohanty/repos", "events_url": "https://api.github.com/users/sunilkumarmohanty/events{/privacy}", "received_events_url": "https://api.github.com/users/sunilkumarmohanty/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "terrycain", "id": 1986397, "node_id": "MDQ6VXNlcjE5ODYzOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1986397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrycain", "html_url": "https://github.com/terrycain", "followers_url": "https://api.github.com/users/terrycain/followers", "following_url": "https://api.github.com/users/terrycain/following{/other_user}", "gists_url": "https://api.github.com/users/terrycain/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrycain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrycain/subscriptions", "organizations_url": "https://api.github.com/users/terrycain/orgs", "repos_url": "https://api.github.com/users/terrycain/repos", "events_url": "https://api.github.com/users/terrycain/events{/privacy}", "received_events_url": "https://api.github.com/users/terrycain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "terrycain", "id": 1986397, "node_id": "MDQ6VXNlcjE5ODYzOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1986397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrycain", "html_url": "https://github.com/terrycain", "followers_url": "https://api.github.com/users/terrycain/followers", "following_url": "https://api.github.com/users/terrycain/following{/other_user}", "gists_url": "https://api.github.com/users/terrycain/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrycain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrycain/subscriptions", "organizations_url": "https://api.github.com/users/terrycain/orgs", "repos_url": "https://api.github.com/users/terrycain/repos", "events_url": "https://api.github.com/users/terrycain/events{/privacy}", "received_events_url": "https://api.github.com/users/terrycain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2017-11-15T14:46:48Z", "updated_at": "2017-11-20T09:08:16Z", "closed_at": "2017-11-17T08:50:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWhen I update_item with Update expression as \r\nSET #name1.#name2 = :value'\r\nwhere name1 is a map\r\n\r\nWhen I scan and read the item, I get the result as\r\n'Name1.Name2':\r\nthe item is saved as #name1.#name2 instead of a map structure. Is it a known issue", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1342/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1342/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1323", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1323/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1323/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1323/events", "html_url": "https://github.com/getmoto/moto/issues/1323", "id": 271568292, "node_id": "MDU6SXNzdWUyNzE1NjgyOTI=", "number": 1323, "title": "SNS.create_topic should be indempodent", "user": {"login": "adamgilman", "id": 172888, "node_id": "MDQ6VXNlcjE3Mjg4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/172888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamgilman", "html_url": "https://github.com/adamgilman", "followers_url": "https://api.github.com/users/adamgilman/followers", "following_url": "https://api.github.com/users/adamgilman/following{/other_user}", "gists_url": "https://api.github.com/users/adamgilman/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamgilman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamgilman/subscriptions", "organizations_url": "https://api.github.com/users/adamgilman/orgs", "repos_url": "https://api.github.com/users/adamgilman/repos", "events_url": "https://api.github.com/users/adamgilman/events{/privacy}", "received_events_url": "https://api.github.com/users/adamgilman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "terrycain", "id": 1986397, "node_id": "MDQ6VXNlcjE5ODYzOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1986397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrycain", "html_url": "https://github.com/terrycain", "followers_url": "https://api.github.com/users/terrycain/followers", "following_url": "https://api.github.com/users/terrycain/following{/other_user}", "gists_url": "https://api.github.com/users/terrycain/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrycain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrycain/subscriptions", "organizations_url": "https://api.github.com/users/terrycain/orgs", "repos_url": "https://api.github.com/users/terrycain/repos", "events_url": "https://api.github.com/users/terrycain/events{/privacy}", "received_events_url": "https://api.github.com/users/terrycain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "terrycain", "id": 1986397, "node_id": "MDQ6VXNlcjE5ODYzOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1986397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrycain", "html_url": "https://github.com/terrycain", "followers_url": "https://api.github.com/users/terrycain/followers", "following_url": "https://api.github.com/users/terrycain/following{/other_user}", "gists_url": "https://api.github.com/users/terrycain/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrycain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrycain/subscriptions", "organizations_url": "https://api.github.com/users/terrycain/orgs", "repos_url": "https://api.github.com/users/terrycain/repos", "events_url": "https://api.github.com/users/terrycain/events{/privacy}", "received_events_url": "https://api.github.com/users/terrycain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-11-06T18:04:55Z", "updated_at": "2017-11-06T19:06:55Z", "closed_at": "2017-11-06T19:06:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Per the [AWS SNS documentation](http://docs.aws.amazon.com/sns/latest/api/API_CreateTopic.html) the CreateTopic action should be idempotent.\r\n\r\nExpected:\r\n- create_topic should not overwrite an existing topic which already exists\r\n\r\nResults:\r\n- topic is overwritten without checking if topic already exists\r\n- https://github.com/spulec/moto/blob/master/moto/sns/models.py#L197\r\n\r\nFailing example test code:\r\n```python\r\nimport boto3, os, logging, moto\r\nfrom unittest import TestCase\r\n\r\n@moto.mock_sns\r\n@moto.mock_sqs\r\nclass MotoSNSTopicsShouldBeIndempodent(TestCase):\r\n    '''\r\n    Reproduction steps:\r\n        1) SNS Topic is created\r\n        2) SQS queue is subscribed to SNS Topic\r\n        3) create_topic() is called\r\n        4) SQS queue is not subscribed to SNS Topic as it should\r\n    '''\r\n    def setUp(self):\r\n        logging.getLogger('boto3').setLevel(logging.CRITICAL)\r\n        logging.getLogger('botocore').setLevel(logging.CRITICAL)\r\n        logging.getLogger('nose').setLevel(logging.CRITICAL)\r\n\r\n        self.queueName = \"ReceivingQueue\"\r\n        self.topicName = \"PublishingTopic\"\r\n        self.sqs_client = boto3.client(\"sqs\")\r\n        self.sns_client = boto3.client(\"sns\")\r\n\r\n        # 1) SNS Topic is created\r\n        self.sns_topic_arn = self.sns_client.create_topic(Name=self.topicName)['TopicArn']\r\n        self.sqs_queue = self.sqs_client.create_queue(QueueName=self.queueName)['QueueUrl']\r\n\r\n\r\n        sqs_queue_attr = self.sqs_client.get_queue_attributes(\r\n            QueueUrl = self.sqs_queue,\r\n            AttributeNames = ['QueueArn']\r\n        )\r\n\r\n        self.sqs_queue_arn = sqs_queue_attr['Attributes']['QueueArn']\r\n        # 2) SQS queue is subscribed to SNS Topic\r\n        subscribe = self.sns_client.subscribe(\r\n            TopicArn = self.sns_topic_arn,\r\n            Protocol = 'sqs',\r\n            Endpoint = self.sqs_queue_arn\r\n        )\r\n\r\n    def test_publish_message_create_topic_publish_message(self):\r\n        self.sns_client.publish(TopicArn=self.sns_topic_arn, Message=\"message one\")\r\n        self.assertEqual(1, self._get_number_of_messages() )\r\n        #one message published; one received by sqs\r\n        #3) create_topic() is called\r\n        self.sns_client.create_topic(Name=self.topicName)\r\n        self.sns_client.publish(TopicArn=self.sns_topic_arn, Message=\"message two\")\r\n        self.assertEqual(2, self._get_number_of_messages() )\r\n        #4) SQS queue is not subscribed to SNS Topic as it should\r\n        #should return 2 but, 1 is returned\r\n\r\n    def _get_number_of_messages(self):\r\n        return int(self.sqs_client.get_queue_attributes(\r\n            QueueUrl = self.sqs_queue,\r\n            AttributeNames = ['ApproximateNumberOfMessages']\r\n        )['Attributes']['ApproximateNumberOfMessages'])\r\n```\r\n\r\nI'm working on a PR now", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1323/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1323/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1113", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1113/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1113/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1113/events", "html_url": "https://github.com/getmoto/moto/issues/1113", "id": 255728562, "node_id": "MDU6SXNzdWUyNTU3Mjg1NjI=", "number": 1113, "title": "request.body should be request.data?", "user": {"login": "kefo", "id": 613377, "node_id": "MDQ6VXNlcjYxMzM3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/613377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kefo", "html_url": "https://github.com/kefo", "followers_url": "https://api.github.com/users/kefo/followers", "following_url": "https://api.github.com/users/kefo/following{/other_user}", "gists_url": "https://api.github.com/users/kefo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kefo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kefo/subscriptions", "organizations_url": "https://api.github.com/users/kefo/orgs", "repos_url": "https://api.github.com/users/kefo/repos", "events_url": "https://api.github.com/users/kefo/events{/privacy}", "received_events_url": "https://api.github.com/users/kefo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-06T20:15:23Z", "updated_at": "2018-03-22T05:13:30Z", "closed_at": "2018-03-22T05:13:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using `moto_server glacier` (or trying to) and repeatedly saw the following stack trace from `moto_server` whenever I tried to create a glacier archive:\r\n\r\n```\r\n127.0.0.1 - - [06/Sep/2017 14:40:32] \"POST /kefo/vaults/testvault/archives HTTP/1.1\" 500 -\r\nError on request:\r\nTraceback (most recent call last):\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/werkzeug/serving.py\", line 209, in run_wsgi\r\n    execute(self.server.app)\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/werkzeug/serving.py\", line 197, in execute\r\n    application_iter = app(environ, start_response)\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/moto/server.py\", line 92, in __call__\r\n    return backend_app(environ, start_response)\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/flask/app.py\", line 1997, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/flask/app.py\", line 1985, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/flask/app.py\", line 1540, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/flask/_compat.py\", line 33, in reraise\r\n    raise value\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/flask/app.py\", line 1982, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/flask/app.py\", line 1614, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/flask/app.py\", line 1517, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/flask/_compat.py\", line 33, in reraise\r\n    raise value\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/flask/app.py\", line 1612, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/flask/app.py\", line 1598, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/moto/core/utils.py\", line 131, in __call__\r\n    result = self.callback(request, request.url, {})\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/moto/glacier/responses.py\", line 71, in vault_archive_response\r\n    return response_instance._vault_archive_response(request, full_url, headers)\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/moto/glacier/responses.py\", line 75, in _vault_archive_response\r\n    body = request.body\r\n  File \"/Users/kford1/Work/motoenv/lib/python3.5/site-packages/werkzeug/local.py\", line 347, in __getattr__\r\n    return getattr(self._get_current_object(), name)\r\nAttributeError: 'Request' object has no attribute 'body'\r\n```\r\n\r\nAfter altering the request 'body' on the client side, I finally started to look deeper at the `moto` code. This line, which is causing the error above, calls `request.body`: \r\n\r\nhttps://github.com/spulec/moto/blob/master/moto/glacier/responses.py#L75\r\n\r\nI changed it to 'request.data' and it worked - I got the response I expected.\r\n\r\nA [Flask request object](http://flask.pocoo.org/docs/0.12/api/#incoming-request-data) does not have a 'body'.\r\n\r\nShould that line read \"request.data\" and not \"request.body\"?  Apologies is this is a naive question and I am missing something obvious.  If not, let me know and I'll generate a pull request.\r\n\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1113/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1113/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1071", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1071/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1071/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1071/events", "html_url": "https://github.com/getmoto/moto/issues/1071", "id": 251596409, "node_id": "MDU6SXNzdWUyNTE1OTY0MDk=", "number": 1071, "title": "dynamodb2.update_item & delete_item ignore ConditionExpression for items that don't exists", "user": {"login": "abadyan-vonage", "id": 17905032, "node_id": "MDQ6VXNlcjE3OTA1MDMy", "avatar_url": "https://avatars.githubusercontent.com/u/17905032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abadyan-vonage", "html_url": "https://github.com/abadyan-vonage", "followers_url": "https://api.github.com/users/abadyan-vonage/followers", "following_url": "https://api.github.com/users/abadyan-vonage/following{/other_user}", "gists_url": "https://api.github.com/users/abadyan-vonage/gists{/gist_id}", "starred_url": "https://api.github.com/users/abadyan-vonage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abadyan-vonage/subscriptions", "organizations_url": "https://api.github.com/users/abadyan-vonage/orgs", "repos_url": "https://api.github.com/users/abadyan-vonage/repos", "events_url": "https://api.github.com/users/abadyan-vonage/events{/privacy}", "received_events_url": "https://api.github.com/users/abadyan-vonage/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-21T09:14:24Z", "updated_at": "2020-03-29T11:22:50Z", "closed_at": "2020-03-29T11:22:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using a table with 1 hash key named id, trying to make the following update_item which should only happen when the item exists:\r\n\r\n`table.update_item(Key={\"id\": msg_id},\r\n                                                 UpdateExpression= \"set #text = :updated_text, #lastModified = :lastModified, #status= :status\",\r\n                                                 ConditionExpression=\"id = :msg_id\",\r\n                                                 ExpressionAttributeNames={\r\n                                                     \"#text\": \"text\",\r\n                                                     \"#lastModified\": \"lastModified\",\r\n                                                     \"#status\": \"status\"\r\n                                                 },\r\n                                                 ExpressionAttributeValues={\r\n                                                     \":msg_id\": msg_id,\r\n                                                     \":updated_text\": updated_text,\r\n                                                     \":lastModified\":dt,\r\n                                                     \":status\": status\r\n                                                 })`\r\n\r\nThis works with the real dynamodb server (fails when item doesn't exist) but with moto the update always happens. It doesn't even matter what I put in ConditionExpression, the update always go through.\r\n\r\nI'm using moto 1.0.1 (using pip), working with the @mock_dynamodb2 decorator using boto3 1.4.6, boto 2.48.0, botocore 1.6.3.\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1071/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1071/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1054", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1054/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1054/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1054/events", "html_url": "https://github.com/getmoto/moto/issues/1054", "id": 250426127, "node_id": "MDU6SXNzdWUyNTA0MjYxMjc=", "number": 1054, "title": "dynamodb2.put_item exception clarity on missing HASH/RANGE keys on Input body", "user": {"login": "martysweet", "id": 20517404, "node_id": "MDQ6VXNlcjIwNTE3NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/20517404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martysweet", "html_url": "https://github.com/martysweet", "followers_url": "https://api.github.com/users/martysweet/followers", "following_url": "https://api.github.com/users/martysweet/following{/other_user}", "gists_url": "https://api.github.com/users/martysweet/gists{/gist_id}", "starred_url": "https://api.github.com/users/martysweet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martysweet/subscriptions", "organizations_url": "https://api.github.com/users/martysweet/orgs", "repos_url": "https://api.github.com/users/martysweet/repos", "events_url": "https://api.github.com/users/martysweet/events{/privacy}", "received_events_url": "https://api.github.com/users/martysweet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-15T20:20:08Z", "updated_at": "2020-03-15T21:42:00Z", "closed_at": "2020-03-15T21:42:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "The errors thrown from dynamodb2.put_item can be misleading due to the unclear exception catch at https://github.com/spulec/moto/blob/f6fc9c7d54307f77d0cbbf698bab0c3be55ec153/moto/dynamodb2/responses.py#L207-L212, which catches most things within the put_item function call.\r\n\r\nThis issue covers when a HASH (or RANGE) key is not present in the input Item body which someone wishes to persist to DynamoDB, as shown below. The ideal scenario is a clearer Exception (ideally what would be thrown by boto3) to guide the developer to a resolution quickly.\r\n\r\n## Producing the issue\r\n```python\r\nimport os\r\nimport boto3\r\nfrom moto import mock_dynamodb2\r\n\r\nos.environ[\"AWS_DEFAULT_REGION\"] = \"eu-west-1\"\r\n\r\nclass Tests:\r\n\r\n    @mock_dynamodb2\r\n    def test_one(self, client):\r\n\r\n        dynamodb = boto3.resource('dynamodb')\r\n        table = dynamodb.Table(\"test\")\r\n\r\n        dynamodb.create_table(\r\n            AttributeDefinitions=[\r\n                {\r\n                    'AttributeName': 'structure_id',\r\n                    'AttributeType': 'S'\r\n                },\r\n            ],\r\n            TableName='test',\r\n            KeySchema=[\r\n                {\r\n                    'AttributeName': 'structure_id',\r\n                    'KeyType': 'HASH'\r\n                },\r\n            ],\r\n            ProvisionedThroughput={\r\n                'ReadCapacityUnits': 123,\r\n                'WriteCapacityUnits': 123\r\n            }\r\n        )\r\n\r\n        # Put an item missing the hash key\r\n        table.put_item(Item={\r\n            'a_terribly_misguided_id_attribute': 'abcdef'\r\n        })\r\n```\r\n## Expected Output\r\nAn Exception such as `An error occurred (ValidationException) when calling the PutItem operation: One or more parameter values were invalid: Missing the key structure_id in the item`\r\n\r\n## Actual Output\r\nThe Exception ` An error occurred (ConditionalCheckFailedException) when calling the PutItem operation`\r\n\r\n```\r\nbroken_test.py F\r\n\r\n==================================================================== FAILURES =====================================================================\r\n_________________________________________________________________ Tests.test_one __________________________________________________________________\r\n\r\nself = <broken_test.Tests object at 0x7f8f7fb9b8d0>, client = <FlaskClient <Flask 'app'>>\r\n\r\n    @mock_dynamodb2\r\n    def test_one(self, client):\r\n    \r\n        dynamodb = boto3.resource('dynamodb')\r\n        table = dynamodb.Table(\"test\")\r\n    \r\n        dynamodb.create_table(\r\n            AttributeDefinitions=[\r\n                {\r\n                    'AttributeName': 'structure_id',\r\n                    'AttributeType': 'S'\r\n                },\r\n            ],\r\n            TableName='test',\r\n            KeySchema=[\r\n                {\r\n                    'AttributeName': 'structure_id',\r\n                    'KeyType': 'HASH'\r\n                },\r\n            ],\r\n            ProvisionedThroughput={\r\n                'ReadCapacityUnits': 123,\r\n                'WriteCapacityUnits': 123\r\n            }\r\n        )\r\n    \r\n        # Put an item missing the hash key\r\n        table.put_item(Item={\r\n>           'a_terribly_misguided_id_attribute': 'abcdef'\r\n        })\r\n\r\nbroken_test.py:37: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/home/marty/development/redacted/virtualenv/lib/python3.6/site-packages/boto3/resources/factory.py:520: in do_action\r\n    response = action(self, *args, **kwargs)\r\n/home/marty/development/redacted/virtualenv/lib/python3.6/site-packages/boto3/resources/action.py:83: in __call__\r\n    response = getattr(parent.meta.client, operation_name)(**params)\r\n/home/marty/development/redacted/virtualenv/lib/python3.6/site-packages/botocore/client.py:312: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <botocore.client.DynamoDB object at 0x7f8f7fae2748>, operation_name = 'PutItem'\r\napi_params = {'Item': {'a_terribly_misguided_id_attribute': 'abcdef'}, 'TableName': 'test'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context)\r\n    \r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{endpoint_prefix}.{operation_name}'.format(\r\n                endpoint_prefix=self._service_model.endpoint_prefix,\r\n                operation_name=operation_name),\r\n            model=operation_model, params=request_dict,\r\n            request_signer=self._request_signer, context=request_context)\r\n    \r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            http, parsed_response = self._endpoint.make_request(\r\n                operation_model, request_dict)\r\n    \r\n        self.meta.events.emit(\r\n            'after-call.{endpoint_prefix}.{operation_name}'.format(\r\n                endpoint_prefix=self._service_model.endpoint_prefix,\r\n                operation_name=operation_name),\r\n            http_response=http, parsed=parsed_response,\r\n            model=operation_model, context=request_context\r\n        )\r\n    \r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.errorfactory.ConditionalCheckFailedException: An error occurred (ConditionalCheckFailedException) when calling the PutItem operation:\r\n\r\n/home/marty/development/redacted/virtualenv/lib/python3.6/site-packages/botocore/client.py:601: ConditionalCheckFailedException\r\n============================================================ 1 failed in 0.34 seconds =============================================================\r\n```\r\n\r\n## Suggested changes\r\nAt lines https://github.com/spulec/moto/blob/f6fc9c7d54307f77d0cbbf698bab0c3be55ec153/moto/dynamodb2/models.py#L263-L265 perform error checking to ensure the key specified by `self.hash_key_attr` and `self.range_key_attr` are within the `item_attrs` dict before accessing them. Raise a validation exception if they are not present, catching this at https://github.com/spulec/moto/blob/f6fc9c7d54307f77d0cbbf698bab0c3be55ec153/moto/dynamodb2/responses.py#L207-L212 and raising the appropriate AWS error with debug information.\r\n\r\nIf you like this idea, I'm happy to do a PR :+1: \r\n\r\n## Moto Version\r\n1.0.1\r\n\r\n## Other stuff\r\nThis bug report is related to #873 where the HASH key was not defined properly, resulting in a misleading 'ConditionalException', I believe this was a similar issue, but in that case `self.hash_key_attr` was undefined/None and thus a ValueError was thrown similarly.\r\nhttps://github.com/spulec/moto/issues/873", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1054/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1054/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1041", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1041/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1041/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1041/events", "html_url": "https://github.com/getmoto/moto/issues/1041", "id": 249416556, "node_id": "MDU6SXNzdWUyNDk0MTY1NTY=", "number": 1041, "title": "boto3 sns publish to topic seems to not work as intended", "user": {"login": "nfons", "id": 882236, "node_id": "MDQ6VXNlcjg4MjIzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/882236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nfons", "html_url": "https://github.com/nfons", "followers_url": "https://api.github.com/users/nfons/followers", "following_url": "https://api.github.com/users/nfons/following{/other_user}", "gists_url": "https://api.github.com/users/nfons/gists{/gist_id}", "starred_url": "https://api.github.com/users/nfons/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nfons/subscriptions", "organizations_url": "https://api.github.com/users/nfons/orgs", "repos_url": "https://api.github.com/users/nfons/repos", "events_url": "https://api.github.com/users/nfons/events{/privacy}", "received_events_url": "https://api.github.com/users/nfons/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-10T17:14:07Z", "updated_at": "2021-09-01T11:09:51Z", "closed_at": "2021-09-01T11:09:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a hard coded SNS topic we send data to, and need to unit test that functionality (in essence, when an error occurs we send an sns notification)\r\n\r\nlooking at the code here:\r\nhttps://github.com/spulec/moto/blob/master/tests/test_sns/test_publishing_boto3.py#L15-L27\r\nfound from reply in this issue: https://github.com/spulec/moto/issues/979\r\n\r\n\r\nnow i see in code the topic_arn is gotten on the fly....is there anyway to test via hard coding...since our functionality is not creating the topic, but publishing to an existing topic.\r\n\r\n\r\nmy code looks a bit like this:\r\n```\r\n    def test_calls_sns_on_bad_type(self):\r\n        moto = mock_sns()\r\n        moto.start()\r\n        conn = boto3.client('sns', region_name='us-east-1')\r\n        conn.create_topic(Name='TOPIC-STUFF')\r\n        cftClass = cftTemplateParser(CFT, 'path/to/BAD_FILE')\r\n        fileType = cftClass.getFileType()\r\n        self.assertRaises('File type is incorrect')\r\n        moto.stop()\r\n```\r\n\r\ninside my actual code, the boto3 publish is hard coded:\r\n`snsClient.publish('hard coded topic arn] :TOPIC-STUFF', message='blajh', Subject=\"subject\")`\r\n\r\n\r\nin console i am getting error:\r\nraise error_class(parsed_response, operation_name)\r\nbotocore.errorfactory.NotFoundException: An error occurred (NotFound) when calling the Publish operation: Endpoint with [hard coded topic arn] :TOPIC-STUFF not found\r\n\r\nwhat would the best way to test these functionality?", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1041/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1041/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/1026", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/1026/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/1026/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/1026/events", "html_url": "https://github.com/getmoto/moto/issues/1026", "id": 246006887, "node_id": "MDU6SXNzdWUyNDYwMDY4ODc=", "number": 1026, "title": "@mock_s3 permanently breaks requests library", "user": {"login": "samfrances", "id": 2003369, "node_id": "MDQ6VXNlcjIwMDMzNjk=", "avatar_url": "https://avatars.githubusercontent.com/u/2003369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samfrances", "html_url": "https://github.com/samfrances", "followers_url": "https://api.github.com/users/samfrances/followers", "following_url": "https://api.github.com/users/samfrances/following{/other_user}", "gists_url": "https://api.github.com/users/samfrances/gists{/gist_id}", "starred_url": "https://api.github.com/users/samfrances/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samfrances/subscriptions", "organizations_url": "https://api.github.com/users/samfrances/orgs", "repos_url": "https://api.github.com/users/samfrances/repos", "events_url": "https://api.github.com/users/samfrances/events{/privacy}", "received_events_url": "https://api.github.com/users/samfrances/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "terrycain", "id": 1986397, "node_id": "MDQ6VXNlcjE5ODYzOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1986397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrycain", "html_url": "https://github.com/terrycain", "followers_url": "https://api.github.com/users/terrycain/followers", "following_url": "https://api.github.com/users/terrycain/following{/other_user}", "gists_url": "https://api.github.com/users/terrycain/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrycain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrycain/subscriptions", "organizations_url": "https://api.github.com/users/terrycain/orgs", "repos_url": "https://api.github.com/users/terrycain/repos", "events_url": "https://api.github.com/users/terrycain/events{/privacy}", "received_events_url": "https://api.github.com/users/terrycain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "terrycain", "id": 1986397, "node_id": "MDQ6VXNlcjE5ODYzOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1986397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrycain", "html_url": "https://github.com/terrycain", "followers_url": "https://api.github.com/users/terrycain/followers", "following_url": "https://api.github.com/users/terrycain/following{/other_user}", "gists_url": "https://api.github.com/users/terrycain/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrycain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrycain/subscriptions", "organizations_url": "https://api.github.com/users/terrycain/orgs", "repos_url": "https://api.github.com/users/terrycain/repos", "events_url": "https://api.github.com/users/terrycain/events{/privacy}", "received_events_url": "https://api.github.com/users/terrycain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 31, "created_at": "2017-07-27T11:14:55Z", "updated_at": "2021-06-12T21:03:09Z", "closed_at": "2018-04-06T12:49:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "At first look, I thought this was a duplicate of https://github.com/spulec/moto/issues/303.\r\n\r\nHowever, on further inspection, the problem is only present with the `mock_s3` decorator, not with the `mock_s3_deprecated` decorator. Therefore, if my inspection of the code base is right, this looks like a problem related to the `responses` library or the use of it in `moto`, whereas https://github.com/spulec/moto/issues/303 concerned the HTTPretty library.\r\n\r\nAnyway, the meat of the issue:\r\n\r\nAfter using `@mock_s3` in django tests, other test classes that use `LiveserverTestCase` and the `requests` library stop working, and fail with the error: ` ConnectionError: Connection refused`.\r\n\r\nThis is not an inherent problem with `responses` itself, as the following test demonstrates:\r\n\r\n```\r\npython -c \"from moto.packages.responses.responses import mock; import requests; mock.start(); mock.stop(); print requests.get('http://google.com')\"\r\n<Response [200]>\r\n```\r\n\r\nHowever, if `mock.stop()` is omitted, you see the same error as in the django test:\r\n\r\n```\r\npython -c \"from moto.packages.responses.responses import mock; import requests; mock.start(); print requests.get('http://google.com')\"\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/home/REDACTED/env/local/lib/python2.7/site-packages/requests/api.py\", line 72, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \"/home/REDACTED/env/local/lib/python2.7/site-packages/requests/api.py\", line 58, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \"/home/REDACTED/env/local/lib/python2.7/site-packages/requests/sessions.py\", line 502, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/REDACTED/env/local/lib/python2.7/site-packages/requests/sessions.py\", line 612, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/REDACTED/env/local/lib/python2.7/site-packages/moto/packages/responses/responses.py\", line 302, in unbound_on_send\r\n    return self._on_request(adapter, request, *a, **kwargs)\r\n  File \"/home/REDACTED/env/local/lib/python2.7/site-packages/moto/packages/responses/responses.py\", line 244, in _on_request\r\n    raise response\r\nrequests.exceptions.ConnectionError: Connection refused: GET http://google.com/\r\n```\r\nThis suggests to me that, one way or another, moto is failing to call `mock.stop()`.\r\n\r\nmoto version 1.0.1\r\nDjango version 1.11.3", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/1026/reactions", "total_count": 18, "+1": 18, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/1026/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/988", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/988/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/988/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/988/events", "html_url": "https://github.com/getmoto/moto/issues/988", "id": 237543346, "node_id": "MDU6SXNzdWUyMzc1NDMzNDY=", "number": 988, "title": "get_items errors with mock dynamodb2 decorator for moto", "user": {"login": "RAMESHGP", "id": 29602978, "node_id": "MDQ6VXNlcjI5NjAyOTc4", "avatar_url": "https://avatars.githubusercontent.com/u/29602978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RAMESHGP", "html_url": "https://github.com/RAMESHGP", "followers_url": "https://api.github.com/users/RAMESHGP/followers", "following_url": "https://api.github.com/users/RAMESHGP/following{/other_user}", "gists_url": "https://api.github.com/users/RAMESHGP/gists{/gist_id}", "starred_url": "https://api.github.com/users/RAMESHGP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RAMESHGP/subscriptions", "organizations_url": "https://api.github.com/users/RAMESHGP/orgs", "repos_url": "https://api.github.com/users/RAMESHGP/repos", "events_url": "https://api.github.com/users/RAMESHGP/events{/privacy}", "received_events_url": "https://api.github.com/users/RAMESHGP/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-06-21T13:56:29Z", "updated_at": "2020-12-07T10:00:24Z", "closed_at": "2018-05-30T02:55:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nBut when I am trying to get the table items with the help of get_item(). As it throws\r\n**botocore.exceptions.ClientError: An error occurred (ValidationException)**\r\nPlease help to get out of this issue\r\n\r\nBelow packages which i have imported in my script\r\nimport os, json, sys, boto3, time\r\nfrom boto3.session import Session\r\nfrom moto import mock_dynamodb2\r\nfrom boto3.dynamodb.conditions import Key, Attr\r\n\r\n**#####Code Snippet**\r\n\r\n        # Print out some data about the table.\r\n        filters = event_data['filters']\r\n        key = {'deviceID': filters['device_id']}\r\n        print (key)\r\n        try:\r\n            response = table.get_item(Key=key)\r\n            print(\"this is response\",response) \r\n        except Exception as e:\r\n            logger.exception(e)\r\n(Pdb) key\r\n{'deviceID': '2304'}\r\n\r\n(Pdb) response = table.get_item(Key=key)\r\nINFO:boto3.resources.action:Calling dynamodb:get_item with {'TableName': 'intelli_temp_mon_assets_dev', 'Key': {'deviceID': '2304'}}\r\n***** botocore.exceptions.ClientError: An error occurred (ValidationException) when calling the GetItem operation:**\r\n\r\n**####Complete Code below:**\r\n\r\nimport os, json, sys, boto3, time\r\nfrom boto3.session import Session\r\nimport logging\r\nfrom moto import mock_dynamodb2\r\nfrom MyDynamodbClass import *\r\n\r\nfrom boto3.dynamodb.conditions import Key, Attr\r\nlogging.basicConfig()\r\nlogger = logging.getLogger()\r\nlogger.setLevel(logging.INFO)\r\n\r\nlogger.info(\"SUCCESS: Connection to DATABASE and SNS instance succeeded\")\r\n\r\nclass Post_Lambda(object):\r\n#Test Class. All your test functonality\r\ndef main():\r\nfileDir = os.path.dirname(os.path.realpath('file'))\r\nevent_file = os.path.join(fileDir, 'mock_event.json')\r\nwith open(event_file) as json_data:\r\nevent_data = json.load(json_data)\r\n\r\n    with mock_dynamodb2():\r\n        session = Session(aws_access_key_id='<YOUR ACCESS KEY ID>',\r\n                          aws_secret_access_key='<YOUR SECRET KEY>',\r\n                          region_name= 'us-east-1')\r\n        # Get the service resource\r\n        dynamodb = session.resource('dynamodb')\r\n\r\n        # Create the DynamoDB table.\r\n        table = dynamodb.create_table(\r\n            TableName='intelli_temp_mon_assets_dev',\r\n            KeySchema=[\r\n                {\r\n                    'AttributeName': 'device_id',\r\n                    'KeyType': 'HASH'\r\n                }\r\n            ],\r\n            AttributeDefinitions=[\r\n                {\r\n                    'AttributeName': 'device_id',\r\n                    'AttributeType': 'S'\r\n                }\r\n            ],\r\n            ProvisionedThroughput={\r\n                'ReadCapacityUnits': 5,\r\n                'WriteCapacityUnits': 5\r\n            }\r\n        )\r\n        # Wait until the table exists.\r\n        table.meta.client.get_waiter('table_exists').wait(TableName='intelli_temp_mon_assets_dev')\r\n        table.put_item(\r\n               Item={\r\n                    'device_id': '2004',\r\n                    'alarm_level': 'low',\r\n                    'alarms': '100',\r\n                    'category': 'Fridge',\r\n                    'device-status': 'false',\r\n                    'current_temp': '28.50',\r\n                    \"measure_unit\":  'C',\r\n                    \"siteID\": '712',\r\n                    \"locationID\": 'location2',\r\n                    \"model_type\": 'Eskimo1890'\r\n                }\r\n        )\r\n        table.put_item(\r\n            Item={\r\n                    'device_id': '2304',\r\n                    'alarm_level': 'high',\r\n                    'alarms': '200',\r\n                    'category': 'Fridge',\r\n                    'device-status': 'true', \r\n                    'current_temp': '38.50',\r\n                    \"measure_unit\":  'C',\r\n                    \"siteID\": '863',\r\n                    \"locationID\": 'location1',\r\n                    \"model_type\": 'Eskimo1990'\r\n                }\r\n        )\r\n        # Print out some data about the table.\r\n        filters = event_data['filters']\r\n        key = {'deviceID': filters['device_id']}\r\n        print (key)\r\n        try:\r\n            response = table.get_item(Key=key)\r\n            print(\"this is response\",response) \r\n        except Exception as e:\r\n            logger.exception(e)\r\n\r\n        logger.info(\"Your code logic\")\r\n        data={}\r\n        import pdb; pdb.set_trace()\r\n        print(table.item_count)\r\n        # foo = Feature.myfun()\r\n        foo = lambda_handler(None, None)\r\n        print(\"You have to assert this response %s \" %(foo))\r\nif __name__ == '__main__':\r\n    main()\r\n\r\n\r\nFails with Stack trace\r\n\r\n$ python mock_device_details.py\r\nINFO:root:SUCCESS: Connection to DATABASE and SNS instance succeeded\r\nINFO:boto3.resources.action:Calling dynamodb:create_table with {'TableName': 'intelli_temp_mon_assets_dev', 'AttributeDefinitions': [{'AttributeName': 'device_id', 'AttributeType': 'S'}], 'KeySchema': [{'AttributeName': 'device_id', 'KeyType': 'HASH'}], 'ProvisionedThroughput': {'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5}}\r\nINFO:boto3.resources.action:Calling dynamodb:put_item with {'TableName': 'intelli_temp_mon_assets_dev', 'Item': {'locationID': 'location2', 'alarm_level': 'low', 'alarms': '100', 'measure_unit': 'C', 'current_temp': '28.50', 'model_type': 'Eskimo1890', 'siteID': '712', 'category': 'Fridge', 'device_id': '2004', 'device-status': 'false'}}\r\nINFO:boto3.resources.action:Calling dynamodb:put_item with {'TableName': 'intelli_temp_mon_assets_dev', 'Item': {'locationID': 'location1', 'alarm_level': 'high', 'alarms': '200', 'measure_unit': 'C', 'current_temp': '38.50', 'model_type': 'Eskimo1990', 'siteID': '863', 'category': 'Fridge', 'device_id': '2304', 'device-status': 'true'}}\r\nINFO:boto3.resources.action:Calling dynamodb:get_item with {'TableName': 'intelli_temp_mon_assets_dev', 'Key': {'deviceID': '2304'}}\r\n**ERROR:root:An error occurred (ValidationException) when calling the GetItem operation:**\r\nTraceback (most recent call last):\r\nFile \"mock_device_details.py\", line 93, in main\r\nresponse = table.get_item(Key=key)\r\nFile \"C:\\Python33\\lib\\site-packages\\boto3\\resources\\factory.py\", line 520, in do_action\r\nresponse = action(self, *args, **kwargs)\r\nFile \"C:\\Python33\\lib\\site-packages\\boto3\\resources\\action.py\", line 83, in call\r\nresponse = getattr(parent.meta.client, operation_name)(**params)\r\nFile \"C:\\Python33\\lib\\site-packages\\botocore\\client.py\", line 253, in _api_call\r\nreturn self._make_api_call(operation_name, kwargs)\r\nFile \"C:\\Python33\\lib\\site-packages\\botocore\\client.py\", line 557, in _make_api_call\r\nraise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (ValidationException) when calling the GetItem operation:\r\nINFO:root:Your code logic\r\n{'deviceID': '2304'}", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/988/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/988/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/847", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/847/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/847/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/847/events", "html_url": "https://github.com/getmoto/moto/issues/847", "id": 210666285, "node_id": "MDU6SXNzdWUyMTA2NjYyODU=", "number": 847, "title": "DynamoDB2 update does not work with multiple/complex expression attribute values", "user": {"login": "austinbyers", "id": 3608925, "node_id": "MDQ6VXNlcjM2MDg5MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3608925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austinbyers", "html_url": "https://github.com/austinbyers", "followers_url": "https://api.github.com/users/austinbyers/followers", "following_url": "https://api.github.com/users/austinbyers/following{/other_user}", "gists_url": "https://api.github.com/users/austinbyers/gists{/gist_id}", "starred_url": "https://api.github.com/users/austinbyers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austinbyers/subscriptions", "organizations_url": "https://api.github.com/users/austinbyers/orgs", "repos_url": "https://api.github.com/users/austinbyers/repos", "events_url": "https://api.github.com/users/austinbyers/events{/privacy}", "received_events_url": "https://api.github.com/users/austinbyers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-28T02:11:26Z", "updated_at": "2019-10-23T22:20:38Z", "closed_at": "2019-10-23T22:20:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "DynamoDB updates do not work with all possible expression attribute values.\r\n\r\n## Code Snippet\r\nThis code snippet works exactly as written against the real DynamoDB (as long as you sleep a few seconds between table creation and item insertion). However, it breaks in moto:\r\n\r\n```python\r\nimport boto3\r\nimport moto\r\n\r\n@moto.mock_dynamodb2()\r\ndef update_does_not_work():\r\n    dynamo_client = boto3.client('dynamodb')\r\n\r\n    # Create table - works fine.\r\n    dynamo_client.create_table(\r\n        AttributeDefinitions=[{'AttributeName': 'SHA256', 'AttributeType': 'S'}],\r\n        TableName='TestTable',\r\n        KeySchema=[{'AttributeName': 'SHA256', 'KeyType': 'HASH'}],\r\n        ProvisionedThroughput={'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5}\r\n    )\r\n\r\n    # Update item - does not work. \"ValueError: too many values to unpack\"\r\n    dynamo_client.update_item(\r\n        TableName='TestTable',\r\n        Key={'SHA256': {'S': 'sha-of-file'}},\r\n        UpdateExpression=(\r\n            'SET MD5 = :md5,'\r\n            'MyStringSet = :string_set,'\r\n            'MyMap = :map'  # Maps string to StringSet of strings.\r\n        ),\r\n        ExpressionAttributeValues={\r\n            ':md5': {'S': 'md5-of-file'},\r\n            ':string_set': {'SS': ['string1', 'string2']},\r\n            ':map': {'M': {'EntryKey': {'SS': ['thing1', 'thing2']}}}\r\n        }\r\n    )\r\n```\r\n\r\nI suspect that there is an error in the update parsing logic. Dynamo item updates can be really difficult to wrangle.\r\n\r\n## Stack Trace\r\n```\r\nTraceback (most recent call last):\r\n  File \"poc.py\", line 35, in <module>\r\n    update_does_not_work()\r\n  File \"/usr/local/lib/python2.7/site-packages/moto/core/models.py\", line 71, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"poc.py\", line 30, in update_does_not_work\r\n    ':map': {'M': {'EntryKey': {'SS': ['thing1', 'thing2']}}}\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/client.py\", line 253, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/client.py\", line 530, in _make_api_call\r\n    operation_model, request_dict)\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/endpoint.py\", line 141, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/endpoint.py\", line 170, in _send_request\r\n    success_response, exception):\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/endpoint.py\", line 249, in _needs_retry\r\n    caught_exception=caught_exception, request_dict=request_dict)\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/hooks.py\", line 227, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/hooks.py\", line 210, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/retryhandler.py\", line 183, in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/retryhandler.py\", line 251, in __call__\r\n    caught_exception)\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/retryhandler.py\", line 269, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/retryhandler.py\", line 317, in __call__\r\n    caught_exception)\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/retryhandler.py\", line 223, in __call__\r\n    attempt_number, caught_exception)\r\n  File \"/usr/local/lib/python2.7/site-packages/botocore/retryhandler.py\", line 359, in _check_caught_exception\r\n    raise caught_exception\r\nValueError: too many values to unpack\r\n```\r\n\r\n## Environment\r\nI'm running Python 2.7 on Mac OS X. Moto is installed with `pip`:\r\n```\r\n$ pip show moto\r\nVersion: 0.4.31\r\nLocation: /usr/local/lib/python2.7/site-packages\r\n```", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/847/reactions", "total_count": 3, "+1": 3, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/847/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/816", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/816/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/816/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/816/events", "html_url": "https://github.com/getmoto/moto/issues/816", "id": 202973780, "node_id": "MDU6SXNzdWUyMDI5NzM3ODA=", "number": 816, "title": "upload file with boto, download it with boto3: file gets corrupted (wrong md5 sum)", "user": {"login": "dtenenba", "id": 2286826, "node_id": "MDQ6VXNlcjIyODY4MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2286826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtenenba", "html_url": "https://github.com/dtenenba", "followers_url": "https://api.github.com/users/dtenenba/followers", "following_url": "https://api.github.com/users/dtenenba/following{/other_user}", "gists_url": "https://api.github.com/users/dtenenba/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtenenba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtenenba/subscriptions", "organizations_url": "https://api.github.com/users/dtenenba/orgs", "repos_url": "https://api.github.com/users/dtenenba/repos", "events_url": "https://api.github.com/users/dtenenba/events{/privacy}", "received_events_url": "https://api.github.com/users/dtenenba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2017-01-24T23:44:24Z", "updated_at": "2022-08-20T11:03:37Z", "closed_at": "2022-08-20T11:03:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nThe following code uploads a file to a mock S3 bucket using boto, and downloads the same file to the local disk using boto3. I apologize for bringing both of the libraries into this, but the code I am testing in real life still uses both (definitely trying to get rid of all the boto code and fully migrate to boto3 but that isn't going to happen right away).\r\n\r\nWhat happens is that the resulting file does not have the same md5 sum as the original file so it has been corrupted at some point (not sure if it was during the boto upload or the boto3 download).\r\n\r\nThis seems to be an issue with moto because if I comment out the line `@moto.mock_s3` (using 'real' S3) the script works fine (I also need to change the bucket name to a unique one to avoid collisions).\r\n\r\nThe script keeps looping (doing the upload/download/md5sum comparison) until it fails (because in my real project this would not happen every time) but this test script seems to fail (for me anyway) on the first attempt every time.\r\n\r\nThe test file that it uploads/downloads is available [here]( https://s3-us-west-2.amazonaws.com/demonstrate-moto-problem/K158154-Mi001716_S1_L001_R1_001.fastq.gz).\r\n\r\nYou can download it with:\r\n\r\n    curl -O  https://s3-us-west-2.amazonaws.com/demonstrate-moto-problem/K158154-Mi001716_S1_L001_R1_001.fastq.gz\r\n\r\nAt this point if you run md5sum on it you should get `6083801a29ef4ebf78fbbed806e6ab2c`:\r\n\r\n```\r\n$ md5sum K158154-Mi001716_S1_L001_R1_001.fastq.gz\r\n6083801a29ef4ebf78fbbed806e6ab2c  K158154-Mi001716_S1_L001_R1_001.fastq.gz\r\n```\r\n\r\nHere is the test script (`motoprob.py`):\r\n\r\n```python\r\nimport sys\r\nimport os\r\nimport hashlib\r\nimport moto\r\nimport boto\r\nimport boto3\r\n\r\ndef md5(fname):\r\n    hash_md5 = hashlib.md5()\r\n    with open(fname, \"rb\") as f:\r\n        for chunk in iter(lambda: f.read(4096), b\"\"):\r\n            hash_md5.update(chunk)\r\n    return hash_md5.hexdigest()\r\n\r\n\r\n\r\n@moto.mock_s3\r\ndef doit():\r\n    # upload file to s3\r\n    conn = boto.connect_s3()\r\n    bkt = conn.create_bucket(\"mybucket\")\r\n    key = boto.s3.key.Key(bkt)\r\n    key.key = \"foo/bar.fastq.gz\"\r\n    print(\"Uploading...\")\r\n\r\n    # You can get this file from:\r\n    #  https://s3-us-west-2.amazonaws.com/demonstrate-moto-problem/K158154-Mi001716_S1_L001_R1_001.fastq.gz\r\n    key.set_contents_from_filename(\"K158154-Mi001716_S1_L001_R1_001.fastq.gz\")\r\n\r\n    # download it again\r\n    dlfile = \"bar.fastq.gz\"\r\n    if os.path.exists(dlfile):\r\n        os.remove(dlfile)\r\n\r\n    print(\"Downloading...\")\r\n\r\n    client = boto3.client('s3')\r\n    client.download_file(Bucket=\"mybucket\",\r\n      Key=\"foo/bar.fastq.gz\", Filename=\"bar.fastq.gz\")\r\n\r\n\r\n    md5sum = md5(dlfile)\r\n    if not md5sum == \"6083801a29ef4ebf78fbbed806e6ab2c\":\r\n        print(\"Incorrect md5sum! {}\").format(md5sum)\r\n        sys.exit(1)\r\n\r\n\r\nwhile True:\r\n    doit()\r\n\r\n```\r\n\r\nVersion info:\r\n```\r\n$ pip freeze |grep oto\r\nboto==2.42.0\r\nboto3==1.4.0\r\nbotocore==1.4.48\r\nmoto==0.4.29\r\n\r\n$ python --version\r\nPython 2.7.12\r\n\r\n$ uname -a\r\nLinux f51bec2ad3be 4.9.4-moby #1 SMP Wed Jan 18 17:04:43 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n$ more /etc/lsb-release\r\nDISTRIB_ID=Ubuntu\r\nDISTRIB_RELEASE=16.04\r\nDISTRIB_CODENAME=xenial\r\nDISTRIB_DESCRIPTION=\"Ubuntu 16.04.1 LTS\"\r\n```\r\n\r\nOther ways to see that the resulting file is not the same as the original:\r\n\r\n```\r\n$ diff bar.fastq.gz /data/2016-10-27-PT140/K158154-Mi001716_S1_L001_R1_001.fastq.gz\r\nBinary files bar.fastq.gz and /data/2016-10-27-PT140/K158154-Mi001716_S1_L001_R1_001.fastq.gz differ\r\n\r\n\r\n$ zcat bar.fastq.gz > bar.fastq # this works for the original file\r\n\r\ngzip: bar.fastq.gz: invalid compressed data--crc error\r\n\r\ngzip: bar.fastq.gz: invalid compressed data--length error\r\n```\r\n\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/816/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/816/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/718", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/718/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/718/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/718/events", "html_url": "https://github.com/getmoto/moto/issues/718", "id": 179988581, "node_id": "MDU6SXNzdWUxNzk5ODg1ODE=", "number": 718, "title": "Unpredictable results when filtering EC2 instances based on tags.", "user": {"login": "esc", "id": 41563, "node_id": "MDQ6VXNlcjQxNTYz", "avatar_url": "https://avatars.githubusercontent.com/u/41563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/esc", "html_url": "https://github.com/esc", "followers_url": "https://api.github.com/users/esc/followers", "following_url": "https://api.github.com/users/esc/following{/other_user}", "gists_url": "https://api.github.com/users/esc/gists{/gist_id}", "starred_url": "https://api.github.com/users/esc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/esc/subscriptions", "organizations_url": "https://api.github.com/users/esc/orgs", "repos_url": "https://api.github.com/users/esc/repos", "events_url": "https://api.github.com/users/esc/events{/privacy}", "received_events_url": "https://api.github.com/users/esc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-09-29T08:54:09Z", "updated_at": "2020-03-15T21:40:34Z", "closed_at": "2020-03-15T21:40:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following gist exposes the bug I have currently hit:\n\nhttps://gist.github.com/esc/88780a70f9acb6a53f603ebbe5fcc8ec\n\nwhich is:\n\n```\nimport boto3\nimport moto\n\n\n@moto.mock_ec2\ndef expose():\n    ec2 = boto3.resource('ec2')\n    blue, green = ec2.create_instances(\n        ImageId='ANY_ID', MinCount=2, MaxCount=2)\n    ec2.create_tags(Resources=[blue.instance_id],\n                    Tags=[{\"Key\": \"environment\", \"Value\": \"blue\"},\n                          {\"Key\": \"application\", \"Value\": \"api\"},\n                          ])\n    ec2.create_tags(Resources=[green.instance_id],\n                    Tags=[{\"Key\": \"environment\", \"Value\": \"green\"},\n                          {\"Key\": \"application\", \"Value\": \"api\"},\n                          ])\n    filter_ = [{'Name': 'tag-key', 'Values': ['application']},\n               {'Name': 'tag-value', 'Values': ['api']},\n               {'Name': 'tag-key', 'Values': ['environment']},\n               {'Name': 'tag-value', 'Values': ['green']},\n               ]\n    instances = list(ec2.instances.filter(Filters=filter_))\n    print(instances)\n\nexpose()\n```\n\nAssuming I have understood the way in which EC2 instances are filtered correctly, the above should _only_ return a single instances, namely the `green` one. The problem is that filtering on EC2 instances produces unpredictable results, sometimes it works and I get only the green instance, but sometimes it fails and I get both instances. The behavior is loosely correlated with the phase of the moon (and essentially a result of the implementation of the filter in moto and the fact that python dictionaries are not ordered).\n\nObserve:\n\n```\nesc@omnitech ~/git/moto-bug (git)-[master] % python expose_moto_bug.py                                                     \n[ec2.Instance(id='i-ddfcda29')]\nesc@omnitech ~/git/moto-bug (git)-[master] % python expose_moto_bug.py\n[ec2.Instance(id='i-da6b71e8'), ec2.Instance(id='i-7cc6583c')]\nesc@omnitech ~/git/moto-bug (git)-[master] % python expose_moto_bug.py\n[ec2.Instance(id='i-fbd09878'), ec2.Instance(id='i-9942c0a7')]\nesc@omnitech ~/git/moto-bug (git)-[master] % python expose_moto_bug.py\n[ec2.Instance(id='i-58a64557')]\nesc@omnitech ~/git/moto-bug (git)-[master] % python expose_moto_bug.py\n[ec2.Instance(id='i-fe6b4589'), ec2.Instance(id='i-0b58c502')]\nesc@omnitech ~/git/moto-bug (git)-[master] % python expose_moto_bug.py\n[ec2.Instance(id='i-e0d763bd'), ec2.Instance(id='i-a7287241')]\nesc@omnitech ~/git/moto-bug (git)-[master] % python expose_moto_bug.py\n[ec2.Instance(id='i-2a5c6f0c'), ec2.Instance(id='i-c9a5bf46')]\nesc@omnitech ~/git/moto-bug (git)-[master] % python expose_moto_bug.py\n[ec2.Instance(id='i-a47f2988')]\n```\n\nDoes anyone know what the correct behavior should be and can someone else confirm this is reproducible. Note: I am using Python3.\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/718/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/718/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/432", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/432/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/432/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/432/events", "html_url": "https://github.com/getmoto/moto/issues/432", "id": 109851846, "node_id": "MDU6SXNzdWUxMDk4NTE4NDY=", "number": 432, "title": "CloudFormation's GetTemplate response is inaccurate", "user": {"login": "hltbra", "id": 61387, "node_id": "MDQ6VXNlcjYxMzg3", "avatar_url": "https://avatars.githubusercontent.com/u/61387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hltbra", "html_url": "https://github.com/hltbra", "followers_url": "https://api.github.com/users/hltbra/followers", "following_url": "https://api.github.com/users/hltbra/following{/other_user}", "gists_url": "https://api.github.com/users/hltbra/gists{/gist_id}", "starred_url": "https://api.github.com/users/hltbra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hltbra/subscriptions", "organizations_url": "https://api.github.com/users/hltbra/orgs", "repos_url": "https://api.github.com/users/hltbra/repos", "events_url": "https://api.github.com/users/hltbra/events{/privacy}", "received_events_url": "https://api.github.com/users/hltbra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-10-05T17:58:04Z", "updated_at": "2015-10-05T22:10:43Z", "closed_at": "2015-10-05T22:10:43Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The GetTemplate function returns through `boto` the following format:\n\n``` python\n>>> import boto.cloudformation\n>>> cf = boto.cloudformation.connect_to_region('us-east-1')\n>>> cf.get_template('<my-stack-id>')\n{u'GetTemplateResponse': {u'GetTemplateResult': {u'TemplateBody': u'{\"Resources\": \"<RESOURCES HERE>\"}', u'ResponseMetadata': {u'RequestId': u'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'}}}\n```\n\nBut moto returns just the template body... Moto's source: https://github.com/spulec/moto/blob/1dcfcbca5711ac50f9c3314b8a7e8812e3025156/moto/cloudformation/responses.py#L87-L91\n\nAWS Docs: http://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_GetTemplate.html\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/432/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/432/timeline", "performed_via_github_app": null, "state_reason": "completed"}, {"url": "https://api.github.com/repos/getmoto/moto/issues/71", "repository_url": "https://api.github.com/repos/getmoto/moto", "labels_url": "https://api.github.com/repos/getmoto/moto/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/getmoto/moto/issues/71/comments", "events_url": "https://api.github.com/repos/getmoto/moto/issues/71/events", "html_url": "https://github.com/getmoto/moto/issues/71", "id": 24649245, "node_id": "MDU6SXNzdWUyNDY0OTI0NQ==", "number": 71, "title": "SQS not accepting messages in server", "user": {"login": "zmsmith", "id": 111880, "node_id": "MDQ6VXNlcjExMTg4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/111880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmsmith", "html_url": "https://github.com/zmsmith", "followers_url": "https://api.github.com/users/zmsmith/followers", "following_url": "https://api.github.com/users/zmsmith/following{/other_user}", "gists_url": "https://api.github.com/users/zmsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmsmith/subscriptions", "organizations_url": "https://api.github.com/users/zmsmith/orgs", "repos_url": "https://api.github.com/users/zmsmith/repos", "events_url": "https://api.github.com/users/zmsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/zmsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/getmoto/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-12-20T21:32:54Z", "updated_at": "2013-12-29T01:18:05Z", "closed_at": "2013-12-29T01:17:51Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Here is the code I'm running to try and create a message.\n\n``` python\nimport boto\nimport boto.sqs\nimport boto.connection\n\nimport json\n\nboto.config.add_section('Boto')\nboto.config.set('Boto', 'is_secure', 'false')\nboto.sqs.regions = lambda: [boto.sqs.SQSRegionInfo(name='us-east-1', endpoint='127.0.0.1')]\nboto.connection.PORTS_BY_SECURITY = {False: 5001}\nconn = boto.sqs.connect_to_region('us-east-1')\nqueue  = conn.create_queue(queue_name)\nmessage = boto.sqs.message.Message()\nmessage.set_body(json.dumps({\n    'id': 'LD1234',\n    'url': 'http://yipit.co',\n    'business': 'http://business.url',\n}))\nqueue.write(message)\n```\n\nmoto stack trace:\n\n``` python_traceback\n127.0.0.1 - - [20/Dec/2013 16:30:33] \"POST /123456789012/blah HTTP/1.1\" 500 -\nError on request:\nTraceback (most recent call last):\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/werkzeug/serving.py\", line 177, in run_wsgi\n    execute(self.server.app)\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/werkzeug/serving.py\", line 165, in execute\n    application_iter = app(environ, start_response)\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/flask/app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/flask/app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/flask/app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/flask/app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/moto/core/utils.py\", line 68, in __call__\n    result = self.callback(request, request.url, headers)\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/moto/core/responses.py\", line 32, in dispatch\n    return self.call_action()\n  File \"/Users/zach/.virtualenvs/yipit_ph/lib/python2.7/site-packages/moto/core/responses.py\", line 49, in call_action\n    raise NotImplementedError(\"The {0} action has not been implemented\".format(action))\nNotImplementedError: The  action has not been implemented\n```\n\nAssumes moto server is running on port 5001\n\nmoto==0.2.11\nboto==2.19.0\n", "reactions": {"url": "https://api.github.com/repos/getmoto/moto/issues/71/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/getmoto/moto/issues/71/timeline", "performed_via_github_app": null, "state_reason": "completed"}]